!function(){var e={757:function(e,t,n){e.exports=n(666)},666:function(e){var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof h?t:h,a=Object.create(o.prototype),i=new A(r||[]);return a._invoke=function(e,t,n){var r=d;return function(o,a){if(r===p)throw new Error("Generator is already running");if(r===v){if("throw"===o)throw a;return E()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var s=L(i,n);if(s){if(s===g)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=v,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var c=l(e,t,n);if("normal"===c.type){if(r=n.done?v:f,c.arg===g)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=v,n.method="throw",n.arg=c.arg)}}}(e,n,i),a}function l(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d="suspendedStart",f="suspendedYield",p="executing",v="completed",g={};function h(){}function m(){}function y(){}var w={};c(w,a,(function(){return this}));var b=Object.getPrototypeOf,k=b&&b(b(T([])));k&&k!==n&&r.call(k,a)&&(w=k);var x=y.prototype=h.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function I(e,t){function n(o,a,i,s){var c=l(e[o],e,a);if("throw"!==c.type){var u=c.arg,d=u.value;return d&&"object"==typeof d&&r.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,i,s)}),(function(e){n("throw",e,i,s)})):t.resolve(d).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,s)}))}s(c.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function L(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,L(e,n),"throw"===n.method))return g;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var o=l(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,g):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function A(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function T(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:E}}function E(){return{value:t,done:!0}}return m.prototype=y,c(x,"constructor",y),c(y,"constructor",m),m.displayName=c(y,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,c(e,s,"GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},S(I.prototype),c(I.prototype,i,(function(){return this})),e.AsyncIterator=I,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new I(u(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(x),c(x,s,"Generator"),c(x,a,(function(){return this})),c(x,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=T,A.prototype={constructor:A,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(O),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return s.type="throw",s.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],s=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:T(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),g}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){"use strict";function e(e,t,n,r,o,a,i){try{var s=e[a](i),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,o)}function t(t){return function(){var n=this,r=arguments;return new Promise((function(o,a){var i=t.apply(n,r);function s(t){e(i,o,a,s,c,"next",t)}function c(t){e(i,o,a,s,c,"throw",t)}s(void 0)}))}}var r=n(757),o=n.n(r);function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t,n){return t&&s(e.prototype,t),n&&s(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var u=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";if(!e)return"";var r=e.indexOf(t);if(r<0)return e;for(;e.indexOf(t)>=0;){var o=e.indexOf(t);e=(o>0?e.substring(0,o):"")+n+e.substring(o+t.length)}return e},l=window.location.href.includes("staging.vivense")?"https://ndvivense.glov.ai/weights_staging.json":"https://ndvivense.glov.ai/weights.json",d=window.location.href.includes("staging.vivense")?"https://ndvivense.glov.ai/nd-styles_staging.css":"https://ndvivense.glov.ai/nd-styles.css?id=".concat(u((new Date).toISOString().substring(0,13).replace("T",""),"-","")),f="https://europe-west3-nextday-34eb3.cloudfunctions.net/api/logResponse",p="(max-width: 440px)",v="__nextday_session_id",g="ND_SessionTimestamp",h="BN_SessionHistory",m="ND_PageViews",y="ND_PopupDisplayFlag",w="ND_SkuListList",b="ND_SkuListBasket",k="Nd_ProductInfoBasket",x="ND_CABasketPrice",S="ND_Debug",I="ND_OutOfScope",L="ND_UserId",C=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Nextday Client SDK";i(this,e),this.origin=t,this.DEBUG=window.localStorage.getItem(S)}return c(e,[{key:"info",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).info.apply(e,["[".concat(t,"]")].concat(r))}},{key:"log",value:function(){var e=this.DEBUG,t=this.origin;if(e){for(var n,r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];(n=console).log.apply(n,["[".concat(t,"]")].concat(o))}}},{key:"failed",value:function(){var e,t=this.DEBUG,n=this.origin;if(t){for(var r="%c%s   ",o=arguments.length,i=new Array(o),s=0;s<o;s++)i[s]=arguments[s];i.forEach((function(e){switch(a(e)){case"bigint":case"number":case"boolean":r+="%d   ";break;case"string":r+="%s   ";break;default:r+="%o   "}})),(e=console).log.apply(e,[r,"color: red","[".concat(n,"]")].concat(i))}}},{key:"success",value:function(){var e,t=this.DEBUG,n=this.origin;if(t){for(var r="%c%s   ",o=arguments.length,i=new Array(o),s=0;s<o;s++)i[s]=arguments[s];i.forEach((function(e){switch(a(e)){case"bigint":case"number":case"boolean":r+="%d   ";break;case"string":r+="%s   ";break;default:r+="%o   "}})),(e=console).log.apply(e,[r,"color: green","[".concat(n,"]")].concat(i))}}},{key:"warn",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).warn.apply(e,["[".concat(t,"]")].concat(r))}},{key:"error",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).error.apply(e,["[".concat(t,"]")].concat(r))}}]),e}(),O=C;function A(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function T(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function E(e,t){if(e){if("string"==typeof e)return T(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?T(e,t):void 0}}function P(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,s=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){s=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(s)throw o}}return a}}(e,t)||E(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var N=new O("Nextday DataLayer Checker"),D=function(e){N.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value,o=j(t);return de(o,n,r)},j=function(e){N.log("Searching beagleInfoLayer for key ",e);var t=window.beagleInfoLayer[e];if(e.includes("."))try{var n=e.split(".");t=window.beagleInfoLayer[n[0]];for(var r=1;r<n.length;r++)t=t[n[r]]}catch(n){N.failed("Couldn't extract key ".concat(e," from beagleInfoLayer")),t=null}if(t)return N.success("Found key ".concat(e," with value ").concat(t)),t;N.failed("Key ".concat(e," not found in beagleInfoLayer")),N.log("Searching dataLayer for key ",e);var o,a=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return _(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}(window.dataLayer);try{for(a.s();!(o=a.n()).done;){var i=o.value;if(Object.keys(i).includes(e))return N.success("Found key ".concat(e," with value ").concat(i[e])),i[e]}}catch(e){a.e(e)}finally{a.f()}return N.failed("Key ".concat(e," not found in dataLayer")),null},R=new O("Nextday Url Checker"),q=function(e){R.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("path"===t){var o=window.location.href,a=o.includes("ajax/mobile-search/loadOtherPages.php")?decodeURIComponent(new URL(o).search.replace("?originalPath=","")):new URL(o).pathname;return R.log("Checking path ".concat(a," matches rule path ").concat(r)),de(a,n,r)}};function M(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function U(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?M(Object(n),!0).forEach((function(t){A(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):M(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function V(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return B(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?B(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function B(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}window.beagleInfoLayer=window.beagleInfoLayer||{checkpoints:[],a:{},e:{},f:{}};var F={PageType:/(?:PageType'[ ]*:[ ]*')(.*)(?:')/,content_name:/(?:content_name[ ]*:[ ]*")(.*)(?:")/,content_name_alt:/(?:content_name'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAPageType:/(?:PageType'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAOrderId:/(?:purchase[\s\S]*actionField[\s\S]*'id'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAOrderRev:/(?:purchase[\s\S]*actionField[\s\S]*'revenue'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAOrderType:/(?:purchase[\s\S]*actionField[\s\S]*'dimension15'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAIsAdmin:/(?:dataLayer[\s\S]*'isAdmin'[ ]*:[ ]*")(.*)(?:")/},J={BeagleLoaded:1,Initialized:2,UserOnOff:3,ScriptTimeOut:7,TreatmentRepositoryCreated:4,TreatmentsApplied:5,ReapplyTreatmentListeners:6,TimeoutThresholdReached:8},G=new O("BeagleInfoLayer"),H=function(){var e=t(o().mark((function e(){var t,n,r,a,i,s,c,u,l;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:G.log("Initializing beagleInfoLayer"),t=document.scripts,n=t.length;try{Q()}catch(e){console.warn("Could not prepare log data: ",e.message)}if(t&&n){e.next=7;break}return G.warn("Could not parse body"),e.abrupt("return");case 7:r=0,a=t.length-1;case 9:if(!(a>-1)){e.next=35;break}i=t[a].textContent,s=0,c=Object.keys(F);case 12:if(!(s<c.length)){e.next=32;break}if(u=c[s],!(l=(l=F[u].exec(i))?l[1]:null)){e.next=29;break}u.indexOf("_alt")>0&&(u=u.substring(0,u.lastIndexOf("_alt"))),e.prev=18,z(u,decodeURIComponent(JSON.parse('"'+l+'"'))),e.next=26;break;case 22:return e.prev=22,e.t0=e.catch(18),G.warn("Could not decode foundVal ".concat(l)),e.abrupt("continue",29);case 26:if((r+=1)!==Object.keys(F).length){e.next=29;break}return e.abrupt("return");case 29:s++,e.next=12;break;case 32:a--,e.next=9;break;case 35:return e.next=37,ve(10);case 37:if(n===t.length){e.next=41;break}return G.log("New scripts detected, re-initializing beagleInfoLayer"),e.next=41,H();case 41:case"end":return e.stop()}}),e,null,[[18,22]])})));return function(){return e.apply(this,arguments)}}(),W=function(e){try{G.log("Checkpoint: '".concat(e,"' Reached!")),window.beagleInfoLayer.checkpoints.push({checkpoint:Object.keys(J).find((function(t){return J[t]===e})),id:e,time:Date.now()})}catch(e){G.warn(e)}},z=function(e,t){null!=e&&null!=t&&(window.beagleInfoLayer[e]=t)},K=function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,a={businessRuleId:t,variant:n};switch(r){case"applied":window.beagleInfoLayer.a[e]=a;break;case"skipped":a.dependant_on_treatment=o,window.beagleInfoLayer.e[e]=a;break;case"failed":window.beagleInfoLayer.f[e]=a}},Q=function(){var e,t,n,r,o,a,i,s,c,u,l,d,f,p,g,h,m,y,w,b,k,x,S,I,L,C,O,A,T,E,P,_,N,D,j,R,q,M,B,F,J,H,W,$,K=crypto.randomUUID(),Q=sessionStorage.getItem(v),Y=new URL(window.location.href),X=(null===(e=window.navigator)||void 0===e||null===(t=e.userAgentData)||void 0===t?void 0:t.platform)||(null===(n=window.navigator)||void 0===n?void 0:n.platform)||(null===(r=window.navigator)||void 0===r?void 0:r.userAgent),Z={},ee=V(window.dataLayer);try{for(ee.s();!($=ee.n()).done;){var te=$.value;Z=U(U({},Z),te)}}catch(e){ee.e(e)}finally{ee.f()}var ne=JSON.parse(oe(document.cookie,"VL_CM_0")),re={};if(ne&&ne.Items){var ae,ie=V(ne.Items);try{for(ie.s();!(ae=ie.n()).done;){var se=ae.value;re[se.K]=decodeURIComponent(se.V)}}catch(e){ie.e(e)}finally{ie.f()}}z("cookieVLPVinVisit",re.VL_PVCountInVisit),z("cookieVLVisitDuration",re.VL_TotalDuration),z("cookieVLTotalPV",re.VL_TotalPV),z("cookieVLTotalVisit",re.VL_TotalVisit),z("gaPageType",Z.PageType),z("gaProductName",Z.content_name),z("gaViewType",Z.content_type),z("gaProductCategory",Z.content_category),z("gaProductID",Z.content_ids),z("vvsProductCategory",Z.vivense_category),z("gaListingName",null===(o=Z.ecommerce)||void 0===o||null===(a=o.detail)||void 0===a||null===(i=a.actionField)||void 0===i?void 0:i.list),z("vvsIsShowroom",void 0===window.isAdmin?Z.isAdmin:window.isAdmin),z("vvsProductGroup",Z.productGroup),z("vvsUserId",Z.userId),z("vvsCategory",Z.vivense_category),z("gaCategoryProductCont",Z.category_product_count),z("gaCartProducts",(null===(s=Z.ecommerce)||void 0===s||null===(c=s.checkout)||void 0===c?void 0:c.products)||(null===(u=Z.ecommerce)||void 0===u||null===(l=u.purchase)||void 0===l?void 0:l.products)),z("vvsPDPProduct",null===(d=Z.vivenseProducts)||void 0===d?void 0:d.pop()),z("gaPurchaseId",null===(f=Z.ecommerce)||void 0===f||null===(p=f.purchase)||void 0===p||null===(g=p.actionField)||void 0===g?void 0:g.id),z("gaPurchaseRevenue",null===(h=Z.ecommerce)||void 0===h||null===(m=h.purchase)||void 0===m||null===(y=m.actionField)||void 0===y?void 0:y.revenue),z("gaPurchasePayType",null===(w=Z.ecommerce)||void 0===w||null===(b=w.purchase)||void 0===b||null===(k=b.actionField)||void 0===k?void 0:k.dimension15),z("windowParams",window.location.search),z("windowPRatio",window.devicePixelRatio),z("windowInner",window.innerWidth);var ce={};ce.availHeight=null===(x=window.screen)||void 0===x?void 0:x.availHeight,ce.availHeight=null===(S=window.screen)||void 0===S?void 0:S.availHeight,ce.availLeft=null===(I=window.screen)||void 0===I?void 0:I.availLeft,ce.availTop=null===(L=window.screen)||void 0===L?void 0:L.availTop,ce.availWidth=null===(C=window.screen)||void 0===C?void 0:C.availWidth,ce.colorDepth=null===(O=window.screen)||void 0===O?void 0:O.colorDepth,ce.height=null===(A=window.screen)||void 0===A?void 0:A.height,ce.pixelDepth=null===(T=window.screen)||void 0===T?void 0:T.pixelDepth,ce.width=null===(E=window.screen)||void 0===E?void 0:E.width,z("windowScreen",ce);var ue={};if(ue.height=null===(P=window.visualViewport)||void 0===P?void 0:P.height,ue.offsetLeft=null===(_=window.visualViewport)||void 0===_?void 0:_.offsetLeft,ue.offsetTop=null===(N=window.visualViewport)||void 0===N?void 0:N.offsetTop,ue.onresize=null===(D=window.visualViewport)||void 0===D?void 0:D.onresize,ue.onscroll=null===(j=window.visualViewport)||void 0===j?void 0:j.onscroll,ue.pageLeft=null===(R=window.visualViewport)||void 0===R?void 0:R.pageLeft,ue.pageTop=null===(q=window.visualViewport)||void 0===q?void 0:q.pageTop,ue.scale=null===(M=window.visualViewport)||void 0===M?void 0:M.scale,ue.width=null===(B=window.visualViewport)||void 0===B?void 0:B.width,z("windowVPort",ue),screen.width){var le=parseInt(screen.width),de=screen.height?parseInt(screen.height):0;if(0!==le&&0!==de){if(/iPad|iPhone|iPod/.test(X)&&window.devicePixelRatio)le=Math.round(le*window.devicePixelRatio),de=Math.round(de*window.devicePixelRatio);else if(90===Math.abs(window.orientation)){var fe=le;le=de,de=fe}z("window",le+"x"+de)}}if(z("navHistSize",null===(F=window.history)||void 0===F?void 0:F.length),z("navAgent",navigator.userAgent),!window.beagleInfoLayer.navAgent&&navigator.userAgentData){var pe,ve,ge,he,ye,we=null===(pe=navigator)||void 0===pe||null===(ve=pe.userAgentData)||void 0===ve||null===(ge=ve.brands)||void 0===ge?void 0:ge.map((function(e){return e.brand+":"+e.version})).join();we+=null!==(he=navigator)&&void 0!==he&&null!==(ye=he.userAgentData)&&void 0!==ye&&ye.mobile?"mobi":" ",z("navAgent",we+=X)}z("navHWCores",navigator.hardwareConcurrency),z("navLanguage",navigator.language||navigator.browserLanguage||navigator.systemLanguage||navigator.userLanguage),z("navTouch",navigator.maxTouchPoints),z("navPlatform",X),z("navVendor",navigator.vendor),z("cookieGaId",oe(document.cookie,"_ga")),z("cookieLastBreadCrumb",oe(document.cookie,"lastbreadcrumb")),z("cookieLastCategory",oe(document.cookie,"lastcategory")),z("cookieFirstEntry",decodeURIComponent(oe(document.cookie,"vivensefirst")));var be={};if(window.performance&&window.performance.getEntriesByType("navigation")[0]){var ke=window.performance.getEntriesByType("navigation")[0];be.pld=Math.round(ke.domContentLoadedEventEnd-ke.connectStart),be.net=Math.round(ke.connectEnd-ke.fetchStart),be.srv=Math.round(ke.responseStart-ke.requestStart),be.tfr=Math.round(ke.responseEnd-ke.responseStart),be.dmi=Math.round(ke.domInteractive-ke.responseEnd),be.dcp=Math.round(ke.domComplete-ke.domInteractive),be.onl=Math.round(ke.loadEventEnd-ke.loadEventStart)}z("perfMetrics",be),z("internetSpeed",null===(J=window.navigator)||void 0===J||null===(H=J.connection)||void 0===H?void 0:H.downlink);var xe,Se,Ie=V(document.querySelectorAll('[type="application/ld+json"]'));try{for(Ie.s();!(xe=Ie.n()).done;){var Le=xe.value;try{var Ce=Le.textContent,Oe=JSON.parse(Ce),Ae="@";switch(Oe["@type"]){case"Organization":case"WebSite":break;case"CollectionPage":var Te,Ee=V(Oe.breadcrumb.itemListElement);try{for(Ee.s();!(Te=Ee.n()).done;)Ae+=" | "+Te.value.item.name}catch(e){Ee.e(e)}finally{Ee.f()}z("sorgBreadcrumb",Ae);var Pe={};Pe.name=Oe.mainEntity.name,Pe.countItems=Oe.mainEntity.numberOfItems,z("sorgListing",Pe);break;case"BreadcrumbList":var _e,Ne=V(Oe.itemListElement);try{for(Ne.s();!(_e=Ne.n()).done;)Ae+=" | "+_e.value.name}catch(e){Ne.e(e)}finally{Ne.f()}z("sorgBreadcrumb",Ae);break;case"Product":var De={};De.sku=Oe.sku,De.name=Oe.name,Oe.offers&&(De.price=Oe.offers.price,De.priceCurrency=Oe.offers.priceCurrency,De.priceValidUntil=Oe.offers.priceValidUntil),z("sorgProduct",De);break;default:console.log(Oe)}}catch(e){G.warn(e.message)}}}catch(e){Ie.e(e)}finally{Ie.f()}z("v","0.0.27"),z("n","nextday-session_id-".concat(Q)),z("sr",50),z("donttrack",navigator.doNotTrack||window.doNotTrack||navigator.msDoNotTrack),z("u",Y.href),z("d",Y.hostname),z("r",document.referrer),z("vId",K),z("isOn",null);try{z("vvsCntFavProds",window.favoriteProducts?JSON.parse(window.favoriteProducts).length:null)}catch(e){z("vvsCntFavProds",null),G.warn(e.message)}z("vvsHasSetEmail",window.userEmail.length>0),z("vvsLoginType",window.userId>0?"member":"guest"),Se=document.querySelector('[class*="basket_summary_total"], [class*="total_row"]'),z("vvsPurcPriceElt",Se?Se.innerText:null),Se=document.querySelector('[class*="order_follow_numb"], [class*="cart-title-bottom"]'),z("vvsPurchaseOrderID",Se?Se.innerText:null),Se=document.querySelector('[class*="payment_type_title"], [class*="cart-title-info"]'),z("vvsPurcTypeElt",Se?Se.innerText:null),Se=document.querySelector('[id*="breadcrumb-ol"], [class*="long-breadcrumb"]'),z("vvsViewCrumb",Se?Se.innerText:null),Se=document.querySelector('[class*="order-final-number"]'),z("vvsCartTotal",Se?Se.innerText:null),Se=document.querySelector('[class*="basket_total_price"]'),z("vvsViewBasketTotal",Se?Se.innerText:null),Se=document.querySelector('[id*="cart_quantity"], [class*="basket_length"]'),z("vvsViewBasketCount",Se?Se.innerText:null),Se=document.querySelector('[class*="welcome_username"]'),z("vvsViewLoggedin",!!Se&&Se.innerText.length>0),Se=document.querySelectorAll('[class*="vivense-showrooms"] > *'),z("vvsPDPShowroomCount",Se?Se.length:null),Se=document.querySelector('[class*="delivery-date"]'),z("vvsPDPDeliveryDate",Se?Se.innerText:null),z("vvsPDPDeliveryDateFormatted",me(null===(W=Se)||void 0===W?void 0:W.innerText)),Se=document.querySelector('[class*="product-title"], [class*="header-bottom"]'),z("vvsPDPTitle",Se?Se.innerText:null),Se=document.querySelector('[class*="count-of-product"]'),z("vvsPLPItemCount",Se?Se.innerText:null),Se=document.querySelector('[class*="subcategories-title"]'),z("vvsPLPName",Se?Se.innerText:null)};function Y(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return X(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?X(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function X(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Z=new O("Nextday Utils"),ee={ocak:0,"şubat":1,mart:2,nisan:3,"mayıs":4,haziran:5,temmuz:6,"ağustos":7,"eylül":8,ekim:9,"kasım":10,"aralık":11};"randomUUID"in crypto||(crypto.randomUUID=function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(e){return(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)}))});var te=function(){document.documentElement.classList.remove("nextDay-hide")},ne=function(){var e=t(o().mark((function e(){var t;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return Z.log("Fetching treatments"),e.next=3,fetch("https://host-b96.pages.dev/treatments.json");case 3:return t=e.sent,e.next=6,t.json();case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),re=function(){var e=t(o().mark((function e(){var t;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return Z.log("Fetching treatment weights"),e.next=3,fetch(l);case 3:return t=e.sent,e.next=6,t.json();case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),oe=function(e,t){if(!e)return null;var n=e.split(";").map((function(e){return e.split("=")})).reduce((function(e,t){return t[0]&&t[1]&&(e[decodeURIComponent(t[0].trim())]=decodeURIComponent(t[1].trim())),e}),{})[t];return n?("_ga"===t&&(n=n.split(".")[2]),n):null},ae=function(){var e=t(o().mark((function e(t){var n,r,a,i;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=8+(n=9),t){e.next=5;break}return e.abrupt("return",-1);case 5:return e.next=7,ie(t);case 7:return a=e.sent,i=parseInt(a.substring(n,r),16),e.abrupt("return",i%100);case 10:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),ie=function(){var e=t(o().mark((function e(t){var n,r,a;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=(new TextEncoder).encode(t),e.next=3,crypto.subtle.digest("SHA-1",n);case 3:return r=e.sent,a=Array.from(new Uint8Array(r)),e.abrupt("return",a.map((function(e){return e.toString(16).padStart(2,"0")})).join(""));case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),se=function(e){var t=document.documentElement.scrollTop,n=setInterval((function(){var r=document.documentElement.scrollTop;t-400>r?(clearInterval(n),e()):t=r}),500)},ce=function(e,t){Z.log("Applying style changes",t,"to elements",e);for(var n=0;n<e.length;n++)for(var r=e[n],o=0,a=Object.entries(t);o<a.length;o++){var i=P(a[o],2),s=i[0],c=i[1];r.style[s]=c}},ue=function(){var e=t(o().mark((function e(){var t;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(t=document.createElement("link")).rel="stylesheet",t.type="text/css",t.href=d,document.head.appendChild(t);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),le=function(){var e=t(o().mark((function e(t,n,r){var a,i,s,c,u,l,d,f,p,v,g,h,m,y,w,b,k,x,S,I,L;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:a=JSON.parse(JSON.stringify(n)),i=null,s=Y(a),e.prev=3,s.s();case 5:if((c=s.n()).done){e.next=55;break}if(u=c.value,l=u.businessRuleTransformations,d=u.variants,l||d){e.next=10;break}return e.abrupt("continue",53);case 10:if(r&&l){f=Y(l);try{for(f.s();!(p=f.n()).done;)if((v=p.value).id===r)for(g in v)"id"!==g&&(u[g]=v[g])}catch(e){f.e(e)}finally{f.f()}}if(!d){e.next=53;break}h=0,m=Object.keys(d);case 13:if(!(h<m.length)){e.next=53;break}return y=m[h],e.next=17,ae(t+y);case 17:if(!(e.sent<u.variants[y].weight)){e.next=50;break}if(i=y,!r||!d[y].businessRuleTransformations){e.next=48;break}w=Y(d[y].businessRuleTransformations),e.prev=22,w.s();case 24:if((b=w.n()).done){e.next=38;break}if((k=b.value).id!=r){e.next=36;break}x=0,S=Object.keys(k);case 28:if(!(x<S.length)){e.next=36;break}if("id"!==(I=S[x])){e.next=32;break}return e.abrupt("continue",33);case 32:u[I]=k[I];case 33:x++,e.next=28;break;case 36:e.next=24;break;case 38:e.next=43;break;case 40:e.prev=40,e.t0=e.catch(22),w.e(e.t0);case 43:return e.prev=43,w.f(),e.finish(43);case 46:e.next=49;break;case 48:for(L in d[y])"weight"!==L&&"businessRuleTransformations"!==L&&(u[L]=d[y][L]);case 49:return e.abrupt("break",53);case 50:h++,e.next=13;break;case 53:e.next=5;break;case 55:e.next=60;break;case 57:e.prev=57,e.t1=e.catch(3),s.e(e.t1);case 60:return e.prev=60,s.f(),e.finish(60);case 63:return e.abrupt("return",[a,i]);case 64:case"end":return e.stop()}}),e,null,[[3,57,60,63],[22,40,43,46]])})));return function(t,n,r){return e.apply(this,arguments)}}(),de=function(e,t,n){if("notExist"===t)return e?(Z.failed("conditionChecker: -not satisfied- target does exist"),!1):(Z.success("conditionChecker: -satisfied- target does not exist"),!0);if(null==e||null==t)return Z.failed("conditionChecker: runTimeValue or condition is not defined"),!1;switch(t){case"exist":return e?(Z.success("conditionChecker: -satisfied- target does exist"),!0):(Z.failed("conditionChecker: -not satisfied- target does not exist"),!1);case"contains":return e.includes(n)?(Z.success("conditionChecker: -satisfied- target contains value"),!0):(Z.failed("conditionChecker: -not satisfied- target does not contain value"),!1);case"notContains":return e.includes(n)?(Z.failed("conditionChecker: -not satisfied- target contains value"),!1):(Z.success("conditionChecker: -satisfied- target does not contain value"),!0);case"equal":return e===n?(Z.success("conditionChecker: -satisfied- target equals value"),!0):(Z.failed("conditionChecker: -not satisfied- target does not equal value"),!1);case"notEqual":return e!==n?(Z.success("conditionChecker: -satisfied- target does not equal value"),!0):(Z.failed("conditionChecker: -not satisfied- target equals value"),!1);case"greaterThan":return e>n?(Z.success("conditionChecker: -satisfied- target is greater than value"),!0):(Z.failed("conditionChecker: -not satisfied- target is not greater than value"),!1);case"lessThan":return e<n?(Z.success("conditionChecker: -satisfied- target is less than value"),!0):(Z.failed("conditionChecker: -not satisfied- target is not less than value"),!1);case"greaterEquals":return e>=n?(Z.success("conditionChecker: -satisfied- target is greater or equal than value"),!0):(Z.failed("conditionChecker: -not satisfied- target is not greater or equal than value"),!1);case"lessEquals":return e<=n?(Z.success("conditionChecker: -satisfied- target is less or equal than value"),!0):(Z.failed("conditionChecker: -not satisfied- target is not less or equal than value"),!1);case"between":var r=P(n.split(","),2),o=r[0],a=r[1];return o=parseInt(o),a=parseInt(a),e>=o&&e<=a?(Z.success("conditionChecker: -satisfied- target is between min and max"),!0):(Z.failed("conditionChecker: -not satisfied- target is not between min and max"),!1);default:return Z.failed("conditionChecker: condition is not defined ",t),!1}},fe=function(){var e=S,t=I,n=window.location.search;if(n.includes("nd_debug=1"))return window.localStorage.setItem(e,1),window.localStorage.setItem(t,!0),z("dbm","on"),1;if(n.includes("nd_debug=2"))return window.localStorage.setItem(e,2),window.localStorage.setItem(t,!0),z("dbm","on"),2;if(n.includes("nd_debug=0"))return window.localStorage.removeItem(e),window.localStorage.setItem(t,!0),z("dbm","off"),0;var r=parseInt(window.localStorage.getItem(e));return z("dbm",r?"on":"off"),r||0},pe=function(){var e=t(o().mark((function e(){var t,n=arguments;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.length>0&&void 0!==n[0]?n[0]:"_ga",e.abrupt("return",new Promise((function(e,n){var r=window.localStorage.getItem(L);if(r&&e(r),r=oe(document.cookie,t))window.localStorage.setItem(L,r),e(r);else{var o=setInterval((function(){(r=oe(document.cookie,t))&&(clearInterval(o),window.localStorage.setItem(L,r),e(r))}),10);setTimeout((function(){clearInterval(o),n(new Error("Could not extract cookie identifier"))}),1e3)}})));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),ve=function(e){return new Promise((function(t){return setTimeout(t,e)}))},ge=function(){var e=w,t=[],n={operator:"PageType",condition:"equal",value:"Homepage"};if(D(n))return null;if(n.value="Listingpage",D(n))return Array.from(document.querySelectorAll(".product-card")).forEach((function(e){t.push(e.getAttribute("data-product-sku"))})),t.length?(sessionStorage.setItem(e,JSON.stringify(t)),t):(Z.failed("Product SKUs not found on Listingpage"),null);if(n.value="Productpage",D(n)){var r,o,a,i=document.querySelector(".product-sku");return i?(t.push(i.getAttribute("data-sku")||(null===(r=i.textContent)||void 0===r||null===(o=r.trim())||void 0===o||null===(a=o.replace(/\)/g,""))||void 0===a?void 0:a.replace(/\(/g,""))),sessionStorage.setItem(e,JSON.stringify(t)),t):(Z.failed("Product SKU not found on Productpage"),null)}return n.operator="path",n.value="/siparis-listesi.html",q(n)?(Array.from(document.querySelectorAll(".cart-inside")).forEach((function(e){t.push(e.getAttribute("data-sku"))})),t.length?(sessionStorage.setItem("ND_SkuListBasket",JSON.stringify(t)),t):(Z.failed("Product SKUs not found on basket page"),null)):(Z.failed("Unidentified page type"),null)},he=function(){return navigator.sendBeacon&&"function"==typeof navigator.sendBeacon},me=function(e){if(!e||"string"!=typeof e)return e;var t={startMonthIndex:void 0,endMonthIndex:void 0,startDay:void 0,endDay:void 0},n=e.match("([\\d]+)-([\\d]+)\\s?([\\wıüğşöçİÖÇĞÜ]+)");if(n&&4===n.length)t.startDay=parseInt(n[1]),t.endDay=parseInt(n[2]),t.startMonthIndex=ee[n[3].toLowerCase()],t.endMonthIndex=t.startMonthIndex;else{if(!(n=e.match("([\\d]+)\\s+([\\wıüğşöçİÖÇĞÜ]+)-([\\d]+)\\s+([\\wıüğşöçİÖÇĞÜ]+)"))||5!==n.length)return e;t.startDay=parseInt(n[1]),t.startMonthIndex=ee[n[2].toLowerCase()],t.endDay=parseInt(n[3]),t.endMonthIndex=ee[n[4].toLowerCase()]}try{var r=new Date;if(!t.startMonthIndex||!t.endMonthIndex)return e;var o=t.startMonthIndex>=r.getMonth()?r.getFullYear():r.getFullYear()+1,a=t.endMonthIndex>=r.getMonth()?r.getFullYear():r.getFullYear()+1,i=new Date(o,t.startMonthIndex,t.startDay),s=new Date(a,t.endMonthIndex,t.endDay),c=Math.ceil(Math.abs(i-r)/864e5),u=Math.ceil(Math.abs(s-r)/864e5),l=c<7?0:Math.ceil(c/7),d=u<7?0:Math.ceil(u/7);return 0===l&&0===d?"".concat(c," - ").concat(u," Gün"):0===l&&d>=1?"".concat(c," Gün - ").concat(d," Hafta"):l===d?"".concat(l," Hafta"):"".concat(l," - ").concat(d," Hafta")}catch(t){return e}};function ye(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function we(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ye(Object(n),!0).forEach((function(t){A(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ye(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var be=function(){function e(){i(this,e),this.logger=new O("Nextday Monitor"),this.logger.log("Initializing monitor"),this.appliedTreatmentsHash=null,this.appliedTreatmentsChanges=!1,this.eligibleNotAppliedTreatmentsHash=null,this.eligibleNotAppliedTreatmentsChanges=!1,this.headers={type:"text/plain"},this.isLogged=!1,this.initializeExitEventListeners()}var n,r,a;return c(e,[{key:"sendLogs",value:(a=t(o().mark((function e(){var t,n,r,a=this,i=arguments;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=i.length>0&&void 0!==i[0]?i[0]:null,n=i.length>1&&void 0!==i[1]&&i[1],(r=this.logger).log("Sending logs"),"complete"!==document.readyState?(r.log("Document ready state is not complete"),window.addEventListener("load",(function(){r.log("In onload event"),a.handleQueueLogs(a.packageLogData(t),n)}),!0)):this.handleQueueLogs(this.packageLogData(t),n);case 5:case"end":return e.stop()}}),e,this)}))),function(){return a.apply(this,arguments)})},{key:"handleQueueLogs",value:(r=t(o().mark((function e(t){var n,r=arguments;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r.length>1&&void 0!==r[1]&&r[1]||!this.isLogged){e.next=3;break}return e.abrupt("return");case 3:if(n=this.logger,t){e.next=7;break}return n.failed("Could not create request blob"),e.abrupt("return");case 7:return n.log("Request blob to send: ",t),this.queueLogs(t),this.isLogged=!0,e.next=12,ie(JSON.stringify(window.beagleInfoLayer.a));case 12:return this.appliedTreatmentsHash=e.sent,e.next=15,ie(JSON.stringify(window.beagleInfoLayer.e));case 15:this.eligibleNotAppliedTreatmentsHash=e.sent;case 16:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"updateLatestChanges",value:(n=t(o().mark((function e(){var t,n;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ie(JSON.stringify(window.beagleInfoLayer.a));case 2:return t=e.sent,e.next=5,ie(JSON.stringify(window.beagleInfoLayer.e));case 5:n=e.sent,t!==this.appliedTreatmentsHash&&(this.appliedTreatmentsChanges=!0,this.appliedTreatmentsHash=t),n!==this.eligibleNotAppliedTreatmentsHash&&(this.eligibleNotAppliedTreatmentsChanges=!0,this.eligibleNotAppliedTreatmentsHash=n);case 8:case"end":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:"packageLogData",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=this.headers,n=we({},window.beagleInfoLayer),r=e||(Object.keys(n.a||{}).length?"Treatments applied":"No treatments applied");return n.t=Date.now(),n.m=r,new Blob([JSON.stringify(n)],t)}},{key:"packageUpdateLogData",value:function(){var e=this.headers,t=this.appliedTreatmentsChanges,n=this.eligibleNotAppliedTreatmentsChanges;if(!t&&!n)return!1;var r={t:Date.now(),a:t?window.beagleInfoLayer.a:{},e:n?window.beagleInfoLayer.e:{},vId:window.beagleInfoLayer.vId};return new Blob([JSON.stringify(r)],e)}},{key:"initializeExitEventListeners",value:function(){var e=this,t=this.logger,n=!1;t.log("Initializing exit event listener"),window.addEventListener("beforeunload",(function(){if(e.isLogged){if(!n){n=!0,t.log("In beforeunload event");var r=e.packageUpdateLogData();r?e.queueLogs(r):t.log("No changes to log")}}else e.handleQueueLogs(e.packageLogData())}),{capture:!0}),window.addEventListener("pagehide",(function(){if(e.isLogged){if(!n){n=!0,t.log("In pagehide event");var r=e.packageUpdateLogData();r?e.queueLogs(r):t.log("No changes to log")}}else e.handleQueueLogs(e.packageLogData())}),{capture:!0})}},{key:"queueLogs",value:function(e){var t=this.logger;if(he()){var n=navigator.sendBeacon(f,e),r=setInterval((function(){n?(clearInterval(r),t.log("Logs queued successfully")):n=navigator.sendBeacon(f,e)}),10);setTimeout((function(){clearInterval(r),n||t.log("Logs not queued")}),1e3)}else fetch(f,e)}}]),e}(),ke=be,xe=new O("Nextday Api"),Se=function(){var e=t(o().mark((function e(){var t,n,r;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(xe.log("Starting product info lookup"),t=ge()){e.next=5;break}return xe.failed("No sku found"),e.abrupt("return",null);case 5:return(n=new Headers).append("Content-Type","application/json"),e.prev=7,e.next=10,fetch("https://catalog-api.adoraai.com",{method:"POST",body:JSON.stringify(t),headers:n,mode:"cors"});case 10:r=e.sent,e.next=17;break;case 13:return e.prev=13,e.t0=e.catch(7),xe.warn("Fetch to catalog api failed"),e.abrupt("return",null);case 17:if(r.ok){e.next=20;break}return xe.failed("Product info lookup failed"),e.abrupt("return",null);case 20:return e.next=22,r.json();case 22:if(r=e.sent){e.next=26;break}return xe.failed("Product info extraction from response failed"),e.abrupt("return",null);case 26:return xe.success("Product info lookup successful"),k,q({operator:"path",condition:"equal",value:"/siparis-listesi.html"})&&sessionStorage.setItem("Nd_ProductInfoBasket",JSON.stringify(r)),e.abrupt("return",r);case 31:case"end":return e.stop()}}),e,null,[[7,13]])})));return function(){return e.apply(this,arguments)}}();function Ie(e){return function(e){if(Array.isArray(e))return T(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||E(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Le(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Ce(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ce(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function Ce(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Oe(){return Oe=t(o().mark((function e(n,r){var a,i,s,c,l,d,f,v,g,h,m;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=new O("Nextday Apply Actions"),i=y,s=r.productInfo,c=r.skuList,l=function(e){a.log("Applying action: ",JSON.stringify(e));var t=e.operator,n=e.type,r=e.applyEvent,o=e.contentSelector,l=e.selector,f=e.selectorFallback,m=e.mdCondition,y=e.move_selector_1,w=e.move_selector_2,b=e.replaceFn;if("noop"!==t){var k=e.value,x=$(l);if(m&&!window.matchMedia(m).matches)return a.failed("Media condition mismatch: ",m),!1;if(y&&!w||w&&!y)return a.failed("Both move selectors are required"),!1;if(y&&w){if(!$(y).length)return a.failed("Move selector 1 not found: ",y),!1;if(!$(w).length)return a.failed("Move selector 2 not found: ",w),!1}else{if(!l)return a.failed("Selector not specified"),!1;if(!x.length){if(!$(f).length&&"remove"===t)return;if("no-selector"!==l&&(a.failed("Selector not found: ",l),a.log("Trying fallback selector: ",f),f&&(x=$(f)),!x.length))return a.failed("Fallback selector not found"),!1}}var S=function(e,t){if(e&&t.includes("{{REPLACE}}")){a.log("Executing replace function: ",e);var n={dataLayerFinder:j,productInfo:s},r=Function(e).bind(n);t=u(t,"{{REPLACE}}",r())}return t};if(Array.isArray(k)?k.forEach((function(e,t){var n=b?b[t]||b:"";k[t]=S(n,e)})):k=S(b,k),"remove"===t)x&&(a.log("Removing: ",l),x.remove()),a.log("Cannot found element with selector: ",l);else if("insert"===t)switch(n){case"before":a.log("Inserting before: ",k),String(k).includes("nd-add-to-win")&&$(".nd-add-to-win").remove(),x.before(k);break;case"after":a.log("Inserting after: ",k),x.after(k);break;case"popup":if(0!==parseInt(sessionStorage.getItem(i))){a.log("Popup already displayed in session");break}if(a.log("Creating Popup: ",k),g(k,o),r){var I,L=window.matchMedia(p).matches,C=Le(r);try{for(C.s();!(I=C.n()).done;)switch(I.value){case"exitIntent":a.log("Adding exit intent listener"),L?se(v):document.documentElement.addEventListener("mouseleave",v,{once:!0});break;case"copyIntent":a.log("Adding copy intent listener"),document.documentElement.addEventListener("copy",v,{once:!0})}}catch(e){C.e(e)}finally{C.f()}}else setTimeout((function(){v()}),timeout)}else if("edit"===t)switch(n){case"text":a.log("Editing text: ",k),x.text(k);break;case"html":a.log("Editing html: ",k),x.html(k);break;case"styleApplicator":a.log("Applying style: ",k);var O=JSON.parse(k);a.log("Style Changes Map: ",O),ce(x,O);break;case"addClass":a.log("addding class to ".concat(x," named ").concat(k)),x.addClass(k);break;case"removeClass":a.log("remove class from ".concat(x," named ").concat(k)),x.removeClass(k);break;case"documentTitle":if(a.log("changing document title from ".concat(x," to ").concat(k)),r){var A,T=Le(r);try{for(T.s();!(A=T.n()).done;)"tabChange"==A.value&&function(){a.log("catching event tabchange..");var e=document.title;document.addEventListener("visibilitychange",(function(t){return d(t,k,e)}))}()}catch(e){T.e(e)}finally{T.f()}}break;default:a.log("Unknown edit type: ",n)}else if("setattribute"===t)switch(a.log("Setting attribute: ",attribute,k),attribute){case"src":x.css("content","url(".concat(k.trim(),")"));break;case"style":var E=k.split(":")[0].trim(),P=k.split(":")[1].trim();x.css(E,P,"!important")}else if("replace"===t)a.log("Replacing: ",k),x.replaceAll(k);else if("swap"===t){a.log("Swapping: ",y,w);var _=document.querySelector(y),N=document.querySelector(w);h(_,N)}else if("injectscript"===t)a.log("Injecting script: ",k),x.append("<script>".concat(k,"<\/script>"));else if("move"===t){a.log("Moving ".concat(y," to ").concat(w));var D=document.querySelector(y),R=document.querySelector(w);D.remove(),R.prepend(D)}else if("productInfoLookup"===t){var q=function(e,t){return e&&t.includes("{{REPLACE_PRODUCTINFO}}")&&(t=u(t,"{{REPLACE_PRODUCTINFO}}",e)),t},M=c[0],U=null;switch(n){case"transactionIn2Weeks":var V;U=q(null===(V=s[M].catalog.transactionIn2Weeks)||void 0===V?void 0:V.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","),k),a.log("Replacing transcationIn2Weeks ",s[M].catalog.transactionIn2Weeks);break;case"addToCartIn2Weeks":var B;U=q(null===(B=s[M].catalog.addToCartIn2Weeks)||void 0===B?void 0:B.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","),k),a.log("Replacing AddToCartCount ",s[M].catalog.addToCartIn2Weeks);break;case"productViewCount":var F;U=q(null===(F=s[M].catalog.productViewCount)||void 0===F?void 0:F.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","),k),a.log("Replacing productViewCount for",s[M].catalog.productViewCount);break;default:a.failed("no such type found for productInfoLookup operator")}x.before(U)}else a.failed("No such operator exists yet",t)}else a.failed("Noop Operator: No operation is applied on target ")},d=function(){var e=t(o().mark((function e(t,n,r){var a,i;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:a=Array.isArray(n)?n:[n],i=0;case 2:if(!(i<a.length)){e.next=16;break}if(!document.hidden){e.next=12;break}return document.title=a[i],e.next=7,ve(3e3);case 7:return document.title=r,e.next=10,ve(3e3);case 10:e.next=13;break;case 12:document.title=r;case 13:i++,e.next=2;break;case 16:if(document.hidden){e.next=21;break}return document.title=r,e.abrupt("return");case 21:d(t,n,r);case 22:case"end":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}(),f=function e(t){var n=t.target.id;n&&"nd-popup__wrapper"===n&&($("#nd-popup__wrapper").remove(),window.removeEventListener("click",e,!0))},v=function e(){sessionStorage.setItem(i,1);var t=document.querySelector("#grt-shadow-host");t&&(t.style.display="none"),document.getElementById("nd-popup__wrapper").style.display="block",window.addEventListener("click",f,!0),document.documentElement.removeEventListener("mouseleave",e,{once:!0}),document.documentElement.removeEventListener("copy",e,{once:!0}),setTimeout((function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",f,!0)}),15e3)},g=function(e,t){var n=document.createElement("div");n.classList.add("nd-popup__wrapper"),n.id="nd-popup__wrapper";var r=document.createElement("button");if(r.classList.add("nd-popup__button-close"),r.innerText="X",r.onclick=function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",f,!0)},t)for(var o=Array.from(document.querySelectorAll(t));e.includes("{{REPLACE}}")&&o.length>0;)e=e.replace("{{REPLACE}}",o.shift().src);var a=document.createElement("template");a.innerHTML=e.trim();var i=a.content.firstChild;i.appendChild(r),n.appendChild(i),$("#nd-popup__wrapper").remove(),document.body.appendChild(n)},h=function(e,t){var n,r,o=e.parentNode,a=t.parentNode;if(o&&a&&!o.isEqualNode(t)&&!a.isEqualNode(e)){for(var i=0;i<o.children.length;i++)o.children[i].isEqualNode(e)&&(n=i);for(var s=0;s<a.children.length;s++)a.children[s].isEqualNode(t)&&(r=s);o.isEqualNode(a)&&n<r&&r++,o.insertBefore(t,o.children[n]),a.insertBefore(e,a.children[r])}},m=function e(t){if(window.jQuery){var n,r=Le(t);try{for(r.s();!(n=r.n()).done;){var o=n.value;try{if(!1===l(o))return!1}catch(e){return a.failed("Couldn't apply action ".concat(o," with error ").concat(e.message)),e}}}catch(e){r.e(e)}finally{r.f()}}else setTimeout((function(){e(t)}),10)},e.abrupt("return",m(n));case 11:case"end":return e.stop()}}),e)}))),Oe.apply(this,arguments)}var Ae=function(e,t){return Oe.apply(this,arguments)};function Te(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Ee(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ee(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function Ee(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Pe=new O("Nextday Treatment Repository"),_e=function(){function e(t){i(this,e);var n=t.treatments,r=t.treatmentWeights;this.treatments=n,this.treatmentWeights=r}var n,r;return c(e,[{key:"getMatchedTreatments",value:function(){var e=this.treatmentWeights,t=this.getUserGroup(),n=this.treatments;if(e){var r,o=t&&e[t]?e[t]:e.default,a=Te(n);try{for(a.s();!(r=a.n()).done;){var i=r.value;if(o[i.id]&&(i.weight=o[i.id].weight,i.actions.find((function(e){return e.variants})))){var s,c=Te(i.actions);try{for(c.s();!(s=c.n()).done;){var u=s.value;if(u.variants)for(var l=0,d=Object.keys(u.variants);l<d.length;l++){var f,p,v,g=d[l];null!==(f=o[i.id])&&void 0!==f&&f.variants&&null!==(p=o[i.id])&&void 0!==p&&p.variants[g]&&(u.variants[g].weight=null===(v=o[i.id])||void 0===v?void 0:v.variants[g])}}}catch(e){c.e(e)}finally{c.f()}}}}catch(e){a.e(e)}finally{a.f()}}return Pe.log("".concat(n.length," treatments user group matched")),n.length?n:[]}},{key:"getUserGroup",value:function(){return window.matchMedia(p).matches?"UGB":"UGA"}}],[{key:"getTreatments",value:(r=t(o().mark((function e(){var t,n,r,a,i,s;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Pe.log("Loading treatments"),t="ND_Treatments",n=JSON.parse(window.sessionStorage.getItem(t)),r=null==n?void 0:n.treatments,a=null==n?void 0:n.timestamp,r&&a){e.next=13;break}return Pe.failed("Treatments not found in local storage"),e.next=9,ne();case 9:return r=e.sent,i={timestamp:Date.now(),treatments:r},window.sessionStorage.setItem(t,JSON.stringify(i)),e.abrupt("return",r);case 13:if(!a){e.next=23;break}if(!((Date.now()-a)/864e5>1)){e.next=23;break}return Pe.failed("Treatments are expired"),e.next=19,ne();case 19:return r=e.sent,s={timestamp:Date.now(),treatments:r},window.sessionStorage.setItem(t,JSON.stringify(s)),e.abrupt("return",r);case 23:return Pe.success("Treatments are loaded from local storage"),e.abrupt("return",r);case 25:case"end":return e.stop()}}),e)}))),function(){return r.apply(this,arguments)})},{key:"getTreatmentWeights",value:(n=t(o().mark((function e(){return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,re();case 3:return e.abrupt("return",e.sent);case 6:e.prev=6,e.t0=e.catch(0),Pe.warn(e.t0.message),this.treatmentWeights=null;case 10:case"end":return e.stop()}}),e,this,[[0,6]])}))),function(){return n.apply(this,arguments)})}]),e}(),Ne=_e,De=new O("Nextday Counter Checker"),je=function(e){De.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"pageView":return qe(n,r);case"CABasketPrice":return Me(n,r);default:return De.failed("No such operator",t),!1}},Re=function(e,t){try{switch(t){case"session":return sessionStorage.getItem(e);case"local":return localStorage.getItem(e);default:return De.failed("No such type",t),null}}catch(t){return De.failed("Could not get counter ".concat(e),t),null}},qe=function(e,t){var n=parseInt(Re(m,"session"));return De.log("Page views counter value: ",n),null===n?(De.failed("Pageviews counter not found in session storage"),!1):de(n,e,parseInt(t))},Me=function(e,t){var n=parseInt(Re(x,"local"));return De.log("Coupon applicable basket price counter value: ",n),null===n?(De.failed("Coupon applicable basket price counter not found in local storage"),!1):de(n,e,parseInt(t))},Ue=new O("Nextday Element Checker"),Ve=function(e){Ue.log("Checking rule",JSON.stringify(e));var t,n=e.operator,r=e.condition,o=e.value,a=e.selector,i=e.selectorAll,s=e.selectorFallback,c=void 0===s?null:s,u=a;if(u&&!document.querySelector(u)&&(u=c||u),null===n)return de(document.querySelector(u),r,o);if(u&&!document.querySelector(u))return Ue.failed("Selector not found on page"),!1;if(i&&!document.querySelectorAll(i))return Ue.failed("Selector not found on page"),!1;switch(u?t=document.querySelector(u):i&&(t=Array.from(document.querySelectorAll(i))),n){case"text-number":var l;l=Array.isArray(t)?t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0):parseInt(document.querySelector(u).textContent.replace("TL","").replace(".",""));var d=parseInt(l);return de(d,r,o);case"classList":return de(Array.from(t.classList),r,o);case"count":var f=Array.isArray(t)?t.length:t?1:0;return de(f,r,o);case"style":var p=getComputedStyle(t),v=o.split(":")[0].trim(),g=o.split(":")[1].trim(),h=p[v];return de(h,r,g);default:return Ue.failed("Operator not defined"),!1}},Be=new O("Nextday Function Checker"),Fe=function(e,t){Be.log("Checking rule",JSON.stringify(e));var n=t.productInfo,r=e.operator,o=e.condition,a=e.value,i=e.bindings;if(!r)return Be.failed("Rule function not defined"),!1;var s={};"productInfo"==i&&(s={productInfo:n});var c=Function(r).bind(s)();return de(c,o,a)},Je=new O("Nextday Session Checker"),Ge=function(e){Je.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"duration":return He(n,r);case"history":return We(n,r);default:return null}},He=function(e,t){var n=(Date.now()-function(){try{return new Date(parseInt(window.sessionStorage.getItem(g)))}catch(e){return Je.failed("Could not get session timestamp",e),Date.now()}}())/1e3;return de(n,e,parseInt(t))},We=function(e,t){var n,r=null===(n=window.sessionStorage.getItem(h))||void 0===n?void 0:n.split(",");return de(r,e,t)},$e=new O("Nextday Env Checker"),ze=function(e){$e.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("device_type"===t){var o=window.matchMedia(p).matches?"mobile":"desktop";return de(o,n,r)}},Ke=new O("Nextday RandomPct Checker"),Qe=function(){var e=t(o().mark((function e(t){var n,r,a,i,s,c;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Ke.log("Checking rule",JSON.stringify(t)),n=t.condition,r=t.value,a=t.salt){e.next=5;break}return Ke.failed("Salt is not defined"),e.abrupt("return",!1);case 5:return e.next=7,pe();case 7:return i=e.sent,e.next=10,ae(i+a);case 10:return s=e.sent,c=s,e.abrupt("return",de(c,n,r));case 13:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Ye=new O("Nextday ProductInfo Checker"),Xe=function(e,t){Ye.log("Checking rule",JSON.stringify(e));var n=e.operator,r=e.condition,o=e.value,a=null;switch(n){case"transactionIn2Weeks":Ye.log("Getting TransactionCount for sku ",t.skuList[0]),a=Ze(t.skuList[0],t.productInfo);break;case"addToCartIn2Weeks":Ye.log("Getting AddToCartCount for sku ",t.skuList[0]),a=et(t.skuList[0],t.productInfo);break;case"productViewCount":Ye.log("Getting productViewCount for sku ",t.skuList[0]),a=tt(t.skuList[0],t.productInfo)}return de(a,r,o)},Ze=function(e,t){var n,r;return null===(n=t[e])||void 0===n||null===(r=n.catalog)||void 0===r?void 0:r.transactionIn2Weeks},et=function(e,t){var n,r;return null===(n=t[e])||void 0===n||null===(r=n.catalog)||void 0===r?void 0:r.addToCartIn2Weeks},tt=function(e,t){var n,r;return null===(n=t[e])||void 0===n||null===(r=n.catalog)||void 0===r?void 0:r.productViewCount};function nt(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return rt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?rt(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function rt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ot=new O("Nextday Rule Engine"),at=function(){function e(t){i(this,e);var n=t.baseRuleSet,r=t.businessRuleSet,o=t.bindings,a=t.callback,s=void 0===a?null:a;this.baseRuleSet=n,this.businessRuleSet=r,this.callback=s,this.bindings=o}var n,r,a;return c(e,[{key:"checkRules",value:(a=t(o().mark((function e(){var t,n,r;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=nt(this.baseRuleSet),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=12;break}return r=n.value,e.next=7,this.checkRule(r);case 7:if(e.sent){e.next=10;break}return e.abrupt("return",!1);case 10:e.next=3;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(1),t.e(e.t0);case 17:return e.prev=17,t.f(),e.finish(17);case 20:return e.abrupt("return",!0);case 21:case"end":return e.stop()}}),e,this,[[1,14,17,20]])}))),function(){return a.apply(this,arguments)})},{key:"checkBusinessRules",value:(r=t(o().mark((function e(){var t,n,r;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=nt(this.businessRuleSet),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=12;break}return r=n.value,e.next=7,this.checkRule(r);case 7:if(!e.sent){e.next=10;break}return e.abrupt("return",r.businessRuleId);case 10:e.next=3;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(1),t.e(e.t0);case 17:return e.prev=17,t.f(),e.finish(17);case 20:return e.abrupt("return",null);case 21:case"end":return e.stop()}}),e,this,[[1,14,17,20]])}))),function(){return r.apply(this,arguments)})},{key:"checkRule",value:(n=t(o().mark((function e(t){var n,r,a,i;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=t.chain,r=t.chain_condition,a=t.type,i=null,e.t0=a,e.next="session"===e.t0?5:"counter"===e.t0?7:"element"===e.t0?9:"dataLayer"===e.t0?11:"url"===e.t0?13:"function"===e.t0?15:"environment"===e.t0?17:"random"===e.t0?19:"productInfoLookup"===e.t0?23:25;break;case 5:return i=Ge(t),e.abrupt("break",27);case 7:return i=je(t),e.abrupt("break",27);case 9:return i=Ve(t),e.abrupt("break",27);case 11:return i=D(t),e.abrupt("break",27);case 13:return i=q(t),e.abrupt("break",27);case 15:return i=Fe(t,this.bindings),e.abrupt("break",27);case 17:return i=ze(t),e.abrupt("break",27);case 19:return e.next=21,Qe(t);case 21:return i=e.sent,e.abrupt("break",27);case 23:return i=Xe(t,this.bindings),e.abrupt("break",27);case 25:return ot.failed("No such rule type: ".concat(a)),e.abrupt("return",null);case 27:if(!n){e.next=53;break}e.t1=r,e.next="and"===e.t1?31:"or"===e.t1?38:"xor"===e.t1?45:51;break;case 31:if(e.t2=i,!e.t2){e.next=36;break}return e.next=35,this.checkRule(n);case 35:e.t2=e.sent;case 36:return i=e.t2,e.abrupt("break",53);case 38:if(e.t3=i,e.t3){e.next=43;break}return e.next=42,this.checkRule(n);case 42:e.t3=e.sent;case 43:return i=e.t3,e.abrupt("break",53);case 45:return e.t4=i,e.next=48,this.checkRule(n);case 48:return e.t5=e.sent,i=e.t4!=e.t5,e.abrupt("break",53);case 51:return ot.failed("No such chain condition"),e.abrupt("break",53);case 53:return e.abrupt("return",i);case 54:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})}]),e}();function it(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return st(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?st(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function st(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ct=new O("BeagleOnComponent"),ut=function(){var e=t(o().mark((function e(n,r,a,i){var s,c,u,l,d,f,S,I,L,C,O,A,T,E,_,N,D,j,R,q,M,U,V,B,F,G,H,$;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return $=function(){var e=x;if(window.location.href.includes("/siparis-listesi.html")){var t=Array.from(document.querySelectorAll(".price"));if(t.push.apply(t,Ie(Array.from(document.querySelectorAll(".new-price")))),!t.length)return ct.failed("Price elements not found"),void window.localStorage.setItem(e,0);ct.log("Price elements: ",t);var n=t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0);ct.log("Coupon applicable total price: ",n),n>=0&&window.localStorage.setItem(e,n)}else(window.location.href.includes("/siparis-ozeti.html")||null===window.localStorage.getItem(e))&&window.localStorage.setItem(e,0)},H=function(){return H=t(o().mark((function e(t){var r,a,s,u,l,f,p,v,g,h,m,y,w,b,k,x,C,O,A,T,E,_,D,q,M,U,V,B,F;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.id,a=t.actions,s=t.baseRuleSet,u=t.device,l=t.dependant_on_treatment,f=t.reapply_event,p=t.businessRuleSet,v=t.weight,g=t.delay,h=t.productInfoStorage,!c||c.includes(r)){e.next=3;break}return e.abrupt("return");case 3:if("mobile"!==u||d){e.next=6;break}return ct.failed("Treatment device 'mobile' mismatch"),e.abrupt("return");case 6:if("desktop"!==u||!d){e.next=9;break}return ct.failed("Treatment device 'desktop' mismatch"),e.abrupt("return");case 9:if(f){m=f,Array.isArray(f)||(m=[f]),ct.log("Reapply event '".concat(f,"' found for treatment: ").concat(r)),y=it(m);try{for(y.s();!(w=y.n()).done;)b=w.value,(k=R[b]?R[b]:[]).includes(r)?ct.log("Treatment already added for reapply event"):R[b]=[].concat(Ie(k),[r])}catch(e){y.e(e)}finally{y.f()}}if(x=JSON.parse(sessionStorage.getItem(S)),C=N,h&&(x=JSON.parse(sessionStorage.getItem(I)),C=JSON.parse(sessionStorage.getItem(L))),A=new at({baseRuleSet:s,businessRuleSet:p,bindings:O={productInfo:C,skuList:x}}),ct.log("Starting base rule set check for treatment: "+r),e.t0=!s,e.t0){e.next=21;break}return e.next=20,A.checkRules();case 20:e.t0=e.sent;case 21:if(!e.t0){e.next=63;break}if(T=100===v?0:100-v||50,l&&(_=null===(E=j.find((function(e){return e.id===l})))||void 0===E?void 0:E.weight,T=100===_?0:100-_||50),ct.log("Treatment skip ratio: "+T),D=l||r,1!==i){e.next=30;break}e.t1=100,e.next=33;break;case 30:return e.next=32,ae(n+D);case 32:e.t1=e.sent;case 33:if(q=e.t1,ct.log("TreatmentPct: "+q+" with debug mode ".concat(i?"on":"off")),M=null,!p){e.next=42;break}return ct.log("Starting sub variant rule set check for treatment: "+r),e.next=40,A.checkBusinessRules();case 40:(M=e.sent)?ct.log("Applying business rule transformation with id: ",M):ct.log("Applying treatment with default values");case 42:if(!(q<T)){e.next=46;break}return ct.log("Treatment ".concat(r," skipped due to treatment split ratio")),K(r,M,F,"skipped",l),e.abrupt("return");case 46:return e.next=48,le(n,a,M);case 48:if(U=e.sent,V=P(U,2),B=V[0],F=V[1],!g){e.next=55;break}return e.next=55,g(g);case 55:return e.next=57,Ae(B,O);case 57:if(!1!==e.sent){e.next=61;break}return K(r,M,F,"failed"),e.abrupt("return");case 61:return K(r,M,F,"applied"),e.abrupt("return");case 63:ct.failed("Rule check failed for treatment: ",r);case 64:case"end":return e.stop()}}),e)}))),H.apply(this,arguments)},G=function(e){return H.apply(this,arguments)},r.sendLogs(),s=window.location.search,c=i&&s.includes("filter=")?s.slice(s.indexOf("[")+1,s.lastIndexOf("]")).split(",").map((function(e){return parseInt(e,10)})):null,ue(),void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,z=m,Q=y,Y=v,X=g,Z=h,ee=sessionStorage.getItem(z),ne=sessionStorage.getItem(Q),re=sessionStorage.getItem(Y),oe=sessionStorage.getItem(X),ie=sessionStorage.getItem(Z),ee?sessionStorage.setItem(z,parseInt(ee)+1):sessionStorage.setItem(z,1),null===ne&&sessionStorage.setItem(Q,0),re||sessionStorage.setItem(Y,crypto.randomUUID()),oe||sessionStorage.setItem(X,Date.now()),ie?sessionStorage.setItem(Z,[window.location.pathname,ie]):sessionStorage.setItem(Z,[window.location.pathname]),setTimeout((function(){te()}),2e3),u=Ne.getTreatments(),l=Ne.getTreatmentWeights(),d=window.matchMedia(p).matches,f={subtree:!0,childList:!0,attributes:!0},S=w,I=b,L=k,$(),window.location.href.includes("/siparis-listesi.html")&&(C=new MutationObserver((function(){ct.log("Mutation observed, calling collectCABasketPrice"),$()})),(O=document.querySelector("#checkoutForm"))&&C.observe(O,f)),e.next=18,Promise.all([u,l,a]);case 18:if(A=e.sent,T=P(A,3),E=T[0],_=T[1],N=T[2],ct.success("Found treatments: ",E),D=new Ne({treatments:E,treatmentWeights:_}),W(J.TreatmentRepositoryCreated),(j=D.getMatchedTreatments()).length){e.next=31;break}return ct.log("No treatments matched, returning without further action"),te(),e.abrupt("return");case 31:R={},q=it(j),e.prev=33,q.s();case 35:if((M=q.n()).done){e.next=47;break}return U=M.value,e.prev=37,e.next=40,G(U);case 40:e.next=45;break;case 42:e.prev=42,e.t0=e.catch(37),ct.failed("Error executing rules",e.t0);case 45:e.next=35;break;case 47:e.next=52;break;case 49:e.prev=49,e.t1=e.catch(33),q.e(e.t1);case 52:return e.prev=52,q.f(),e.finish(52);case 55:for(te(),W(J.TreatmentsApplied),ct.success("Applied treatments: ",window.beagleInfoLayer.a),setInterval((function(){r.updateLatestChanges()}),1e3),V=function(){var e=F[B],t=R[e],n=j.filter((function(e){return t.includes(e.id)}));switch(e){case"infinite_scroll":var r=new ResizeObserver((function(){var e,t=it(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;ct.log("Retrying treatment ".concat(r.id," from infinite_scroll")),G(r)}}catch(e){t.e(e)}finally{t.f()}}));r.observe(document.documentElement);break;case"timeout":setTimeout((function(){var e,t=it(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;ct.log("Retrying treatment ".concat(r.id," from timeout")),G(r)}}catch(e){t.e(e)}finally{t.f()}}),500);break;case"element_change":var o,a=it(n);try{var i=function(){var e,t=o.value,n=it(Array.isArray(t.reapply_selector)?t.reapply_selector:[t.reapply_selector]);try{for(n.s();!(e=n.n()).done;){var r=e.value,a=document.querySelector(r);a&&new MutationObserver((function(){ct.log("Retrying treatment ".concat(t.id," from element_change")),G(t)})).observe(a,f)}}catch(e){n.e(e)}finally{n.f()}};for(a.s();!(o=a.n()).done;)i()}catch(e){a.e(e)}finally{a.f()}break;case"on_scroll":window.onscroll=function(){var e,t=it(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;ct.log("Retrying treatment ".concat(r.id," from on_scroll")),G(r)}}catch(e){t.e(e)}finally{t.f()}};break;case"query_search_change":var s=window.location.search,c=new MutationObserver((function(){if(window.location.search!==s){s=window.location.search;var e,t=it(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;ct.log("Retrying treatment ".concat(r.id," from query_search_change")),G(r)}}catch(e){t.e(e)}finally{t.f()}}}));c.observe(document,f);break;default:ct.failed("Reapply event not found: ",e)}},B=0,F=Object.keys(R);B<F.length;B++)V();W(J.ReapplyTreatmentListeners);case 62:case"end":return e.stop()}var z,Q,Y,X,Z,ee,ne,re,oe,ie}),e,null,[[33,49,52,55],[37,42]])})));return function(t,n,r,o){return e.apply(this,arguments)}}(),lt=ut;t(o().mark((function e(){var t,n,r,a,i,s,c,u,l,d,f,p;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return W(J.BeagleLoaded),t=null,n=null,r=new O,a="ND_TimeoutCount",i=0,r.info("Nextday initializing"),e.prev=7,e.next=10,H();case 10:return c=Se(),u=fe(),t=new ke,W(J.Initialized),e.next=16,pe();case 16:return l=e.sent,r.log("Found cookie identifier: ",l),e.next=20,ae(l);case 20:if(d=e.sent,u){e.next=40;break}if(!(d<50)){e.next=29;break}if(-1!==d){e.next=25;break}throw new Error("Could not determine cookie pct");case 25:z("isOn",n=!1),e.next=31;break;case 29:z("isOn",n=!0);case 31:if(W(J.UserOnOff),he()){e.next=34;break}throw new Error("sendBeacon is not supported");case 34:if(!((i=parseInt(sessionStorage.getItem(a))||0)>1)){e.next=38;break}throw W(J.TimeoutThresholdReached),new Error("Nextday timeout threshold reached");case 38:e.next=42;break;case 40:r.info("Debug mode on: all applicable treatments will be applied"),window.localStorage.setItem(I,!0);case 42:if(document.documentElement.classList.contains("nextDay-hide")){e.next=46;break}throw W(J.ScriptTimeOut),sessionStorage.setItem(a,i+1),new Error("Nextday script timed out");case 46:if(null!==(s=window.beagleInfoLayer)&&void 0!==s&&s.vvsIsShowroom&&window.localStorage.setItem(I,!0),"true"===window.localStorage.getItem(I)?(r.warn("User is out of scope"),null!="isOn"&&delete window.beagleInfoLayer.isOn):(window.dataLayer=window.dataLayer||[],!0===(null===(f=window.beagleInfoLayer)||void 0===f?void 0:f.isOn)?window.dataLayer.push({event:"GLOV",GLOV_ON:"true"}):!1===(null===(p=window.beagleInfoLayer)||void 0===p?void 0:p.isOn)&&window.dataLayer.push({event:"GLOV",GLOV_ON:"false"})),!1!==n){e.next=51;break}throw new Error("Control group: no treatments applied");case 51:r.log("Found cookie percentage: ",d),r.log("Split_ratio: ",50),r.log("cookiePct < SPLIT_RATIO",d<50),r.info("Control group ratio: ".concat(50,"%")),lt(l,t,c,u),e.next=63;break;case 58:e.prev=58,e.t0=e.catch(7),te(),console.warn("Nextday: ",e.t0.message),t.sendLogs(e.t0.message,!0);case 63:case"end":return e.stop()}}),e,null,[[7,58]])})))()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
