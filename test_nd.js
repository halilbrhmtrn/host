!function(){var e={757:function(e,t,n){e.exports=n(666)},666:function(e){var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",i=a.asyncIterator||"@@asyncIterator",s=a.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,o=Object.create(a.prototype),i=new A(r||[]);return o._invoke=function(e,t,n){var r=d;return function(a,o){if(r===f)throw new Error("Generator is already running");if(r===g){if("throw"===a)throw o;return C()}for(n.method=a,n.arg=o;;){var i=n.delegate;if(i){var s=T(i,n);if(s){if(s===h)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=g,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=f;var c=l(e,t,n);if("normal"===c.type){if(r=n.done?g:p,c.arg===h)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=g,n.method="throw",n.arg=c.arg)}}}(e,n,i),o}function l(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d="suspendedStart",p="suspendedYield",f="executing",g="completed",h={};function v(){}function m(){}function y(){}var w={};c(w,o,(function(){return this}));var b=Object.getPrototypeOf,k=b&&b(b(D([])));k&&k!==n&&r.call(k,o)&&(w=k);var x=y.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function I(e,t){function n(a,o,i,s){var c=l(e[a],e,o);if("throw"!==c.type){var u=c.arg,d=u.value;return d&&"object"==typeof d&&r.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,i,s)}),(function(e){n("throw",e,i,s)})):t.resolve(d).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,s)}))}s(c.arg)}var a;this._invoke=function(e,r){function o(){return new t((function(t,a){n(e,r,t,a)}))}return a=a?a.then(o,o):o()}}function T(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,T(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var a=l(r,e.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,h;var o=a.arg;return o?o.done?(n[e.resultName]=o.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function P(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function A(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function D(e){if(e){var n=e[o];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var a=-1,i=function n(){for(;++a<e.length;)if(r.call(e,a))return n.value=e[a],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:C}}function C(){return{value:t,done:!0}}return m.prototype=y,c(x,"constructor",y),c(y,"constructor",m),m.displayName=c(y,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,c(e,s,"GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},S(I.prototype),c(I.prototype,i,(function(){return this})),e.AsyncIterator=I,e.async=function(t,n,r,a,o){void 0===o&&(o=Promise);var i=new I(u(t,n,r,a),o);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(x),c(x,s,"Generator"),c(x,o,(function(){return this})),c(x,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=D,A.prototype={constructor:A,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(P),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function a(r,a){return s.type="throw",s.arg=e,n.next=r,a&&(n.method="next",n.arg=t),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],s=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),P(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;P(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:D(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){"use strict";function e(e,t,n,r,a,o,i){try{var s=e[o](i),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,a)}function t(t){return function(){var n=this,r=arguments;return new Promise((function(a,o){var i=t.apply(n,r);function s(t){e(i,a,o,s,c,"next",t)}function c(t){e(i,a,o,s,c,"throw",t)}s(void 0)}))}}var r=n(757),a=n.n(r);function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t,n){return t&&s(e.prototype,t),n&&s(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var u="https://europe-west3-nextday-34eb3.cloudfunctions.net/api/logResponse",l="(max-width: 440px)",d=50,p=15e3,f="__nextday_session_id",g="ND_SessionTimestamp",h="BN_SessionHistory",v="ND_PageViews",m="ND_PopupDisplayFlag",y="ND_SkuListList",w="ND_SkuListBasket",b="ND_ProductInfoList",k="Nd_ProductInfoBasket",x="ND_CABasketPrice",S="ND_Debug",I="ND_OutOfScope",T="ND_UserId",L=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Nextday Client SDK";i(this,e),this.origin=t,this.DEBUG=window.localStorage.getItem(S)}return c(e,[{key:"info",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];(e=console).info.apply(e,["[".concat(t,"]")].concat(r))}},{key:"log",value:function(){var e=this.DEBUG,t=this.origin;if(e){for(var n,r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];(n=console).log.apply(n,["[".concat(t,"]")].concat(a))}}},{key:"failed",value:function(){var e,t=this.DEBUG,n=this.origin;if(t){for(var r="%c%s   ",a=arguments.length,i=new Array(a),s=0;s<a;s++)i[s]=arguments[s];i.forEach((function(e){switch(o(e)){case"bigint":case"number":case"boolean":r+="%d   ";break;case"string":r+="%s   ";break;default:r+="%o   "}})),(e=console).log.apply(e,[r,"color: red","[".concat(n,"]")].concat(i))}}},{key:"success",value:function(){var e,t=this.DEBUG,n=this.origin;if(t){for(var r="%c%s   ",a=arguments.length,i=new Array(a),s=0;s<a;s++)i[s]=arguments[s];i.forEach((function(e){switch(o(e)){case"bigint":case"number":case"boolean":r+="%d   ";break;case"string":r+="%s   ";break;default:r+="%o   "}})),(e=console).log.apply(e,[r,"color: green","[".concat(n,"]")].concat(i))}}},{key:"warn",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];(e=console).warn.apply(e,["[".concat(t,"]")].concat(r))}},{key:"error",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];(e=console).error.apply(e,["[".concat(t,"]")].concat(r))}}]),e}(),P=L;function A(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function D(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function C(e,t){if(e){if("string"==typeof e)return D(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?D(e,t):void 0}}function O(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],i=!0,s=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(e){s=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(s)throw a}}return o}}(e,t)||C(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function E(e){return function(e){if(Array.isArray(e))return D(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||C(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return N(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?N(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function N(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}window.beagleInfoLayer=window.beagleInfoLayer||{checkpoints:[],a:{},e:{},f:{}};var j,R,U={BeagleLoaded:1,Initialized:2,UserOnOff:3,ScriptTimeOut:7,TreatmentRepositoryCreated:4,TreatmentsApplied:5,ReapplyTreatmentListeners:6,TimeoutThresholdReached:8},Q={subtree:!0,childList:!0,attributes:!0},q=new P("BeagleInfoLayer"),F=function(e){try{q.log("Checkpoint: '".concat(e,"' Reached!")),window.beagleInfoLayer.checkpoints.push({checkpoint:Object.keys(U).find((function(t){return U[t]===e})),id:e,time:Date.now()})}catch(e){q.warn(e)}},J=function(e,t){var n=window.top.beagleInfoLayer;if(null!=e&&null!=t)if(e.indexOf(".")>-1){var r=e.split("."),a=r.pop(),i=n;r.forEach((function(e){i[e]||(i[e]={}),i=i[e]})),i[a]="object"===o(t)?t:t.toString().trim()}else n[e]="object"===o(t)?t:t.toString().trim()},G=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1e4,a=window.top.beagleInfoLayer;if(null!=e)return a&&void 0!==a[e]?Promise.resolve(a[e]):t?new Promise((function(t){var o=setInterval((function(){a&&void 0!==a[e]&&(clearInterval(o),t(a[e]))}),n);setTimeout((function(){clearInterval(o),t(null)}),r)})):Promise.resolve(null)},V=function(e,t,n,r){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,o={};switch(t&&(o.businessRuleId=t),n&&(o.variant=n),r){case"applied":window.beagleInfoLayer.a[e]=o;break;case"skipped":o.dependant_on_treatment=a,window.beagleInfoLayer.e[e]=o;break;case"failed":window.beagleInfoLayer.f[e]=o}},B=10,M=0,H=function(){var e=t(a().mark((function e(){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:q.log("Initializing beagleInfoLayer"),ae(),ne(),ie();case 4:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),W=["PageType","vvsIsShowroom"],z=function(){var e=t(a().mark((function e(){var t,n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return q.log("getCriticalElements: Initializing"),t={},n=W.map((function(e){return G(e,!0)})),e.next=5,Promise.all(n);case 5:return e.sent.forEach((function(e,n){t[W[n]]=e})),q.log("getCriticalElements: Collected elements: "+JSON.stringify(t)),e.abrupt("return",t);case 9:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),K=[{PageTypeDepend:"*",method:"GADataLayer",selector:"PageType",name:"PageType"},{PageTypeDepend:"*",method:"GADataLayer",selector:"isAdmin",name:"vvsIsShowroom"},{PageTypeDepend:"*",method:"GADataLayer",selector:"userId",name:"vvsUserId"},{PageTypeDepend:"Productpage|Listingpage",method:"GADataLayer",selector:"content_name",name:"content_name"},{PageTypeDepend:"Productpage|Listingpage",method:"GADataLayer",selector:"content_type",name:"content_type"},{PageTypeDepend:"Productpage|Listingpage",method:"GADataLayer",selector:"productgroup",name:"vvsProductGroup"},{PageTypeDepend:"Productpage|Listingpage",method:"GADataLayer",selector:"vivense_category",name:"vvsCategory"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"content_ids",name:"content_ids",trigger:"updateActiveSKUList"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"content_category",name:"content_category"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"is_showroom_product",name:"is_showroom_product"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"ecommerce.detail.actionField.list",name:"gaListingName"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivenseProducts",name:"vvsPDPProduct",operand:"JsonArrayFirstOnly"},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"content_ids",name:"content_ids"},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"category_product_count",name:"gaCategoryProductCont"},{PageTypeDepend:"basket",method:"GADataLayer",selector:"ecommerce.checkout.products",name:"gaCartProducts"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.products",name:"gaCartProducts"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.actionField.id",name:"gaPurchaseId"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.actionField.revenue",name:"gaPurchaseRevenue"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.actionField.dimension15",name:"gaPurchasePayType"},{PageTypeDepend:"*",method:"DocQuery",selector:'[class*="page_preview_wrapper_production"]',name:"PageType",operand:"docQueryValueIfHasInnerText",value:"Homepage"},{PageTypeDepend:"*",method:"DocQuery",selector:'[class*="category_page_wrapper"]',name:"PageType",operand:"docQueryValueIfHasInnerText",value:"Listingpage"},{PageTypeDepend:"*",method:"DocQuery",selector:'[class*="product-main-details"]',name:"PageType",operand:"docQueryValueIfHasInnerText",value:"Productpage"},{PageTypeDepend:"*",method:"DocQuery",selector:'[class*="product"]',name:"PageType",operand:"docQueryValueIfHasInnerText",value:"Productpage"},{PageTypeDepend:"Homepage|Productpage|Listingpage",method:"DocQuery",selector:'[class*="welcome_username"]',name:"vvsViewLoggedin",operand:"docQueryHasInnerText"},{PageTypeDepend:"Homepage|Productpage|Listingpage",method:"DocQuery",selector:'[class*="basket_total_price"]',name:"vvsViewBasketTotal",operand:"docQueryInnerText"},{PageTypeDepend:"Homepage|Productpage|Listingpage",method:"DocQuery",selector:'[id*="cart_quantity"], [class*="basket_length"]',name:"vvsViewBasketCount",operand:"docQueryInnerText"},{PageTypeDepend:"Productpage",method:"DocQuery",selector:'[class*="delivery-date"]',name:"vvsPDPDeliveryDate",operand:"docQueryInnerText"},{PageTypeDepend:"Productpage",method:"DocQuery",selector:'[class*="product-title"], [class*="header-bottom"]',name:"vvsPDPTitle",operand:"docQueryInnerText"},{PageTypeDepend:"Productpage",method:"DocQuery",selector:'[class*="vivense-showrooms"] > *',name:"vvsPDPShowroomCount",operand:"docQueryCountElts"},{PageTypeDepend:"Listingpage",method:"DocQuery",selector:'[class*="count-of-product"]',name:"vvsPLPItemCount",operand:"docQueryInnerText"},{PageTypeDepend:"Listingpage",method:"DocQuery",selector:'[class*="subcategories-title"]',name:"vvsPLPName",operand:"docQueryInnerText"},{PageTypeDepend:"Listingpage",method:"DocQuery",selector:"[data-product-sku]",name:"vvsPLPSKUs",operand:"docQueryAttribValueSet",value:"data-product-sku",trigger:"updateActiveSKUList"},{PageTypeDepend:"Listingpage",method:"DocQuery",selector:".product-list",observer:"listingItemBlock",name:"listingItemBlockObserver",children:["vvsPLPSKUs"],operand:"docQueryObserve"},{PageTypeDepend:"basket",method:"DocQuery",selector:"[data-sku]",name:"vvsCartSKUs",operand:"docQueryAttribValueSet",value:"data-sku",trigger:"updateActiveSKUList"},{PageTypeDepend:"basket",method:"DocQuery",selector:'[class*="order-final-number"]',name:"vvsCartTotal",operand:"docQueryInnerText"},{PageTypeDepend:"basket",method:"DocQuery",selector:'[class*="cart-price"] > span.price, span.super, span.new-price, span.span-price',name:"vvsCartCouponApplicable",operand:"docQuerySumNumInnerText",trigger:"updateCouponApplicableAmount"},{PageTypeDepend:"basket",method:"DocQuery",selector:"#checkoutForm",observer:"checkoutForm",name:"checkoutFormObserver",children:["vvsCartTotal","vvsCartCouponApplicable","vvsCartSKUs"],operand:"docQueryObserve"},{PageTypeDepend:"purchase",method:"DocQuery",selector:'[class*="basket_summary_total"], [class*="total_row"]',name:"vvsPurcPriceElt",operand:"docQueryInnerText"},{PageTypeDepend:"purchase",method:"DocQuery",selector:'[class*="order_follow_numb"], [class*="cart-title-bottom"]',name:"vvsPurchaseOrderID",operand:"docQueryInnerText"},{PageTypeDepend:"purchase",method:"DocQuery",selector:'[class*="payment_type_title"], [class*="cart-title-info"]',name:"vvsPurcTypeElt",operand:"docQueryInnerText"},{PageTypeDepend:"purchase",method:"DocQuery",selector:'[class*="product_sku_code"]',name:"vvsPurcSKUs",operand:"docQueryArrayInnerText"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"sku",name:"sorgProduct.sku"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"mpn",name:"sorgProduct.mpn"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"name",name:"sorgProduct.name",operand:"JSONFilterOther",value:"@type=Product"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"offers.price",name:"sorgProduct.price"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"offers.priceValidUntil",name:"sorgProduct.priceValidUntil"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"itemListElement.*.name",name:"sorgBreadcrumb"},{PageTypeDepend:"Listingpage",method:"DocSorg",selector:"mainEntity.name",name:"sorgListing.name"},{PageTypeDepend:"Listingpage",method:"DocSorg",selector:"mainEntity.numberOfItems",name:"sorgListing.numberOfItems"},{PageTypeDepend:"Listingpage",method:"DocSorg",selector:"breadcrumb.itemListElement.*.item.name",name:"sorgBreadcrumb"},{PageTypeDepend:"*",method:"SingleWT",selector:"favoriteProducts",name:"vvsFavProds"},{PageTypeDepend:"*",method:"SingleWT",selector:"isAdmin",name:"vvsIsShowroom"},{PageTypeDepend:"*",method:"SingleWT",selector:"userId",name:"vvsUserId"}],Y=function(e,n){var r;try{switch(n.operand){case"JsonArrayFirstOnly":if(r=re(e,n.selector),Array.isArray(r)&&r.length>0)return J(n.name,r[0]),ee(n.trigger),n.isFound=!0,!0;break;case"JSONFilterOther":r=re(e,n.selector);var o=n.value.split("=");if(2!==o.length)break;var i=o[0],s=o[1];if(!i||!s)break;var c=re(e,i);if(!c||c!==s)break;if(r&&(Array.isArray(r)?r.length>0:r.toString().trim().length>0))return J(n.name,r),ee(n.trigger),n.isFound=!0,!0;break;case"docQueryObserve":if(r=e.querySelector(n.selector))return new MutationObserver(t(a().mark((function e(){var t,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=[],n.children.forEach((function(e){var n=K.filter((function(t){return t.name===e}));t.push.apply(t,E(n))})),t.forEach((function(e){e.isFound=!1})),r=M>=10,B=10,M=0,r&&(q.log("searchObj: triggered a restart of searchpaths due: "+n.name),ne());case 7:case"end":return e.stop()}}),e)})))).observe(r,Q),n.isFound=!0,!0;break;case"docQueryInnerText":if((r=e.querySelector(n.selector))&&r.innerText&&r.innerText.trim().length>0)return J(n.name,r.innerText),ee(n.trigger),n.isFound=!0,!0;break;case"docQueryAttribValueSet":var u=new Set;if(!(r=e.querySelectorAll(n.selector))||0===r.length)break;var l,d=_(r);try{for(d.s();!(l=d.n()).done;){var p=l.value.getAttribute(n.value);p&&u.add(p)}}catch(e){d.e(e)}finally{d.f()}if(u.size>0)return J(n.name,Array.from(u)),ee(n.trigger),n.isFound=!0,!0;break;case"docQueryHasInnerText":if(r=e.querySelector(n.selector)){var f=r.innerText.trim().length>0;return J(n.name,f.toString()),ee(n.trigger),n.isFound=!0,!0}break;case"docQueryCountElts":if(r=e.querySelectorAll(n.selector))return J(n.name,r.length),ee(n.trigger),n.isFound=!0,!0;break;case"docQueryValueIfHasInnerText":if((r=e.querySelector(n.selector))&&r.innerText&&r.innerText.trim().length>0)return J(n.name,n.value),ee(n.trigger),n.isFound=!0,!0;break;case"docQuerySumNumInnerText":if(!(r=e.querySelectorAll(n.selector))||0===r.length)break;var g,h=0,v=_(r);try{for(v.s();!(g=v.n()).done;){var m=g.value.innerText.trim().replace(/\D/g,"");m.length>0&&(h+=parseInt(m))}}catch(e){v.e(e)}finally{v.f()}if(h>0)return J(n.name,arrayInnerText),ee(n.trigger),n.isFound=!0,!0;break;case"docQueryArrayInnerText":if(!(r=e.querySelectorAll(n.selector))||0===r.length)break;var y,w=[],b=_(r);try{for(b.s();!(y=b.n()).done;){var k=y.value.innerText.trim();k.length>0&&w.push(k)}}catch(e){b.e(e)}finally{b.f()}if(w.length>0)return J(n.name,w),ee(n.trigger),n.isFound=!0,!0;break;default:if((r=re(e,n.selector))&&(Array.isArray(r)?r.length>0:r.toString().trim().length>0))return J(n.name,r),ee(n.trigger),n.isFound=!0,!0}}catch(e){q.error("Error in searchObj: "+e)}return!1},X=x,Z=y,ee=function(){var e=t(a().mark((function e(t){var n,r,o,i,s;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!t){e.next=37;break}q.log("processTrigger activated for: ",t),e.t0=t,e.next="updatePageType"===e.t0?5:"updateCouponApplicableAmount"===e.t0?7:"updateActiveSKUList"===e.t0?16:36;break;case 5:return R&&(null!==window.localStorage.getItem(X)&&"purchase"!==R||window.localStorage.setItem(X,0)),e.abrupt("break",37);case 7:return e.next=9,G("vvsCartCouponApplicable",!0,50,500);case 9:if(n=e.sent){e.next=14;break}return q.failed("processTrigger: Price elements not found"),window.localStorage.setItem(X,0),e.abrupt("return");case 14:return n>=0&&(q.log("processTrigger: Coupon applicable total price: ",n),window.localStorage.setItem(X,n)),e.abrupt("break",37);case 16:if("Listingpage"!==R){e.next=23;break}return e.next=19,G("vvsPLPSKUs",!0,20,1e3);case 19:(r=e.sent).length&&(sessionStorage.setItem(Z,JSON.stringify(r)),j=r),e.next=35;break;case 23:if("Productpage"!==R){e.next=30;break}return e.next=26,G("content_ids",!0,20,1e3);case 26:(o=e.sent)&&(i=[o],sessionStorage.setItem(Z,JSON.stringify(i)),j=i),e.next=35;break;case 30:if("basket"!==R){e.next=35;break}return e.next=33,G("vvsCartSKUs",!0,20,1e3);case 33:(s=e.sent).length&&(sessionStorage.setItem(Z,JSON.stringify(s)),sessionStorage.setItem("ND_SkuListBasket",JSON.stringify(s)),j=s);case 35:case 36:return e.abrupt("break",37);case 37:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),te=function(){var e=t(a().mark((function e(){var t,n,r,o,i,s,c,u,l,d,p,f,g,h,v,m,y,w,b,k;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=document.readyState,q.log("parseSearchPaths initialized with dom status:  "+t),n=window.top,r=n.dataLayer,o=n.document,s=new Set,c=new Set,u=new Set,R&&c.add("PageType"),l=_(K);try{for(l.s();!(d=l.n()).done;)(p=d.value).isFound&&c.add(p.name)}catch(e){l.e(e)}finally{l.f()}f=_(K),e.prev=12,f.s();case 14:if((g=f.n()).done){e.next=41;break}if(!(h=g.value).isFound){e.next=18;break}return e.abrupt("continue",39);case 18:if(!s.has(h.name)&&!c.has(h.name)){e.next=22;break}return q.log("parseSearchPaths had found  "+h.name+" already"),h.isFound=!0,e.abrupt("continue",39);case 22:if("*"===h.PageTypeDepend){e.next=38;break}if(R){e.next=34;break}return e.next=26,G("PageType");case 26:if(!(R=e.sent)){e.next=32;break}ee("updatePageType"),q.log("parseSearchPaths set currentPageType to "+R),e.next=34;break;case 32:return u.add(h.name),e.abrupt("continue",39);case 34:if(!(h.PageTypeDepend.indexOf(R)<0)){e.next=38;break}return q.log("parseSearchPaths will skip "+h.name+" because of PageTypeDepend "+h.PageTypeDepend),h.isFound=!0,e.abrupt("continue",39);case 38:if("SingleWT"===h.method)Y(n,h)?(q.log("parseSearchPaths found "+h.name),s.add(h.name)):u.add(h.name);else if("GADataLayer"===h.method){v=_(r);try{for(v.s();!(m=v.n()).done;)y=m.value,Y(y,h)?(q.log("parseSearchPaths found "+h.name),s.add(h.name)):u.add(h.name)}catch(e){v.e(e)}finally{v.f()}}else if("DocSorg"===h.method){i||(i=oe()),w=_(i);try{for(w.s();!(b=w.n()).done;)k=b.value,Y(k,h)?(q.log("parseSearchPaths found "+h.name),s.add(h.name)):u.add(h.name)}catch(e){w.e(e)}finally{w.f()}}else"DocQuery"===h.method&&(Y(o,h)?(q.log("parseSearchPaths found "+h.name),s.add(h.name)):u.add(h.name));case 39:e.next=14;break;case 41:e.next=46;break;case 43:e.prev=43,e.t0=e.catch(12),f.e(e.t0);case 46:return e.prev=46,f.f(),e.finish(46);case 49:0===u.size?(M=10,q.log("parseSearchPaths found all elements setting retry to "+M)):0===s.size?("complete"!==t&&"interactive"!==t||(B*=2,M+=1),q.log("parseSearchPaths processed but not found any, setting delay and retry to "+B+" and "+M+" for notfound: ["+Array.from(u).join(" | ")+"]")):q.log("parseSearchPaths processed: notfound: ["+Array.from(u).join(" | ")+"] and found "+s.size);case 50:case"end":return e.stop()}}),e,null,[[12,43,46,49]])})));return function(){return e.apply(this,arguments)}}(),ne=function(){var e=t(a().mark((function e(){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,te();case 2:M<10&&(q.log("scheduling parseSearchPaths to be recalled in "+B+"ms"),setTimeout(ne,B));case 3:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),re=function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:" | ";if(!t)return null;if(!n)return null;try{for(var a=n.split("."),o=t,i=0;i<a.length;i++){if(null===o)return null;if("*"===a[i]){var s=a.slice(i+1).join("."),c=[];for(var u in o)if(o[u]){var l=e(o[u],s);l&&c.push(l)}return c.join(r)}o=o[a[i]]}return o}catch(e){return null}},ae=function(){var e=t(a().mark((function e(){var t,n,r,o,i,s,c,u,l,p,g,h,v,m,y,w,b,k,x,S,I,T,L,P,A,D,C,O,E,_,N,j,R,U,Q,q,F,G,V,B;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:P=window.top,A=P.navigator,J("cookieGaId",fe(P.document.cookie,"_ga")),D=crypto.randomUUID(),C=sessionStorage.getItem(f),J("v","0.0.28"),J("n","beagle-session_id-".concat(C)),J("vId",D),J("sr",d),O=(null===(t=P.navigator)||void 0===t||null===(n=t.userAgentData)||void 0===n?void 0:n.platform)||(null===(r=P.navigator)||void 0===r?void 0:r.platform)||(null===(o=P.navigator)||void 0===o?void 0:o.userAgent),J("navPlatform",O),J("windowPRatio",P.devicePixelRatio),(E={}).availHeight=null===(i=P.screen)||void 0===i?void 0:i.availHeight,E.availHeight=null===(s=P.screen)||void 0===s?void 0:s.availHeight,E.availLeft=null===(c=P.screen)||void 0===c?void 0:c.availLeft,E.availTop=null===(u=P.screen)||void 0===u?void 0:u.availTop,E.availWidth=null===(l=P.screen)||void 0===l?void 0:l.availWidth,E.colorDepth=null===(p=P.screen)||void 0===p?void 0:p.colorDepth,E.height=null===(g=P.screen)||void 0===g?void 0:g.height,E.pixelDepth=null===(h=P.screen)||void 0===h?void 0:h.pixelDepth,E.width=null===(v=P.screen)||void 0===v?void 0:v.width,J("windowScreen",E),(_={}).height=null===(m=P.visualViewport)||void 0===m?void 0:m.height,_.offsetLeft=null===(y=P.visualViewport)||void 0===y?void 0:y.offsetLeft,_.offsetTop=null===(w=P.visualViewport)||void 0===w?void 0:w.offsetTop,_.pageLeft=null===(b=P.visualViewport)||void 0===b?void 0:b.pageLeft,_.pageTop=null===(k=P.visualViewport)||void 0===k?void 0:k.pageTop,_.scale=null===(x=P.visualViewport)||void 0===x?void 0:x.scale,_.width=null===(S=P.visualViewport)||void 0===S?void 0:S.width,J("windowVPort",_),screen.width&&(N=parseInt(screen.width),j=screen.height?parseInt(screen.height):0,0!==N&&0!==j&&(/iPad|iPhone|iPod/.test(O)&&P.devicePixelRatio?(N=Math.round(N*P.devicePixelRatio),j=Math.round(j*P.devicePixelRatio)):90===Math.abs(P.orientation)&&(R=N,N=j,j=R),J("window",N+"x"+j))),J("navHistSize",null===(I=P.history)||void 0===I?void 0:I.length),J("navAgent",A.userAgent),P.beagleInfoLayer.navAgent||A.userAgentData&&(F=null==A||null===(U=A.userAgentData)||void 0===U||null===(Q=U.brands)||void 0===Q?void 0:Q.map((function(e){return e.brand+":"+e.version})).join(),F+=null!=A&&null!==(q=A.userAgentData)&&void 0!==q&&q.mobile?"mobi":" ",J("navAgent",F+=O)),J("navHWCores",A.hardwareConcurrency),J("navLanguage",A.language||A.browserLanguage||A.systemLanguage||A.userLanguage),J("navTouch",A.maxTouchPoints),J("navVendor",A.vendor),G={},P.performance&&P.performance.getEntriesByType("navigation")[0]&&(V=P.performance.getEntriesByType("navigation")[0],G.connect=Math.round(V.connectEnd-V.connectStart),G.request=Math.round(V.responseEnd-V.requestStart),G.dom=Math.round(V.domComplete-V.domInteractive),G.load=Math.round(V.loadEventEnd-V.loadEventStart),G.duration=Math.round(V.duration)),J("perfMetrics",G),J("internetSpeed",null===(T=P.navigator)||void 0===T||null===(L=T.connection)||void 0===L?void 0:L.downlink),B=new URL(window.top.location.href),J("u",B.href),J("d",B.hostname),J("donttrack",A.doNotTrack||P.doNotTrack||A.msDoNotTrack),J("r",P.document.referrer),B.pathname.indexOf("favorilerim.html")>-1?J("PageType","favorites"):B.pathname.indexOf("siparis-listesi.html")>-1?J("PageType","basket"):B.pathname.indexOf("siparis-ozeti.html")>-1?J("PageType","purchase"):B.pathname.indexOf("odeme.html")>-1?J("PageType","payment"):B.pathname.indexOf("adres-listesi.html")>-1?J("PageType","address"):B.pathname.indexOf("siparislerim.html")>-1?J("PageType","pastorders"):B.pathname.indexOf("uye-kayit.html")>-1&&J("PageType","register");case 50:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),oe=function(){var e,t=[],n=_(window.top.document.querySelectorAll('[type="application/ld+json"]'));try{for(n.s();!(e=n.n()).done;){var r=e.value;try{var a=r.textContent,o=JSON.parse(a);t.push(o)}catch(e){}}}catch(e){n.e(e)}finally{n.f()}return t},ie=function(){var e=t(a().mark((function e(){var t,n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(R){e.next=4;break}return e.next=3,G("PageType",!0,20,1e3);case 3:R=e.sent;case 4:if(R){e.next=7;break}return q.failed("productInfoLookup: Cannot Detect Page Type"),e.abrupt("return",null);case 7:q.log("productInfoLookup: Starting product info lookup"),t=0;case 9:if(!(t<5)){e.next=17;break}if(!j){e.next=12;break}return e.abrupt("break",17);case 12:return e.next=14,new Promise((function(e){return setTimeout(e,20)}));case 14:t++,e.next=9;break;case 17:if(j&&0!==j.length){e.next=20;break}return q.failed("productInfoLookup: No sku found"),e.abrupt("return",null);case 20:return(n=new Headers).append("Content-Type","application/json"),e.prev=22,e.next=25,fetch("https://catalog-api.adoraai.com",{method:"POST",body:JSON.stringify(j),headers:n,mode:"cors"});case 25:r=e.sent,e.next=32;break;case 28:return e.prev=28,e.t0=e.catch(22),q.warn("productInfoLookup: Fetch to catalog api failed"),e.abrupt("return",null);case 32:if(r.ok){e.next=35;break}return q.failed("productInfoLookup: Product info lookup failed"),e.abrupt("return",null);case 35:return e.next=37,r.json();case 37:if(r=e.sent){e.next=41;break}return q.failed("productInfoLookup: Product info extraction from response failed"),e.abrupt("return",null);case 41:return q.success("productInfoLookup: Product info lookup successful"),"basket"===R&&sessionStorage.setItem(k,JSON.stringify(r)),sessionStorage.setItem(b,JSON.stringify(r)),e.abrupt("return",r);case 45:case"end":return e.stop()}}),e,null,[[22,28]])})));return function(){return e.apply(this,arguments)}}();function se(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return ce(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ce(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function ce(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ue=new P("Nextday Utils");"randomUUID"in crypto||(crypto.randomUUID=function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(e){return(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)}))});var le=function(){window.top.document.documentElement.classList.remove("nextDay-hide")},de=function(){var e=t(a().mark((function e(){var t,n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return ue.log("Fetching treatments"),e.next=3,fetch("https://host-b96.pages.dev/treatments.json");case 3:return t=e.sent,e.next=6,t.json();case 6:return n=e.sent,e.abrupt("return",n);case 8:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),pe=function(){var e=t(a().mark((function e(){var t,n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return ue.log("Fetching treatment weights"),e.next=3,fetch("https://host-b96.pages.dev/weights.json");case 3:return t=e.sent,e.next=6,t.json();case 6:return n=e.sent,e.abrupt("return",n);case 8:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),fe=function(e,t){if(!e)return null;var n=e.split(";").map((function(e){return e.split("=")})).reduce((function(e,t){return t[0]&&t[1]&&(e[decodeURIComponent(t[0].trim())]=decodeURIComponent(t[1].trim())),e}),{})[t];return n?("_ga"===t&&(n=n.split(".")[2]),n):null},ge=function(){var e=t(a().mark((function e(t){var n,r,o,i;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=8+(n=9),t){e.next=5;break}return e.abrupt("return",-1);case 5:return e.next=7,he(t);case 7:return o=e.sent,i=parseInt(o.substring(n,r),16),e.abrupt("return",i%100);case 10:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),he=function(){var e=t(a().mark((function e(t){var n,r,o;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=(new TextEncoder).encode(t),e.next=3,crypto.subtle.digest("SHA-1",n);case 3:return r=e.sent,o=Array.from(new Uint8Array(r)),e.abrupt("return",o.map((function(e){return e.toString(16).padStart(2,"0")})).join(""));case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),ve=function(e,t){ue.log("Applying style changes",t,"to elements",e);for(var n=0;n<e.length;n++)for(var r=e[n],a=0,o=Object.entries(t);a<o.length;a++){var i=O(o[a],2),s=i[0],c=i[1];r.style[s]=c}},me=function(){var e=t(a().mark((function e(){var t;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(t=window.top.document.createElement("link")).rel="stylesheet",t.type="text/css",t.href="https://host-b96.pages.dev/nd-styles.css",window.top.document.head.appendChild(t);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),ye=function(){var e=t(a().mark((function e(t,n,r){var o,i,s,c,u,l,d,p,f,g,h,v,m,y,w,b,k,x,S,I,T;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:o=JSON.parse(JSON.stringify(n)),i=null,s=se(o),e.prev=3,s.s();case 5:if((c=s.n()).done){e.next=55;break}if(u=c.value,l=u.businessRuleTransformations,d=u.variants,l||d){e.next=10;break}return e.abrupt("continue",53);case 10:if(r&&l){p=se(l);try{for(p.s();!(f=p.n()).done;)if((g=f.value).id===r)for(h in g)"id"!==h&&(u[h]=g[h])}catch(e){p.e(e)}finally{p.f()}}if(!d){e.next=53;break}v=0,m=Object.keys(d);case 13:if(!(v<m.length)){e.next=53;break}return y=m[v],e.next=17,ge(t+y);case 17:if(!(e.sent<u.variants[y].weight)){e.next=50;break}if(i=y,!r||!d[y].businessRuleTransformations){e.next=48;break}w=se(d[y].businessRuleTransformations),e.prev=22,w.s();case 24:if((b=w.n()).done){e.next=38;break}if((k=b.value).id!=r){e.next=36;break}x=0,S=Object.keys(k);case 28:if(!(x<S.length)){e.next=36;break}if("id"!==(I=S[x])){e.next=32;break}return e.abrupt("continue",33);case 32:u[I]=k[I];case 33:x++,e.next=28;break;case 36:e.next=24;break;case 38:e.next=43;break;case 40:e.prev=40,e.t0=e.catch(22),w.e(e.t0);case 43:return e.prev=43,w.f(),e.finish(43);case 46:e.next=49;break;case 48:for(T in d[y])"weight"!==T&&"businessRuleTransformations"!==T&&(u[T]=d[y][T]);case 49:return e.abrupt("break",53);case 50:v++,e.next=13;break;case 53:e.next=5;break;case 55:e.next=60;break;case 57:e.prev=57,e.t1=e.catch(3),s.e(e.t1);case 60:return e.prev=60,s.f(),e.finish(60);case 63:return e.abrupt("return",[o,i]);case 64:case"end":return e.stop()}}),e,null,[[3,57,60,63],[22,40,43,46]])})));return function(t,n,r){return e.apply(this,arguments)}}(),we=function(e,t,n){if("notExist"===t)return e?(ue.failed("conditionChecker: -not satisfied- target does exist"),!1):(ue.success("conditionChecker: -satisfied- target does not exist"),!0);if(null==e||null==t)return ue.failed("conditionChecker: runTimeValue or condition is not defined"),!1;switch(t){case"exist":return e?(ue.success("conditionChecker: -satisfied- target does exist"),!0):(ue.failed("conditionChecker: -not satisfied- target does not exist"),!1);case"includes":case"contains":return e.includes(n)?(ue.success("conditionChecker: -satisfied- target contains value"),!0):(ue.failed("conditionChecker: -not satisfied- target does not contain value"),!1);case"notIncludes":case"notContains":return e.includes(n)?(ue.failed("conditionChecker: -not satisfied- target contains value"),!1):(ue.success("conditionChecker: -satisfied- target does not contain value"),!0);case"equal":return e===n?(ue.success("conditionChecker: -satisfied- target equals value"),!0):(ue.failed("conditionChecker: -not satisfied- target does not equal value"),!1);case"notEqual":return e!==n?(ue.success("conditionChecker: -satisfied- target does not equal value"),!0):(ue.failed("conditionChecker: -not satisfied- target equals value"),!1);case"greaterThan":return e>n?(ue.success("conditionChecker: -satisfied- target is greater than value"),!0):(ue.failed("conditionChecker: -not satisfied- target is not greater than value"),!1);case"lessThan":return e<n?(ue.success("conditionChecker: -satisfied- target is less than value"),!0):(ue.failed("conditionChecker: -not satisfied- target is not less than value"),!1);case"greaterEquals":return e>=n?(ue.success("conditionChecker: -satisfied- target is greater or equal than value"),!0):(ue.failed("conditionChecker: -not satisfied- target is not greater or equal than value"),!1);case"lessEquals":return e<=n?(ue.success("conditionChecker: -satisfied- target is less or equal than value"),!0):(ue.failed("conditionChecker: -not satisfied- target is not less or equal than value"),!1);case"between":var r=O(n.split(","),2),a=r[0],o=r[1];return a=parseInt(a),o=parseInt(o),e>=a&&e<=o?(ue.success("conditionChecker: -satisfied- target is between min and max"),!0):(ue.failed("conditionChecker: -not satisfied- target is not between min and max"),!1);case"regex":return new RegExp(n,"i").test(e);default:return ue.failed("conditionChecker: condition is not defined ",t),!1}},be=function(){var e=S,t=I,n=window.location.search;if(n.includes("nd_debug=1"))return window.localStorage.setItem(e,1),window.localStorage.setItem(t,!0),J("dbm","on"),1;if(n.includes("nd_debug=2"))return window.localStorage.setItem(e,2),window.localStorage.setItem(t,!0),J("dbm","on"),2;if(n.includes("nd_debug=0"))return window.localStorage.removeItem(e),window.localStorage.setItem(t,!0),J("dbm","off"),0;var r=parseInt(window.localStorage.getItem(e));return J("dbm",r?"on":"off"),r||0},ke=function(){var e=t(a().mark((function e(){var t,n=arguments;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.length>0&&void 0!==n[0]?n[0]:"_ga",e.abrupt("return",new Promise((function(e,n){var r=window.localStorage.getItem(T);if(r&&e(r),r=fe(window.top.document.cookie,t))window.localStorage.setItem(T,r),e(r);else{var a=setInterval((function(){(r=fe(window.top.document.cookie,t))&&(clearInterval(a),window.localStorage.setItem(T,r),e(r))}),10);setTimeout((function(){clearInterval(a),n(new Error("Could not extract cookie identifier"))}),1e3)}})));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),xe=function(e){return new Promise((function(t){return setTimeout(t,e)}))},Se=function(){return navigator.sendBeacon&&"function"==typeof navigator.sendBeacon},Ie=function(){var e=t(a().mark((function e(t,n){var r,o;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:o=function(){clearTimeout(r),r=setTimeout(n,t)},r=setTimeout(n,t),window.top.document.ontouchstart=o;case 3:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}();function Te(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Le(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Te(Object(n),!0).forEach((function(t){A(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Te(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Pe=function(){function e(){i(this,e),this.logger=new P("Nextday Monitor"),this.logger.log("Initializing monitor"),this.appliedTreatmentsHash=null,this.appliedTreatmentsChanges=!1,this.eligibleNotAppliedTreatmentsHash=null,this.eligibleNotAppliedTreatmentsChanges=!1,this.headers={type:"text/plain"},this.isLogged=!1,this.initializeExitEventListeners()}var n,r,o;return c(e,[{key:"sendLogs",value:(o=t(a().mark((function e(){var t,n,r,o=this,i=arguments;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=i.length>0&&void 0!==i[0]?i[0]:null,n=i.length>1&&void 0!==i[1]&&i[1],(r=this.logger).log("Sending logs"),"complete"!==window.top.document.readyState?(r.log("Document ready state is not complete"),window.addEventListener("load",(function(){r.log("In onload event"),o.handleQueueLogs(o.packageLogData(t),n)}),!0)):this.handleQueueLogs(this.packageLogData(t),n);case 5:case"end":return e.stop()}}),e,this)}))),function(){return o.apply(this,arguments)})},{key:"handleQueueLogs",value:(r=t(a().mark((function e(t){var n,r=arguments;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r.length>1&&void 0!==r[1]&&r[1]||!this.isLogged){e.next=3;break}return e.abrupt("return");case 3:if(n=this.logger,t){e.next=7;break}return n.failed("Could not create request blob"),e.abrupt("return");case 7:return n.log("Request blob to send: ",t),this.queueLogs(t),this.isLogged=!0,e.next=12,he(JSON.stringify(window.beagleInfoLayer.a));case 12:return this.appliedTreatmentsHash=e.sent,e.next=15,he(JSON.stringify(window.beagleInfoLayer.e));case 15:this.eligibleNotAppliedTreatmentsHash=e.sent;case 16:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"updateLatestChanges",value:(n=t(a().mark((function e(){var t,n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,he(JSON.stringify(window.beagleInfoLayer.a));case 2:return t=e.sent,e.next=5,he(JSON.stringify(window.beagleInfoLayer.e));case 5:n=e.sent,t!==this.appliedTreatmentsHash&&(this.appliedTreatmentsChanges=!0,this.appliedTreatmentsHash=t),n!==this.eligibleNotAppliedTreatmentsHash&&(this.eligibleNotAppliedTreatmentsChanges=!0,this.eligibleNotAppliedTreatmentsHash=n);case 8:case"end":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:"packageLogData",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=this.headers,n=Le({},window.beagleInfoLayer);return n.t=Date.now(),e?n.m=e:Object.keys(n.a||{}).length>0?n.m="Treatments applied":n.m="No treatments applied",new Blob([JSON.stringify(n)],t)}},{key:"packageUpdateLogData",value:function(){var e=this.headers,t=this.appliedTreatmentsChanges,n=this.eligibleNotAppliedTreatmentsChanges;if(!t&&!n)return!1;var r={t:Date.now(),a:t?window.beagleInfoLayer.a:{},e:n?window.beagleInfoLayer.e:{},vId:window.beagleInfoLayer.vId};return new Blob([JSON.stringify(r)],e)}},{key:"initializeExitEventListeners",value:function(){var e=this,t=this.logger,n=!1;t.log("Initializing exit event listener"),window.addEventListener("beforeunload",(function(){if(e.isLogged){if(!n){n=!0,t.log("In beforeunload event");var r=e.packageUpdateLogData();r?e.queueLogs(r):t.log("No changes to log")}}else e.handleQueueLogs(e.packageLogData())}),{capture:!0}),window.addEventListener("pagehide",(function(){if(e.isLogged){if(!n){n=!0,t.log("In pagehide event");var r=e.packageUpdateLogData();r?e.queueLogs(r):t.log("No changes to log")}}else e.handleQueueLogs(e.packageLogData())}),{capture:!0})}},{key:"queueLogs",value:function(e){var t=this.logger;if(Se()){var n=navigator.sendBeacon(u,e),r=setInterval((function(){n?(clearInterval(r),t.log("Logs queued successfully")):n=navigator.sendBeacon(u,e)}),10);setTimeout((function(){clearInterval(r),n||t.log("Logs not queued")}),1e3)}else fetch(u,e)}}]),e}(),Ae=Pe,De=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";if(!e)return"";var r=e.indexOf(t);if(r<0)return e;for(;e.indexOf(t)>=0;){var a=e.indexOf(t);e=(a>0?e.substring(0,a):"")+n+e.substring(a+t.length)}return e};function Ce(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Oe=new P("Nextday DataLayer Checker"),Ee=function(e){Oe.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value,a=_e(t);return we(a,n,r)},_e=function(e){Oe.log("Searching beagleInfoLayer for key ",e);var t=window.beagleInfoLayer[e];if(e.includes("."))try{var n=e.split(".");t=window.beagleInfoLayer[n[0]];for(var r=1;r<n.length;r++)t=t[n[r]]}catch(n){Oe.failed("Couldn't extract key ".concat(e," from beagleInfoLayer")),t=null}if(t)return Oe.success("Found key ".concat(e," with value ").concat(t)),t;Oe.failed("Key ".concat(e," not found in beagleInfoLayer")),Oe.log("Searching dataLayer for key ",e);var a,o=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Ce(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ce(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}(window.dataLayer);try{for(o.s();!(a=o.n()).done;){var i=a.value;if(Object.keys(i).includes(e))return Oe.success("Found key ".concat(e," with value ").concat(i[e])),i[e]}}catch(e){o.e(e)}finally{o.f()}return Oe.failed("Key ".concat(e," not found in dataLayer")),null},Ne=new P("ReplaceUtils");function je(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(e&&t.includes("{{REPLACE}}")){Ne.log("Executing replace function: ",e);var a={dataLayerFinder:_e,productInfo:n},o=Function(e).bind(a);return r?t.replace("{{REPLACE}}",o()):De(t,"{{REPLACE}}",o())}return t}var Re=function(e,t,n){return Array.isArray(e)?e.forEach((function(r,a){var o=t?t[a]||t:"";e[a]=je(o,r,n)})):Array.isArray(t)?t.forEach((function(r,a){if("object"===o(r)){var i=function(e){var t=e.storage,n=e.key,r=e.type,a=null;if("session"===t&&(a=window.sessionStorage.getItem(n),r))try{a=(a=JSON.parse(a))[a.length-1][r]}catch(e){Ne.failed("Could not parse ".concat(a))}return a}(r);e=e.replace("{{REPLACE}}",i)}else e=je(t,e,n,!0)})):e=je(t,e,n),e},Ue=new P("ActionConditionUtils"),Qe=function(e,t,n){var r=e.attribute,a=e.inner_condition,o=e.operator,i=e.selector,s=e.type,c=e.value;Ue.log("Action condition found: ",e);var u=[];if("productInfoLookup"===s)for(var l=0,d=Array.from(window.top.document.querySelectorAll(i));l<d.length;l++){var p,f,g=d[l],h=g.getAttribute(r),v=null==t||null===(p=t[h])||void 0===p||null===(f=p.catalog)||void 0===f?void 0:f[o];v&&we(v,a,c)&&u.push($(g))}return u};function qe(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Fe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Fe(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function Fe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Je(){return Je=t(a().mark((function e(n,r){var o,i,s,c,u,d,f,g,h,v,y,w,b;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=new P("Nextday Apply Actions"),i=m,s=r.productInfo,c=r.skuList,u=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;o.log("Applying action: ",JSON.stringify(e));var n=e.operator,r=e.type,a=e.applyEvent,c=e.contentSelector,u=e.selector,d=e.selectorFallback,h=e.mdCondition,m=e.move_selector_1,b=e.move_selector_2,k=e.replaceFn,x=e.pType;if("noop"!==n){var S=e.value;t=t?t.find(u):$(u);var I=!h||window.matchMedia(h).matches;if(!I)return o.failed("Media condition mismatch: ",h),!1;if(m&&!b||b&&!m)return o.failed("Both move selectors are required"),!1;if(m&&b){if(!$(m).length)return o.failed("Move selector 1 not found: ",m),!1;if(!$(b).length)return o.failed("Move selector 2 not found: ",b),!1}else{if(!u)return o.failed("Selector not specified"),!1;if(!t.length){if(!$(d).length&&"remove"===n)return;if("no-selector"!==u&&(o.failed("Selector not found: ",u),o.log("Trying fallback selector: ",d),d&&(t=$(d)),!t.length))return o.failed("Fallback selector not found"),!1}}if(k&&(S=Re(S,k,s)),"remove"===n)t.length?(o.log("Removing: ",u),t.remove()):o.log("Cannot found element with selector: ",u);else if("insert"===n)switch(r){case"before":o.log("Inserting before: ",S),String(S).includes("nd-add-to-win")&&$(".nd-add-to-win").remove(),t.before(S);break;case"after":o.log("Inserting after: ",S),t.after(S);break;case"append":o.log("Appending value: ",S),t.append(S);break;case"popup":if(0!==parseInt(sessionStorage.getItem(i))){o.log("Popup already displayed in session");break}if(o.log("Creating Popup: ",S),x&&(S=f(s,x,S)),y(S,c),a){var T,L=window.matchMedia(l).matches,P=qe(a);try{for(P.s();!(T=P.n()).done;){var A=T.value;switch(A){case"exitIntent":var D,C;o.log("Adding exit intent listener"),L?(window.top.addEventListener("visibilitychange",v),null!==(D=window.beagleInfoLayer)&&void 0!==D&&D.r.includes(null===(C=window.beagleInfoLayer)||void 0===C?void 0:C.d)||window.history&&"function"==typeof window.history.pushState&&(window.history.pushState("temp",""),window.top.addEventListener("popstate",v,{once:!0})),Ie(p,v)):window.top.document.documentElement.addEventListener("mouseleave",v,{once:!0});break;case"copyIntent":o.log("Adding copy intent listener"),window.top.document.documentElement.addEventListener("copy",v,{once:!0})}}}catch(e){P.e(e)}finally{P.f()}}else setTimeout((function(){v()}),timeout);break;default:o.failed("Type: ".concat(r," not found for operator: ").concat(n))}else if("edit"===n)switch(r){case"text":o.log("Editing text: ",S),t.text(S);break;case"html":o.log("Editing html: ",S),t.html(S);break;case"styleApplicator":o.log("Applying style: ",S);var O=JSON.parse(S);o.log("Style Changes Map: ",O),ve(t,O);break;case"addClass":o.log("addding class to ".concat(t," named ").concat(S)),t.addClass(S);break;case"removeClass":o.log("remove class from ".concat(t," named ").concat(S)),t.removeClass(S);break;case"documentTitle":if(o.log("changing document title from ".concat(t," to ").concat(S)),a){var E,_=qe(a);try{for(_.s();!(E=_.n()).done;){var N=E.value;"tabChange"==N&&function(){o.log("catching event tabchange..");var e=window.top.document.title;window.top.document.addEventListener("visibilitychange",(function(t){return g(t,S,e)}))}()}}catch(e){_.e(e)}finally{_.f()}}break;default:o.log("Unknown edit type: ",r)}else if("setattribute"===n)switch(o.log("Setting attribute: ",attribute,S),attribute){case"src":t.css("content","url(".concat(S.trim(),")"));break;case"style":var j=S.split(":")[0].trim(),R=S.split(":")[1].trim();t.css(j,R,"!important")}else if("replace"===n)o.log("Replacing: ",S),t.replaceAll(S);else if("swap"===n){o.log("Swapping: ",m,b);var U=window.top.document.querySelector(m),Q=window.top.document.querySelector(b);w(U,Q)}else if("injectscript"===n)o.log("Injecting script: ",S),t.append("<script>".concat(S,"<\/script>"));else if("move"===n){o.log("Moving ".concat(m," to ").concat(b));var q=window.top.document.querySelector(m),F=window.top.document.querySelector(b);q.remove(),F.prepend(q)}else if("productInfoLookup"===n){var J=f(s,x,S);t.before(J)}else"text-transform"===n?"capitalize"===r&&(t.innerText.includes("\n")&&(t.innerText=t.innerText.toLowerCase().split("\n").map((function(e){return e.split(" ").map((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})).join(" ")})).join("\n")),t.innerText=t.innerText.toLowerCase().split(" ").map((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})).join(" ")):o.failed("No such operator exists yet",n)}else o.failed("Noop Operator: No operation is applied on target ")},d=function(e,t){return e&&t.includes("{{REPLACE_PRODUCTINFO}}")&&(t=De(t,"{{REPLACE_PRODUCTINFO}}",e)),t},f=function(e,t,n){var r=null;if(!c||0===c.length)return o.log("No sku found"),null;var a=c[0];switch(t){case"transactionIn2Weeks":var i;r=d(null===(i=e[a].catalog.transactionIn2Weeks)||void 0===i?void 0:i.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","),n),o.log("Replacing transcationIn2Weeks ",e[a].catalog.transactionIn2Weeks);break;case"addToCartIn2Weeks":var s;r=d(null===(s=e[a].catalog.addToCartIn2Weeks)||void 0===s?void 0:s.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","),n),o.log("Replacing AddToCartCount ",e[a].catalog.addToCartIn2Weeks);break;case"productViewCount":var u;r=d(null===(u=e[a].catalog.productViewCount)||void 0===u?void 0:u.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","),n),o.log("Replacing productViewCount for",e[a].catalog.productViewCount);break;default:o.failed("no such type found for productInfoLookup operator: "+t)}return r},g=function(){var e=t(a().mark((function e(t,n,r){var o,i,s,c;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:o=Array.isArray(n)?n:[n],i=qe(o),e.prev=2,i.s();case 4:if((s=i.n()).done){e.next=18;break}if(c=s.value,!window.top.document.hidden){e.next=15;break}return window.top.document.title=c,e.next=10,xe(2e3);case 10:return window.top.document.title=r,e.next=13,xe(2e3);case 13:e.next=16;break;case 15:window.top.document.title=r;case 16:e.next=4;break;case 18:e.next=23;break;case 20:e.prev=20,e.t0=e.catch(2),i.e(e.t0);case 23:return e.prev=23,i.f(),e.finish(23);case 26:window.top.document.hidden?g(t,n,r):window.top.document.title=r;case 27:case"end":return e.stop()}}),e,null,[[2,20,23,26]])})));return function(t,n,r){return e.apply(this,arguments)}}(),h=function e(t){var n=t.target.id;n&&"nd-popup__wrapper"===n&&($("#nd-popup__wrapper").remove(),window.removeEventListener("click",e,!0),window.removeEventListener("touchend",e,!0))},v=function e(){if(!(window.top.document.hidden||parseInt(sessionStorage.getItem(i))>0)){sessionStorage.setItem(i,1);var t=window.top.document.querySelector("#grt-shadow-host");t&&(t.style.display="none"),window.top.document.getElementById("nd-popup__wrapper").style.display="block",window.addEventListener("click",h,!0),window.addEventListener("touchend",h,!0),window.top.document.documentElement.removeEventListener("mouseleave",e,{once:!0}),window.top.document.documentElement.removeEventListener("copy",e,{once:!0}),window.top.removeEventListener("visibilitychange",e),window.top.removeEventListener("popstate",e,{once:!0}),setTimeout((function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",h,!0),window.removeEventListener("touchend",h,!0)}),15e3)}},y=function(e,t){var n=window.top.document.createElement("div");n.classList.add("nd-popup__wrapper"),n.id="nd-popup__wrapper";var r=window.top.document.createElement("button");if(r.classList.add("nd-popup__button-close"),r.innerText="X",r.onclick=function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",h,!0)},t)for(var a=Array.from(window.top.document.querySelectorAll(t));e.includes("{{REPLACE}}")&&a.length>0;)e=e.replace("{{REPLACE}}",a.shift().src);var o=window.top.document.createElement("template");o.innerHTML=e.trim();var i=o.content.firstChild;i.appendChild(r),n.appendChild(i),$("#nd-popup__wrapper").remove(),window.top.document.body.appendChild(n)},w=function(e,t){var n,r,a=e.parentNode,o=t.parentNode;if(a&&o&&!a.isEqualNode(t)&&!o.isEqualNode(e)){for(var i=0;i<a.children.length;i++)a.children[i].isEqualNode(e)&&(n=i);for(var s=0;s<o.children.length;s++)o.children[s].isEqualNode(t)&&(r=s);a.isEqualNode(o)&&n<r&&r++,a.insertBefore(t,a.children[n]),o.insertBefore(e,o.children[r])}},b=function e(t){if(window.jQuery){var n,r=qe(t);try{for(r.s();!(n=r.n()).done;){var a=n.value;try{var i=!1;if(a.condition){var c,l=qe(Qe(a.condition,s));try{for(l.s();!(c=l.n()).done;){var d=c.value;if(!1===(i=u(a,d)))return!1}}catch(e){l.e(e)}finally{l.f()}}else i=u(a);if(!1===i)return!1}catch(e){return o.failed("Couldn't apply action ".concat(a," with error ").concat(e.message)),e}}}catch(e){r.e(e)}finally{r.f()}}else setTimeout((function(){e(t)}),10)},e.abrupt("return",b(n));case 13:case"end":return e.stop()}}),e)}))),Je.apply(this,arguments)}var Ge=function(e,t){return Je.apply(this,arguments)},Ve=new P("Nextday Counter Checker"),Be=function(e){Ve.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"pageView":return He(n,r);case"CABasketPrice":return We(n,r);default:return Ve.failed("No such operator",t),!1}},Me=function(e,t){try{switch(t){case"session":return sessionStorage.getItem(e);case"local":return localStorage.getItem(e);default:return Ve.failed("No such type",t),null}}catch(t){return Ve.failed("Could not get counter ".concat(e),t),null}},He=function(e,t){var n=parseInt(Me(v,"session"));return Ve.log("Page views counter value: ",n),null===n?(Ve.failed("Pageviews counter not found in session storage"),!1):we(n,e,parseInt(t))},We=function(e,t){var n=parseInt(Me(x,"local"));return Ve.log("Coupon applicable basket price counter value: ",n),null===n?(Ve.failed("Coupon applicable basket price counter not found in local storage"),!1):we(n,e,parseInt(t))},$e=new P("Nextday Element Checker"),ze=function(e){$e.log("Checking rule",JSON.stringify(e));var t,n=e.operator,r=e.condition,a=e.value,o=e.selector,i=e.selectorAll,s=e.selectorFallback,c=void 0===s?null:s,u=o;if(u&&!window.top.document.querySelector(u)&&(u=c||u),null===n)return we(window.top.document.querySelector(u),r,a);if(u&&!window.top.document.querySelector(u))return $e.failed("Selector not found on page"),!1;if(i&&!window.top.document.querySelectorAll(i))return $e.failed("Selector not found on page"),!1;switch(u?t=window.top.document.querySelector(u):i&&(t=Array.from(window.top.document.querySelectorAll(i))),n){case"text-number":var l;l=Array.isArray(t)?t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0):parseInt(window.top.document.querySelector(u).textContent.replace("TL","").replace(".",""));var d=parseInt(l);return we(d,r,a);case"classList":return we(Array.from(t.classList),r,a);case"count":var p=Array.isArray(t)?t.length:t?1:0;return we(p,r,a);case"style":var f=getComputedStyle(t),g=a.split(":")[0].trim(),h=a.split(":")[1].trim(),v=f[g];return we(v,r,h);default:return $e.failed("Operator not defined"),!1}},Ke=new P("Nextday Function Checker"),Ye=function(e,t){Ke.log("Checking rule",JSON.stringify(e));var n=t.productInfo,r=e.operator,a=e.condition,o=e.value,i=e.bindings;if(!r)return Ke.failed("Rule function not defined"),!1;var s={};"productInfo"==i&&(s={productInfo:n});var c=Function(r).bind(s)();return we(c,a,o)},Xe=new P("Nextday Session Checker"),Ze=function(e){Xe.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"duration":return et(n,r);case"history":return tt(n,r);default:return null}},et=function(e,t){var n=(Date.now()-function(){try{return new Date(parseInt(window.sessionStorage.getItem(g)))}catch(e){return Xe.failed("Could not get session timestamp",e),Date.now()}}())/1e3;return we(n,e,parseInt(t))},tt=function(e,t){var n,r=null===(n=window.sessionStorage.getItem(h))||void 0===n?void 0:n.split(",");return we(r,e,t)},nt=new P("Nextday Url Checker"),rt=function(e){nt.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("path"===t){var a=window.top.location.href,o=new URL(a).pathname;return nt.log("Checking path ".concat(o," matches rule path ").concat(r)),we(o,n,r)}},at=new P("Nextday Env Checker"),ot=function(e){at.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("device_type"===t){var a=window.matchMedia(l).matches?"mobile":"desktop";return we(a,n,r)}},it=new P("Nextday RandomPct Checker"),st=function(){var e=t(a().mark((function e(t){var n,r,o,i,s,c;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(it.log("Checking rule",JSON.stringify(t)),n=t.condition,r=t.value,o=t.salt){e.next=5;break}return it.failed("Salt is not defined"),e.abrupt("return",!1);case 5:return e.next=7,ke();case 7:return i=e.sent,e.next=10,ge(i+o);case 10:return s=e.sent,c=s,e.abrupt("return",we(c,n,r));case 13:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),ct=new P("Nextday ProductInfo Checker"),ut=function(e,t){ct.log("Checking rule",JSON.stringify(e));var n=e.operator,r=e.condition,a=e.value,o=null;if(null!=t&&t.skuList&&null!=t&&t.skuList.length)switch(n){case"transactionIn2Weeks":ct.log("Getting TransactionCount for sku ",t.skuList[0]),o=lt(t.skuList[0],t.productInfo);break;case"addToCartIn2Weeks":ct.log("Getting AddToCartCount for sku ",t.skuList[0]),o=dt(t.skuList[0],t.productInfo);break;case"productViewCount":ct.log("Getting productViewCount for sku ",t.skuList[0]),o=pt(t.skuList[0],t.productInfo)}else o=0;return we(o,r,a)},lt=function(e,t){var n,r;return e&&t&&t[e]?null===(n=t[e])||void 0===n||null===(r=n.catalog)||void 0===r?void 0:r.transactionIn2Weeks:-1},dt=function(e,t){var n,r;return e&&t&&t[e]?null===(n=t[e])||void 0===n||null===(r=n.catalog)||void 0===r?void 0:r.addToCartIn2Weeks:-1},pt=function(e,t){var n,r;return e&&t&&t[e]?null===(n=t[e])||void 0===n||null===(r=n.catalog)||void 0===r?void 0:r.productViewCount:-1};function ft(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return gt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?gt(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function gt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ht=new P("Nextday Rule Engine"),vt=function(){function e(t){i(this,e);var n=t.baseRuleSet,r=t.businessRuleSet,a=t.bindings,o=t.callback,s=void 0===o?null:o;this.baseRuleSet=n,this.businessRuleSet=r,this.callback=s,this.bindings=a}var n,r,o;return c(e,[{key:"checkRules",value:(o=t(a().mark((function e(){var t,n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=ft(this.baseRuleSet),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=12;break}return r=n.value,e.next=7,this.checkRule(r);case 7:if(e.sent){e.next=10;break}return e.abrupt("return",!1);case 10:e.next=3;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(1),t.e(e.t0);case 17:return e.prev=17,t.f(),e.finish(17);case 20:return e.abrupt("return",!0);case 21:case"end":return e.stop()}}),e,this,[[1,14,17,20]])}))),function(){return o.apply(this,arguments)})},{key:"checkBusinessRules",value:(r=t(a().mark((function e(){var t,n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=ft(this.businessRuleSet),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=12;break}return r=n.value,e.next=7,this.checkRule(r);case 7:if(!e.sent){e.next=10;break}return e.abrupt("return",r.businessRuleId);case 10:e.next=3;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(1),t.e(e.t0);case 17:return e.prev=17,t.f(),e.finish(17);case 20:return e.abrupt("return",null);case 21:case"end":return e.stop()}}),e,this,[[1,14,17,20]])}))),function(){return r.apply(this,arguments)})},{key:"checkRule",value:(n=t(a().mark((function e(t){var n,r,o,i;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=t.chain,r=t.chain_condition,o=t.type,i=null,e.t0=o,e.next="session"===e.t0?5:"counter"===e.t0?7:"element"===e.t0?9:"dataLayer"===e.t0?11:"url"===e.t0?13:"function"===e.t0?15:"environment"===e.t0?17:"random"===e.t0?19:"productInfoLookup"===e.t0?23:25;break;case 5:return i=Ze(t),e.abrupt("break",27);case 7:return i=Be(t),e.abrupt("break",27);case 9:return i=ze(t),e.abrupt("break",27);case 11:return i=Ee(t),e.abrupt("break",27);case 13:return i=rt(t),e.abrupt("break",27);case 15:return i=Ye(t,this.bindings),e.abrupt("break",27);case 17:return i=ot(t),e.abrupt("break",27);case 19:return e.next=21,st(t);case 21:return i=e.sent,e.abrupt("break",27);case 23:return i=ut(t,this.bindings),e.abrupt("break",27);case 25:return ht.failed("No such rule type: ".concat(o)),e.abrupt("return",null);case 27:if(!n){e.next=53;break}e.t1=r,e.next="and"===e.t1?31:"or"===e.t1?38:"xor"===e.t1?45:51;break;case 31:if(e.t2=i,!e.t2){e.next=36;break}return e.next=35,this.checkRule(n);case 35:e.t2=e.sent;case 36:return i=e.t2,e.abrupt("break",53);case 38:if(e.t3=i,e.t3){e.next=43;break}return e.next=42,this.checkRule(n);case 42:e.t3=e.sent;case 43:return i=e.t3,e.abrupt("break",53);case 45:return e.t4=i,e.next=48,this.checkRule(n);case 48:return e.t5=e.sent,i=e.t4!=e.t5,e.abrupt("break",53);case 51:return ht.failed("No such chain condition"),e.abrupt("break",53);case 53:return e.abrupt("return",i);case 54:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})}]),e}(),mt=new P("SegmentationComputer");function yt(e){return wt.apply(this,arguments)}function wt(){return(wt=t(a().mark((function e(t){var n,r,o,i,s,c;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:mt.log("Determining user segment"),n=0,r=Object.keys(t);case 2:if(!(n<r.length)){e.next=16;break}if(i=r[n],s=null===(o=t[i])||void 0===o?void 0:o.ruleSet){e.next=7;break}return e.abrupt("continue",13);case 7:return c=new vt({baseRuleSet:s,businessRuleSet:[],bindings:null}),e.next=10,c.checkRules();case 10:if(!e.sent){e.next=13;break}return mt.log("User segment matched: ".concat(i)),e.abrupt("return",i);case 13:n++,e.next=2;break;case 16:return mt.log("User segment not matched, returning default"),e.abrupt("return","default");case 18:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function bt(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return kt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?kt(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function kt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var xt=new P("Nextday Treatment Repository"),St=function(){function e(t){i(this,e);var n=t.treatments,r=t.treatmentWeights;this.treatments=n,this.treatmentWeights=r}var n,r,o;return c(e,[{key:"getMatchedTreatments",value:(o=t(a().mark((function e(){var t,n,r,o,i,s,c,u,l,d,p,f,g,h,v,m;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=this.treatmentWeights,e.next=3,yt(t);case 3:if(n=e.sent,r=this.treatments,!t){e.next=43;break}o=n&&t[n]?t[n]:t.default,i=bt(r),e.prev=8,i.s();case 10:if((s=i.n()).done){e.next=35;break}if((u=s.value).weight=(null===(c=o[null==u?void 0:u.id])||void 0===c?void 0:c.weight)||0,u.actions.some((function(e){return e.variants}))){e.next=15;break}return e.abrupt("continue",33);case 15:l=bt(u.actions),e.prev=16,l.s();case 18:if((d=l.n()).done){e.next=25;break}if((p=d.value).variants){e.next=22;break}return e.abrupt("continue",23);case 22:for(f=0,g=Object.keys(p.variants);f<g.length;f++)m=g[f],null!==(h=o[u.id])&&void 0!==h&&h.variants&&null!==(v=o[u.id])&&void 0!==v&&v.variants[m]&&(p.variants[m].weight=o[u.id].variants[m]);case 23:e.next=18;break;case 25:e.next=30;break;case 27:e.prev=27,e.t0=e.catch(16),l.e(e.t0);case 30:return e.prev=30,l.f(),e.finish(30);case 33:e.next=10;break;case 35:e.next=40;break;case 37:e.prev=37,e.t1=e.catch(8),i.e(e.t1);case 40:return e.prev=40,i.f(),e.finish(40);case 43:if(xt.log("".concat(r.length," treatments user group matched")),r.length){e.next=46;break}return e.abrupt("return",[]);case 46:return e.abrupt("return",r);case 47:case"end":return e.stop()}}),e,this,[[8,37,40,43],[16,27,30,33]])}))),function(){return o.apply(this,arguments)})}],[{key:"getTreatments",value:(r=t(a().mark((function e(){var t,n,r,o,i,s;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(xt.log("Loading treatments"),t="ND_Treatments",n=JSON.parse(window.sessionStorage.getItem(t)),r=null==n?void 0:n.treatments,o=null==n?void 0:n.timestamp,r&&o){e.next=13;break}return xt.failed("Treatments not found in local storage"),e.next=9,de();case 9:return r=e.sent,i={timestamp:Date.now(),treatments:r},window.sessionStorage.setItem(t,JSON.stringify(i)),e.abrupt("return",r);case 13:if(!o){e.next=23;break}if(!((Date.now()-o)/864e5>1)){e.next=23;break}return xt.failed("Treatments are expired"),e.next=19,de();case 19:return r=e.sent,s={timestamp:Date.now(),treatments:r},window.sessionStorage.setItem(t,JSON.stringify(s)),e.abrupt("return",r);case 23:return xt.success("Treatments are loaded from local storage"),e.abrupt("return",r);case 25:case"end":return e.stop()}}),e)}))),function(){return r.apply(this,arguments)})},{key:"getTreatmentWeights",value:(n=t(a().mark((function e(){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,pe();case 3:return e.abrupt("return",e.sent);case 6:e.prev=6,e.t0=e.catch(0),xt.warn(e.t0.message),this.treatmentWeights=null;case 10:case"end":return e.stop()}}),e,this,[[0,6]])}))),function(){return n.apply(this,arguments)})}]),e}(),It=St;function Tt(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Lt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Lt(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function Lt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Pt=new P("BeagleOnComponent"),At=function(){var e=t(a().mark((function e(n,r,o){var i,s,c,u,d,p,x,S,I,T,L,P,A,D,C,_,N,j,R,Q,q,J,G,B,M;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return M=function(){return M=t(a().mark((function e(t){var r,i,c,u,l,p,f,g,h,v,m,y,w,b,k,L,P,A,D,C,j,R,U,Q,q,F,J,G,B;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.id,i=t.actions,c=t.baseRuleSet,u=t.device,l=t.dependant_on_treatment,p=t.reapply_event,f=t.businessRuleSet,g=t.weight,h=t.delay,v=t.productInfoStorage,!s||s.includes(r)){e.next=3;break}return e.abrupt("return");case 3:if("mobile"!==u||d){e.next=6;break}return Pt.failed("Treatment device 'mobile' mismatch"),e.abrupt("return");case 6:if("desktop"!==u||!d){e.next=9;break}return Pt.failed("Treatment device 'desktop' mismatch"),e.abrupt("return");case 9:if(p){m=p,Array.isArray(p)||(m=[p]),Pt.log("Reapply event '".concat(p,"' found for treatment: ").concat(r)),y=Tt(m);try{for(y.s();!(w=y.n()).done;)b=w.value,(k=N[b]?N[b]:[]).includes(r)?Pt.log("Treatment already added for reapply event"):N[b]=[].concat(E(k),[r])}catch(e){y.e(e)}finally{y.f()}}if(v&&"basket"===v?(L=JSON.parse(sessionStorage.getItem(I)),P=JSON.parse(sessionStorage.getItem(T))):(L=JSON.parse(sessionStorage.getItem(x)),P=JSON.parse(sessionStorage.getItem(S))),D=new vt({baseRuleSet:c,businessRuleSet:f,bindings:A={productInfo:P,skuList:L}}),Pt.log("Starting base rule set check for treatment: "+r),e.t0=!c,e.t0){e.next=19;break}return e.next=18,D.checkRules();case 18:e.t0=e.sent;case 19:if(!e.t0){e.next=61;break}if(C=100===g?0:100-g||50,l&&(R=null===(j=_.find((function(e){return e.id===l})))||void 0===j?void 0:j.weight,C=100===R?0:100-R||50),Pt.log("Treatment skip ratio: "+C),U=l||r,1!==o){e.next=28;break}e.t1=100,e.next=31;break;case 28:return e.next=30,ge(n+U);case 30:e.t1=e.sent;case 31:if(Q=e.t1,Pt.log("TreatmentPct: "+Q+" with debug mode ".concat(o?"on":"off")),q=null,!f){e.next=40;break}return Pt.log("Starting sub variant rule set check for treatment: "+r),e.next=38,D.checkBusinessRules();case 38:(q=e.sent)?Pt.log("Applying business rule transformation with id: ",q):Pt.log("Applying treatment with default values");case 40:if(!(Q<C)){e.next=44;break}return Pt.log("Treatment ".concat(r," skipped due to treatment split ratio")),V(r,q,B,"skipped",l),e.abrupt("return");case 44:return e.next=46,ye(n,i,q);case 46:if(F=e.sent,J=O(F,2),G=J[0],B=J[1],!h){e.next=53;break}return e.next=53,h(h);case 53:return e.next=55,Ge(G,A);case 55:if(!1!==e.sent){e.next=59;break}return V(r,q,B,"failed"),e.abrupt("return");case 59:return V(r,q,B,"applied"),e.abrupt("return");case 61:Pt.failed("Rule check failed for treatment: ",r);case 62:case"end":return e.stop()}}),e)}))),M.apply(this,arguments)},B=function(e){return M.apply(this,arguments)},r.sendLogs(),i=window.location.search,s=null,o&&i.includes("filter=")&&(s=i.slice(i.indexOf("[")+1,i.lastIndexOf("]")).split(",").map((function(e){return parseInt(e,10)}))),me(),void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,H=v,W=m,$=f,z=g,K=h,Y=sessionStorage.getItem(H),X=sessionStorage.getItem(W),Z=sessionStorage.getItem($),ee=sessionStorage.getItem(z),te=sessionStorage.getItem(K),Y?sessionStorage.setItem(H,parseInt(Y)+1):sessionStorage.setItem(H,1),null===X&&sessionStorage.setItem(W,0),Z||sessionStorage.setItem($,crypto.randomUUID()),ee||sessionStorage.setItem(z,Date.now()),te?sessionStorage.setItem(K,[window.location.pathname,te]):sessionStorage.setItem(K,[window.location.pathname]),setTimeout((function(){le()}),2e3),c=It.getTreatments(),u=It.getTreatmentWeights(),d=window.matchMedia(l).matches,p={subtree:!0,childList:!0,attributes:!0},x=y,S=b,I=w,T=k,e.next=16,Promise.all([c,u]);case 16:return L=e.sent,P=O(L,2),A=P[0],D=P[1],Pt.success("Found treatments: ",A),C=new It({treatments:A,treatmentWeights:D}),F(U.TreatmentRepositoryCreated),e.next=25,C.getMatchedTreatments();case 25:if((_=e.sent).length){e.next=30;break}return Pt.log("No treatments matched, returning without further action"),le(),e.abrupt("return");case 30:N={},j=Tt(_),e.prev=32,j.s();case 34:if((R=j.n()).done){e.next=46;break}return Q=R.value,e.prev=36,e.next=39,B(Q);case 39:e.next=44;break;case 41:e.prev=41,e.t0=e.catch(36),Pt.failed("Error executing rules",e.t0);case 44:e.next=34;break;case 46:e.next=51;break;case 48:e.prev=48,e.t1=e.catch(32),j.e(e.t1);case 51:return e.prev=51,j.f(),e.finish(51);case 54:for(le(),F(U.TreatmentsApplied),Pt.success("Applied treatments: ",window.beagleInfoLayer.a),setInterval((function(){r.updateLatestChanges()}),1e3),q=function(){var e=G[J],t=N[e],n=_.filter((function(e){return t.includes(e.id)}));switch(e){case"infinite_scroll":var r=new ResizeObserver((function(){var e,t=Tt(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;Pt.log("Retrying treatment ".concat(r.id," from infinite_scroll")),B(r)}}catch(e){t.e(e)}finally{t.f()}}));r.observe(window.top.document.documentElement);break;case"timeout":setTimeout((function(){var e,t=Tt(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;Pt.log("Retrying treatment ".concat(r.id," from timeout")),B(r)}}catch(e){t.e(e)}finally{t.f()}}),500);break;case"element_change":var a,o=Tt(n);try{var i=function(){var e,t=a.value,n=Tt(Array.isArray(t.reapply_selector)?t.reapply_selector:[t.reapply_selector]);try{for(n.s();!(e=n.n()).done;){var r=e.value,o=window.top.document.querySelector(r);o&&new MutationObserver((function(){Pt.log("Retrying treatment ".concat(t.id," from element_change")),B(t)})).observe(o,p)}}catch(e){n.e(e)}finally{n.f()}};for(o.s();!(a=o.n()).done;)i()}catch(e){o.e(e)}finally{o.f()}break;case"on_scroll":window.onscroll=function(){var e,t=Tt(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;Pt.log("Retrying treatment ".concat(r.id," from on_scroll")),B(r)}}catch(e){t.e(e)}finally{t.f()}};break;case"query_search_change":var s=window.location.search,c=new MutationObserver((function(){if(window.location.search!==s){s=window.location.search;var e,t=Tt(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;Pt.log("Retrying treatment ".concat(r.id," from query_search_change")),B(r)}}catch(e){t.e(e)}finally{t.f()}}}));c.observe(document,p);break;default:Pt.failed("Reapply event not found: ",e)}},J=0,G=Object.keys(N);J<G.length;J++)q();F(U.ReapplyTreatmentListeners);case 61:case"end":return e.stop()}var H,W,$,z,K,Y,X,Z,ee,te}),e,null,[[32,48,51,54],[36,41]])})));return function(t,n,r){return e.apply(this,arguments)}}(),Dt=At;t(a().mark((function e(){var t,n,r,o,i,s,c,u,l,p;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return F(U.BeagleLoaded),t=null,n=null,r=new P,o="ND_TimeoutCount",i=0,r.info("Nextday initializing"),e.prev=7,H(),s=be(),t=new Ae,F(U.Initialized),e.next=14,ke();case 14:return c=e.sent,r.log("Found cookie identifier: ",c),e.next=18,ge(c);case 18:if(u=e.sent,J("onHashPct",u),s){e.next=31;break}if(-1!==u){e.next=23;break}throw new Error("Could not determine cookie pct");case 23:if(Se()){e.next=25;break}throw new Error("sendBeacon is not supported");case 25:if(!((i=parseInt(sessionStorage.getItem(o))||0)>1)){e.next=29;break}throw F(U.TimeoutThresholdReached),new Error("Nextday timeout threshold reached");case 29:e.next=33;break;case 31:r.info("Debug mode on: all applicable treatments will be applied"),window.localStorage.setItem(I,!0);case 33:return e.next=35,z();case 35:if(l=e.sent,p=l.vvsIsShowroom,window.top.document.documentElement.classList.contains("nextDay-hide")){e.next=41;break}throw F(U.ScriptTimeOut),sessionStorage.setItem(o,i+1),new Error("Nextday script timed out");case 41:if(!p||"true"!==p){e.next=46;break}throw window.localStorage.setItem(I,!0),new Error("User is from VVS showroom/callcenter");case 46:if(null!=p){e.next=48;break}throw new Error("Could not determine if user is from VVS showroom/callcenter");case 48:if("true"===window.localStorage.getItem(I)?(r.warn("User is out of scope"),n=!!s||u>=d):(J("isOn",n=u>=d),window.dataLayer=window.dataLayer||[],window.dataLayer.push({event:"GLOV",GLOV_ON:n.toString()}),F(U.UserOnOff)),!1!==n){e.next=52;break}throw new Error("Control group: no treatments applied");case 52:r.log("Found cookie percentage: ",u),r.log("Split_ratio: ",d),r.log("cookiePct < SPLIT_RATIO",u<d),r.info("Control group ratio: ".concat(d,"%")),Dt(c,t,s),e.next=64;break;case 59:e.prev=59,e.t0=e.catch(7),le(),r.warn("Nextday: ",e.t0.message),t.sendLogs(e.t0.message,!0);case 64:case"end":return e.stop()}}),e,null,[[7,59]])})))()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MWpCLE9BQU9DLGFBQWFnSSxRQUFRckksR0FBaUMsR0FDdkQsSUFBSTdJLE1BQU0sd0NBM0RyQixpQkE0RGMyc0IsRUE1RGQsdUJBNkRXLElBQUkzc0IsTUFBTSwrREE3RHJCLFdBaUV3QixTQURBaUosT0FBT0MsYUFBYUMsUUFBUU4sSUFFL0NrRCxFQUFPdkMsS0FBSyx3QkFFWitpQixJQUFPMUMsR0FBbUI2QyxHQUFhaGtCLElBSXZDNEQsRUFBcUIsT0FEckJpZ0IsRUFBT0csR0FBYWhrQixHQUVwQk8sT0FBTzRJLFVBQVk1SSxPQUFPNEksV0FBYSxHQUN2QzVJLE9BQU80SSxVQUFVdE8sS0FBSyxDQUFDOGUsTUFBTyxPQUFReUssUUFBU1AsRUFBS3RpQixhQUVwRCtCLEVBQVdsQixFQUFZTyxhQUdaLElBQVRraEIsRUEvRVAsdUJBK0U2QixJQUFJdnNCLE1BQU0sd0NBL0V2QyxRQWlGRytMLEVBQU8xQyxJQUFJLDRCQUE2QnFqQixHQUN4QzNnQixFQUFPMUMsSUFBSSxnQkFBaUJYLEdBQzVCcUQsRUFBTzFDLElBQUksMEJBQTJCcWpCLEVBQVloa0IsR0FDbERxRCxFQUFPcEosS0FBUCwrQkFBb0MrRixFQUFwQyxNQU9BaWhCLEdBQVNoUSxFQUFZaVEsRUFBU0MsR0EzRmpDLGtEQTZGRzlRLEtBQ0FoTixFQUFPdkMsS0FBSyxZQUFhLEtBQUkrVSxTQUM3QnFMLEVBQVFzQixTQUFTLEtBQUkzTSxTQUFTLEdBL0ZqQyx5REFBRCxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9sb2dnZXIuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhIb2xlcy5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVSZXN0LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhvdXRIb2xlcy5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvQmVhZ2xlSW5mb0xheWVyL2luZGV4LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9OZXh0ZGF5TW9uaXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL3N0cmluZ1V0aWxzLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvTmV4dGRheVJ1bGVFbmdpbmUvZGF0YUxheWVyQ2hlY2tlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlBcHBseUFjdGlvbnMvcmVwbGFjZS11dGlscy5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlBcHBseUFjdGlvbnMvYWN0aW9uLWNvbmRpdGlvbi11dGlsLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvTmV4dGRheUFwcGx5QWN0aW9ucy9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlSdWxlRW5naW5lL2NvdW50ZXJDaGVja2VyLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvTmV4dGRheVJ1bGVFbmdpbmUvZWxlbWVudENoZWNrZXIuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9OZXh0ZGF5UnVsZUVuZ2luZS9mdW5jdGlvbkNoZWNrZXIuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9OZXh0ZGF5UnVsZUVuZ2luZS9zZXNzaW9uQ2hlY2tlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlSdWxlRW5naW5lL3VybENoZWNrZXIuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9OZXh0ZGF5UnVsZUVuZ2luZS9lbnZDaGVja2VyLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvTmV4dGRheVJ1bGVFbmdpbmUvcmFuZG9tTnVtYmVyQ2hlY2tlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlSdWxlRW5naW5lL3Byb2R1Y3RJbmZvQ2hlY2tlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlSdWxlRW5naW5lL2luZGV4LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvQmVhZ2xlSW5mb0xheWVyL3NlZ21lbnQtY29tcHV0ZXIuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9OZXh0ZGF5VHJlYXRtZW50UmVwb3NpdG9yeS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL0JlYWdsZU9uL2luZGV4LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvTmV4dGRheUNsaWVudFNESy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgZGVmaW5lKEl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBkZWZpbmUoR3AsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb24pO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIGRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSwgYXN5bmNJdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBkZWZpbmUoR3AsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgZGVmaW5lKEdwLCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9KTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCBpbiBtb2Rlcm4gZW5naW5lc1xuICAvLyB3ZSBjYW4gZXhwbGljaXRseSBhY2Nlc3MgZ2xvYmFsVGhpcy4gSW4gb2xkZXIgZW5naW5lcyB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBnbG9iYWxUaGlzLnJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG4gIH0gZWxzZSB7XG4gICAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbiAgfVxufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0ZnVuY3Rpb24oKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG5cdFx0ZnVuY3Rpb24oKSB7IHJldHVybiBtb2R1bGU7IH07XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7IH0iLCJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgfSwgX3R5cGVvZihvYmopO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59IiwiLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuaW1wb3J0IHtyZXBsYWNlQWxsfSBmcm9tIFwiLi9zdHJpbmdVdGlsc1wiO1xuXG5leHBvcnQgY29uc3QgQ09PS0lFX05BTUUgPSBcIl9nYVwiO1xuLy8gVE9ETyByZXZlcnQgdGhlIGZvbGxvd2luZyBzdGFnaW5nIGVudiBjaGVjayBhZnRlciBtb3ZpbmcgdG8gbmV3IGJyYW5jaCBzdHJ1Y3R1cmVcbmV4cG9ydCBjb25zdCBUUkVBVE1FTlRTX0xPQ0FUSU9OID0gXCJodHRwczovL2hvc3QtYjk2LnBhZ2VzLmRldi90cmVhdG1lbnRzLmpzb25cIjtcbmV4cG9ydCBjb25zdCBUUkVBVE1FTlRfV0VJR0hUU19MT0NBVElPTiA9IFwiaHR0cHM6Ly9ob3N0LWI5Ni5wYWdlcy5kZXYvd2VpZ2h0cy5qc29uXCI7XG5leHBvcnQgY29uc3QgU1RZTEVTSEVFVF9MT0NBVElPTiA9IFwiaHR0cHM6Ly9ob3N0LWI5Ni5wYWdlcy5kZXYvbmQtc3R5bGVzLmNzc1wiO1xuZXhwb3J0IGNvbnN0IExPR19BUElfVVJMID0gXCJodHRwczovL2V1cm9wZS13ZXN0My1uZXh0ZGF5LTM0ZWIzLmNsb3VkZnVuY3Rpb25zLm5ldC9hcGkvbG9nUmVzcG9uc2VcIjtcbmV4cG9ydCBjb25zdCBMT09LVVBfQVBJX1VSTCA9IFwiaHR0cHM6Ly9jYXRhbG9nLWFwaS5hZG9yYWFpLmNvbVwiO1xuZXhwb3J0IGNvbnN0IE1PQklMRV9NRURJQV9RVUVSWSA9IFwiKG1heC13aWR0aDogNDQwcHgpXCI7XG4vLyBDb250cm9sIGdyb3VwIHBlcmNlbnRhZ2VcbmV4cG9ydCBjb25zdCBTUExJVF9SQVRJTyA9IDUwO1xuLy8gU2tpcHBlZCB0cmVhdG1lbnQgcGVyY2VudGFnZVxuZXhwb3J0IGNvbnN0IFRSRUFUTUVOVF9SQVRJTyA9IDUwO1xuZXhwb3J0IGNvbnN0IFRSRUFUTUVOVFNfRFVSQVRJT04gPSAxO1xuZXhwb3J0IGNvbnN0IE1BWF9USU1FT1VUX1BFUl9TRVNTSU9OID0gMTtcbmV4cG9ydCBjb25zdCBMSVNUX01PREVfQkVBR0xFX0tFWVMgPSBbXCJwYWdldHlwZVwiLCBcImNhdGVnb3J5XCIsIFwiYWxsdGltZVBMUENhdGVnb3J5TW9kZVwiLCBcInNlc3Npb25QTFBDYXRlZ29yeU1vZGVcIixcbiAgXCJhbGx0aW1lUERQQ2F0ZWdvcnlNb2RlXCIsIFwic2Vzc2lvblBEUENhdGVnb3J5TW9kZVwiLCBcImFsbHRpbWVDYXJ0Q2F0ZWdvcnlNb2RlXCIsIFwic2Vzc2lvbkNhcnRDYXRlZ29yeU1vZGVcIl07XG4gIC8vIFRPRE8gc2V0IHRvIDEyMDAwMChtcykgYmVmb3JlIGdvIGxpdmVcbmV4cG9ydCBjb25zdCBJRExFX1RJTUVPVVQgPSAxNTAwMDtcblxuZXhwb3J0IGNvbnN0IFNFU1NJT05fU1RPUkFHRV9LRVlTID0ge1xuICBTRVNTSU9OX0lEOiBcIl9fbmV4dGRheV9zZXNzaW9uX2lkXCIsXG4gIFNFU1NJT05fVElNRVNUQU1QOiBcIk5EX1Nlc3Npb25UaW1lc3RhbXBcIixcbiAgU0VTU0lPTl9ISVNUT1JZOiBcIkJOX1Nlc3Npb25IaXN0b3J5XCIsXG4gIFRSRUFUTUVOVFM6IFwiTkRfVHJlYXRtZW50c1wiLFxuICBQQUdFX1ZJRVdTOiBcIk5EX1BhZ2VWaWV3c1wiLFxuICBQT1BVUF9ESVNQTEFZX0ZMQUc6IFwiTkRfUG9wdXBEaXNwbGF5RmxhZ1wiLFxuICBORF9TS1VfTElTVDogXCJORF9Ta3VMaXN0TGlzdFwiLFxuICBORF9TS1VfTElTVF9CQVNLRVQ6IFwiTkRfU2t1TGlzdEJhc2tldFwiLFxuICBORF9TS1VfSU5GTzogXCJORF9Qcm9kdWN0SW5mb0xpc3RcIixcbiAgTkRfU0tVX0lORk9fQkFTS0VUOiBcIk5kX1Byb2R1Y3RJbmZvQmFza2V0XCIsXG4gIFRJTUVPVVRfQ09VTlQ6IFwiTkRfVGltZW91dENvdW50XCIsXG59O1xuZXhwb3J0IGNvbnN0IExPQ0FMX1NUT1JBR0VfS0VZUyA9IHtcbiAgQ09VUE9OX0FQUExJQ0FCTEVfQkFTS0VUX1BSSUNFOiBcIk5EX0NBQmFza2V0UHJpY2VcIixcbiAgTkRfREVCVUdfTU9ERTogXCJORF9EZWJ1Z1wiLFxuICBPVVRfT0ZfU0NPUEU6IFwiTkRfT3V0T2ZTY29wZVwiLFxuICBVU0VSX0lEOiBcIk5EX1VzZXJJZFwiLFxufTtcblxuZXhwb3J0IGNvbnN0IENVU1RPTV9TVE9SQUdFX1BSRUZJWCA9IFwiTkRfU2VnX1wiO1xuIiwiaW1wb3J0IHtMT0NBTF9TVE9SQUdFX0tFWVN9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuY2xhc3MgTG9nZ2VyIHtcbiAgY29uc3RydWN0b3Iob3JpZ2luID0gXCJOZXh0ZGF5IENsaWVudCBTREtcIikge1xuICAgIHRoaXMub3JpZ2luID0gb3JpZ2luO1xuICAgIHRoaXMuREVCVUcgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oTE9DQUxfU1RPUkFHRV9LRVlTLk5EX0RFQlVHX01PREUpO1xuICB9XG5cbiAgaW5mbyguLi5hcmdzKSB7XG4gICAgY29uc3Qge29yaWdpbn0gPSB0aGlzO1xuICAgIGNvbnNvbGUuaW5mbyhgWyR7b3JpZ2lufV1gLCAuLi5hcmdzKTtcbiAgfVxuXG4gIGxvZyguLi5hcmdzKSB7XG4gICAgY29uc3Qge0RFQlVHLCBvcmlnaW59ID0gdGhpcztcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBbJHtvcmlnaW59XWAsIC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIGZhaWxlZCguLi5hcmdzKSB7XG4gICAgY29uc3Qge0RFQlVHLCBvcmlnaW59ID0gdGhpcztcbiAgICBpZiAoIURFQlVHKSByZXR1cm47XG4gICAgbGV0IG1lc3NhZ2VDb25maWcgPSBcIiVjJXMgICBcIjtcblxuICAgIGFyZ3MuZm9yRWFjaCgoYXJndW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgYXJndW1lbnQ7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcImJpZ2ludFwiOlxuICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgbWVzc2FnZUNvbmZpZyArPSBcIiVkICAgXCI7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgIG1lc3NhZ2VDb25maWcgKz0gXCIlcyAgIFwiO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIG1lc3NhZ2VDb25maWcgKz0gXCIlbyAgIFwiO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2VDb25maWcsIFwiY29sb3I6IHJlZFwiLCBgWyR7b3JpZ2lufV1gLCAuLi5hcmdzKTtcbiAgfVxuXG4gIHN1Y2Nlc3MoLi4uYXJncykge1xuICAgIGNvbnN0IHtERUJVRywgb3JpZ2lufSA9IHRoaXM7XG4gICAgaWYgKCFERUJVRykgcmV0dXJuO1xuICAgIGxldCBtZXNzYWdlQ29uZmlnID0gXCIlYyVzICAgXCI7XG5cbiAgICBhcmdzLmZvckVhY2goKGFyZ3VtZW50KSA9PiB7XG4gICAgICBjb25zdCB0eXBlID0gdHlwZW9mIGFyZ3VtZW50O1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgIG1lc3NhZ2VDb25maWcgKz0gXCIlZCAgIFwiO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICBtZXNzYWdlQ29uZmlnICs9IFwiJXMgICBcIjtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBtZXNzYWdlQ29uZmlnICs9IFwiJW8gICBcIjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZyhtZXNzYWdlQ29uZmlnLCBcImNvbG9yOiBncmVlblwiLCBgWyR7b3JpZ2lufV1gLCAuLi5hcmdzKTtcbiAgfVxuXG4gIHdhcm4oLi4uYXJncykge1xuICAgIGNvbnN0IHtvcmlnaW59ID0gdGhpcztcbiAgICBjb25zb2xlLndhcm4oYFske29yaWdpbn1dYCwgLi4uYXJncyk7XG4gIH1cblxuICBlcnJvciguLi5hcmdzKSB7XG4gICAgY29uc3Qge29yaWdpbn0gPSB0aGlzO1xuICAgIGNvbnNvbGUuZXJyb3IoYFske29yaWdpbn1dYCwgLi4uYXJncyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTG9nZ2VyO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59IiwiaW1wb3J0IGFycmF5V2l0aEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aEhvbGVzLmpzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5TGltaXQgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5TGltaXQuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlUmVzdCBmcm9tIFwiLi9ub25JdGVyYWJsZVJlc3QuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdO1xuXG4gIGlmIChfaSA9PSBudWxsKSByZXR1cm47XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuXG4gIHZhciBfcywgX2U7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufSIsImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhvdXRIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlU3ByZWFkIGZyb20gXCIuL25vbkl0ZXJhYmxlU3ByZWFkLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuaW1wb3J0IHtleHRyYWN0Q29va2llSWRlbnRpZmllcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQge0xPT0tVUF9BUElfVVJMLCBMT0NBTF9TVE9SQUdFX0tFWVMsIFNFU1NJT05fU1RPUkFHRV9LRVlTLCBTUExJVF9SQVRJT30gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyXCI7XG5cbndpbmRvdy5iZWFnbGVJbmZvTGF5ZXIgPSB3aW5kb3cuYmVhZ2xlSW5mb0xheWVyIHx8IHtcbiAgY2hlY2twb2ludHM6IFtdLFxuICBhOiB7fSwgZToge30sIGY6IHt9LFxufTtcblxuZXhwb3J0IGNvbnN0IGNoZWNrcG9pbnRzID0ge1xuICBCZWFnbGVMb2FkZWQ6IDEsXG4gIEluaXRpYWxpemVkOiAyLFxuICBVc2VyT25PZmY6IDMsXG4gIFNjcmlwdFRpbWVPdXQ6IDcsXG4gIFRyZWF0bWVudFJlcG9zaXRvcnlDcmVhdGVkOiA0LFxuICBUcmVhdG1lbnRzQXBwbGllZDogNSxcbiAgUmVhcHBseVRyZWF0bWVudExpc3RlbmVyczogNixcbiAgVGltZW91dFRocmVzaG9sZFJlYWNoZWQ6IDgsXG59O1xuXG5jb25zdCBPQlNFUlZFUl9DT05GSUcgPSB7c3VidHJlZTogdHJ1ZSwgY2hpbGRMaXN0OiB0cnVlLCBhdHRyaWJ1dGVzOiB0cnVlfTtcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIkJlYWdsZUluZm9MYXllclwiKTtcblxuZXhwb3J0IGNvbnN0IGNoZWNrcG9pbnQgPSAoY2hlY2twb2ludCkgPT4ge1xuICB0cnkge1xuICAgIGxvZ2dlci5sb2coYENoZWNrcG9pbnQ6ICcke2NoZWNrcG9pbnR9JyBSZWFjaGVkIWApO1xuICAgIHdpbmRvdy5iZWFnbGVJbmZvTGF5ZXIuY2hlY2twb2ludHMucHVzaCh7XG4gICAgICBjaGVja3BvaW50OiBPYmplY3Qua2V5cyhjaGVja3BvaW50cykuZmluZCgoa2V5KSA9PiBjaGVja3BvaW50c1trZXldID09PSBjaGVja3BvaW50KSxcbiAgICAgIGlkOiBjaGVja3BvaW50LFxuICAgICAgdGltZTogRGF0ZS5ub3coKSxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZ2dlci53YXJuKGUpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgYWRkVG9CZWFnbGVJbmZvTGF5ZXIgPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICBjb25zdCBpbmZvTGF5ZXIgPSB3aW5kb3cudG9wLmJlYWdsZUluZm9MYXllcjtcblxuICBpZiAoa2V5ID09PSBudWxsIHx8IGtleSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgLy8gaWYga2V5IGNvbnRhaW5zIC4gY3JlYXRlIG5lc3RlZCBvYmplY3RcbiAgaWYgKGtleS5pbmRleE9mKFwiLlwiKSA+IC0xKSB7XG4gICAgY29uc3Qga2V5cyA9IGtleS5zcGxpdChcIi5cIik7XG4gICAgY29uc3QgbGFzdEtleSA9IGtleXMucG9wKCk7XG4gICAgbGV0IG9iaiA9IGluZm9MYXllcjtcbiAgICBrZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKCFvYmpba2V5XSkgb2JqW2tleV0gPSB7fTtcbiAgICAgIG9iaiA9IG9ialtrZXldO1xuICAgIH0pO1xuICAgIC8vIGlmIHZhbHVlIGlzIGFycmF5LCBhZGQgYXMgYW4gYXJyYXksIGlmIG9iamVjdCBhZGQgYXMgb2JqZWN0LCBvdGhlcndpc2UgYWRkIGFzIGEgc3RyaW5nXG4gICAgb2JqW2xhc3RLZXldID0gdHlwZW9mICh2YWx1ZSkgPT09IFwib2JqZWN0XCIgPyB2YWx1ZSA6IHZhbHVlLnRvU3RyaW5nKCkudHJpbSgpO1xuICB9IGVsc2Uge1xuICAgIGluZm9MYXllcltrZXldID0gdHlwZW9mICh2YWx1ZSkgPT09IFwib2JqZWN0XCIgPyB2YWx1ZSA6IHZhbHVlLnRvU3RyaW5nKCkudHJpbSgpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RnJvbUJlYWdsZUluZm9MYXllciA9IChrZXksIGJsb2NraW5nID0gZmFsc2UsIHBvbGxJbnRlcnZhbCA9IDEwLCB0aW1lb3V0ID0gMTAwMDApID0+IHtcbiAgY29uc3QgaW5mb0xheWVyID0gd2luZG93LnRvcC5iZWFnbGVJbmZvTGF5ZXI7XG4gIGlmIChrZXkgPT09IG51bGwgfHwga2V5ID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgaWYgKGluZm9MYXllciAmJiBpbmZvTGF5ZXJba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShpbmZvTGF5ZXJba2V5XSk7XG4gIH1cbiAgaWYgKGJsb2NraW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgaWYgKGluZm9MYXllciAmJiBpbmZvTGF5ZXJba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICAgICAgcmVzb2x2ZShpbmZvTGF5ZXJba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHBvbGxJbnRlcnZhbCk7XG4gICAgICAvLyBhZGQgdGltZW91dFxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgfSwgdGltZW91dCk7IC8vIHdhaXQgYmxvY2tpbmcgZm9yIFwidGltZW91dFwiIG1zZWNzXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbn07XG5cbmV4cG9ydCBjb25zdCByZW1vdmVGcm9tQmVhZ2xlSW5mb0xheWVyID0gKGtleSkgPT4ge1xuICBjb25zdCBpbmZvTGF5ZXIgPSB3aW5kb3cudG9wLmJlYWdsZUluZm9MYXllcjtcbiAgaWYgKGtleSA9PT0gbnVsbCB8fCBrZXkgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICBkZWxldGUgaW5mb0xheWVyW2tleV07XG59O1xuXG5leHBvcnQgY29uc3QgYWRkVHJlYXRtZW50ID0gKGlkLCBidXNpbmVzc1J1bGVJZCwgdmFyaWFudCwgc3RhdHVzLCBkZXBlbmRhbnRfb25fdHJlYXRtZW50ID0gbnVsbCkgPT4ge1xuICBjb25zdCB2YWx1ZSA9IHt9O1xuICBpZiAoYnVzaW5lc3NSdWxlSWQpIHZhbHVlLmJ1c2luZXNzUnVsZUlkID0gYnVzaW5lc3NSdWxlSWQ7XG4gIGlmICh2YXJpYW50KSB2YWx1ZS52YXJpYW50ID0gdmFyaWFudDtcblxuICBzd2l0Y2ggKHN0YXR1cykge1xuICAgIGNhc2UgXCJhcHBsaWVkXCI6XG4gICAgICB3aW5kb3cuYmVhZ2xlSW5mb0xheWVyLmFbaWRdID0gdmFsdWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic2tpcHBlZFwiOlxuICAgICAgdmFsdWUuZGVwZW5kYW50X29uX3RyZWF0bWVudCA9IGRlcGVuZGFudF9vbl90cmVhdG1lbnQ7XG4gICAgICB3aW5kb3cuYmVhZ2xlSW5mb0xheWVyLmVbaWRdID0gdmFsdWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZmFpbGVkXCI6XG4gICAgICB3aW5kb3cuYmVhZ2xlSW5mb0xheWVyLmZbaWRdID0gdmFsdWU7XG4gICAgICBicmVhaztcbiAgfVxufTtcblxuY29uc3QgUEFSU0VTRUFSQ0hNQVhSRVRSWSA9IDEwO1xuY29uc3QgUEFSU0VTRUFSQ0hTVEFSVERFTEFZID0gMTA7XG5sZXQgcGFyc2VTZWFyY2hQYXRoc0RlbGF5ID0gUEFSU0VTRUFSQ0hTVEFSVERFTEFZO1xubGV0IHBhcnNlU2VhcmNoUGF0aHNSZXRyeSA9IDA7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplQmVhZ2xlSW5mb0xheWVyID0gYXN5bmMgKCkgPT4ge1xuICBsb2dnZXIubG9nKFwiSW5pdGlhbGl6aW5nIGJlYWdsZUluZm9MYXllclwiKTtcblxuICAvLyBDb2xsZWN0IGNvcmUgZGF0YVxuICBwcmVwYXJlQ29yZURhdGEoKTtcblxuICAvLyBUcmlnZ2VyLXN0YXJ0IHRoZSBwYXJzZXIgbG9vcFxuICBwYXJzZXJDYWxsZXIoKTtcblxuICAvLyBDb2xsZWN0IFNLVSBkZXRhaWxzIGZyb20gQVBJXG4gIHByb2R1Y3RJbmZvTG9va3VwKCk7XG5cbiAgLy8gVE9ETyAtLSBhZGQgc2VnbWVudGF0aW9uIGhlcmVcbiAgLy8gU2NhbiBiZWFnbGVJbmZvTGF5ZXIgYWNjb3JkaW5nIHRvIHJ1bGUgc2V0LCBhbmQgcGVybWFuZW50bHkgc3RvcmUgdmFscyBpbiBuZXcgdmFyaWFibGVzXG59O1xuXG5jb25zdCBjcml0aWNhbEVsZW1lbnRzID0gW1xuICBcIlBhZ2VUeXBlXCIsXG4gIFwidnZzSXNTaG93cm9vbVwiLFxuXTtcblxuZXhwb3J0IGNvbnN0IGdldENyaXRpY2FsRWxlbWVudHMgPSBhc3luYyAoKSA9PiB7XG4gIGxvZ2dlci5sb2coXCJnZXRDcml0aWNhbEVsZW1lbnRzOiBJbml0aWFsaXppbmdcIik7XG4gIGNvbnN0IGNlbHRzID0ge307XG4gIGNvbnN0IGNyaXRpY2FsRWxlbWVudHNQcm9taXNlcyA9IGNyaXRpY2FsRWxlbWVudHMubWFwKChlbGVtZW50KSA9PiBnZXRGcm9tQmVhZ2xlSW5mb0xheWVyKGVsZW1lbnQsIHRydWUpKTtcbiAgY29uc3QgY3JpdGljYWxFbGVtZW50c1ZhbHVlcyA9IGF3YWl0IFByb21pc2UuYWxsKGNyaXRpY2FsRWxlbWVudHNQcm9taXNlcyk7XG4gIGNyaXRpY2FsRWxlbWVudHNWYWx1ZXMuZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgY2VsdHNbY3JpdGljYWxFbGVtZW50c1tpbmRleF1dID0gdmFsdWU7XG4gIH0pO1xuICBsb2dnZXIubG9nKFwiZ2V0Q3JpdGljYWxFbGVtZW50czogQ29sbGVjdGVkIGVsZW1lbnRzOiBcIiArIEpTT04uc3RyaW5naWZ5KGNlbHRzKSk7XG4gIHJldHVybiBjZWx0cztcbn07XG5cbmNvbnN0IHNlYXJjaFBhdGhzID0gW1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEdBIERhdGEgTGF5ZXIgUXVlcmllc1xuICB7UGFnZVR5cGVEZXBlbmQ6IFwiKlwiLCBtZXRob2Q6IFwiR0FEYXRhTGF5ZXJcIiwgc2VsZWN0b3I6IFwiUGFnZVR5cGVcIiwgbmFtZTogXCJQYWdlVHlwZVwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIipcIiwgbWV0aG9kOiBcIkdBRGF0YUxheWVyXCIsIHNlbGVjdG9yOiBcImlzQWRtaW5cIiwgbmFtZTogXCJ2dnNJc1Nob3dyb29tXCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiKlwiLCBtZXRob2Q6IFwiR0FEYXRhTGF5ZXJcIiwgc2VsZWN0b3I6IFwidXNlcklkXCIsIG5hbWU6IFwidnZzVXNlcklkXCJ9LFxuXG4gIHtQYWdlVHlwZURlcGVuZDogXCJQcm9kdWN0cGFnZXxMaXN0aW5ncGFnZVwiLCBtZXRob2Q6IFwiR0FEYXRhTGF5ZXJcIiwgc2VsZWN0b3I6IFwiY29udGVudF9uYW1lXCIsIG5hbWU6IFwiY29udGVudF9uYW1lXCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiUHJvZHVjdHBhZ2V8TGlzdGluZ3BhZ2VcIiwgbWV0aG9kOiBcIkdBRGF0YUxheWVyXCIsIHNlbGVjdG9yOiBcImNvbnRlbnRfdHlwZVwiLCBuYW1lOiBcImNvbnRlbnRfdHlwZVwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIlByb2R1Y3RwYWdlfExpc3RpbmdwYWdlXCIsIG1ldGhvZDogXCJHQURhdGFMYXllclwiLCBzZWxlY3RvcjogXCJwcm9kdWN0Z3JvdXBcIiwgbmFtZTogXCJ2dnNQcm9kdWN0R3JvdXBcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJQcm9kdWN0cGFnZXxMaXN0aW5ncGFnZVwiLCBtZXRob2Q6IFwiR0FEYXRhTGF5ZXJcIiwgc2VsZWN0b3I6IFwidml2ZW5zZV9jYXRlZ29yeVwiLCBuYW1lOiBcInZ2c0NhdGVnb3J5XCJ9LFxuXG4gIHtQYWdlVHlwZURlcGVuZDogXCJQcm9kdWN0cGFnZVwiLCBtZXRob2Q6IFwiR0FEYXRhTGF5ZXJcIiwgc2VsZWN0b3I6IFwiY29udGVudF9pZHNcIiwgbmFtZTogXCJjb250ZW50X2lkc1wiLCB0cmlnZ2VyOiBcInVwZGF0ZUFjdGl2ZVNLVUxpc3RcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJQcm9kdWN0cGFnZVwiLCBtZXRob2Q6IFwiR0FEYXRhTGF5ZXJcIiwgc2VsZWN0b3I6IFwiY29udGVudF9jYXRlZ29yeVwiLCBuYW1lOiBcImNvbnRlbnRfY2F0ZWdvcnlcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJQcm9kdWN0cGFnZVwiLCBtZXRob2Q6IFwiR0FEYXRhTGF5ZXJcIiwgc2VsZWN0b3I6IFwiaXNfc2hvd3Jvb21fcHJvZHVjdFwiLCBuYW1lOiBcImlzX3Nob3dyb29tX3Byb2R1Y3RcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJQcm9kdWN0cGFnZVwiLCBtZXRob2Q6IFwiR0FEYXRhTGF5ZXJcIiwgc2VsZWN0b3I6IFwiZWNvbW1lcmNlLmRldGFpbC5hY3Rpb25GaWVsZC5saXN0XCIsIG5hbWU6IFwiZ2FMaXN0aW5nTmFtZVwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIlByb2R1Y3RwYWdlXCIsIG1ldGhvZDogXCJHQURhdGFMYXllclwiLCBzZWxlY3RvcjogXCJ2aXZlbnNlUHJvZHVjdHNcIiwgbmFtZTogXCJ2dnNQRFBQcm9kdWN0XCIsIG9wZXJhbmQ6IFwiSnNvbkFycmF5Rmlyc3RPbmx5XCJ9LFxuXG4gIHtQYWdlVHlwZURlcGVuZDogXCJMaXN0aW5ncGFnZVwiLCBtZXRob2Q6IFwiR0FEYXRhTGF5ZXJcIiwgc2VsZWN0b3I6IFwiY29udGVudF9pZHNcIiwgbmFtZTogXCJjb250ZW50X2lkc1wifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIkxpc3RpbmdwYWdlXCIsIG1ldGhvZDogXCJHQURhdGFMYXllclwiLCBzZWxlY3RvcjogXCJjYXRlZ29yeV9wcm9kdWN0X2NvdW50XCIsIG5hbWU6IFwiZ2FDYXRlZ29yeVByb2R1Y3RDb250XCJ9LFxuXG4gIHtQYWdlVHlwZURlcGVuZDogXCJiYXNrZXRcIiwgbWV0aG9kOiBcIkdBRGF0YUxheWVyXCIsIHNlbGVjdG9yOiBcImVjb21tZXJjZS5jaGVja291dC5wcm9kdWN0c1wiLCBuYW1lOiBcImdhQ2FydFByb2R1Y3RzXCJ9LFxuXG4gIHtQYWdlVHlwZURlcGVuZDogXCJwdXJjaGFzZVwiLCBtZXRob2Q6IFwiR0FEYXRhTGF5ZXJcIiwgc2VsZWN0b3I6IFwiZWNvbW1lcmNlLnB1cmNoYXNlLnByb2R1Y3RzXCIsIG5hbWU6IFwiZ2FDYXJ0UHJvZHVjdHNcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJwdXJjaGFzZVwiLCBtZXRob2Q6IFwiR0FEYXRhTGF5ZXJcIiwgc2VsZWN0b3I6IFwiZWNvbW1lcmNlLnB1cmNoYXNlLmFjdGlvbkZpZWxkLmlkXCIsIG5hbWU6IFwiZ2FQdXJjaGFzZUlkXCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwicHVyY2hhc2VcIiwgbWV0aG9kOiBcIkdBRGF0YUxheWVyXCIsIHNlbGVjdG9yOiBcImVjb21tZXJjZS5wdXJjaGFzZS5hY3Rpb25GaWVsZC5yZXZlbnVlXCIsIG5hbWU6IFwiZ2FQdXJjaGFzZVJldmVudWVcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJwdXJjaGFzZVwiLCBtZXRob2Q6IFwiR0FEYXRhTGF5ZXJcIiwgc2VsZWN0b3I6IFwiZWNvbW1lcmNlLnB1cmNoYXNlLmFjdGlvbkZpZWxkLmRpbWVuc2lvbjE1XCIsIG5hbWU6IFwiZ2FQdXJjaGFzZVBheVR5cGVcIn0sXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBEb2N1bWVudCBRdWVyaWVzXG4gIHtQYWdlVHlwZURlcGVuZDogXCIqXCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCJbY2xhc3MqPVxcXCJwYWdlX3ByZXZpZXdfd3JhcHBlcl9wcm9kdWN0aW9uXFxcIl1cIiwgbmFtZTogXCJQYWdlVHlwZVwiLCBvcGVyYW5kOiBcImRvY1F1ZXJ5VmFsdWVJZkhhc0lubmVyVGV4dFwiLCB2YWx1ZTogXCJIb21lcGFnZVwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIipcIiwgbWV0aG9kOiBcIkRvY1F1ZXJ5XCIsIHNlbGVjdG9yOiBcIltjbGFzcyo9XFxcImNhdGVnb3J5X3BhZ2Vfd3JhcHBlclxcXCJdXCIsIG5hbWU6IFwiUGFnZVR5cGVcIiwgb3BlcmFuZDogXCJkb2NRdWVyeVZhbHVlSWZIYXNJbm5lclRleHRcIiwgdmFsdWU6IFwiTGlzdGluZ3BhZ2VcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCIqXCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCJbY2xhc3MqPVxcXCJwcm9kdWN0LW1haW4tZGV0YWlsc1xcXCJdXCIsIG5hbWU6IFwiUGFnZVR5cGVcIiwgb3BlcmFuZDogXCJkb2NRdWVyeVZhbHVlSWZIYXNJbm5lclRleHRcIiwgdmFsdWU6IFwiUHJvZHVjdHBhZ2VcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCIqXCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCJbY2xhc3MqPVxcXCJwcm9kdWN0XFxcIl1cIiwgbmFtZTogXCJQYWdlVHlwZVwiLCBvcGVyYW5kOiBcImRvY1F1ZXJ5VmFsdWVJZkhhc0lubmVyVGV4dFwiLCB2YWx1ZTogXCJQcm9kdWN0cGFnZVwifSxcblxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiSG9tZXBhZ2V8UHJvZHVjdHBhZ2V8TGlzdGluZ3BhZ2VcIiwgbWV0aG9kOiBcIkRvY1F1ZXJ5XCIsIHNlbGVjdG9yOiBcIltjbGFzcyo9XFxcIndlbGNvbWVfdXNlcm5hbWVcXFwiXVwiLCBuYW1lOiBcInZ2c1ZpZXdMb2dnZWRpblwiLCBvcGVyYW5kOiBcImRvY1F1ZXJ5SGFzSW5uZXJUZXh0XCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiSG9tZXBhZ2V8UHJvZHVjdHBhZ2V8TGlzdGluZ3BhZ2VcIiwgbWV0aG9kOiBcIkRvY1F1ZXJ5XCIsIHNlbGVjdG9yOiBcIltjbGFzcyo9XFxcImJhc2tldF90b3RhbF9wcmljZVxcXCJdXCIsIG5hbWU6IFwidnZzVmlld0Jhc2tldFRvdGFsXCIsIG9wZXJhbmQ6IFwiZG9jUXVlcnlJbm5lclRleHRcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJIb21lcGFnZXxQcm9kdWN0cGFnZXxMaXN0aW5ncGFnZVwiLCBtZXRob2Q6IFwiRG9jUXVlcnlcIiwgc2VsZWN0b3I6IFwiW2lkKj1cXFwiY2FydF9xdWFudGl0eVxcXCJdLCBbY2xhc3MqPVxcXCJiYXNrZXRfbGVuZ3RoXFxcIl1cIiwgbmFtZTogXCJ2dnNWaWV3QmFza2V0Q291bnRcIiwgb3BlcmFuZDogXCJkb2NRdWVyeUlubmVyVGV4dFwifSxcblxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiUHJvZHVjdHBhZ2VcIiwgbWV0aG9kOiBcIkRvY1F1ZXJ5XCIsIHNlbGVjdG9yOiBcIltjbGFzcyo9XFxcImRlbGl2ZXJ5LWRhdGVcXFwiXVwiLCBuYW1lOiBcInZ2c1BEUERlbGl2ZXJ5RGF0ZVwiLCBvcGVyYW5kOiBcImRvY1F1ZXJ5SW5uZXJUZXh0XCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiUHJvZHVjdHBhZ2VcIiwgbWV0aG9kOiBcIkRvY1F1ZXJ5XCIsIHNlbGVjdG9yOiBcIltjbGFzcyo9XFxcInByb2R1Y3QtdGl0bGVcXFwiXSwgW2NsYXNzKj1cXFwiaGVhZGVyLWJvdHRvbVxcXCJdXCIsIG5hbWU6IFwidnZzUERQVGl0bGVcIiwgb3BlcmFuZDogXCJkb2NRdWVyeUlubmVyVGV4dFwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIlByb2R1Y3RwYWdlXCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCJbY2xhc3MqPVxcXCJ2aXZlbnNlLXNob3dyb29tc1xcXCJdID4gKlwiLCBuYW1lOiBcInZ2c1BEUFNob3dyb29tQ291bnRcIiwgb3BlcmFuZDogXCJkb2NRdWVyeUNvdW50RWx0c1wifSxcblxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiTGlzdGluZ3BhZ2VcIiwgbWV0aG9kOiBcIkRvY1F1ZXJ5XCIsIHNlbGVjdG9yOiBcIltjbGFzcyo9XFxcImNvdW50LW9mLXByb2R1Y3RcXFwiXVwiLCBuYW1lOiBcInZ2c1BMUEl0ZW1Db3VudFwiLCBvcGVyYW5kOiBcImRvY1F1ZXJ5SW5uZXJUZXh0XCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiTGlzdGluZ3BhZ2VcIiwgbWV0aG9kOiBcIkRvY1F1ZXJ5XCIsIHNlbGVjdG9yOiBcIltjbGFzcyo9XFxcInN1YmNhdGVnb3JpZXMtdGl0bGVcXFwiXVwiLCBuYW1lOiBcInZ2c1BMUE5hbWVcIiwgb3BlcmFuZDogXCJkb2NRdWVyeUlubmVyVGV4dFwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIkxpc3RpbmdwYWdlXCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCJbZGF0YS1wcm9kdWN0LXNrdV1cIiwgbmFtZTogXCJ2dnNQTFBTS1VzXCIsIG9wZXJhbmQ6IFwiZG9jUXVlcnlBdHRyaWJWYWx1ZVNldFwiLCB2YWx1ZTogXCJkYXRhLXByb2R1Y3Qtc2t1XCIsIHRyaWdnZXI6IFwidXBkYXRlQWN0aXZlU0tVTGlzdFwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIkxpc3RpbmdwYWdlXCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCIucHJvZHVjdC1saXN0XCIsIG9ic2VydmVyOiBcImxpc3RpbmdJdGVtQmxvY2tcIiwgbmFtZTogXCJsaXN0aW5nSXRlbUJsb2NrT2JzZXJ2ZXJcIiwgY2hpbGRyZW46IFtcInZ2c1BMUFNLVXNcIl0sIG9wZXJhbmQ6IFwiZG9jUXVlcnlPYnNlcnZlXCJ9LFxuXG4gIHtQYWdlVHlwZURlcGVuZDogXCJiYXNrZXRcIiwgbWV0aG9kOiBcIkRvY1F1ZXJ5XCIsIHNlbGVjdG9yOiBcIltkYXRhLXNrdV1cIiwgbmFtZTogXCJ2dnNDYXJ0U0tVc1wiLCBvcGVyYW5kOiBcImRvY1F1ZXJ5QXR0cmliVmFsdWVTZXRcIiwgdmFsdWU6IFwiZGF0YS1za3VcIiwgdHJpZ2dlcjogXCJ1cGRhdGVBY3RpdmVTS1VMaXN0XCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiYmFza2V0XCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCJbY2xhc3MqPVxcXCJvcmRlci1maW5hbC1udW1iZXJcXFwiXVwiLCBuYW1lOiBcInZ2c0NhcnRUb3RhbFwiLCBvcGVyYW5kOiBcImRvY1F1ZXJ5SW5uZXJUZXh0XCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiYmFza2V0XCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCJbY2xhc3MqPVxcXCJjYXJ0LXByaWNlXFxcIl0gPiBzcGFuLnByaWNlLCBzcGFuLnN1cGVyLCBzcGFuLm5ldy1wcmljZSwgc3Bhbi5zcGFuLXByaWNlXCIsIG5hbWU6IFwidnZzQ2FydENvdXBvbkFwcGxpY2FibGVcIiwgb3BlcmFuZDogXCJkb2NRdWVyeVN1bU51bUlubmVyVGV4dFwiLCB0cmlnZ2VyOiBcInVwZGF0ZUNvdXBvbkFwcGxpY2FibGVBbW91bnRcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJiYXNrZXRcIiwgbWV0aG9kOiBcIkRvY1F1ZXJ5XCIsIHNlbGVjdG9yOiBcIiNjaGVja291dEZvcm1cIiwgb2JzZXJ2ZXI6IFwiY2hlY2tvdXRGb3JtXCIsIG5hbWU6IFwiY2hlY2tvdXRGb3JtT2JzZXJ2ZXJcIiwgY2hpbGRyZW46IFtcInZ2c0NhcnRUb3RhbFwiLCBcInZ2c0NhcnRDb3Vwb25BcHBsaWNhYmxlXCIsIFwidnZzQ2FydFNLVXNcIl0sIG9wZXJhbmQ6IFwiZG9jUXVlcnlPYnNlcnZlXCJ9LFxuXG4gIHtQYWdlVHlwZURlcGVuZDogXCJwdXJjaGFzZVwiLCBtZXRob2Q6IFwiRG9jUXVlcnlcIiwgc2VsZWN0b3I6IFwiW2NsYXNzKj1cXFwiYmFza2V0X3N1bW1hcnlfdG90YWxcXFwiXSwgW2NsYXNzKj1cXFwidG90YWxfcm93XFxcIl1cIiwgbmFtZTogXCJ2dnNQdXJjUHJpY2VFbHRcIiwgb3BlcmFuZDogXCJkb2NRdWVyeUlubmVyVGV4dFwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcInB1cmNoYXNlXCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCJbY2xhc3MqPVxcXCJvcmRlcl9mb2xsb3dfbnVtYlxcXCJdLCBbY2xhc3MqPVxcXCJjYXJ0LXRpdGxlLWJvdHRvbVxcXCJdXCIsIG5hbWU6IFwidnZzUHVyY2hhc2VPcmRlcklEXCIsIG9wZXJhbmQ6IFwiZG9jUXVlcnlJbm5lclRleHRcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJwdXJjaGFzZVwiLCBtZXRob2Q6IFwiRG9jUXVlcnlcIiwgc2VsZWN0b3I6IFwiW2NsYXNzKj1cXFwicGF5bWVudF90eXBlX3RpdGxlXFxcIl0sIFtjbGFzcyo9XFxcImNhcnQtdGl0bGUtaW5mb1xcXCJdXCIsIG5hbWU6IFwidnZzUHVyY1R5cGVFbHRcIiwgb3BlcmFuZDogXCJkb2NRdWVyeUlubmVyVGV4dFwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcInB1cmNoYXNlXCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCJbY2xhc3MqPVxcXCJwcm9kdWN0X3NrdV9jb2RlXFxcIl1cIiwgbmFtZTogXCJ2dnNQdXJjU0tVc1wiLCBvcGVyYW5kOiBcImRvY1F1ZXJ5QXJyYXlJbm5lclRleHRcIn0sXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBTT1JHIEVsZW1lbnRzXG4gIHtQYWdlVHlwZURlcGVuZDogXCJQcm9kdWN0cGFnZVwiLCBtZXRob2Q6IFwiRG9jU29yZ1wiLCBzZWxlY3RvcjogXCJza3VcIiwgbmFtZTogXCJzb3JnUHJvZHVjdC5za3VcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJQcm9kdWN0cGFnZVwiLCBtZXRob2Q6IFwiRG9jU29yZ1wiLCBzZWxlY3RvcjogXCJtcG5cIiwgbmFtZTogXCJzb3JnUHJvZHVjdC5tcG5cIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJQcm9kdWN0cGFnZVwiLCBtZXRob2Q6IFwiRG9jU29yZ1wiLCBzZWxlY3RvcjogXCJuYW1lXCIsIG5hbWU6IFwic29yZ1Byb2R1Y3QubmFtZVwiLCBvcGVyYW5kOiBcIkpTT05GaWx0ZXJPdGhlclwiLCB2YWx1ZTogXCJAdHlwZT1Qcm9kdWN0XCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiUHJvZHVjdHBhZ2VcIiwgbWV0aG9kOiBcIkRvY1NvcmdcIiwgc2VsZWN0b3I6IFwib2ZmZXJzLnByaWNlXCIsIG5hbWU6IFwic29yZ1Byb2R1Y3QucHJpY2VcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJQcm9kdWN0cGFnZVwiLCBtZXRob2Q6IFwiRG9jU29yZ1wiLCBzZWxlY3RvcjogXCJvZmZlcnMucHJpY2VWYWxpZFVudGlsXCIsIG5hbWU6IFwic29yZ1Byb2R1Y3QucHJpY2VWYWxpZFVudGlsXCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiUHJvZHVjdHBhZ2VcIiwgbWV0aG9kOiBcIkRvY1NvcmdcIiwgc2VsZWN0b3I6IFwiaXRlbUxpc3RFbGVtZW50LioubmFtZVwiLCBuYW1lOiBcInNvcmdCcmVhZGNydW1iXCJ9LFxuXG4gIHtQYWdlVHlwZURlcGVuZDogXCJMaXN0aW5ncGFnZVwiLCBtZXRob2Q6IFwiRG9jU29yZ1wiLCBzZWxlY3RvcjogXCJtYWluRW50aXR5Lm5hbWVcIiwgbmFtZTogXCJzb3JnTGlzdGluZy5uYW1lXCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiTGlzdGluZ3BhZ2VcIiwgbWV0aG9kOiBcIkRvY1NvcmdcIiwgc2VsZWN0b3I6IFwibWFpbkVudGl0eS5udW1iZXJPZkl0ZW1zXCIsIG5hbWU6IFwic29yZ0xpc3RpbmcubnVtYmVyT2ZJdGVtc1wifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIkxpc3RpbmdwYWdlXCIsIG1ldGhvZDogXCJEb2NTb3JnXCIsIHNlbGVjdG9yOiBcImJyZWFkY3J1bWIuaXRlbUxpc3RFbGVtZW50LiouaXRlbS5uYW1lXCIsIG5hbWU6IFwic29yZ0JyZWFkY3J1bWJcIn0sXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBXaW5kb3cgY3VzdG9tIGVsZW1lbnRzXG4gIHtQYWdlVHlwZURlcGVuZDogXCIqXCIsIG1ldGhvZDogXCJTaW5nbGVXVFwiLCBzZWxlY3RvcjogXCJmYXZvcml0ZVByb2R1Y3RzXCIsIG5hbWU6IFwidnZzRmF2UHJvZHNcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCIqXCIsIG1ldGhvZDogXCJTaW5nbGVXVFwiLCBzZWxlY3RvcjogXCJpc0FkbWluXCIsIG5hbWU6IFwidnZzSXNTaG93cm9vbVwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIipcIiwgbWV0aG9kOiBcIlNpbmdsZVdUXCIsIHNlbGVjdG9yOiBcInVzZXJJZFwiLCBuYW1lOiBcInZ2c1VzZXJJZFwifSxcbl07XG5cbmNvbnN0IHNlYXJjaE9iaiA9IChvYmosIHNlYXJjaEVsZW1lbnQpID0+IHtcbiAgbGV0IHZhbHVlO1xuXG4gIHRyeSB7XG4gICAgc3dpdGNoIChzZWFyY2hFbGVtZW50Lm9wZXJhbmQpIHtcbiAgICAgIGNhc2UgXCJKc29uQXJyYXlGaXJzdE9ubHlcIjpcbiAgICAgICAgdmFsdWUgPSBqc29uR2V0KG9iaiwgc2VhcmNoRWxlbWVudC5zZWxlY3Rvcik7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoc2VhcmNoRWxlbWVudC5uYW1lLCB2YWx1ZVswXSk7XG4gICAgICAgICAgcHJvY2Vzc1RyaWdnZXIoc2VhcmNoRWxlbWVudC50cmlnZ2VyKTtcbiAgICAgICAgICBzZWFyY2hFbGVtZW50LmlzRm91bmQgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkpTT05GaWx0ZXJPdGhlclwiOlxuICAgICAgICB7XG4gICAgICAgICAgdmFsdWUgPSBqc29uR2V0KG9iaiwgc2VhcmNoRWxlbWVudC5zZWxlY3Rvcik7XG5cbiAgICAgICAgICBjb25zdCBmaWx0ZXJQYXJhbXMgPSBzZWFyY2hFbGVtZW50LnZhbHVlLnNwbGl0KFwiPVwiKTtcbiAgICAgICAgICBpZiAoZmlsdGVyUGFyYW1zLmxlbmd0aCAhPT0gMikgYnJlYWs7XG4gICAgICAgICAgY29uc3QgZmlsdGVyTmFtZSA9IGZpbHRlclBhcmFtc1swXTtcbiAgICAgICAgICBjb25zdCBmaWx0ZXJWYWx1ZSA9IGZpbHRlclBhcmFtc1sxXTtcbiAgICAgICAgICBpZiAoIWZpbHRlck5hbWUgfHwgIWZpbHRlclZhbHVlKSBicmVhaztcblxuICAgICAgICAgIGNvbnN0IGZpbHRlck1hdGNoID0ganNvbkdldChvYmosIGZpbHRlck5hbWUpO1xuXG4gICAgICAgICAgaWYgKCFmaWx0ZXJNYXRjaCB8fCBmaWx0ZXJNYXRjaCAhPT0gZmlsdGVyVmFsdWUpIGJyZWFrO1xuXG4gICAgICAgICAgaWYgKHZhbHVlICYmIChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmxlbmd0aCA+IDAgOiB2YWx1ZS50b1N0cmluZygpLnRyaW0oKS5sZW5ndGggPiAwKSkge1xuICAgICAgICAgICAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoc2VhcmNoRWxlbWVudC5uYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICBwcm9jZXNzVHJpZ2dlcihzZWFyY2hFbGVtZW50LnRyaWdnZXIpO1xuICAgICAgICAgICAgc2VhcmNoRWxlbWVudC5pc0ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJkb2NRdWVyeU9ic2VydmVcIjpcbiAgICAgICAgdmFsdWUgPSBvYmoucXVlcnlTZWxlY3RvcihzZWFyY2hFbGVtZW50LnNlbGVjdG9yKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBmb3VuZCBzdGF0dXMgb2YgdGhlIGVsZW1lbnRzIGluIHRoZSBjaGlsZHJlbiBsaXN0XG4gICAgICAgICAgICBjb25zdCB0b0JlVXBkYXRlZCA9IFtdO1xuICAgICAgICAgICAgc2VhcmNoRWxlbWVudC5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBjaGlsZEVsZW1lbnRzID0gc2VhcmNoUGF0aHMuZmlsdGVyKChlbGVtZW50KSA9PiBlbGVtZW50Lm5hbWUgPT09IGNoaWxkKTtcbiAgICAgICAgICAgICAgLy8gYWRkIGNoaWxkRWxlbWVudHMgaW50byB0b0JlVXBkYXRlZFxuICAgICAgICAgICAgICB0b0JlVXBkYXRlZC5wdXNoKC4uLmNoaWxkRWxlbWVudHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyB1cGRhdGUgZm91bmQgc3RhdHVzIG9mIHRoZSBlbGVtZW50cyBpbiB0aGUgY2hpbGRyZW4gbGlzdFxuICAgICAgICAgICAgdG9CZVVwZGF0ZWQuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICBlbGVtZW50LmlzRm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgdHJpZ2dlclJlc3RhcnQgPSBwYXJzZVNlYXJjaFBhdGhzUmV0cnkgPj0gUEFSU0VTRUFSQ0hNQVhSRVRSWTtcbiAgICAgICAgICAgIHBhcnNlU2VhcmNoUGF0aHNEZWxheSA9IFBBUlNFU0VBUkNIU1RBUlRERUxBWTtcbiAgICAgICAgICAgIHBhcnNlU2VhcmNoUGF0aHNSZXRyeSA9IDA7XG4gICAgICAgICAgICBpZiAodHJpZ2dlclJlc3RhcnQpIHtcbiAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhcInNlYXJjaE9iajogdHJpZ2dlcmVkIGEgcmVzdGFydCBvZiBzZWFyY2hwYXRocyBkdWU6IFwiK3NlYXJjaEVsZW1lbnQubmFtZSk7XG4gICAgICAgICAgICAgIHBhcnNlckNhbGxlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUodmFsdWUsIE9CU0VSVkVSX0NPTkZJRyk7XG4gICAgICAgICAgc2VhcmNoRWxlbWVudC5pc0ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJkb2NRdWVyeUlubmVyVGV4dFwiOlxuICAgICAgICB2YWx1ZSA9IG9iai5xdWVyeVNlbGVjdG9yKHNlYXJjaEVsZW1lbnQuc2VsZWN0b3IpO1xuICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUuaW5uZXJUZXh0ICYmIHZhbHVlLmlubmVyVGV4dC50cmltKCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKHNlYXJjaEVsZW1lbnQubmFtZSwgdmFsdWUuaW5uZXJUZXh0KTtcbiAgICAgICAgICBwcm9jZXNzVHJpZ2dlcihzZWFyY2hFbGVtZW50LnRyaWdnZXIpO1xuICAgICAgICAgIHNlYXJjaEVsZW1lbnQuaXNGb3VuZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZG9jUXVlcnlBdHRyaWJWYWx1ZVNldFwiOlxuICAgICAgICB7XG4gICAgICAgICAgY29uc3QgYXR0cmliVmFsdWVTZXQgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgdmFsdWUgPSBvYmoucXVlcnlTZWxlY3RvckFsbChzZWFyY2hFbGVtZW50LnNlbGVjdG9yKTtcbiAgICAgICAgICBpZiAoIXZhbHVlIHx8IHZhbHVlLmxlbmd0aCA9PT0gMCkgYnJlYWs7XG4gICAgICAgICAgZm9yIChjb25zdCB2YWx1ZWNoaWxkIG9mIHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJWYWx1ZSA9IHZhbHVlY2hpbGQuZ2V0QXR0cmlidXRlKHNlYXJjaEVsZW1lbnQudmFsdWUpO1xuICAgICAgICAgICAgaWYgKGF0dHJpYlZhbHVlKSB7XG4gICAgICAgICAgICAgIGF0dHJpYlZhbHVlU2V0LmFkZChhdHRyaWJWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGF0dHJpYlZhbHVlU2V0LnNpemUgPiAwKSB7XG4gICAgICAgICAgICBhZGRUb0JlYWdsZUluZm9MYXllcihzZWFyY2hFbGVtZW50Lm5hbWUsIEFycmF5LmZyb20oYXR0cmliVmFsdWVTZXQpKTtcbiAgICAgICAgICAgIHByb2Nlc3NUcmlnZ2VyKHNlYXJjaEVsZW1lbnQudHJpZ2dlcik7XG4gICAgICAgICAgICBzZWFyY2hFbGVtZW50LmlzRm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImRvY1F1ZXJ5SGFzSW5uZXJUZXh0XCI6XG4gICAgICAgIHZhbHVlID0gb2JqLnF1ZXJ5U2VsZWN0b3Ioc2VhcmNoRWxlbWVudC5zZWxlY3Rvcik7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIGNvbnN0IHNldFZhbHVlID0gdmFsdWUuaW5uZXJUZXh0LnRyaW0oKS5sZW5ndGggPiAwO1xuICAgICAgICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKHNlYXJjaEVsZW1lbnQubmFtZSwgc2V0VmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgcHJvY2Vzc1RyaWdnZXIoc2VhcmNoRWxlbWVudC50cmlnZ2VyKTtcbiAgICAgICAgICBzZWFyY2hFbGVtZW50LmlzRm91bmQgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImRvY1F1ZXJ5Q291bnRFbHRzXCI6XG4gICAgICAgIHZhbHVlID0gb2JqLnF1ZXJ5U2VsZWN0b3JBbGwoc2VhcmNoRWxlbWVudC5zZWxlY3Rvcik7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKHNlYXJjaEVsZW1lbnQubmFtZSwgdmFsdWUubGVuZ3RoKTtcbiAgICAgICAgICBwcm9jZXNzVHJpZ2dlcihzZWFyY2hFbGVtZW50LnRyaWdnZXIpO1xuICAgICAgICAgIHNlYXJjaEVsZW1lbnQuaXNGb3VuZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZG9jUXVlcnlWYWx1ZUlmSGFzSW5uZXJUZXh0XCI6XG4gICAgICAgIHZhbHVlID0gb2JqLnF1ZXJ5U2VsZWN0b3Ioc2VhcmNoRWxlbWVudC5zZWxlY3Rvcik7XG4gICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5pbm5lclRleHQgJiYgdmFsdWUuaW5uZXJUZXh0LnRyaW0oKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoc2VhcmNoRWxlbWVudC5uYW1lLCBzZWFyY2hFbGVtZW50LnZhbHVlKTtcbiAgICAgICAgICBwcm9jZXNzVHJpZ2dlcihzZWFyY2hFbGVtZW50LnRyaWdnZXIpO1xuICAgICAgICAgIHNlYXJjaEVsZW1lbnQuaXNGb3VuZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZG9jUXVlcnlTdW1OdW1Jbm5lclRleHRcIjpcbiAgICAgICAge1xuICAgICAgICAgIHZhbHVlID0gb2JqLnF1ZXJ5U2VsZWN0b3JBbGwoc2VhcmNoRWxlbWVudC5zZWxlY3Rvcik7XG4gICAgICAgICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPT09IDApIGJyZWFrO1xuICAgICAgICAgIGxldCBzdW1QcmljZSA9IDA7XG4gICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRUZXh0ID0gY2hpbGQuaW5uZXJUZXh0LnRyaW0oKS5yZXBsYWNlKC9cXEQvZywgXCJcIik7XG4gICAgICAgICAgICBpZiAoY2hpbGRUZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgc3VtUHJpY2UrPXBhcnNlSW50KGNoaWxkVGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdW1QcmljZSA+IDApIHtcbiAgICAgICAgICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKHNlYXJjaEVsZW1lbnQubmFtZSwgYXJyYXlJbm5lclRleHQpO1xuICAgICAgICAgICAgcHJvY2Vzc1RyaWdnZXIoc2VhcmNoRWxlbWVudC50cmlnZ2VyKTtcbiAgICAgICAgICAgIHNlYXJjaEVsZW1lbnQuaXNGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZG9jUXVlcnlBcnJheUlubmVyVGV4dFwiOlxuICAgICAgICB7XG4gICAgICAgICAgdmFsdWUgPSBvYmoucXVlcnlTZWxlY3RvckFsbChzZWFyY2hFbGVtZW50LnNlbGVjdG9yKTtcbiAgICAgICAgICBpZiAoIXZhbHVlIHx8IHZhbHVlLmxlbmd0aCA9PT0gMCkgYnJlYWs7XG4gICAgICAgICAgY29uc3QgYXJyYXlJbm5lclRleHQgPSBbXTtcbiAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZFRleHQgPSBjaGlsZC5pbm5lclRleHQudHJpbSgpO1xuICAgICAgICAgICAgaWYgKGNoaWxkVGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGFycmF5SW5uZXJUZXh0LnB1c2goY2hpbGRUZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGFycmF5SW5uZXJUZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKHNlYXJjaEVsZW1lbnQubmFtZSwgYXJyYXlJbm5lclRleHQpO1xuICAgICAgICAgICAgcHJvY2Vzc1RyaWdnZXIoc2VhcmNoRWxlbWVudC50cmlnZ2VyKTtcbiAgICAgICAgICAgIHNlYXJjaEVsZW1lbnQuaXNGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YWx1ZSA9IGpzb25HZXQob2JqLCBzZWFyY2hFbGVtZW50LnNlbGVjdG9yKTtcbiAgICAgICAgaWYgKHZhbHVlICYmIChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmxlbmd0aCA+IDAgOiB2YWx1ZS50b1N0cmluZygpLnRyaW0oKS5sZW5ndGggPiAwKSkge1xuICAgICAgICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKHNlYXJjaEVsZW1lbnQubmFtZSwgdmFsdWUpO1xuICAgICAgICAgIHByb2Nlc3NUcmlnZ2VyKHNlYXJjaEVsZW1lbnQudHJpZ2dlcik7XG4gICAgICAgICAgc2VhcmNoRWxlbWVudC5pc0ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9IC8vIHN3aXRjaFxuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyLmVycm9yKFwiRXJyb3IgaW4gc2VhcmNoT2JqOiBcIiArIGUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmNvbnN0IHtDT1VQT05fQVBQTElDQUJMRV9CQVNLRVRfUFJJQ0V9ID0gTE9DQUxfU1RPUkFHRV9LRVlTO1xuY29uc3Qge05EX1NLVV9MSVNUX0JBU0tFVCwgTkRfU0tVX0xJU1R9ID0gU0VTU0lPTl9TVE9SQUdFX0tFWVM7XG5sZXQgYWN0aXZlU0tVTGlzdDtcblxuY29uc3QgcHJvY2Vzc1RyaWdnZXIgPSBhc3luYyAodHJpZ2dlcikgPT4ge1xuICBpZiAodHJpZ2dlcikge1xuICAgIGxvZ2dlci5sb2coXCJwcm9jZXNzVHJpZ2dlciBhY3RpdmF0ZWQgZm9yOiBcIiwgdHJpZ2dlcik7XG4gICAgc3dpdGNoICh0cmlnZ2VyKSB7XG4gICAgICBjYXNlIFwidXBkYXRlUGFnZVR5cGVcIjpcbiAgICAgICAgLy8gcHJlbWF0dXJlIHRyaWdnZXJcbiAgICAgICAgaWYgKGN1cnJlbnRQYWdlVHlwZSkge1xuICAgICAgICAgIC8vIHJlc2V0IHN0b3JlZCBiYXNrZXQgcHJpY2UgaWYgbWlzc2luZyBvciBwYWdldHlwZSBpcyBwdXJjaGFzZVxuICAgICAgICAgIGNvbnN0IGNhQmFza2V0UHJpY2UgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oQ09VUE9OX0FQUExJQ0FCTEVfQkFTS0VUX1BSSUNFKTtcbiAgICAgICAgICBpZiAoY2FCYXNrZXRQcmljZSA9PT0gbnVsbCB8fCBjdXJyZW50UGFnZVR5cGUgPT09IFwicHVyY2hhc2VcIikge1xuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKENPVVBPTl9BUFBMSUNBQkxFX0JBU0tFVF9QUklDRSwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwidXBkYXRlQ291cG9uQXBwbGljYWJsZUFtb3VudFwiOlxuICAgICAgICB7XG4gICAgICAgICAgY29uc3QgY291cG9uQXBwbGljYWJsZVRvdGFsUHJpY2UgPSBhd2FpdCBnZXRGcm9tQmVhZ2xlSW5mb0xheWVyKFwidnZzQ2FydENvdXBvbkFwcGxpY2FibGVcIiwgdHJ1ZSwgNTAsIDUwMCk7XG5cbiAgICAgICAgICBpZiAoIWNvdXBvbkFwcGxpY2FibGVUb3RhbFByaWNlKSB7XG4gICAgICAgICAgICBsb2dnZXIuZmFpbGVkKFwicHJvY2Vzc1RyaWdnZXI6IFByaWNlIGVsZW1lbnRzIG5vdCBmb3VuZFwiKTtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShDT1VQT05fQVBQTElDQUJMRV9CQVNLRVRfUFJJQ0UsIDApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjb3Vwb25BcHBsaWNhYmxlVG90YWxQcmljZSA+PSAwKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKFwicHJvY2Vzc1RyaWdnZXI6IENvdXBvbiBhcHBsaWNhYmxlIHRvdGFsIHByaWNlOiBcIiwgY291cG9uQXBwbGljYWJsZVRvdGFsUHJpY2UpO1xuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKENPVVBPTl9BUFBMSUNBQkxFX0JBU0tFVF9QUklDRSwgY291cG9uQXBwbGljYWJsZVRvdGFsUHJpY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwidXBkYXRlQWN0aXZlU0tVTGlzdFwiOlxuICAgICAgICAvLyB1cGRhdGUgYWN0aXZlIFNLVSBsaXN0XG5cbiAgICAgICAgLy8gTGlzdGluZyBwYWdlXG4gICAgICAgIGlmIChjdXJyZW50UGFnZVR5cGUgPT09IFwiTGlzdGluZ3BhZ2VcIikge1xuICAgICAgICAgIGNvbnN0IHNrdUxpc3QgPSBhd2FpdCBnZXRGcm9tQmVhZ2xlSW5mb0xheWVyKFwidnZzUExQU0tVc1wiLCB0cnVlLCAyMCwgMTAwMCk7XG4gICAgICAgICAgaWYgKHNrdUxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKE5EX1NLVV9MSVNULCBKU09OLnN0cmluZ2lmeShza3VMaXN0KSk7XG4gICAgICAgICAgICBhY3RpdmVTS1VMaXN0ID0gc2t1TGlzdDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFBhZ2VUeXBlID09PSBcIlByb2R1Y3RwYWdlXCIpIHtcbiAgICAgICAgICBjb25zdCBza3UgPSBhd2FpdCBnZXRGcm9tQmVhZ2xlSW5mb0xheWVyKFwiY29udGVudF9pZHNcIiwgdHJ1ZSwgMjAsIDEwMDApO1xuICAgICAgICAgIGlmIChza3UpIHtcbiAgICAgICAgICAgIGNvbnN0IHNrdUxpc3QgPSBbc2t1XTtcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oTkRfU0tVX0xJU1QsIEpTT04uc3RyaW5naWZ5KHNrdUxpc3QpKTtcbiAgICAgICAgICAgIGFjdGl2ZVNLVUxpc3QgPSBza3VMaXN0O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBUT0RPOiBpZiBub3QgZm91bmQgYWx0ZXJuYXRpdmVseSAtLT4gdnZzUERQUHJvZHVjdC5za3Ugb3Igc29yZ1Byb2R1Y3Quc2t1XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFBhZ2VUeXBlID09PSBcImJhc2tldFwiKSB7XG4gICAgICAgICAgY29uc3Qgc2t1TGlzdCA9IGF3YWl0IGdldEZyb21CZWFnbGVJbmZvTGF5ZXIoXCJ2dnNDYXJ0U0tVc1wiLCB0cnVlLCAyMCwgMTAwMCk7XG4gICAgICAgICAgaWYgKHNrdUxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKE5EX1NLVV9MSVNULCBKU09OLnN0cmluZ2lmeShza3VMaXN0KSk7XG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKE5EX1NLVV9MSVNUX0JBU0tFVCwgSlNPTi5zdHJpbmdpZnkoc2t1TGlzdCkpO1xuICAgICAgICAgICAgYWN0aXZlU0tVTGlzdCA9IHNrdUxpc3Q7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59O1xuXG5sZXQgY3VycmVudFBhZ2VUeXBlO1xuXG5jb25zdCBwYXJzZVNlYXJjaFBhdGhzID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCBkb21TdGF0dXMgPSBkb2N1bWVudC5yZWFkeVN0YXRlO1xuICAvLyBjaGVjayBpZiBkb2N1bWVudCBhbmQgZG9tIGlzIGxvYWRlZCBhbmQgcmVhZHkgZm9yIHNjcmFwcGluZ1xuICBsb2dnZXIubG9nKFwicGFyc2VTZWFyY2hQYXRocyBpbml0aWFsaXplZCB3aXRoIGRvbSBzdGF0dXM6ICBcIiArIGRvbVN0YXR1cyk7XG5cbiAgY29uc3Qgd2ludG9wID0gd2luZG93LnRvcDtcbiAgY29uc3QgZGF0YUxheWVyID0gd2ludG9wLmRhdGFMYXllcjtcbiAgY29uc3Qgd2luZG9jID0gd2ludG9wLmRvY3VtZW50O1xuICBsZXQgc29yZ0FycmF5SW5uZXI7XG5cbiAgY29uc3QgZm91bmROYW1lcyA9IG5ldyBTZXQoKTtcbiAgY29uc3QgcHJldkZvdW5kTmFtZXMgPSBuZXcgU2V0KCk7XG4gIGNvbnN0IG5vdEZvdW5kTmFtZXMgPSBuZXcgU2V0KCk7XG5cbiAgLy8gUGFnZVR5cGUgY2FuIGJlIGluZmVycmVkIGZyb20gVVJMLCBpZiBmb3VuZCB1c2UgaXQgZnJvbSB0aGVyZVxuICBpZiAoY3VycmVudFBhZ2VUeXBlKSB7XG4gICAgcHJldkZvdW5kTmFtZXMuYWRkKFwiUGFnZVR5cGVcIik7XG4gIH1cblxuICAvLyBMb29wIHRocm91Z2ggc2VhcmNoIGxpc3RzIGFuZCBtYXJrIGZvdW5kIG5hbWVzXG4gIGZvciAoY29uc3Qgc2VhcmNoRWxlbWVudCBvZiBzZWFyY2hQYXRocykge1xuICAgIGlmIChzZWFyY2hFbGVtZW50LmlzRm91bmQpIHtcbiAgICAgIHByZXZGb3VuZE5hbWVzLmFkZChzZWFyY2hFbGVtZW50Lm5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3Qgc2VhcmNoRWxlbWVudCBvZiBzZWFyY2hQYXRocykge1xuICAgIGlmIChzZWFyY2hFbGVtZW50LmlzRm91bmQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChmb3VuZE5hbWVzLmhhcyhzZWFyY2hFbGVtZW50Lm5hbWUpIHx8IHByZXZGb3VuZE5hbWVzLmhhcyhzZWFyY2hFbGVtZW50Lm5hbWUpKSB7XG4gICAgICBsb2dnZXIubG9nKFwicGFyc2VTZWFyY2hQYXRocyBoYWQgZm91bmQgIFwiICsgc2VhcmNoRWxlbWVudC5uYW1lICsgXCIgYWxyZWFkeVwiKTtcbiAgICAgIHNlYXJjaEVsZW1lbnQuaXNGb3VuZCA9IHRydWU7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoc2VhcmNoRWxlbWVudC5QYWdlVHlwZURlcGVuZCAhPT0gXCIqXCIpIHtcbiAgICAgIGlmICghY3VycmVudFBhZ2VUeXBlKSB7XG4gICAgICAgIGN1cnJlbnRQYWdlVHlwZSA9IGF3YWl0IGdldEZyb21CZWFnbGVJbmZvTGF5ZXIoXCJQYWdlVHlwZVwiKTtcbiAgICAgICAgaWYgKGN1cnJlbnRQYWdlVHlwZSkge1xuICAgICAgICAgIHByb2Nlc3NUcmlnZ2VyKFwidXBkYXRlUGFnZVR5cGVcIik7XG4gICAgICAgICAgbG9nZ2VyLmxvZyhcInBhcnNlU2VhcmNoUGF0aHMgc2V0IGN1cnJlbnRQYWdlVHlwZSB0byBcIiArIGN1cnJlbnRQYWdlVHlwZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm90Rm91bmROYW1lcy5hZGQoc2VhcmNoRWxlbWVudC5uYW1lKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2VhcmNoRWxlbWVudC5QYWdlVHlwZURlcGVuZC5pbmRleE9mKGN1cnJlbnRQYWdlVHlwZSkgPCAwKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJwYXJzZVNlYXJjaFBhdGhzIHdpbGwgc2tpcCBcIiArIHNlYXJjaEVsZW1lbnQubmFtZSArIFwiIGJlY2F1c2Ugb2YgUGFnZVR5cGVEZXBlbmQgXCIgKyBzZWFyY2hFbGVtZW50LlBhZ2VUeXBlRGVwZW5kKTtcbiAgICAgICAgc2VhcmNoRWxlbWVudC5pc0ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlYXJjaEVsZW1lbnQubWV0aG9kID09PSBcIlNpbmdsZVdUXCIpIHsgLy8gU0NBTiBXaW5kb3cgZm9yIFNpbmdsZSBFbGVtZW50c1xuICAgICAgaWYgKHNlYXJjaE9iaih3aW50b3AsIHNlYXJjaEVsZW1lbnQpKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJwYXJzZVNlYXJjaFBhdGhzIGZvdW5kIFwiICsgc2VhcmNoRWxlbWVudC5uYW1lKTtcbiAgICAgICAgZm91bmROYW1lcy5hZGQoc2VhcmNoRWxlbWVudC5uYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vdEZvdW5kTmFtZXMuYWRkKHNlYXJjaEVsZW1lbnQubmFtZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzZWFyY2hFbGVtZW50Lm1ldGhvZCA9PT0gXCJHQURhdGFMYXllclwiKSB7IC8vIFNDQU4gR0EgREFUQSBMQVlFUlxuICAgICAgZm9yIChjb25zdCBkYXRhTGF5ZXJJdGVtIG9mIGRhdGFMYXllcikge1xuICAgICAgICBpZiAoc2VhcmNoT2JqKGRhdGFMYXllckl0ZW0sIHNlYXJjaEVsZW1lbnQpKSB7XG4gICAgICAgICAgbG9nZ2VyLmxvZyhcInBhcnNlU2VhcmNoUGF0aHMgZm91bmQgXCIgKyBzZWFyY2hFbGVtZW50Lm5hbWUpO1xuICAgICAgICAgIGZvdW5kTmFtZXMuYWRkKHNlYXJjaEVsZW1lbnQubmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm90Rm91bmROYW1lcy5hZGQoc2VhcmNoRWxlbWVudC5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2VhcmNoRWxlbWVudC5tZXRob2QgPT09IFwiRG9jU29yZ1wiKSB7IC8vIFNDQU4gU09SRyBBUlJBWVxuICAgICAgaWYgKCFzb3JnQXJyYXlJbm5lcikge1xuICAgICAgICBzb3JnQXJyYXlJbm5lciA9IGdldFNPUkdBcnJheSgpO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBzb3JnSXRlbSBvZiBzb3JnQXJyYXlJbm5lcikge1xuICAgICAgICBpZiAoc2VhcmNoT2JqKHNvcmdJdGVtLCBzZWFyY2hFbGVtZW50KSkge1xuICAgICAgICAgIGxvZ2dlci5sb2coXCJwYXJzZVNlYXJjaFBhdGhzIGZvdW5kIFwiICsgc2VhcmNoRWxlbWVudC5uYW1lKTtcbiAgICAgICAgICBmb3VuZE5hbWVzLmFkZChzZWFyY2hFbGVtZW50Lm5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vdEZvdW5kTmFtZXMuYWRkKHNlYXJjaEVsZW1lbnQubmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNlYXJjaEVsZW1lbnQubWV0aG9kID09PSBcIkRvY1F1ZXJ5XCIpIHsgLy8gU0NBTiBET0NVTUVOVFxuICAgICAgaWYgKHNlYXJjaE9iaih3aW5kb2MsIHNlYXJjaEVsZW1lbnQpKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJwYXJzZVNlYXJjaFBhdGhzIGZvdW5kIFwiICsgc2VhcmNoRWxlbWVudC5uYW1lKTtcbiAgICAgICAgZm91bmROYW1lcy5hZGQoc2VhcmNoRWxlbWVudC5uYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vdEZvdW5kTmFtZXMuYWRkKHNlYXJjaEVsZW1lbnQubmFtZSk7XG4gICAgICB9XG4gICAgfSAvLyBET0NRVUVSWSBwYXJzZVxuICB9XG5cbiAgaWYgKG5vdEZvdW5kTmFtZXMuc2l6ZSA9PT0gMCkge1xuICAgIHBhcnNlU2VhcmNoUGF0aHNSZXRyeSA9IFBBUlNFU0VBUkNITUFYUkVUUlk7XG4gICAgbG9nZ2VyLmxvZyhcInBhcnNlU2VhcmNoUGF0aHMgZm91bmQgYWxsIGVsZW1lbnRzIHNldHRpbmcgcmV0cnkgdG8gXCIgKyBwYXJzZVNlYXJjaFBhdGhzUmV0cnkpO1xuICB9IGVsc2UgaWYgKGZvdW5kTmFtZXMuc2l6ZSA9PT0gMCkge1xuICAgIC8vIHVwZGF0ZSByZXRyeSBjb3VudGVyIGFuZCBkZWxheSBvbmx5IGlmIGRvbSBpcyBhY3RpdmVcbiAgICBpZiAoZG9tU3RhdHVzID09PSBcImNvbXBsZXRlXCIgfHwgZG9tU3RhdHVzID09PSBcImludGVyYWN0aXZlXCIpIHtcbiAgICAgIHBhcnNlU2VhcmNoUGF0aHNEZWxheSAqPSAyO1xuICAgICAgcGFyc2VTZWFyY2hQYXRoc1JldHJ5ICs9IDE7XG4gICAgfVxuICAgIGxvZ2dlci5sb2coXCJwYXJzZVNlYXJjaFBhdGhzIHByb2Nlc3NlZCBidXQgbm90IGZvdW5kIGFueSwgc2V0dGluZyBkZWxheSBhbmQgcmV0cnkgdG8gXCIgK1xuICAgICAgcGFyc2VTZWFyY2hQYXRoc0RlbGF5ICsgXCIgYW5kIFwiICtcbiAgICAgIHBhcnNlU2VhcmNoUGF0aHNSZXRyeSArIFwiIGZvciBub3Rmb3VuZDogW1wiICtcbiAgICAgIEFycmF5LmZyb20obm90Rm91bmROYW1lcykuam9pbihcIiB8IFwiKSArIFwiXVwiLFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgbG9nZ2VyLmxvZyhcInBhcnNlU2VhcmNoUGF0aHMgcHJvY2Vzc2VkOiBub3Rmb3VuZDogW1wiICtcbiAgICAgIEFycmF5LmZyb20obm90Rm91bmROYW1lcykuam9pbihcIiB8IFwiKSArIFwiXSBhbmQgZm91bmQgXCIgK1xuICAgICAgZm91bmROYW1lcy5zaXplLFxuICAgICk7XG4gIH1cbn07XG5cbi8vIHBhcnNlIHNvdXJjZVxuY29uc3QgcGFyc2VyQ2FsbGVyID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gIGF3YWl0IHBhcnNlU2VhcmNoUGF0aHMoKTtcbiAgaWYgKHBhcnNlU2VhcmNoUGF0aHNSZXRyeSA8IFBBUlNFU0VBUkNITUFYUkVUUlkpIHtcbiAgICBsb2dnZXIubG9nKFwic2NoZWR1bGluZyBwYXJzZVNlYXJjaFBhdGhzIHRvIGJlIHJlY2FsbGVkIGluIFwiICsgcGFyc2VTZWFyY2hQYXRoc0RlbGF5ICsgXCJtc1wiKTtcbiAgICBzZXRUaW1lb3V0KHBhcnNlckNhbGxlciwgcGFyc2VTZWFyY2hQYXRoc0RlbGF5KTtcbiAgfVxufTtcblxuLy8gRXh0cmFjdCB2YWx1ZSBmcm9tIGpzb24gb2JqZWN0IHVzaW5nIGdpdmVuIHBhdGhcbi8vIElmIGFuIGVsZW1lbnQgaXMgKiwgY29uY2F0ZW5hdGUgcmVjdXJzaXZlbHkgYWxsIHN1Yi1wYXRoIHZhbHVlcyBhcyBzdHJpbmdcbmNvbnN0IGpzb25HZXQgPSAob2JqLCBwYXRoLCBjb25jYXRTZXBhcmF0b3IgPSBcIiB8IFwiKSA9PiB7XG4gIGlmICghb2JqKSByZXR1cm4gbnVsbDtcbiAgaWYgKCFwYXRoKSByZXR1cm4gbnVsbDtcblxuICB0cnkge1xuICAgIGNvbnN0IHBhdGhBcnJheSA9IHBhdGguc3BsaXQoXCIuXCIpO1xuICAgIGxldCBjdXJyZW50ID0gb2JqO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoY3VycmVudCA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICBpZiAocGF0aEFycmF5W2ldID09PSBcIipcIikge1xuICAgICAgICBjb25zdCBzdWJQYXRoID0gcGF0aEFycmF5LnNsaWNlKGkgKyAxKS5qb2luKFwiLlwiKTtcbiAgICAgICAgY29uc3Qgc3ViQXJyYXkgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBzdWJLZXkgaW4gY3VycmVudCkge1xuICAgICAgICAgIGlmIChjdXJyZW50W3N1YktleV0pIHtcbiAgICAgICAgICAgIGNvbnN0IHN1YlZhbHVlID0ganNvbkdldChjdXJyZW50W3N1YktleV0sIHN1YlBhdGgpO1xuICAgICAgICAgICAgaWYgKHN1YlZhbHVlKSB7XG4gICAgICAgICAgICAgIHN1YkFycmF5LnB1c2goc3ViVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3ViQXJyYXkuam9pbihjb25jYXRTZXBhcmF0b3IpO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IGN1cnJlbnRbcGF0aEFycmF5W2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuY29uc3QgcHJlcGFyZUNvcmVEYXRhID0gYXN5bmMgKCkgPT4ge1xuICAvLyBUT0RPOiBtZXJnZSB3aXRoIF9nYSBJRCBmZXRjaCBpbiBtYWluIGVudHJ5IHBvaW50XG4gIGNvbnN0IHdpbmRvd1B0ciA9IHdpbmRvdy50b3A7XG4gIGNvbnN0IG5hdlB0ciA9IHdpbmRvd1B0ci5uYXZpZ2F0b3I7XG5cbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJjb29raWVHYUlkXCIsIGV4dHJhY3RDb29raWVJZGVudGlmaWVyKHdpbmRvd1B0ci5kb2N1bWVudC5jb29raWUsIFwiX2dhXCIpKTtcblxuICBjb25zdCB2aWV3SWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpO1xuICBjb25zdCBzZXNzaW9uSWQgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFNFU1NJT05fU1RPUkFHRV9LRVlTLlNFU1NJT05fSUQpO1xuICAvKiBCZWFnbGUgZGF0YSAqL1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcInZcIiwgXCIwLjAuMjhcIik7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiblwiLCBgYmVhZ2xlLXNlc3Npb25faWQtJHtzZXNzaW9uSWR9YCk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwidklkXCIsIHZpZXdJZCk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwic3JcIiwgU1BMSVRfUkFUSU8pO1xuXG4gIGNvbnN0IHBsYXRmb3JtID0gd2luZG93UHRyLm5hdmlnYXRvcj8udXNlckFnZW50RGF0YT8ucGxhdGZvcm0gfHxcbiAgICB3aW5kb3dQdHIubmF2aWdhdG9yPy5wbGF0Zm9ybSB8fFxuICAgIHdpbmRvd1B0ci5uYXZpZ2F0b3I/LnVzZXJBZ2VudDtcblxuICBhZGRUb0JlYWdsZUluZm9MYXllcihcIm5hdlBsYXRmb3JtXCIsIHBsYXRmb3JtKTtcblxuICAvKiB3aW5kb3cgdmlldyBhcmVhICovXG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwid2luZG93UFJhdGlvXCIsIHdpbmRvd1B0ci5kZXZpY2VQaXhlbFJhdGlvKTtcblxuICBjb25zdCB3aW5kb3dTY3JlZW4gPSB7fTtcbiAgd2luZG93U2NyZWVuLmF2YWlsSGVpZ2h0ID0gd2luZG93UHRyLnNjcmVlbj8uYXZhaWxIZWlnaHQ7XG4gIHdpbmRvd1NjcmVlbi5hdmFpbEhlaWdodCA9IHdpbmRvd1B0ci5zY3JlZW4/LmF2YWlsSGVpZ2h0O1xuICB3aW5kb3dTY3JlZW4uYXZhaWxMZWZ0ID0gd2luZG93UHRyLnNjcmVlbj8uYXZhaWxMZWZ0O1xuICB3aW5kb3dTY3JlZW4uYXZhaWxUb3AgPSB3aW5kb3dQdHIuc2NyZWVuPy5hdmFpbFRvcDtcbiAgd2luZG93U2NyZWVuLmF2YWlsV2lkdGggPSB3aW5kb3dQdHIuc2NyZWVuPy5hdmFpbFdpZHRoO1xuICB3aW5kb3dTY3JlZW4uY29sb3JEZXB0aCA9IHdpbmRvd1B0ci5zY3JlZW4/LmNvbG9yRGVwdGg7XG4gIHdpbmRvd1NjcmVlbi5oZWlnaHQgPSB3aW5kb3dQdHIuc2NyZWVuPy5oZWlnaHQ7XG4gIHdpbmRvd1NjcmVlbi5waXhlbERlcHRoID0gd2luZG93UHRyLnNjcmVlbj8ucGl4ZWxEZXB0aDtcbiAgd2luZG93U2NyZWVuLndpZHRoID0gd2luZG93UHRyLnNjcmVlbj8ud2lkdGg7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwid2luZG93U2NyZWVuXCIsIHdpbmRvd1NjcmVlbik7XG5cbiAgY29uc3Qgd2luZG93VlBvcnQgPSB7fTtcbiAgd2luZG93VlBvcnQuaGVpZ2h0ID0gd2luZG93UHRyLnZpc3VhbFZpZXdwb3J0Py5oZWlnaHQ7XG4gIHdpbmRvd1ZQb3J0Lm9mZnNldExlZnQgPSB3aW5kb3dQdHIudmlzdWFsVmlld3BvcnQ/Lm9mZnNldExlZnQ7XG4gIHdpbmRvd1ZQb3J0Lm9mZnNldFRvcCA9IHdpbmRvd1B0ci52aXN1YWxWaWV3cG9ydD8ub2Zmc2V0VG9wO1xuICB3aW5kb3dWUG9ydC5wYWdlTGVmdCA9IHdpbmRvd1B0ci52aXN1YWxWaWV3cG9ydD8ucGFnZUxlZnQ7XG4gIHdpbmRvd1ZQb3J0LnBhZ2VUb3AgPSB3aW5kb3dQdHIudmlzdWFsVmlld3BvcnQ/LnBhZ2VUb3A7XG4gIHdpbmRvd1ZQb3J0LnNjYWxlID0gd2luZG93UHRyLnZpc3VhbFZpZXdwb3J0Py5zY2FsZTtcbiAgd2luZG93VlBvcnQud2lkdGggPSB3aW5kb3dQdHIudmlzdWFsVmlld3BvcnQ/LndpZHRoO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcIndpbmRvd1ZQb3J0XCIsIHdpbmRvd1ZQb3J0KTtcblxuICBpZiAoc2NyZWVuLndpZHRoKSB7XG4gICAgbGV0IHdpZHRoID0gcGFyc2VJbnQoc2NyZWVuLndpZHRoKTtcbiAgICBsZXQgaGVpZ2h0ID0gKHNjcmVlbi5oZWlnaHQpID8gcGFyc2VJbnQoc2NyZWVuLmhlaWdodCkgOiAwO1xuICAgIGlmICh3aWR0aCAhPT0gMCAmJiBoZWlnaHQgIT09IDApIHtcbiAgICAgIGNvbnN0IGlPUyA9IC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KHBsYXRmb3JtKTtcbiAgICAgIGlmIChpT1MgJiYgd2luZG93UHRyLmRldmljZVBpeGVsUmF0aW8pIHtcbiAgICAgICAgLy8gaW9zIHByb3ZpZGVzIERQSXMsIG5lZWQgdG8gbXVsdGlwbHlcbiAgICAgICAgd2lkdGggPSBNYXRoLnJvdW5kKHdpZHRoICogd2luZG93UHRyLmRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICBoZWlnaHQgPSBNYXRoLnJvdW5kKGhlaWdodCAqIHdpbmRvd1B0ci5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChNYXRoLmFicyh3aW5kb3dQdHIub3JpZW50YXRpb24pID09PSA5MCkge1xuICAgICAgICAgIC8vIHdlIGhhdmUgbGFuZHNjYXBlIG9yaWVudGF0aW9uXG4gICAgICAgICAgLy8gc3dpdGNoIHZhbHVlcyBmb3IgYWxsIGV4Y2VwdCBpb3NcbiAgICAgICAgICBjb25zdCB0ZW1wID0gd2lkdGg7XG4gICAgICAgICAgd2lkdGggPSBoZWlnaHQ7XG4gICAgICAgICAgaGVpZ2h0ID0gdGVtcDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJ3aW5kb3dcIiwgd2lkdGggKyBcInhcIiArIGhlaWdodCk7XG4gICAgfVxuICB9XG5cbiAgLyogbmF2aWdhdG9yICovXG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwibmF2SGlzdFNpemVcIiwgd2luZG93UHRyLmhpc3Rvcnk/Lmxlbmd0aCk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwibmF2QWdlbnRcIiwgbmF2UHRyLnVzZXJBZ2VudCk7XG4gIC8vIGNoZWNrIGlmIHVzZXJBZ2VudERhdGEgaXMgc3VwcG9ydGVkIGFuZCB1c2VyQWdlbnQgaXMgbm90IGF2YWlsYWJsZSwgdXNlIGl0XG4gIGlmICghd2luZG93UHRyLmJlYWdsZUluZm9MYXllci5uYXZBZ2VudCkge1xuICAgIGlmIChuYXZQdHIudXNlckFnZW50RGF0YSkge1xuICAgICAgLy8gdHVybiBicmFuZHMgYXJyYXkgaW50byBzdHJpbmdcbiAgICAgIGxldCBuYXZBZ2VudCA9IG5hdlB0cj8udXNlckFnZW50RGF0YT8uYnJhbmRzPy5tYXAoZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gZS5icmFuZCArIFwiOlwiICsgZS52ZXJzaW9uO1xuICAgICAgfSkuam9pbigpO1xuICAgICAgLy8gYWRkIG1vYmlsZSBpbmZvXG4gICAgICBuYXZBZ2VudCArPSAobmF2UHRyPy51c2VyQWdlbnREYXRhPy5tb2JpbGUgPyBcIm1vYmlcIiA6IFwiIFwiKTtcbiAgICAgIC8vIGFkZCBwbGF0Zm9ybSBpbmZvXG4gICAgICBuYXZBZ2VudCArPSBwbGF0Zm9ybTtcbiAgICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwibmF2QWdlbnRcIiwgbmF2QWdlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwibmF2SFdDb3Jlc1wiLCBuYXZQdHIuaGFyZHdhcmVDb25jdXJyZW5jeSk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwibmF2TGFuZ3VhZ2VcIiwgbmF2UHRyLmxhbmd1YWdlIHx8XG4gICAgICBuYXZQdHIuYnJvd3Nlckxhbmd1YWdlIHx8XG4gICAgICBuYXZQdHIuc3lzdGVtTGFuZ3VhZ2UgfHxcbiAgICAgIG5hdlB0ci51c2VyTGFuZ3VhZ2UsXG4gICk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwibmF2VG91Y2hcIiwgbmF2UHRyLm1heFRvdWNoUG9pbnRzKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJuYXZWZW5kb3JcIiwgbmF2UHRyLnZlbmRvcik7XG5cbiAgLyogcGVyZm9ybWFuY2UgbWV0cmljcyAqL1xuICBjb25zdCBwZXJmTWV0cmljcyA9IHt9O1xuICBpZiAod2luZG93UHRyLnBlcmZvcm1hbmNlICYmIHdpbmRvd1B0ci5wZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlUeXBlKFwibmF2aWdhdGlvblwiKVswXSkge1xuICAgIGNvbnN0IHBlcmZOYXZpZ2F0aW9uTWV0cmljcyA9IHdpbmRvd1B0ci5wZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlUeXBlKFwibmF2aWdhdGlvblwiKVswXTtcbiAgICBwZXJmTWV0cmljcy5jb25uZWN0ID0gTWF0aC5yb3VuZChwZXJmTmF2aWdhdGlvbk1ldHJpY3MuY29ubmVjdEVuZCAtIHBlcmZOYXZpZ2F0aW9uTWV0cmljcy5jb25uZWN0U3RhcnQpO1xuICAgIHBlcmZNZXRyaWNzLnJlcXVlc3QgPSBNYXRoLnJvdW5kKHBlcmZOYXZpZ2F0aW9uTWV0cmljcy5yZXNwb25zZUVuZCAtIHBlcmZOYXZpZ2F0aW9uTWV0cmljcy5yZXF1ZXN0U3RhcnQpO1xuICAgIHBlcmZNZXRyaWNzLmRvbSA9IE1hdGgucm91bmQocGVyZk5hdmlnYXRpb25NZXRyaWNzLmRvbUNvbXBsZXRlIC0gcGVyZk5hdmlnYXRpb25NZXRyaWNzLmRvbUludGVyYWN0aXZlKTtcbiAgICBwZXJmTWV0cmljcy5sb2FkID0gTWF0aC5yb3VuZChwZXJmTmF2aWdhdGlvbk1ldHJpY3MubG9hZEV2ZW50RW5kIC0gcGVyZk5hdmlnYXRpb25NZXRyaWNzLmxvYWRFdmVudFN0YXJ0KTtcbiAgICBwZXJmTWV0cmljcy5kdXJhdGlvbiA9IE1hdGgucm91bmQocGVyZk5hdmlnYXRpb25NZXRyaWNzLmR1cmF0aW9uKTtcbiAgfVxuICBhZGRUb0JlYWdsZUluZm9MYXllcihcInBlcmZNZXRyaWNzXCIsIHBlcmZNZXRyaWNzKTtcblxuICBhZGRUb0JlYWdsZUluZm9MYXllcihcImludGVybmV0U3BlZWRcIiwgd2luZG93UHRyLm5hdmlnYXRvcj8uY29ubmVjdGlvbj8uZG93bmxpbmspO1xuXG4gIC8qIG1pc2NlbGxhbmVvdXMgKi9cbiAgY29uc3QgY3VycmVudFVSTCA9IG5ldyBVUkwod2luZG93LnRvcC5sb2NhdGlvbi5ocmVmKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJ1XCIsIGN1cnJlbnRVUkwuaHJlZik7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiZFwiLCBjdXJyZW50VVJMLmhvc3RuYW1lKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJkb250dHJhY2tcIiwgbmF2UHRyLmRvTm90VHJhY2sgfHwgd2luZG93UHRyLmRvTm90VHJhY2sgfHwgbmF2UHRyLm1zRG9Ob3RUcmFjayk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiclwiLCB3aW5kb3dQdHIuZG9jdW1lbnQucmVmZXJyZXIpO1xuXG4gIC8qIFZpdmVuc2Ugc3BlY2lmaWMgKi9cbiAgLy8gaWYgdXJsIGxpa2UgeCB0aGVuIHNldCBQYWdlVHlwZSA9IHlcbiAgaWYgKGN1cnJlbnRVUkwucGF0aG5hbWUuaW5kZXhPZihcImZhdm9yaWxlcmltLmh0bWxcIikgPiAtMSkge1xuICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiUGFnZVR5cGVcIiwgXCJmYXZvcml0ZXNcIik7XG4gIH0gZWxzZSBpZiAoY3VycmVudFVSTC5wYXRobmFtZS5pbmRleE9mKFwic2lwYXJpcy1saXN0ZXNpLmh0bWxcIikgPiAtMSkge1xuICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiUGFnZVR5cGVcIiwgXCJiYXNrZXRcIik7XG4gIH0gZWxzZSBpZiAoY3VycmVudFVSTC5wYXRobmFtZS5pbmRleE9mKFwic2lwYXJpcy1vemV0aS5odG1sXCIpID4gLTEpIHtcbiAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcIlBhZ2VUeXBlXCIsIFwicHVyY2hhc2VcIik7XG4gIH0gZWxzZSBpZiAoY3VycmVudFVSTC5wYXRobmFtZS5pbmRleE9mKFwib2RlbWUuaHRtbFwiKSA+IC0xKSB7XG4gICAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJQYWdlVHlwZVwiLCBcInBheW1lbnRcIik7XG4gIH0gZWxzZSBpZiAoY3VycmVudFVSTC5wYXRobmFtZS5pbmRleE9mKFwiYWRyZXMtbGlzdGVzaS5odG1sXCIpID4gLTEpIHtcbiAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcIlBhZ2VUeXBlXCIsIFwiYWRkcmVzc1wiKTtcbiAgfSBlbHNlIGlmIChjdXJyZW50VVJMLnBhdGhuYW1lLmluZGV4T2YoXCJzaXBhcmlzbGVyaW0uaHRtbFwiKSA+IC0xKSB7XG4gICAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJQYWdlVHlwZVwiLCBcInBhc3RvcmRlcnNcIik7XG4gIH0gZWxzZSBpZiAoY3VycmVudFVSTC5wYXRobmFtZS5pbmRleE9mKFwidXllLWtheWl0Lmh0bWxcIikgPiAtMSkge1xuICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiUGFnZVR5cGVcIiwgXCJyZWdpc3RlclwiKTtcbiAgfVxufTtcblxuY29uc3QgZ2V0U09SR0FycmF5ID0gKCkgPT4ge1xuICBjb25zdCBzY2hlbWFPcmdFbHRzID0gd2luZG93LnRvcC5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW3R5cGU9XFxcImFwcGxpY2F0aW9uL2xkK2pzb25cXFwiXVwiKTtcbiAgY29uc3Qgc29yZ0FycmF5ID0gW107XG5cbiAgZm9yIChjb25zdCBzVGFnIG9mIHNjaGVtYU9yZ0VsdHMpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY250bnQgPSBzVGFnLnRleHRDb250ZW50O1xuICAgICAgY29uc3QganNvbmNvbnRlbnQgPSBKU09OLnBhcnNlKGNudG50KTtcbiAgICAgIHNvcmdBcnJheS5wdXNoKGpzb25jb250ZW50KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNvcmdBcnJheTtcbn07XG5cbmV4cG9ydCBjb25zdCBwcm9kdWN0SW5mb0xvb2t1cCA9IGFzeW5jICgpID0+IHtcbiAgaWYgKCFjdXJyZW50UGFnZVR5cGUpIHtcbiAgICBjdXJyZW50UGFnZVR5cGUgPSBhd2FpdCBnZXRGcm9tQmVhZ2xlSW5mb0xheWVyKFwiUGFnZVR5cGVcIiwgdHJ1ZSwgMjAsIDEwMDApO1xuICB9XG5cbiAgaWYgKCFjdXJyZW50UGFnZVR5cGUpIHtcbiAgICBsb2dnZXIuZmFpbGVkKFwicHJvZHVjdEluZm9Mb29rdXA6IENhbm5vdCBEZXRlY3QgUGFnZSBUeXBlXCIpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbG9nZ2VyLmxvZyhcInByb2R1Y3RJbmZvTG9va3VwOiBTdGFydGluZyBwcm9kdWN0IGluZm8gbG9va3VwXCIpO1xuXG4gIC8vIHBvbGwgZm9yIGFjdGl2ZVNLVUxpc3RcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICBpZiAoYWN0aXZlU0tVTGlzdCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDIwKSk7XG4gIH1cblxuICBpZiAoIWFjdGl2ZVNLVUxpc3QgfHwgYWN0aXZlU0tVTGlzdC5sZW5ndGggPT09IDApIHtcbiAgICBsb2dnZXIuZmFpbGVkKFwicHJvZHVjdEluZm9Mb29rdXA6IE5vIHNrdSBmb3VuZFwiKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgaGVhZGVycy5hcHBlbmQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICBsZXQgcHJvZHVjdEluZm87XG4gIHRyeSB7XG4gICAgcHJvZHVjdEluZm8gPSBhd2FpdCBmZXRjaChMT09LVVBfQVBJX1VSTCwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGFjdGl2ZVNLVUxpc3QpLFxuICAgICAgaGVhZGVycyxcbiAgICAgIG1vZGU6IFwiY29yc1wiLFxuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyLndhcm4oXCJwcm9kdWN0SW5mb0xvb2t1cDogRmV0Y2ggdG8gY2F0YWxvZyBhcGkgZmFpbGVkXCIpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmICghcHJvZHVjdEluZm8ub2spIHtcbiAgICBsb2dnZXIuZmFpbGVkKFwicHJvZHVjdEluZm9Mb29rdXA6IFByb2R1Y3QgaW5mbyBsb29rdXAgZmFpbGVkXCIpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHByb2R1Y3RJbmZvID0gYXdhaXQgcHJvZHVjdEluZm8uanNvbigpO1xuICBpZiAoIXByb2R1Y3RJbmZvKSB7XG4gICAgbG9nZ2VyLmZhaWxlZChcInByb2R1Y3RJbmZvTG9va3VwOiBQcm9kdWN0IGluZm8gZXh0cmFjdGlvbiBmcm9tIHJlc3BvbnNlIGZhaWxlZFwiKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBsb2dnZXIuc3VjY2VzcyhcInByb2R1Y3RJbmZvTG9va3VwOiBQcm9kdWN0IGluZm8gbG9va3VwIHN1Y2Nlc3NmdWxcIik7XG5cbiAgLy8gQ2hlY2sgaWYgcGFnZSBpcyBiYXNrZXQgcGFnZVxuICBpZiAoY3VycmVudFBhZ2VUeXBlID09PSBcImJhc2tldFwiKSB7XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShTRVNTSU9OX1NUT1JBR0VfS0VZUy5ORF9TS1VfSU5GT19CQVNLRVQsIEpTT04uc3RyaW5naWZ5KHByb2R1Y3RJbmZvKSk7XG4gIH1cbiAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShTRVNTSU9OX1NUT1JBR0VfS0VZUy5ORF9TS1VfSU5GTywgSlNPTi5zdHJpbmdpZnkocHJvZHVjdEluZm8pKTtcbiAgcmV0dXJuIHByb2R1Y3RJbmZvO1xufTtcblxuIiwiLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuaW1wb3J0IHthZGRUb0JlYWdsZUluZm9MYXllcn0gZnJvbSBcIi4vQmVhZ2xlSW5mb0xheWVyXCI7XG5pbXBvcnQge1xuICBDT09LSUVfTkFNRSxcbiAgTE9DQUxfU1RPUkFHRV9LRVlTLFxuICBTRVNTSU9OX1NUT1JBR0VfS0VZUyxcbiAgU1RZTEVTSEVFVF9MT0NBVElPTixcbiAgVFJFQVRNRU5UU19MT0NBVElPTixcbiAgVFJFQVRNRU5UX1dFSUdIVFNfTE9DQVRJT04sXG59IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi9sb2dnZXJcIjtcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIk5leHRkYXkgVXRpbHNcIik7XG5jb25zdCBtb250aHMgPSB7XG4gIFwib2Nha1wiOiAwLFxuICBcIsWfdWJhdFwiOiAxLFxuICBcIm1hcnRcIjogMixcbiAgXCJuaXNhblwiOiAzLFxuICBcIm1hecSxc1wiOiA0LFxuICBcImhhemlyYW5cIjogNSxcbiAgXCJ0ZW1tdXpcIjogNixcbiAgXCJhxJ91c3Rvc1wiOiA3LFxuICBcImV5bMO8bFwiOiA4LFxuICBcImVraW1cIjogOSxcbiAgXCJrYXPEsW1cIjogMTAsXG4gIFwiYXJhbMSxa1wiOiAxMSxcbn07XG5jb25zdCByYW5kb21VVUlERmFsbGJhY2sgPSAoKSA9PiB7XG4gIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMTE3NTIzLzI4MDAyMThcbiAgLy8gTElDRU5TRTogaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LXNhLzQuMC9sZWdhbGNvZGVcbiAgY3J5cHRvLnJhbmRvbVVVSUQgPSBmdW5jdGlvbiByYW5kb21VVUlEKCkge1xuICAgIHJldHVybiAoXG4gICAgICBbMWU3XSArIC0xZTMgKyAtNGUzICsgLThlMyArIC0xZTExKS5yZXBsYWNlKC9bMDE4XS9nLFxuICAgICAgICAoYykgPT4gKGMgXiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KDEpKVswXSAmIDE1ID4+IGMgLyA0KS50b1N0cmluZygxNiksXG4gICAgKTtcbiAgfTtcbn07XG5cbmlmICghKFwicmFuZG9tVVVJRFwiIGluIGNyeXB0bykpIHtcbiAgcmFuZG9tVVVJREZhbGxiYWNrKCk7XG59XG5cbmV4cG9ydCBjb25zdCByZW1vdmVEb2N1bWVudEhpZGUgPSAoKSA9PiB7XG4gIHdpbmRvdy50b3AuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJuZXh0RGF5LWhpZGVcIik7XG59O1xuXG5leHBvcnQgY29uc3QgZmV0Y2hUcmVhdG1lbnRzID0gYXN5bmMgKCkgPT4ge1xuICBsb2dnZXIubG9nKFwiRmV0Y2hpbmcgdHJlYXRtZW50c1wiKTtcbiAgY29uc3QgdHJlYXRtZW50cyA9IGF3YWl0IGZldGNoKFRSRUFUTUVOVFNfTE9DQVRJT04pO1xuICBjb25zdCBqc29uVHJlYXRtZW50ID0gYXdhaXQgdHJlYXRtZW50cy5qc29uKCk7XG4gIHJldHVybiBqc29uVHJlYXRtZW50O1xufTtcblxuZXhwb3J0IGNvbnN0IGZldGNoVHJlYXRtZW50V2VpZ2h0cyA9IGFzeW5jICgpID0+IHtcbiAgbG9nZ2VyLmxvZyhcIkZldGNoaW5nIHRyZWF0bWVudCB3ZWlnaHRzXCIpO1xuICBjb25zdCB0cmVhdG1lbnRXZWlnaHRzID0gYXdhaXQgZmV0Y2goVFJFQVRNRU5UX1dFSUdIVFNfTE9DQVRJT04pO1xuICBjb25zdCBqc29uVHJlYXRtZW50V2VpZ2h0cyA9IGF3YWl0IHRyZWF0bWVudFdlaWdodHMuanNvbigpO1xuICByZXR1cm4ganNvblRyZWF0bWVudFdlaWdodHM7XG59O1xuXG5leHBvcnQgY29uc3QgZXh0cmFjdENvb2tpZUlkZW50aWZpZXIgPSAoY29va2llU3RyaW5nLCBjb29raWVOYW1lKSA9PiB7XG4gIGlmICghY29va2llU3RyaW5nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBwYXJzZWQgPSBjb29raWVTdHJpbmdcbiAgICAgIC5zcGxpdChcIjtcIilcbiAgICAgIC5tYXAoKHYpID0+IHYuc3BsaXQoXCI9XCIpKVxuICAgICAgLnJlZHVjZSgoYWNjLCB2KSA9PiB7XG4gICAgICAgIGlmICh2WzBdICYmIHZbMV0pIHtcbiAgICAgICAgICBhY2NbZGVjb2RlVVJJQ29tcG9uZW50KHZbMF0udHJpbSgpKV0gPSBkZWNvZGVVUklDb21wb25lbnQodlsxXS50cmltKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7fSk7XG5cbiAgbGV0IGlkZW50aWZpZXIgPSBwYXJzZWRbY29va2llTmFtZV07XG4gIGlmICghaWRlbnRpZmllcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChjb29raWVOYW1lID09PSBcIl9nYVwiKSB7XG4gICAgLy8gZXh0cmFjdCB1bmlxdWUgaWRlbnRpZmllciBmcm9tIEdBIGNvb2tpZVxuICAgIGNvbnN0IGlkZW50aWZpZXJJbmRleCA9IDI7XG4gICAgaWRlbnRpZmllciA9IGlkZW50aWZpZXIuc3BsaXQoXCIuXCIpW2lkZW50aWZpZXJJbmRleF07XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXI7XG59O1xuXG5leHBvcnQgY29uc3QgZGV0ZXJtaW5lUGN0ID0gYXN5bmMgKGlkZW50aWZpZXIpID0+IHtcbiAgY29uc3Qgc3Vic3RyaW5nU3RhcnRQb3NpdGlvbiA9IDk7XG4gIGNvbnN0IHN1YnN0cmluZ0xlbmd0aCA9IDg7XG4gIGNvbnN0IHN1YnN0cmluZ0VuZFBvc2l0aW9uID0gc3Vic3RyaW5nU3RhcnRQb3NpdGlvbiArIHN1YnN0cmluZ0xlbmd0aDtcbiAgaWYgKCFpZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIGNvbnN0IGhhc2hTdHJpbmcgPSBhd2FpdCBjcmVhdGVIYXNoU3RyaW5nKGlkZW50aWZpZXIpO1xuICAvLyBNYXAgdGhlIGNvb2tpZSBoYXNoIHRvIGEgbnVtYmVyIGJldHdlZW4gMCAtPiA5OSxcbiAgLy8gdGhpcyBudW1iZXIgaXMgdGhlIG9uUmF0aW9uXG4gIGNvbnN0IGhhc2hOdW1iZXIgPSBwYXJzZUludChoYXNoU3RyaW5nLnN1YnN0cmluZyhzdWJzdHJpbmdTdGFydFBvc2l0aW9uLCBzdWJzdHJpbmdFbmRQb3NpdGlvbiksIDE2KTtcblxuICByZXR1cm4gaGFzaE51bWJlciAlIDEwMDtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVIYXNoU3RyaW5nID0gYXN5bmMgKHN0cmluZ1RvSGFzaCkgPT4ge1xuICAvLyBlbmNvZGUgc3RyaW5nIHRvIGFuIGFycmF5IG9mIDgtYml0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzXG4gIGNvbnN0IGVuY29kZWQgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyaW5nVG9IYXNoKTtcblxuICAvLyBoYXNoIHRoZSBlbmNvZGVkIGNvb2tpZSBpbnRvIGEgYnVmZmVyXG4gIGNvbnN0IGhhc2hCdWZmZXIgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdChcIlNIQS0xXCIsIGVuY29kZWQpO1xuXG4gIC8vIGNvbnZlcnQgYnVmZmVyIHRvIGJ5dGUgYXJyYXlcbiAgY29uc3QgaGFzaEFycmF5ID0gQXJyYXkuZnJvbShuZXcgVWludDhBcnJheShoYXNoQnVmZmVyKSk7XG5cbiAgLy8gY29udmVydCBieXRlcyB0byBoZXggc3RyaW5nIGFuZCByZXR1cm5cbiAgcmV0dXJuIGhhc2hBcnJheS5tYXAoKGIpID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSkuam9pbihcIlwiKTtcbn07XG5cbmV4cG9ydCBjb25zdCBleGl0U2Nyb2xsTGlzdGVuZXIgPSAoY2FsbEJhY2spID0+IHtcbiAgY29uc3QgbG9vcCA9ICgpID0+IHtcbiAgICBjb25zdCBzY3JvbGxUb3AgPSB3aW5kb3cudG9wLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XG4gICAgaWYgKGxhc3RTY3JvbGxUb3AgLSA0MDAgPiBzY3JvbGxUb3ApIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoZXhpdFNjcm9sbEludGVydmFsKTtcbiAgICAgIGNhbGxCYWNrKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3RTY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgfVxuICB9O1xuXG4gIGxldCBsYXN0U2Nyb2xsVG9wID0gd2luZG93LnRvcC5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICBjb25zdCBleGl0U2Nyb2xsSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChsb29wLCA1MDApO1xufTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGFwcGx5IHRyZWF0bWVudHMgdG8gdGhlIHBhZ2Ugb24gc3BlY2lmaWMgbWVkaWEgdHlwZS5cbiAqIEBwYXJhbSB7TWVkaWFRdWVyeUxpc3R9IG1lZGlhUXVlcnlDb25kaXRpb24gd2luZG93Lm1hdGNoTWVkaWEoXCIobWF4LXdpZHRoOiA1MDBweClcIilcbiAqIEBwYXJhbSB7RE9NTm9kZUxpc3QgfSBlbGVtZW50cyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiZGl2LnByb2R1Y3RfaW5mb1wiKVxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlQ2hhbmdlc01hcCB7IFwibWFyZ2luLXRvcFwiIDogXCIxMHJlbVwifVxuICogQHJldHVybnNcbiAqL1xuXG5leHBvcnQgY29uc3Qgc3R5bGVBcHBsaWNhdG9yID0gKGVsZW1lbnRzLCBzdHlsZUNoYW5nZXNNYXApID0+IHtcbiAgbG9nZ2VyLmxvZyhcIkFwcGx5aW5nIHN0eWxlIGNoYW5nZXNcIiwgc3R5bGVDaGFuZ2VzTWFwLCBcInRvIGVsZW1lbnRzXCIsIGVsZW1lbnRzKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzdHlsZUNoYW5nZXNNYXApKSB7XG4gICAgICBlbGVtZW50LnN0eWxlW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpbmplY3RTdHlsZVNoZWV0ID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCBzdHlsZVNoZWV0ID0gd2luZG93LnRvcC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiAgc3R5bGVTaGVldC5yZWwgPSBcInN0eWxlc2hlZXRcIjtcbiAgc3R5bGVTaGVldC50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuICBzdHlsZVNoZWV0LmhyZWYgPSBTVFlMRVNIRUVUX0xPQ0FUSU9OO1xuICB3aW5kb3cudG9wLmRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVTaGVldCk7XG59O1xuXG5leHBvcnQgY29uc3QgcHJlcGFyZUFjdGlvbnMgPSBhc3luYyAoaWRlbnRpZmllciwgYWN0aW9uc1RvUHJlcGFyZSwgYnVzaW5lc3NSdWxlSWQpID0+IHtcbiAgY29uc3QgYWN0aW9ucyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYWN0aW9uc1RvUHJlcGFyZSkpO1xuICBsZXQgdmFyaWFudCA9IG51bGw7XG4gIGZvciAoY29uc3QgYWN0aW9uIG9mIGFjdGlvbnMpIHtcbiAgICBjb25zdCB7YnVzaW5lc3NSdWxlVHJhbnNmb3JtYXRpb25zLCB2YXJpYW50c30gPSBhY3Rpb247XG4gICAgaWYgKCFidXNpbmVzc1J1bGVUcmFuc2Zvcm1hdGlvbnMgJiYgIXZhcmlhbnRzKSBjb250aW51ZTtcbiAgICBpZiAoYnVzaW5lc3NSdWxlSWQgJiYgYnVzaW5lc3NSdWxlVHJhbnNmb3JtYXRpb25zKSB7XG4gICAgICBmb3IgKGNvbnN0IGJ1c2luZXNzVHJhbnNmb3JtYXRpb24gb2YgYnVzaW5lc3NSdWxlVHJhbnNmb3JtYXRpb25zKSB7XG4gICAgICAgIGlmIChidXNpbmVzc1RyYW5zZm9ybWF0aW9uLmlkID09PSBidXNpbmVzc1J1bGVJZCkge1xuICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGJ1c2luZXNzVHJhbnNmb3JtYXRpb24pIHtcbiAgICAgICAgICAgIGlmIChrZXkgIT09IFwiaWRcIikge1xuICAgICAgICAgICAgICBhY3Rpb25ba2V5XSA9IGJ1c2luZXNzVHJhbnNmb3JtYXRpb25ba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHZhcmlhbnRzKSB7XG4gICAgICBmb3IgKGNvbnN0IHZhcmlhbnRLZXkgb2YgT2JqZWN0LmtleXModmFyaWFudHMpKSB7XG4gICAgICAgIGNvbnN0IHJhbmRvbVBjdCA9IGF3YWl0IGRldGVybWluZVBjdChpZGVudGlmaWVyICsgdmFyaWFudEtleSk7XG4gICAgICAgIGlmIChyYW5kb21QY3QgPCBhY3Rpb24udmFyaWFudHNbdmFyaWFudEtleV0ud2VpZ2h0KSB7XG4gICAgICAgICAgdmFyaWFudCA9IHZhcmlhbnRLZXk7XG4gICAgICAgICAgaWYgKGJ1c2luZXNzUnVsZUlkICYmIHZhcmlhbnRzW3ZhcmlhbnRLZXldLmJ1c2luZXNzUnVsZVRyYW5zZm9ybWF0aW9ucykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBidXNpbmVzc1RyYW5zZm9ybWF0aW9uIG9mIHZhcmlhbnRzW3ZhcmlhbnRLZXldLmJ1c2luZXNzUnVsZVRyYW5zZm9ybWF0aW9ucykge1xuICAgICAgICAgICAgICBpZiAoYnVzaW5lc3NUcmFuc2Zvcm1hdGlvbi5pZCA9PSBidXNpbmVzc1J1bGVJZCkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGJ1c2luZXNzVHJhbnNmb3JtYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSBcImlkXCIpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgYWN0aW9uW2tleV0gPSBidXNpbmVzc1RyYW5zZm9ybWF0aW9uW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHZhcmlhbnRzW3ZhcmlhbnRLZXldKSB7XG4gICAgICAgICAgICAgIGlmIChrZXkgIT09IFwid2VpZ2h0XCIgJiYga2V5ICE9PSBcImJ1c2luZXNzUnVsZVRyYW5zZm9ybWF0aW9uc1wiKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uW2tleV0gPSB2YXJpYW50c1t2YXJpYW50S2V5XVtrZXldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBbYWN0aW9ucywgdmFyaWFudF07XG59O1xuXG5leHBvcnQgY29uc3QgaW5pdGlhdGVTZXNzaW9uU3RvcmFnZXMgPSAoKSA9PiB7XG4gIGNvbnN0IHtQQUdFX1ZJRVdTLCBQT1BVUF9ESVNQTEFZX0ZMQUcsIFNFU1NJT05fSUQsIFNFU1NJT05fVElNRVNUQU1QLCBTRVNTSU9OX0hJU1RPUll9ID0gU0VTU0lPTl9TVE9SQUdFX0tFWVM7XG5cbiAgY29uc3QgcGFnZVZpZXdzID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQQUdFX1ZJRVdTKTtcbiAgY29uc3QgcG9wdXBEaXNwbGF5RmxhZyA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oUE9QVVBfRElTUExBWV9GTEFHKTtcbiAgY29uc3Qgc2Vzc2lvbklkID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShTRVNTSU9OX0lEKTtcbiAgY29uc3Qgc2Vzc2lvblRpbWVzdGFtcCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oU0VTU0lPTl9USU1FU1RBTVApO1xuICBjb25zdCBzZXNzaW9uSGlzdG9yeSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oU0VTU0lPTl9ISVNUT1JZKTtcblxuICBpZiAoIXBhZ2VWaWV3cykge1xuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oUEFHRV9WSUVXUywgMSk7XG4gIH0gZWxzZSB7XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQQUdFX1ZJRVdTLCBwYXJzZUludChwYWdlVmlld3MpICsgMSk7XG4gIH1cbiAgaWYgKHBvcHVwRGlzcGxheUZsYWcgPT09IG51bGwpIHtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBPUFVQX0RJU1BMQVlfRkxBRywgMCk7XG4gIH1cbiAgaWYgKCFzZXNzaW9uSWQpIHtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFNFU1NJT05fSUQsIGNyeXB0by5yYW5kb21VVUlEKCkpO1xuICB9XG4gIGlmICghc2Vzc2lvblRpbWVzdGFtcCkge1xuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oU0VTU0lPTl9USU1FU1RBTVAsIERhdGUubm93KCkpO1xuICB9XG4gIGlmICghc2Vzc2lvbkhpc3RvcnkpIHtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFNFU1NJT05fSElTVE9SWSwgW3dpbmRvdy5sb2NhdGlvbi5wYXRobmFtZV0pO1xuICB9IGVsc2Uge1xuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oU0VTU0lPTl9ISVNUT1JZLCBbd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLCBzZXNzaW9uSGlzdG9yeV0pO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgY29uZGl0aW9uQ2hlY2tlciA9IChydW5UaW1lVmFsdWUsIGNvbmRpdGlvbiwgdmFsdWUpID0+IHtcbiAgaWYgKGNvbmRpdGlvbiA9PT0gXCJub3RFeGlzdFwiKSB7XG4gICAgaWYgKCFydW5UaW1lVmFsdWUpIHtcbiAgICAgIGxvZ2dlci5zdWNjZXNzKFwiY29uZGl0aW9uQ2hlY2tlcjogLXNhdGlzZmllZC0gdGFyZ2V0IGRvZXMgbm90IGV4aXN0XCIpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGxvZ2dlci5mYWlsZWQoXCJjb25kaXRpb25DaGVja2VyOiAtbm90IHNhdGlzZmllZC0gdGFyZ2V0IGRvZXMgZXhpc3RcIik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChydW5UaW1lVmFsdWUgPT09IG51bGwgfHxcbiAgICBydW5UaW1lVmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgIGNvbmRpdGlvbiA9PT0gbnVsbCB8fFxuICAgIGNvbmRpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbG9nZ2VyLmZhaWxlZChcImNvbmRpdGlvbkNoZWNrZXI6IHJ1blRpbWVWYWx1ZSBvciBjb25kaXRpb24gaXMgbm90IGRlZmluZWRcIik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN3aXRjaCAoY29uZGl0aW9uKSB7XG4gICAgY2FzZSBcImV4aXN0XCI6XG4gICAgICBpZiAocnVuVGltZVZhbHVlKSB7XG4gICAgICAgIGxvZ2dlci5zdWNjZXNzKFwiY29uZGl0aW9uQ2hlY2tlcjogLXNhdGlzZmllZC0gdGFyZ2V0IGRvZXMgZXhpc3RcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmZhaWxlZChcImNvbmRpdGlvbkNoZWNrZXI6IC1ub3Qgc2F0aXNmaWVkLSB0YXJnZXQgZG9lcyBub3QgZXhpc3RcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImluY2x1ZGVzXCI6XG4gICAgY2FzZSBcImNvbnRhaW5zXCI6XG4gICAgICBpZiAocnVuVGltZVZhbHVlLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICBsb2dnZXIuc3VjY2VzcyhcImNvbmRpdGlvbkNoZWNrZXI6IC1zYXRpc2ZpZWQtIHRhcmdldCBjb250YWlucyB2YWx1ZVwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBsb2dnZXIuZmFpbGVkKFwiY29uZGl0aW9uQ2hlY2tlcjogLW5vdCBzYXRpc2ZpZWQtIHRhcmdldCBkb2VzIG5vdCBjb250YWluIHZhbHVlXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhc2UgXCJub3RJbmNsdWRlc1wiOlxuICAgIGNhc2UgXCJub3RDb250YWluc1wiOlxuICAgICAgaWYgKCFydW5UaW1lVmFsdWUuaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgIGxvZ2dlci5zdWNjZXNzKFwiY29uZGl0aW9uQ2hlY2tlcjogLXNhdGlzZmllZC0gdGFyZ2V0IGRvZXMgbm90IGNvbnRhaW4gdmFsdWVcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmZhaWxlZChcImNvbmRpdGlvbkNoZWNrZXI6IC1ub3Qgc2F0aXNmaWVkLSB0YXJnZXQgY29udGFpbnMgdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImVxdWFsXCI6XG4gICAgICBpZiAocnVuVGltZVZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICBsb2dnZXIuc3VjY2VzcyhcImNvbmRpdGlvbkNoZWNrZXI6IC1zYXRpc2ZpZWQtIHRhcmdldCBlcXVhbHMgdmFsdWVcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmZhaWxlZChcImNvbmRpdGlvbkNoZWNrZXI6IC1ub3Qgc2F0aXNmaWVkLSB0YXJnZXQgZG9lcyBub3QgZXF1YWwgdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcIm5vdEVxdWFsXCI6XG4gICAgICBpZiAocnVuVGltZVZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICBsb2dnZXIuc3VjY2VzcyhcImNvbmRpdGlvbkNoZWNrZXI6IC1zYXRpc2ZpZWQtIHRhcmdldCBkb2VzIG5vdCBlcXVhbCB2YWx1ZVwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBsb2dnZXIuZmFpbGVkKFwiY29uZGl0aW9uQ2hlY2tlcjogLW5vdCBzYXRpc2ZpZWQtIHRhcmdldCBlcXVhbHMgdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImdyZWF0ZXJUaGFuXCI6XG4gICAgICBpZiAocnVuVGltZVZhbHVlID4gdmFsdWUpIHtcbiAgICAgICAgbG9nZ2VyLnN1Y2Nlc3MoXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgaXMgZ3JlYXRlciB0aGFuIHZhbHVlXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5mYWlsZWQoXCJjb25kaXRpb25DaGVja2VyOiAtbm90IHNhdGlzZmllZC0gdGFyZ2V0IGlzIG5vdCBncmVhdGVyIHRoYW4gdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImxlc3NUaGFuXCI6XG4gICAgICBpZiAocnVuVGltZVZhbHVlIDwgdmFsdWUpIHtcbiAgICAgICAgbG9nZ2VyLnN1Y2Nlc3MoXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgaXMgbGVzcyB0aGFuIHZhbHVlXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5mYWlsZWQoXCJjb25kaXRpb25DaGVja2VyOiAtbm90IHNhdGlzZmllZC0gdGFyZ2V0IGlzIG5vdCBsZXNzIHRoYW4gdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImdyZWF0ZXJFcXVhbHNcIjpcbiAgICAgIGlmIChydW5UaW1lVmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbG9nZ2VyLnN1Y2Nlc3MoXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgaXMgZ3JlYXRlciBvciBlcXVhbCB0aGFuIHZhbHVlXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5mYWlsZWQoXCJjb25kaXRpb25DaGVja2VyOiAtbm90IHNhdGlzZmllZC0gdGFyZ2V0IGlzIG5vdCBncmVhdGVyIG9yIGVxdWFsIHRoYW4gdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImxlc3NFcXVhbHNcIjpcbiAgICAgIGlmIChydW5UaW1lVmFsdWUgPD0gdmFsdWUpIHtcbiAgICAgICAgbG9nZ2VyLnN1Y2Nlc3MoXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgaXMgbGVzcyBvciBlcXVhbCB0aGFuIHZhbHVlXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5mYWlsZWQoXCJjb25kaXRpb25DaGVja2VyOiAtbm90IHNhdGlzZmllZC0gdGFyZ2V0IGlzIG5vdCBsZXNzIG9yIGVxdWFsIHRoYW4gdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImJldHdlZW5cIjoge1xuICAgICAgbGV0IFttaW4sIG1heF0gPSB2YWx1ZS5zcGxpdChcIixcIik7XG4gICAgICBtaW4gPSBwYXJzZUludChtaW4pO1xuICAgICAgbWF4ID0gcGFyc2VJbnQobWF4KTtcbiAgICAgIGlmIChydW5UaW1lVmFsdWUgPj0gbWluICYmIHJ1blRpbWVWYWx1ZSA8PSBtYXgpIHtcbiAgICAgICAgbG9nZ2VyLnN1Y2Nlc3MoXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgaXMgYmV0d2VlbiBtaW4gYW5kIG1heFwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBsb2dnZXIuZmFpbGVkKFwiY29uZGl0aW9uQ2hlY2tlcjogLW5vdCBzYXRpc2ZpZWQtIHRhcmdldCBpcyBub3QgYmV0d2VlbiBtaW4gYW5kIG1heFwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY2FzZSBcInJlZ2V4XCI6IHtcbiAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cCh2YWx1ZSwgXCJpXCIpO1xuICAgICAgcmV0dXJuIHJlZ2V4LnRlc3QocnVuVGltZVZhbHVlKTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIGxvZ2dlci5mYWlsZWQoXCJjb25kaXRpb25DaGVja2VyOiBjb25kaXRpb24gaXMgbm90IGRlZmluZWQgXCIsIGNvbmRpdGlvbik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBnZXREZWJ1Z01vZGUgPSAoKSA9PiB7XG4gIGNvbnN0IHtORF9ERUJVR19NT0RFLCBPVVRfT0ZfU0NPUEV9ID0gTE9DQUxfU1RPUkFHRV9LRVlTO1xuICBjb25zdCBxdWVyeVN0cmluZyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XG4gIGlmIChxdWVyeVN0cmluZy5pbmNsdWRlcyhcIm5kX2RlYnVnPTFcIikpIHtcbiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oTkRfREVCVUdfTU9ERSwgMSk7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKE9VVF9PRl9TQ09QRSwgdHJ1ZSk7XG4gICAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJkYm1cIiwgXCJvblwiKTtcbiAgICByZXR1cm4gMTtcbiAgfVxuICBpZiAocXVlcnlTdHJpbmcuaW5jbHVkZXMoXCJuZF9kZWJ1Zz0yXCIpKSB7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKE5EX0RFQlVHX01PREUsIDIpO1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShPVVRfT0ZfU0NPUEUsIHRydWUpO1xuICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiZGJtXCIsIFwib25cIik7XG4gICAgcmV0dXJuIDI7XG4gIH1cbiAgaWYgKHF1ZXJ5U3RyaW5nLmluY2x1ZGVzKFwibmRfZGVidWc9MFwiKSkge1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShORF9ERUJVR19NT0RFKTtcbiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oT1VUX09GX1NDT1BFLCB0cnVlKTtcbiAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcImRibVwiLCBcIm9mZlwiKTtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCBjdXJyZW50ID0gcGFyc2VJbnQod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKE5EX0RFQlVHX01PREUpKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJkYm1cIiwgKGN1cnJlbnQgPyBcIm9uXCIgOiBcIm9mZlwiKSk7XG4gIHJldHVybiAoY3VycmVudCB8fCAwKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRJZGVudGlmaWVyID0gYXN5bmMgKGNvb2tpZU5hbWUgPSBDT09LSUVfTkFNRSkgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGxldCBpZCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShMT0NBTF9TVE9SQUdFX0tFWVMuVVNFUl9JRCk7XG4gICAgaWYgKGlkKSByZXNvbHZlKGlkKTtcbiAgICBpZCA9IGV4dHJhY3RDb29raWVJZGVudGlmaWVyKHdpbmRvdy50b3AuZG9jdW1lbnQuY29va2llLCBjb29raWVOYW1lKTtcbiAgICBpZiAoaWQpIHtcbiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShMT0NBTF9TVE9SQUdFX0tFWVMuVVNFUl9JRCwgaWQpO1xuICAgICAgcmVzb2x2ZShpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGV4dHJhY3RJZGVudGlmaWVySW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGlkID0gZXh0cmFjdENvb2tpZUlkZW50aWZpZXIod2luZG93LnRvcC5kb2N1bWVudC5jb29raWUsIGNvb2tpZU5hbWUpO1xuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICBjbGVhckludGVydmFsKGV4dHJhY3RJZGVudGlmaWVySW50ZXJ2YWwpO1xuICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShMT0NBTF9TVE9SQUdFX0tFWVMuVVNFUl9JRCwgaWQpO1xuICAgICAgICAgIHJlc29sdmUoaWQpO1xuICAgICAgICB9XG4gICAgICB9LCAxMCk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChleHRyYWN0SWRlbnRpZmllckludGVydmFsKTtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkNvdWxkIG5vdCBleHRyYWN0IGNvb2tpZSBpZGVudGlmaWVyXCIpKTtcbiAgICAgIH0sIDEwMDApO1xuICAgIH1cbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgZGVsYXkgPSAobXMpID0+IG5ldyBQcm9taXNlKChyZXMpID0+IHNldFRpbWVvdXQocmVzLCBtcykpO1xuXG5leHBvcnQgY29uc3QgaXNTZW5kQmVhY29uU3VwcG9ydGVkID0gKCkgPT4gbmF2aWdhdG9yLnNlbmRCZWFjb24gJiYgdHlwZW9mIG5hdmlnYXRvci5zZW5kQmVhY29uID09PSBcImZ1bmN0aW9uXCI7XG5cbmV4cG9ydCBjb25zdCBmb3JtYXREZWxpdmVyeURhdGUgPSAoZGF0ZSkgPT4ge1xuICBpZiAoIWRhdGUgfHwgdHlwZW9mIGRhdGUgIT09IFwic3RyaW5nXCIpIHJldHVybiBkYXRlO1xuXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICBzdGFydE1vbnRoSW5kZXg6IHVuZGVmaW5lZCxcbiAgICBlbmRNb250aEluZGV4OiB1bmRlZmluZWQsXG4gICAgc3RhcnREYXk6IHVuZGVmaW5lZCxcbiAgICBlbmREYXk6IHVuZGVmaW5lZCxcbiAgfTtcblxuICBsZXQgbWF0Y2ggPSBkYXRlLm1hdGNoKFwiKFtcXFxcZF0rKS0oW1xcXFxkXSspXFxcXHM/KFtcXFxcd8Sxw7zEn8Wfw7bDp8Sww5bDh8Sew5zFnl0rKVwiKTtcbiAgaWYgKG1hdGNoICYmIG1hdGNoLmxlbmd0aCA9PT0gNCkge1xuICAgIHJlc3VsdC5zdGFydERheSA9IHBhcnNlSW50KG1hdGNoWzFdKTtcbiAgICByZXN1bHQuZW5kRGF5ID0gcGFyc2VJbnQobWF0Y2hbMl0pO1xuICAgIHJlc3VsdC5zdGFydE1vbnRoSW5kZXggPSBtb250aHNbbWF0Y2hbM10udG9Mb3dlckNhc2UoKV07XG4gICAgcmVzdWx0LmVuZE1vbnRoSW5kZXggPSByZXN1bHQuc3RhcnRNb250aEluZGV4O1xuICB9IGVsc2Uge1xuICAgIG1hdGNoID0gZGF0ZS5tYXRjaChcIihbXFxcXGRdKylcXFxccysoW1xcXFx3xLHDvMSfxZ/DtsOnxLDDlsOHxJ7DnMWeXSspLShbXFxcXGRdKylcXFxccysoW1xcXFx3xLHDvMSfxZ/DtsOnxLDDlsOHxJ7DnMWeXSspXCIpO1xuICAgIGlmICghbWF0Y2ggfHwgbWF0Y2gubGVuZ3RoICE9PSA1KSByZXR1cm4gZGF0ZTtcblxuICAgIHJlc3VsdC5zdGFydERheSA9IHBhcnNlSW50KG1hdGNoWzFdKTtcbiAgICByZXN1bHQuc3RhcnRNb250aEluZGV4ID0gbW9udGhzW21hdGNoWzJdLnRvTG93ZXJDYXNlKCldO1xuICAgIHJlc3VsdC5lbmREYXkgPSBwYXJzZUludChtYXRjaFszXSk7XG4gICAgcmVzdWx0LmVuZE1vbnRoSW5kZXggPSBtb250aHNbbWF0Y2hbNF0udG9Mb3dlckNhc2UoKV07XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcblxuICAgIGlmICghcmVzdWx0LnN0YXJ0TW9udGhJbmRleCB8fCAhcmVzdWx0LmVuZE1vbnRoSW5kZXgpIHJldHVybiBkYXRlO1xuXG4gICAgY29uc3Qgc3RhcnRZZWFyID0gcmVzdWx0LnN0YXJ0TW9udGhJbmRleCA+PSB0b2RheS5nZXRNb250aCgpID8gdG9kYXkuZ2V0RnVsbFllYXIoKSA6IHRvZGF5LmdldEZ1bGxZZWFyKCkgKyAxO1xuICAgIGNvbnN0IGVuZFllYXIgPSByZXN1bHQuZW5kTW9udGhJbmRleCA+PSB0b2RheS5nZXRNb250aCgpID8gdG9kYXkuZ2V0RnVsbFllYXIoKSA6IHRvZGF5LmdldEZ1bGxZZWFyKCkgKyAxO1xuXG4gICAgY29uc3QgZXN0aW1hdGVkU3RhcnQgPSBuZXcgRGF0ZShzdGFydFllYXIsIHJlc3VsdC5zdGFydE1vbnRoSW5kZXgsIHJlc3VsdC5zdGFydERheSk7XG4gICAgY29uc3QgZXN0aW1hdGVkRW5kID0gbmV3IERhdGUoZW5kWWVhciwgcmVzdWx0LmVuZE1vbnRoSW5kZXgsIHJlc3VsdC5lbmREYXkpO1xuXG5cbiAgICBjb25zdCBzdGFydERpZmZPdmVyRGF5cyA9IE1hdGguY2VpbChNYXRoLmFicyhlc3RpbWF0ZWRTdGFydCAtIHRvZGF5KSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSk7XG4gICAgY29uc3QgZW5kRGlmZk92ZXJEYXlzID0gTWF0aC5jZWlsKE1hdGguYWJzKGVzdGltYXRlZEVuZCAtIHRvZGF5KSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSk7XG5cbiAgICBjb25zdCBzdGFydERpZmZPdmVyV2Vla3MgPSBzdGFydERpZmZPdmVyRGF5cyA8IDcgPyAwIDogTWF0aC5jZWlsKHN0YXJ0RGlmZk92ZXJEYXlzIC8gNyk7XG4gICAgY29uc3QgZW5kRGlmZk92ZXJXZWVrcyA9IGVuZERpZmZPdmVyRGF5cyA8IDcgPyAwIDogTWF0aC5jZWlsKGVuZERpZmZPdmVyRGF5cyAvIDcpO1xuXG4gICAgaWYgKHN0YXJ0RGlmZk92ZXJXZWVrcyA9PT0gMCAmJiBlbmREaWZmT3ZlcldlZWtzID09PSAwKSB7XG4gICAgICByZXR1cm4gYCR7c3RhcnREaWZmT3ZlckRheXN9IC0gJHtlbmREaWZmT3ZlckRheXN9IEfDvG5gO1xuICAgIH1cblxuICAgIGlmIChzdGFydERpZmZPdmVyV2Vla3MgPT09IDAgJiYgZW5kRGlmZk92ZXJXZWVrcyA+PSAxKSB7XG4gICAgICByZXR1cm4gYCR7c3RhcnREaWZmT3ZlckRheXN9IEfDvG4gLSAke2VuZERpZmZPdmVyV2Vla3N9IEhhZnRhYDtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnREaWZmT3ZlcldlZWtzID09PSBlbmREaWZmT3ZlcldlZWtzKSB7XG4gICAgICByZXR1cm4gYCR7c3RhcnREaWZmT3ZlcldlZWtzfSBIYWZ0YWA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGAke3N0YXJ0RGlmZk92ZXJXZWVrc30gLSAke2VuZERpZmZPdmVyV2Vla3N9IEhhZnRhYDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpZGxlVGltZXIgPSBhc3luYyAodGltZU91dCwgY2FsbEJhY2spID0+IHtcbiAgbGV0IGlkbGVUaW1lb3V0ID0gc2V0VGltZW91dChjYWxsQmFjaywgdGltZU91dCk7XG5cbiAgd2luZG93LnRvcC5kb2N1bWVudC5vbnRvdWNoc3RhcnQgPSByZXNldFRpbWVyO1xuXG4gIGZ1bmN0aW9uIHJlc2V0VGltZXIoKSB7XG4gICAgY2xlYXJUaW1lb3V0KGlkbGVUaW1lb3V0KTtcbiAgICBpZGxlVGltZW91dCA9IHNldFRpbWVvdXQoY2FsbEJhY2ssIHRpbWVPdXQpO1xuICB9XG59O1xuIiwiaW1wb3J0IHsgTE9HX0FQSV9VUkwgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBjcmVhdGVIYXNoU3RyaW5nLCBpc1NlbmRCZWFjb25TdXBwb3J0ZWQgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlclwiO1xuXG5leHBvcnQgY2xhc3MgTW9uaXRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubG9nZ2VyID0gbmV3IExvZ2dlcihcIk5leHRkYXkgTW9uaXRvclwiKTtcbiAgICB0aGlzLmxvZ2dlci5sb2coXCJJbml0aWFsaXppbmcgbW9uaXRvclwiKTtcblxuICAgIHRoaXMuYXBwbGllZFRyZWF0bWVudHNIYXNoID0gbnVsbDtcbiAgICB0aGlzLmFwcGxpZWRUcmVhdG1lbnRzQ2hhbmdlcyA9IGZhbHNlO1xuICAgIHRoaXMuZWxpZ2libGVOb3RBcHBsaWVkVHJlYXRtZW50c0hhc2ggPSBudWxsO1xuICAgIHRoaXMuZWxpZ2libGVOb3RBcHBsaWVkVHJlYXRtZW50c0NoYW5nZXMgPSBmYWxzZTtcbiAgICB0aGlzLmhlYWRlcnMgPSB7XG4gICAgICB0eXBlOiBcInRleHQvcGxhaW5cIixcbiAgICB9O1xuICAgIHRoaXMuaXNMb2dnZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuaW5pdGlhbGl6ZUV4aXRFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgYXN5bmMgc2VuZExvZ3MobWVzc2FnZSA9IG51bGwsIGlzRXJyb3IgPSBmYWxzZSkge1xuICAgIGNvbnN0IHsgbG9nZ2VyIH0gPSB0aGlzO1xuICAgIGxvZ2dlci5sb2coXCJTZW5kaW5nIGxvZ3NcIik7XG5cbiAgICBpZiAod2luZG93LnRvcC5kb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgIGxvZ2dlci5sb2coXCJEb2N1bWVudCByZWFkeSBzdGF0ZSBpcyBub3QgY29tcGxldGVcIik7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKCkgPT4ge1xuICAgICAgICBsb2dnZXIubG9nKFwiSW4gb25sb2FkIGV2ZW50XCIpO1xuICAgICAgICB0aGlzLmhhbmRsZVF1ZXVlTG9ncyh0aGlzLnBhY2thZ2VMb2dEYXRhKG1lc3NhZ2UpLCBpc0Vycm9yKTtcbiAgICAgIH0sIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhhbmRsZVF1ZXVlTG9ncyh0aGlzLnBhY2thZ2VMb2dEYXRhKG1lc3NhZ2UpLCBpc0Vycm9yKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBoYW5kbGVRdWV1ZUxvZ3MocmVxdWVzdEJsb2IsIGlzRXJyb3IgPSBmYWxzZSkge1xuICAgIGlmICghaXNFcnJvciAmJiB0aGlzLmlzTG9nZ2VkKSByZXR1cm47XG4gICAgY29uc3QgeyBsb2dnZXIgfSA9IHRoaXM7XG5cbiAgICBpZiAoIXJlcXVlc3RCbG9iKSB7XG4gICAgICBsb2dnZXIuZmFpbGVkKFwiQ291bGQgbm90IGNyZWF0ZSByZXF1ZXN0IGJsb2JcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxvZ2dlci5sb2coXCJSZXF1ZXN0IGJsb2IgdG8gc2VuZDogXCIsIHJlcXVlc3RCbG9iKTtcbiAgICB0aGlzLnF1ZXVlTG9ncyhyZXF1ZXN0QmxvYik7XG5cbiAgICB0aGlzLmlzTG9nZ2VkID0gdHJ1ZTtcbiAgICB0aGlzLmFwcGxpZWRUcmVhdG1lbnRzSGFzaCA9IGF3YWl0IGNyZWF0ZUhhc2hTdHJpbmcoXG4gICAgICBKU09OLnN0cmluZ2lmeSh3aW5kb3cuYmVhZ2xlSW5mb0xheWVyLmEpXG4gICAgKTtcbiAgICB0aGlzLmVsaWdpYmxlTm90QXBwbGllZFRyZWF0bWVudHNIYXNoID0gYXdhaXQgY3JlYXRlSGFzaFN0cmluZyhcbiAgICAgIEpTT04uc3RyaW5naWZ5KHdpbmRvdy5iZWFnbGVJbmZvTGF5ZXIuZSlcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlTGF0ZXN0Q2hhbmdlcygpIHtcbiAgICBjb25zdCBhcHBsaWVkVHJlYXRtZW50c0N1cnJlbnRIYXNoID0gYXdhaXQgY3JlYXRlSGFzaFN0cmluZyhcbiAgICAgIEpTT04uc3RyaW5naWZ5KHdpbmRvdy5iZWFnbGVJbmZvTGF5ZXIuYSlcbiAgICApO1xuICAgIGNvbnN0IGVsaWdpYmxlTm90QXBwbGllZFRyZWF0bWVudHNDdXJyZW50SGFzaCA9IGF3YWl0IGNyZWF0ZUhhc2hTdHJpbmcoXG4gICAgICBKU09OLnN0cmluZ2lmeSh3aW5kb3cuYmVhZ2xlSW5mb0xheWVyLmUpXG4gICAgKTtcblxuICAgIGlmIChhcHBsaWVkVHJlYXRtZW50c0N1cnJlbnRIYXNoICE9PSB0aGlzLmFwcGxpZWRUcmVhdG1lbnRzSGFzaCkge1xuICAgICAgdGhpcy5hcHBsaWVkVHJlYXRtZW50c0NoYW5nZXMgPSB0cnVlO1xuICAgICAgdGhpcy5hcHBsaWVkVHJlYXRtZW50c0hhc2ggPSBhcHBsaWVkVHJlYXRtZW50c0N1cnJlbnRIYXNoO1xuICAgIH1cbiAgICBpZiAoZWxpZ2libGVOb3RBcHBsaWVkVHJlYXRtZW50c0N1cnJlbnRIYXNoICE9PSB0aGlzLmVsaWdpYmxlTm90QXBwbGllZFRyZWF0bWVudHNIYXNoKSB7XG4gICAgICB0aGlzLmVsaWdpYmxlTm90QXBwbGllZFRyZWF0bWVudHNDaGFuZ2VzID0gdHJ1ZTtcbiAgICAgIHRoaXMuZWxpZ2libGVOb3RBcHBsaWVkVHJlYXRtZW50c0hhc2ggPSBlbGlnaWJsZU5vdEFwcGxpZWRUcmVhdG1lbnRzQ3VycmVudEhhc2g7XG4gICAgfVxuICB9XG5cbiAgcGFja2FnZUxvZ0RhdGEobWVzc2FnZSA9IG51bGwpIHtcbiAgICBjb25zdCB7IGhlYWRlcnMgfSA9IHRoaXM7XG4gICAgY29uc3QgYm9keSA9IHsgLi4ud2luZG93LmJlYWdsZUluZm9MYXllciB9O1xuICAgIGJvZHkudCA9IERhdGUubm93KCk7XG4gICAgaWYgKG1lc3NhZ2UpIHtcbiAgICAgIGJvZHkubSA9IG1lc3NhZ2U7XG4gICAgfSBlbHNlIGlmIChPYmplY3Qua2V5cyhib2R5LmEgfHwge30pLmxlbmd0aCA+IDApIHtcbiAgICAgIGJvZHkubSA9IFwiVHJlYXRtZW50cyBhcHBsaWVkXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvZHkubSA9IFwiTm8gdHJlYXRtZW50cyBhcHBsaWVkXCI7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQmxvYihbSlNPTi5zdHJpbmdpZnkoYm9keSldLCBoZWFkZXJzKTtcbiAgfVxuXG4gIHBhY2thZ2VVcGRhdGVMb2dEYXRhKCkge1xuICAgIGNvbnN0IHsgaGVhZGVycywgYXBwbGllZFRyZWF0bWVudHNDaGFuZ2VzLCBlbGlnaWJsZU5vdEFwcGxpZWRUcmVhdG1lbnRzQ2hhbmdlcyB9ID0gdGhpcztcbiAgICBpZiAoIWFwcGxpZWRUcmVhdG1lbnRzQ2hhbmdlcyAmJiAhZWxpZ2libGVOb3RBcHBsaWVkVHJlYXRtZW50c0NoYW5nZXMpIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBib2R5ID0ge1xuICAgICAgdDogRGF0ZS5ub3coKSxcbiAgICAgIGE6IGFwcGxpZWRUcmVhdG1lbnRzQ2hhbmdlcyA/IHdpbmRvdy5iZWFnbGVJbmZvTGF5ZXIuYSA6IHt9LFxuICAgICAgZTogZWxpZ2libGVOb3RBcHBsaWVkVHJlYXRtZW50c0NoYW5nZXMgPyB3aW5kb3cuYmVhZ2xlSW5mb0xheWVyLmUgOiB7fSxcbiAgICAgIHZJZDogd2luZG93LmJlYWdsZUluZm9MYXllci52SWQsXG4gICAgfTtcbiAgICByZXR1cm4gbmV3IEJsb2IoW0pTT04uc3RyaW5naWZ5KGJvZHkpXSwgaGVhZGVycyk7XG4gIH1cblxuICBpbml0aWFsaXplRXhpdEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIGNvbnN0IHsgbG9nZ2VyIH0gPSB0aGlzO1xuICAgIGxldCBpc0V4aXRFdmVudENhcHR1cmVkID0gZmFsc2U7XG4gICAgbG9nZ2VyLmxvZyhcIkluaXRpYWxpemluZyBleGl0IGV2ZW50IGxpc3RlbmVyXCIpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgXCJiZWZvcmV1bmxvYWRcIixcbiAgICAgICgpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLmlzTG9nZ2VkKSB7XG4gICAgICAgICAgdGhpcy5oYW5kbGVRdWV1ZUxvZ3ModGhpcy5wYWNrYWdlTG9nRGF0YSgpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRXhpdEV2ZW50Q2FwdHVyZWQpIHJldHVybjtcbiAgICAgICAgaXNFeGl0RXZlbnRDYXB0dXJlZCA9IHRydWU7XG4gICAgICAgIGxvZ2dlci5sb2coXCJJbiBiZWZvcmV1bmxvYWQgZXZlbnRcIik7XG4gICAgICAgIGNvbnN0IGxvZ0RhdGEgPSB0aGlzLnBhY2thZ2VVcGRhdGVMb2dEYXRhKCk7XG4gICAgICAgIGlmICghbG9nRGF0YSkge1xuICAgICAgICAgIGxvZ2dlci5sb2coXCJObyBjaGFuZ2VzIHRvIGxvZ1wiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5xdWV1ZUxvZ3MobG9nRGF0YSk7XG4gICAgICB9LFxuICAgICAgeyBjYXB0dXJlOiB0cnVlIH0sXG4gICAgKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgIFwicGFnZWhpZGVcIixcbiAgICAgICgpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLmlzTG9nZ2VkKSB7XG4gICAgICAgICAgdGhpcy5oYW5kbGVRdWV1ZUxvZ3ModGhpcy5wYWNrYWdlTG9nRGF0YSgpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRXhpdEV2ZW50Q2FwdHVyZWQpIHJldHVybjtcbiAgICAgICAgaXNFeGl0RXZlbnRDYXB0dXJlZCA9IHRydWU7XG4gICAgICAgIGxvZ2dlci5sb2coXCJJbiBwYWdlaGlkZSBldmVudFwiKTtcbiAgICAgICAgY29uc3QgbG9nRGF0YSA9IHRoaXMucGFja2FnZVVwZGF0ZUxvZ0RhdGEoKTtcbiAgICAgICAgaWYgKCFsb2dEYXRhKSB7XG4gICAgICAgICAgbG9nZ2VyLmxvZyhcIk5vIGNoYW5nZXMgdG8gbG9nXCIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnF1ZXVlTG9ncyhsb2dEYXRhKTtcbiAgICAgIH0sXG4gICAgICB7IGNhcHR1cmU6IHRydWUgfSxcbiAgICApO1xuICB9XG5cbiAgcXVldWVMb2dzKGxvZ0RhdGEpIHtcbiAgICBjb25zdCB7IGxvZ2dlciB9ID0gdGhpcztcblxuICAgIGlmICghaXNTZW5kQmVhY29uU3VwcG9ydGVkKCkpIHtcbiAgICAgIGZldGNoKExPR19BUElfVVJMLCBsb2dEYXRhKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgcXVldWVkID0gbmF2aWdhdG9yLnNlbmRCZWFjb24oTE9HX0FQSV9VUkwsIGxvZ0RhdGEpO1xuICAgIGNvbnN0IHF1ZXVlSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAoIXF1ZXVlZCkgcXVldWVkID0gbmF2aWdhdG9yLnNlbmRCZWFjb24oTE9HX0FQSV9VUkwsIGxvZ0RhdGEpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwocXVldWVJbnRlcnZhbCk7XG4gICAgICAgIGxvZ2dlci5sb2coXCJMb2dzIHF1ZXVlZCBzdWNjZXNzZnVsbHlcIik7XG4gICAgICB9XG4gICAgfSwgMTApO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY2xlYXJJbnRlcnZhbChxdWV1ZUludGVydmFsKTtcbiAgICAgIGlmICghcXVldWVkKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJMb2dzIG5vdCBxdWV1ZWRcIik7XG4gICAgICB9XG4gICAgfSwgMTAwMCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTW9uaXRvcjtcbiIsImV4cG9ydCBjb25zdCByZXBsYWNlQWxsID0gKHN0ciwgZmluZCwgcmVwbGFjZSA9IFwiXCIpID0+IHtcbiAgaWYgKCFzdHIpIHJldHVybiBcIlwiO1xuXG4gIGNvbnN0IGluZGV4ID0gc3RyLmluZGV4T2YoZmluZCk7XG4gIGlmIChpbmRleCA8IDApIHJldHVybiBzdHI7XG5cbiAgd2hpbGUgKHN0ci5pbmRleE9mKGZpbmQpID49IDApIHtcbiAgICBjb25zdCBpbmRleCA9IHN0ci5pbmRleE9mKGZpbmQpO1xuICAgIHN0ciA9IChpbmRleCA+IDAgPyBzdHIuc3Vic3RyaW5nKDAsIGluZGV4KSA6IFwiXCIpICsgcmVwbGFjZSArIHN0ci5zdWJzdHJpbmcoaW5kZXggKyBmaW5kLmxlbmd0aCk7XG4gIH1cblxuICByZXR1cm4gc3RyO1xufTtcbiIsImltcG9ydCB7Y29uZGl0aW9uQ2hlY2tlcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IERhdGFMYXllciBDaGVja2VyXCIpO1xuXG5leHBvcnQgY29uc3QgY2hlY2tEYXRhTGF5ZXJSdWxlID0gKHJ1bGUpID0+e1xuICBsb2dnZXIubG9nKFwiQ2hlY2tpbmcgcnVsZVwiLCBKU09OLnN0cmluZ2lmeShydWxlKSk7XG4gIGNvbnN0IHtvcGVyYXRvciwgY29uZGl0aW9uLCB2YWx1ZX0gPSBydWxlO1xuICBjb25zdCBydW50aW1lVmFsdWUgPSBkYXRhTGF5ZXJGaW5kZXIob3BlcmF0b3IpO1xuICByZXR1cm4gY29uZGl0aW9uQ2hlY2tlcihydW50aW1lVmFsdWUsIGNvbmRpdGlvbiwgdmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGRhdGFMYXllckZpbmRlciA9IChrZXkpID0+IHtcbiAgbG9nZ2VyLmxvZyhcIlNlYXJjaGluZyBiZWFnbGVJbmZvTGF5ZXIgZm9yIGtleSBcIiwga2V5KTtcbiAgbGV0IHJlcyA9IHdpbmRvdy5iZWFnbGVJbmZvTGF5ZXJba2V5XTtcbiAgaWYgKGtleS5pbmNsdWRlcyhcIi5cIikpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qga2V5cyA9IGtleS5zcGxpdChcIi5cIik7XG4gICAgICByZXMgPSB3aW5kb3cuYmVhZ2xlSW5mb0xheWVyW2tleXNbMF1dO1xuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlcyA9IHJlc1trZXlzW2ldXTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlci5mYWlsZWQoYENvdWxkbid0IGV4dHJhY3Qga2V5ICR7a2V5fSBmcm9tIGJlYWdsZUluZm9MYXllcmApO1xuICAgICAgcmVzID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgaWYgKHJlcykge1xuICAgIGxvZ2dlci5zdWNjZXNzKGBGb3VuZCBrZXkgJHtrZXl9IHdpdGggdmFsdWUgJHtyZXN9YCk7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICBsb2dnZXIuZmFpbGVkKGBLZXkgJHtrZXl9IG5vdCBmb3VuZCBpbiBiZWFnbGVJbmZvTGF5ZXJgKTtcblxuICBsb2dnZXIubG9nKFwiU2VhcmNoaW5nIGRhdGFMYXllciBmb3Iga2V5IFwiLCBrZXkpO1xuICBmb3IgKGNvbnN0IG9iaiBvZiB3aW5kb3cuZGF0YUxheWVyKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgaWYgKGtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgbG9nZ2VyLnN1Y2Nlc3MoYEZvdW5kIGtleSAke2tleX0gd2l0aCB2YWx1ZSAke29ialtrZXldfWApO1xuICAgICAgcmV0dXJuIG9ialtrZXldO1xuICAgIH1cbiAgfVxuICBsb2dnZXIuZmFpbGVkKGBLZXkgJHtrZXl9IG5vdCBmb3VuZCBpbiBkYXRhTGF5ZXJgKTtcbiAgcmV0dXJuIG51bGw7XG59O1xuIiwiaW1wb3J0IHtkYXRhTGF5ZXJGaW5kZXJ9IGZyb20gXCIuLi9OZXh0ZGF5UnVsZUVuZ2luZS9kYXRhTGF5ZXJDaGVja2VyXCI7XG5pbXBvcnQge3JlcGxhY2VBbGx9IGZyb20gXCIuLi9zdHJpbmdVdGlsc1wiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyXCI7XG5cbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJSZXBsYWNlVXRpbHNcIik7XG5cbmNvbnN0IHJlcGxhY2VyID0gKHZhbHVlLCByZXBsYWNlRm4sIHByb2R1Y3RJbmZvKSA9PiB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goKHZhbCwgaSkgPT4ge1xuICAgICAgY29uc3QgY3VycmVudFJlcGxhY2VGbiA9IHJlcGxhY2VGbiA/IHJlcGxhY2VGbltpXSB8fCByZXBsYWNlRm4gOiBcIlwiO1xuICAgICAgdmFsdWVbaV0gPSByZXBsYWNlRm5FeGVjdXRvcihjdXJyZW50UmVwbGFjZUZuLCB2YWwsIHByb2R1Y3RJbmZvKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlcGxhY2VGbikpIHtcbiAgICByZXBsYWNlRm4uZm9yRWFjaCgockZuLCBpKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHJGbiA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBjb25zdCByZXBsYWNlVmFsID0gcmVwbGFjZU9iamVjdEV4dHJhY3RvcihyRm4pO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoXCJ7e1JFUExBQ0V9fVwiLCByZXBsYWNlVmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gcmVwbGFjZUZuRXhlY3V0b3IocmVwbGFjZUZuLCB2YWx1ZSwgcHJvZHVjdEluZm8sIHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gcmVwbGFjZUZuRXhlY3V0b3IocmVwbGFjZUZuLCB2YWx1ZSwgcHJvZHVjdEluZm8pO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmZ1bmN0aW9uIHJlcGxhY2VGbkV4ZWN1dG9yKHJlcGxhY2VGbiwgdmFsdWUsIHByb2R1Y3RJbmZvLCBzaW5nbGUgPSBmYWxzZSkge1xuICBpZiAocmVwbGFjZUZuICYmIHZhbHVlLmluY2x1ZGVzKFwie3tSRVBMQUNFfX1cIikpIHtcbiAgICBsb2dnZXIubG9nKFwiRXhlY3V0aW5nIHJlcGxhY2UgZnVuY3Rpb246IFwiLCByZXBsYWNlRm4pO1xuICAgIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgICBkYXRhTGF5ZXJGaW5kZXIsXG4gICAgICBwcm9kdWN0SW5mbyxcbiAgICB9O1xuICAgIGNvbnN0IHJlcGxhY2VGdW5jdGlvbiA9IEZ1bmN0aW9uKHJlcGxhY2VGbikuYmluZChjb250ZXh0KTtcbiAgICBpZiAoc2luZ2xlKSByZXR1cm4gdmFsdWUucmVwbGFjZShcInt7UkVQTEFDRX19XCIsIHJlcGxhY2VGdW5jdGlvbigpKTtcbiAgICByZXR1cm4gcmVwbGFjZUFsbCh2YWx1ZSwgXCJ7e1JFUExBQ0V9fVwiLCByZXBsYWNlRnVuY3Rpb24oKSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlT2JqZWN0RXh0cmFjdG9yKHJlcGxhY2VGbikge1xuICBjb25zdCB7c3RvcmFnZSwga2V5LCB0eXBlfSA9IHJlcGxhY2VGbjtcbiAgbGV0IHJlcGxhY2VWYWwgPSBudWxsO1xuICBzd2l0Y2ggKHN0b3JhZ2UpIHtcbiAgICBjYXNlIFwic2Vzc2lvblwiOiB7XG4gICAgICByZXBsYWNlVmFsID0gd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVwbGFjZVZhbCA9IEpTT04ucGFyc2UocmVwbGFjZVZhbCk7XG4gICAgICAgICAgcmVwbGFjZVZhbCA9IHJlcGxhY2VWYWxbcmVwbGFjZVZhbC5sZW5ndGggLSAxXVt0eXBlXTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgbG9nZ2VyLmZhaWxlZChgQ291bGQgbm90IHBhcnNlICR7cmVwbGFjZVZhbH1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiByZXBsYWNlVmFsO1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXBsYWNlcjtcbiIsImltcG9ydCB7Y29uZGl0aW9uQ2hlY2tlcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJBY3Rpb25Db25kaXRpb25VdGlsc1wiKTtcblxuY29uc3QgY2hlY2tBY3Rpb25Db25kaXRpb24gPSAoY29uZGl0aW9uLCBwcm9kdWN0SW5mbywgc2t1TGlzdCkgPT4ge1xuICBjb25zdCB7YXR0cmlidXRlLCBpbm5lcl9jb25kaXRpb24sIG9wZXJhdG9yLCBzZWxlY3RvciwgdHlwZSwgdmFsdWV9ID0gY29uZGl0aW9uO1xuICBsb2dnZXIubG9nKFwiQWN0aW9uIGNvbmRpdGlvbiBmb3VuZDogXCIsIGNvbmRpdGlvbik7XG4gIGNvbnN0IGVsaWdpYmxlRWxlbWVudHMgPSBbXTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcInByb2R1Y3RJbmZvTG9va3VwXCI6IHtcbiAgICAgIGNvbnN0IGNvbmRpdGlvbkVsZW1lbnRzID0gQXJyYXkuZnJvbSh3aW5kb3cudG9wLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbiAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBjb25kaXRpb25FbGVtZW50cykge1xuICAgICAgICBjb25zdCBlbGVtZW50U2t1ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgICAgY29uc3QgcnVuVGltZVZhbHVlID0gcHJvZHVjdEluZm8/LltlbGVtZW50U2t1XT8uY2F0YWxvZz8uW29wZXJhdG9yXTtcbiAgICAgICAgaWYgKCFydW5UaW1lVmFsdWUpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIWNvbmRpdGlvbkNoZWNrZXIocnVuVGltZVZhbHVlLCBpbm5lcl9jb25kaXRpb24sIHZhbHVlKSkgY29udGludWU7XG4gICAgICAgIGVsaWdpYmxlRWxlbWVudHMucHVzaCgkKGVsZW1lbnQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZWxpZ2libGVFbGVtZW50cztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNoZWNrQWN0aW9uQ29uZGl0aW9uO1xuIiwiaW1wb3J0IHtzdHlsZUFwcGxpY2F0b3IsIGRlbGF5LCBpZGxlVGltZXJ9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHtyZXBsYWNlQWxsfSBmcm9tIFwiLi4vc3RyaW5nVXRpbHNcIjtcbmltcG9ydCB7TU9CSUxFX01FRElBX1FVRVJZLCBTRVNTSU9OX1NUT1JBR0VfS0VZUywgSURMRV9USU1FT1VUfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgcmVwbGFjZXIgZnJvbSBcIi4vcmVwbGFjZS11dGlsc1wiO1xuaW1wb3J0IGNoZWNrQWN0aW9uQ29uZGl0aW9uIGZyb20gXCIuL2FjdGlvbi1jb25kaXRpb24tdXRpbFwiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIGFwcGx5QWN0aW9ucyhhY3Rpb25zLCBiaW5kaW5ncykge1xuICBjb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFwiTmV4dGRheSBBcHBseSBBY3Rpb25zXCIpO1xuICBjb25zdCB7UE9QVVBfRElTUExBWV9GTEFHfSA9IFNFU1NJT05fU1RPUkFHRV9LRVlTO1xuICBjb25zdCB7cHJvZHVjdEluZm8sIHNrdUxpc3R9ID0gYmluZGluZ3M7XG5cbiAgY29uc3QgdHJhbnNmb3JtZXIgPSBmdW5jdGlvbiB0cmFuc2Zvcm1lcihhY3Rpb24sIGVsZW1lbnQgPSBudWxsKSB7XG4gICAgbG9nZ2VyLmxvZyhcIkFwcGx5aW5nIGFjdGlvbjogXCIsIEpTT04uc3RyaW5naWZ5KGFjdGlvbikpO1xuICAgIGNvbnN0IHtcbiAgICAgIG9wZXJhdG9yLFxuICAgICAgdHlwZSxcbiAgICAgIGFwcGx5RXZlbnQsXG4gICAgICBjb250ZW50U2VsZWN0b3IsXG4gICAgICBzZWxlY3RvcixcbiAgICAgIHNlbGVjdG9yRmFsbGJhY2ssXG4gICAgICBtZENvbmRpdGlvbixcbiAgICAgIG1vdmVfc2VsZWN0b3JfMSxcbiAgICAgIG1vdmVfc2VsZWN0b3JfMixcbiAgICAgIHJlcGxhY2VGbixcbiAgICAgIHBUeXBlLFxuICAgIH0gPSBhY3Rpb247XG4gICAgaWYgKG9wZXJhdG9yID09PSBcIm5vb3BcIikge1xuICAgICAgbG9nZ2VyLmZhaWxlZChcIk5vb3AgT3BlcmF0b3I6IE5vIG9wZXJhdGlvbiBpcyBhcHBsaWVkIG9uIHRhcmdldCBcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB7dmFsdWV9ID0gYWN0aW9uO1xuICAgIC8vIElmIGFuIGVsZW1lbnQgaXMgcGFzc2VkIHRvIHRyYW5zZm9ybWVyLCBzZWxlY3RvciBpcyByZWxhdGl2ZSB0byBwYXNzZWQgZWxlbWVudFxuICAgIGVsZW1lbnQgPSBlbGVtZW50ID8gZWxlbWVudC5maW5kKHNlbGVjdG9yKSA6ICQoc2VsZWN0b3IpO1xuXG4gICAgY29uc3QgbWMgPSBtZENvbmRpdGlvbiA/IHdpbmRvdy5tYXRjaE1lZGlhKG1kQ29uZGl0aW9uKS5tYXRjaGVzIDogdHJ1ZTtcbiAgICBpZiAoIW1jKSB7XG4gICAgICBsb2dnZXIuZmFpbGVkKFwiTWVkaWEgY29uZGl0aW9uIG1pc21hdGNoOiBcIiwgbWRDb25kaXRpb24pO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAobW92ZV9zZWxlY3Rvcl8xICYmICFtb3ZlX3NlbGVjdG9yXzIpIHx8XG4gICAgICAobW92ZV9zZWxlY3Rvcl8yICYmICFtb3ZlX3NlbGVjdG9yXzEpXG4gICAgKSB7XG4gICAgICBsb2dnZXIuZmFpbGVkKFwiQm90aCBtb3ZlIHNlbGVjdG9ycyBhcmUgcmVxdWlyZWRcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChtb3ZlX3NlbGVjdG9yXzEgJiYgbW92ZV9zZWxlY3Rvcl8yKSB7XG4gICAgICBpZiAoISQobW92ZV9zZWxlY3Rvcl8xKS5sZW5ndGgpIHtcbiAgICAgICAgbG9nZ2VyLmZhaWxlZChcIk1vdmUgc2VsZWN0b3IgMSBub3QgZm91bmQ6IFwiLCBtb3ZlX3NlbGVjdG9yXzEpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoISQobW92ZV9zZWxlY3Rvcl8yKS5sZW5ndGgpIHtcbiAgICAgICAgbG9nZ2VyLmZhaWxlZChcIk1vdmUgc2VsZWN0b3IgMiBub3QgZm91bmQ6IFwiLCBtb3ZlX3NlbGVjdG9yXzIpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghc2VsZWN0b3IpIHtcbiAgICAgIGxvZ2dlci5mYWlsZWQoXCJTZWxlY3RvciBub3Qgc3BlY2lmaWVkXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWVsZW1lbnQubGVuZ3RoKSB7XG4gICAgICAgIGlmICghJChzZWxlY3RvckZhbGxiYWNrKS5sZW5ndGggJiYgb3BlcmF0b3IgPT09IFwicmVtb3ZlXCIpIHJldHVybjtcbiAgICAgICAgaWYgKHNlbGVjdG9yICE9PSBcIm5vLXNlbGVjdG9yXCIpIHtcbiAgICAgICAgICBsb2dnZXIuZmFpbGVkKFwiU2VsZWN0b3Igbm90IGZvdW5kOiBcIiwgc2VsZWN0b3IpO1xuICAgICAgICAgIGxvZ2dlci5sb2coXCJUcnlpbmcgZmFsbGJhY2sgc2VsZWN0b3I6IFwiLCBzZWxlY3RvckZhbGxiYWNrKTtcbiAgICAgICAgICBpZiAoc2VsZWN0b3JGYWxsYmFjaykgZWxlbWVudCA9ICQoc2VsZWN0b3JGYWxsYmFjayk7XG4gICAgICAgICAgaWYgKCFlbGVtZW50Lmxlbmd0aCkge1xuICAgICAgICAgICAgbG9nZ2VyLmZhaWxlZChcIkZhbGxiYWNrIHNlbGVjdG9yIG5vdCBmb3VuZFwiKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocmVwbGFjZUZuKSB7XG4gICAgICB2YWx1ZSA9IHJlcGxhY2VyKHZhbHVlLCByZXBsYWNlRm4sIHByb2R1Y3RJbmZvKTtcbiAgICB9XG4gICAgaWYgKG9wZXJhdG9yID09PSBcInJlbW92ZVwiKSB7XG4gICAgICBpZiAoZWxlbWVudC5sZW5ndGgpIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIlJlbW92aW5nOiBcIiwgc2VsZWN0b3IpO1xuICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xuICAgICAgfSBlbHNlIGxvZ2dlci5sb2coXCJDYW5ub3QgZm91bmQgZWxlbWVudCB3aXRoIHNlbGVjdG9yOiBcIiwgc2VsZWN0b3IpO1xuICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgPT09IFwiaW5zZXJ0XCIpIHtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwiYmVmb3JlXCI6XG4gICAgICAgICAgbG9nZ2VyLmxvZyhcIkluc2VydGluZyBiZWZvcmU6IFwiLCB2YWx1ZSk7XG4gICAgICAgICAgaWYgKFN0cmluZyh2YWx1ZSkuaW5jbHVkZXMoXCJuZC1hZGQtdG8td2luXCIpKSB7XG4gICAgICAgICAgICAkKFwiLm5kLWFkZC10by13aW5cIikucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsZW1lbnQuYmVmb3JlKHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImFmdGVyXCI6XG4gICAgICAgICAgbG9nZ2VyLmxvZyhcIkluc2VydGluZyBhZnRlcjogXCIsIHZhbHVlKTtcbiAgICAgICAgICBlbGVtZW50LmFmdGVyKHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImFwcGVuZFwiOlxuICAgICAgICAgIGxvZ2dlci5sb2coXCJBcHBlbmRpbmcgdmFsdWU6IFwiLCB2YWx1ZSk7XG4gICAgICAgICAgZWxlbWVudC5hcHBlbmQodmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicG9wdXBcIjpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAocGFyc2VJbnQoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQT1BVUF9ESVNQTEFZX0ZMQUcpKSAhPT0gMCkge1xuICAgICAgICAgICAgICBsb2dnZXIubG9nKFwiUG9wdXAgYWxyZWFkeSBkaXNwbGF5ZWQgaW4gc2Vzc2lvblwiKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2dnZXIubG9nKFwiQ3JlYXRpbmcgUG9wdXA6IFwiLCB2YWx1ZSk7XG4gICAgICAgICAgICBpZiAocFR5cGUpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSBnZXRQcm9kdWN0SW5mbyhwcm9kdWN0SW5mbywgcFR5cGUsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNyZWF0ZVBvcHVwKHZhbHVlLCBjb250ZW50U2VsZWN0b3IpO1xuXG4gICAgICAgICAgICBpZiAoYXBwbHlFdmVudCkge1xuICAgICAgICAgICAgICBjb25zdCBtb2JpbGUgPSB3aW5kb3cubWF0Y2hNZWRpYShNT0JJTEVfTUVESUFfUVVFUlkpLm1hdGNoZXM7XG4gICAgICAgICAgICAgIGZvciAoY29uc3QgZXZlbnQgb2YgYXBwbHlFdmVudCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJleGl0SW50ZW50XCI6XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coXCJBZGRpbmcgZXhpdCBpbnRlbnQgbGlzdGVuZXJcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb2JpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBjaGVjayBpZiBuZWVkZWQgLS0+IGV4aXRTY3JvbGxMaXN0ZW5lcihkaXNwbGF5UG9wdXApO1xuICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy50b3AuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgZGlzcGxheVBvcHVwKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdpbmRvdy5iZWFnbGVJbmZvTGF5ZXI/LnIuaW5jbHVkZXMod2luZG93LmJlYWdsZUluZm9MYXllcj8uZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuaGlzdG9yeSAmJiB0eXBlb2Ygd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKFwidGVtcFwiLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnRvcC5hZGRFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIiwgZGlzcGxheVBvcHVwLCB7b25jZTogdHJ1ZX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZGxlVGltZXIoSURMRV9USU1FT1VULCBkaXNwbGF5UG9wdXApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy50b3AuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIGRpc3BsYXlQb3B1cCwge29uY2U6IHRydWV9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJjb3B5SW50ZW50XCI6XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coXCJBZGRpbmcgY29weSBpbnRlbnQgbGlzdGVuZXJcIik7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy50b3AuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjb3B5XCIsIGRpc3BsYXlQb3B1cCwge29uY2U6IHRydWV9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBhcHBlbmQgcG9wdXAgdG8gYm9keSBhZnRlciB0aW1lb3V0IGV4cGlyZXNcbiAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgZGlzcGxheVBvcHVwKCk7XG4gICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBsb2dnZXIuZmFpbGVkKGBUeXBlOiAke3R5cGV9IG5vdCBmb3VuZCBmb3Igb3BlcmF0b3I6ICR7b3BlcmF0b3J9YCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gXCJlZGl0XCIpIHtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwidGV4dFwiOlxuICAgICAgICAgIGxvZ2dlci5sb2coXCJFZGl0aW5nIHRleHQ6IFwiLCB2YWx1ZSk7XG4gICAgICAgICAgZWxlbWVudC50ZXh0KHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImh0bWxcIjpcbiAgICAgICAgICBsb2dnZXIubG9nKFwiRWRpdGluZyBodG1sOiBcIiwgdmFsdWUpO1xuICAgICAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzdHlsZUFwcGxpY2F0b3JcIjpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKFwiQXBwbHlpbmcgc3R5bGU6IFwiLCB2YWx1ZSk7XG4gICAgICAgICAgICBjb25zdCBzdHlsZUNoYW5nZXNNYXAgPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coXCJTdHlsZSBDaGFuZ2VzIE1hcDogXCIsIHN0eWxlQ2hhbmdlc01hcCk7XG4gICAgICAgICAgICBzdHlsZUFwcGxpY2F0b3IoZWxlbWVudCwgc3R5bGVDaGFuZ2VzTWFwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJhZGRDbGFzc1wiOlxuICAgICAgICAgIGxvZ2dlci5sb2coYGFkZGRpbmcgY2xhc3MgdG8gJHtlbGVtZW50fSBuYW1lZCAke3ZhbHVlfWApO1xuICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3ModmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicmVtb3ZlQ2xhc3NcIjpcbiAgICAgICAgICBsb2dnZXIubG9nKGByZW1vdmUgY2xhc3MgZnJvbSAke2VsZW1lbnR9IG5hbWVkICR7dmFsdWV9YCk7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyh2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJkb2N1bWVudFRpdGxlXCI6XG4gICAgICAgICAgbG9nZ2VyLmxvZyhgY2hhbmdpbmcgZG9jdW1lbnQgdGl0bGUgZnJvbSAke2VsZW1lbnR9IHRvICR7dmFsdWV9YCk7XG4gICAgICAgICAgaWYgKGFwcGx5RXZlbnQpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZXZlbnQgb2YgYXBwbHlFdmVudCkge1xuICAgICAgICAgICAgICBpZiAoZXZlbnQgPT0gXCJ0YWJDaGFuZ2VcIikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coXCJjYXRjaGluZyBldmVudCB0YWJjaGFuZ2UuLlwiKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvcmlnaW5hbFRpdGxlID0gd2luZG93LnRvcC5kb2N1bWVudC50aXRsZTtcbiAgICAgICAgICAgICAgICB3aW5kb3cudG9wLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIChlKSA9PlxuICAgICAgICAgICAgICAgICAgaGFuZGxlRG9jdW1lbnRUaXRsZVRhYkNoYW5nZShlLCB2YWx1ZSwgb3JpZ2luYWxUaXRsZSksXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBsb2dnZXIubG9nKFwiVW5rbm93biBlZGl0IHR5cGU6IFwiLCB0eXBlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcInNldGF0dHJpYnV0ZVwiKSB7XG4gICAgICBsb2dnZXIubG9nKFwiU2V0dGluZyBhdHRyaWJ1dGU6IFwiLCBhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICAgIHN3aXRjaCAoYXR0cmlidXRlKSB7XG4gICAgICAgIGNhc2UgXCJzcmNcIjpcbiAgICAgICAgICBlbGVtZW50LmNzcyhcImNvbnRlbnRcIiwgYHVybCgke3ZhbHVlLnRyaW0oKX0pYCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jYXNlLWRlY2xhcmF0aW9uc1xuICAgICAgICAgIGNvbnN0IHByb3BlcnR5ID0gdmFsdWUuc3BsaXQoXCI6XCIpWzBdLnRyaW0oKTtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY2FzZS1kZWNsYXJhdGlvbnNcbiAgICAgICAgICBjb25zdCBwcm9wZXJ0eVZhbHVlID0gdmFsdWUuc3BsaXQoXCI6XCIpWzFdLnRyaW0oKTtcblxuICAgICAgICAgIGVsZW1lbnQuY3NzKHByb3BlcnR5LCBwcm9wZXJ0eVZhbHVlLCBcIiFpbXBvcnRhbnRcIik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gXCJyZXBsYWNlXCIpIHtcbiAgICAgIGxvZ2dlci5sb2coXCJSZXBsYWNpbmc6IFwiLCB2YWx1ZSk7XG4gICAgICBlbGVtZW50LnJlcGxhY2VBbGwodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgPT09IFwic3dhcFwiKSB7XG4gICAgICBsb2dnZXIubG9nKFwiU3dhcHBpbmc6IFwiLCBtb3ZlX3NlbGVjdG9yXzEsIG1vdmVfc2VsZWN0b3JfMik7XG4gICAgICBjb25zdCBuMSA9IHdpbmRvdy50b3AuZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihtb3ZlX3NlbGVjdG9yXzEpO1xuICAgICAgY29uc3QgbjIgPSB3aW5kb3cudG9wLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobW92ZV9zZWxlY3Rvcl8yKTtcbiAgICAgIHN3YXBOb2RlcyhuMSwgbjIpO1xuICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgPT09IFwiaW5qZWN0c2NyaXB0XCIpIHtcbiAgICAgIGxvZ2dlci5sb2coXCJJbmplY3Rpbmcgc2NyaXB0OiBcIiwgdmFsdWUpO1xuICAgICAgZWxlbWVudC5hcHBlbmQoYDxzY3JpcHQ+JHt2YWx1ZX08L3NjcmlwdD5gKTtcbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcIm1vdmVcIikge1xuICAgICAgbG9nZ2VyLmxvZyhgTW92aW5nICR7bW92ZV9zZWxlY3Rvcl8xfSB0byAke21vdmVfc2VsZWN0b3JfMn1gKTtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IHdpbmRvdy50b3AuZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihtb3ZlX3NlbGVjdG9yXzEpO1xuICAgICAgY29uc3QgZGVzdGluYXRpb24gPSB3aW5kb3cudG9wLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobW92ZV9zZWxlY3Rvcl8yKTtcbiAgICAgIHNvdXJjZS5yZW1vdmUoKTtcbiAgICAgIGRlc3RpbmF0aW9uLnByZXBlbmQoc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcInByb2R1Y3RJbmZvTG9va3VwXCIpIHtcbiAgICAgIGNvbnN0IHJlcyA9IGdldFByb2R1Y3RJbmZvKHByb2R1Y3RJbmZvLCBwVHlwZSwgdmFsdWUpO1xuICAgICAgZWxlbWVudC5iZWZvcmUocmVzKTtcbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcInRleHQtdHJhbnNmb3JtXCIpIHtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwiY2FwaXRhbGl6ZVwiOiB7XG4gICAgICAgICAgaWYgKGVsZW1lbnQuaW5uZXJUZXh0LmluY2x1ZGVzKFwiXFxuXCIpKSB7XG4gICAgICAgICAgICBlbGVtZW50LmlubmVyVGV4dCA9IGVsZW1lbnQuaW5uZXJUZXh0LnRvTG93ZXJDYXNlKCkuc3BsaXQoXCJcXG5cIikubWFwKChzZW50ZW5jZSkgPT5cbiAgICAgICAgICAgICAgc2VudGVuY2Uuc3BsaXQoXCIgXCIpLm1hcCgod29yZCkgPT4gd29yZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHdvcmQuc2xpY2UoMSkpLmpvaW4oXCIgXCIpLFxuICAgICAgICAgICAgKS5qb2luKFwiXFxuXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbGVtZW50LmlubmVyVGV4dCA9IGVsZW1lbnQuaW5uZXJUZXh0LnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgLnNwbGl0KFwiIFwiKVxuICAgICAgICAgICAgICAubWFwKCh3b3JkKSA9PiB3b3JkLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd29yZC5zbGljZSgxKSlcbiAgICAgICAgICAgICAgLmpvaW4oXCIgXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2dlci5mYWlsZWQoXCJObyBzdWNoIG9wZXJhdG9yIGV4aXN0cyB5ZXRcIiwgb3BlcmF0b3IpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCByZXBsYWNlV2l0aFZhbCA9ICh2YWx1ZSwgaHRtbFN0cikgPT4ge1xuICAgIGlmICh2YWx1ZSAmJiBodG1sU3RyLmluY2x1ZGVzKFwie3tSRVBMQUNFX1BST0RVQ1RJTkZPfX1cIikpIHtcbiAgICAgIGh0bWxTdHIgPSByZXBsYWNlQWxsKGh0bWxTdHIsIFwie3tSRVBMQUNFX1BST0RVQ1RJTkZPfX1cIiwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gaHRtbFN0cjtcbiAgfTtcbiAgY29uc3QgZ2V0UHJvZHVjdEluZm8gPSAocHJvZHVjdEluZm8sIHR5cGUsIHZhbHVlKSA9PiB7XG4gICAgbGV0IHJlcyA9IG51bGw7XG4gICAgaWYgKCFza3VMaXN0IHx8IHNrdUxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICBsb2dnZXIubG9nKFwiTm8gc2t1IGZvdW5kXCIpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGVsZW1lbnRTa3UgPSBza3VMaXN0WzBdO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcInRyYW5zYWN0aW9uSW4yV2Vla3NcIjoge1xuICAgICAgICByZXMgPSByZXBsYWNlV2l0aFZhbChwcm9kdWN0SW5mb1tlbGVtZW50U2t1XS5jYXRhbG9nLnRyYW5zYWN0aW9uSW4yV2Vla3M/LnRvU3RyaW5nKClcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIixcIiksIHZhbHVlKTtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIlJlcGxhY2luZyB0cmFuc2NhdGlvbkluMldlZWtzIFwiLCBwcm9kdWN0SW5mb1tlbGVtZW50U2t1XS5jYXRhbG9nLnRyYW5zYWN0aW9uSW4yV2Vla3MpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJhZGRUb0NhcnRJbjJXZWVrc1wiOiB7XG4gICAgICAgIHJlcyA9IHJlcGxhY2VXaXRoVmFsKHByb2R1Y3RJbmZvW2VsZW1lbnRTa3VdLmNhdGFsb2cuYWRkVG9DYXJ0SW4yV2Vla3M/LnRvU3RyaW5nKClcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIixcIiksIHZhbHVlKTtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIlJlcGxhY2luZyBBZGRUb0NhcnRDb3VudCBcIiwgcHJvZHVjdEluZm9bZWxlbWVudFNrdV0uY2F0YWxvZy5hZGRUb0NhcnRJbjJXZWVrcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcInByb2R1Y3RWaWV3Q291bnRcIjoge1xuICAgICAgICByZXMgPSByZXBsYWNlV2l0aFZhbChwcm9kdWN0SW5mb1tlbGVtZW50U2t1XS5jYXRhbG9nLnByb2R1Y3RWaWV3Q291bnQ/LnRvU3RyaW5nKClcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIixcIiksIHZhbHVlKTtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIlJlcGxhY2luZyBwcm9kdWN0Vmlld0NvdW50IGZvclwiLCBwcm9kdWN0SW5mb1tlbGVtZW50U2t1XS5jYXRhbG9nLnByb2R1Y3RWaWV3Q291bnQpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxvZ2dlci5mYWlsZWQoXCJubyBzdWNoIHR5cGUgZm91bmQgZm9yIHByb2R1Y3RJbmZvTG9va3VwIG9wZXJhdG9yOiBcIisgdHlwZSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG4gIGNvbnN0IGhhbmRsZURvY3VtZW50VGl0bGVUYWJDaGFuZ2UgPSBhc3luYyAoZXZlbnQsIHRpdGxlcywgb3JpZ2luYWxUaXRsZSkgPT4ge1xuICAgIGNvbnN0IHBhcnNlZFRpdGxlcyA9ICFBcnJheS5pc0FycmF5KHRpdGxlcykgPyBbdGl0bGVzXSA6IHRpdGxlcztcbiAgICBmb3IgKGNvbnN0IHBhcnNlZFRpdGxlIG9mIHBhcnNlZFRpdGxlcykge1xuICAgICAgaWYgKHdpbmRvdy50b3AuZG9jdW1lbnQuaGlkZGVuKSB7XG4gICAgICAgIHdpbmRvdy50b3AuZG9jdW1lbnQudGl0bGUgPSBwYXJzZWRUaXRsZTtcbiAgICAgICAgYXdhaXQgZGVsYXkoMjAwMCk7XG4gICAgICAgIHdpbmRvdy50b3AuZG9jdW1lbnQudGl0bGUgPSBvcmlnaW5hbFRpdGxlO1xuICAgICAgICBhd2FpdCBkZWxheSgyMDAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy50b3AuZG9jdW1lbnQudGl0bGUgPSBvcmlnaW5hbFRpdGxlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXdpbmRvdy50b3AuZG9jdW1lbnQuaGlkZGVuKSB7XG4gICAgICB3aW5kb3cudG9wLmRvY3VtZW50LnRpdGxlID0gb3JpZ2luYWxUaXRsZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFuZGxlRG9jdW1lbnRUaXRsZVRhYkNoYW5nZShldmVudCwgdGl0bGVzLCBvcmlnaW5hbFRpdGxlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlUG9wdXBDbGljayA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IGlkID0gZXZlbnQudGFyZ2V0LmlkO1xuICAgIGlmIChpZCAmJiBpZCA9PT0gXCJuZC1wb3B1cF9fd3JhcHBlclwiKSB7XG4gICAgICAkKFwiI25kLXBvcHVwX193cmFwcGVyXCIpLnJlbW92ZSgpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVQb3B1cENsaWNrLCB0cnVlKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgaGFuZGxlUG9wdXBDbGljaywgdHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGRpc3BsYXlQb3B1cCA9ICgpID0+IHtcbiAgICBpZiAod2luZG93LnRvcC5kb2N1bWVudC5oaWRkZW4pIHJldHVybjtcbiAgICBpZiAocGFyc2VJbnQoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQT1BVUF9ESVNQTEFZX0ZMQUcpKSA+IDApIHJldHVybjtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBPUFVQX0RJU1BMQVlfRkxBRywgMSk7XG4gICAgY29uc3QgcVBvcHVwID0gd2luZG93LnRvcC5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2dydC1zaGFkb3ctaG9zdFwiKTtcbiAgICBpZiAocVBvcHVwKSBxUG9wdXAuc3R5bGVbXCJkaXNwbGF5XCJdID0gXCJub25lXCI7XG4gICAgd2luZG93LnRvcC5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5kLXBvcHVwX193cmFwcGVyXCIpLnN0eWxlW1wiZGlzcGxheVwiXSA9IFwiYmxvY2tcIjtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZVBvcHVwQ2xpY2ssIHRydWUpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgaGFuZGxlUG9wdXBDbGljaywgdHJ1ZSk7XG5cbiAgICB3aW5kb3cudG9wLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCBkaXNwbGF5UG9wdXAsIHtcbiAgICAgIG9uY2U6IHRydWUsXG4gICAgfSk7XG4gICAgd2luZG93LnRvcC5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNvcHlcIiwgZGlzcGxheVBvcHVwLCB7XG4gICAgICBvbmNlOiB0cnVlLFxuICAgIH0pO1xuICAgIHdpbmRvdy50b3AucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgZGlzcGxheVBvcHVwKTtcbiAgICB3aW5kb3cudG9wLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLCBkaXNwbGF5UG9wdXAsIHtcbiAgICAgIG9uY2U6IHRydWUsXG4gICAgfSk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICQoXCIjbmQtcG9wdXBfX3dyYXBwZXJcIikucmVtb3ZlKCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZVBvcHVwQ2xpY2ssIHRydWUpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBoYW5kbGVQb3B1cENsaWNrLCB0cnVlKTtcbiAgICB9LCAxNTAwMCk7XG4gIH07XG5cbiAgY29uc3QgY3JlYXRlUG9wdXAgPSAodmFsdWUsIGNvbnRlbnRTZWxlY3RvcikgPT4ge1xuICAgIC8vIENyZWF0ZSBwb3B1cCB3cmFwcGVyXG4gICAgY29uc3QgcG9wdXBXcmFwcGVyID0gd2luZG93LnRvcC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgcG9wdXBXcmFwcGVyLmNsYXNzTGlzdC5hZGQoXCJuZC1wb3B1cF9fd3JhcHBlclwiKTtcbiAgICBwb3B1cFdyYXBwZXIuaWQgPSBcIm5kLXBvcHVwX193cmFwcGVyXCI7XG5cbiAgICAvLyBDcmVhdGUgcG9wdXAgY2xvc2UgYnV0dG9uXG4gICAgY29uc3QgcG9wdXBDbG9zZUJ1dHRvbiA9IHdpbmRvdy50b3AuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBwb3B1cENsb3NlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJuZC1wb3B1cF9fYnV0dG9uLWNsb3NlXCIpO1xuICAgIHBvcHVwQ2xvc2VCdXR0b24uaW5uZXJUZXh0ID0gXCJYXCI7XG4gICAgcG9wdXBDbG9zZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgJChcIiNuZC1wb3B1cF9fd3JhcHBlclwiKS5yZW1vdmUoKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlUG9wdXBDbGljaywgdHJ1ZSk7XG4gICAgfTtcblxuICAgIGlmIChjb250ZW50U2VsZWN0b3IpIHtcbiAgICAgIGNvbnN0IGNvbnRlbnRzID0gQXJyYXkuZnJvbSh3aW5kb3cudG9wLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY29udGVudFNlbGVjdG9yKSk7XG4gICAgICB3aGlsZSAodmFsdWUuaW5jbHVkZXMoXCJ7e1JFUExBQ0V9fVwiKSAmJiBjb250ZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShcInt7UkVQTEFDRX19XCIsIGNvbnRlbnRzLnNoaWZ0KCkuc3JjKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgcG9wdXAgZnJvbSBhY3Rpb24gYW5kIGFwcGVuZCBjbG9zZSBidXR0b25cbiAgICBjb25zdCB0ZW1wbGF0ZSA9IHdpbmRvdy50b3AuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO1xuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IHZhbHVlLnRyaW0oKTtcbiAgICBjb25zdCBwb3B1cCA9IHRlbXBsYXRlLmNvbnRlbnQuZmlyc3RDaGlsZDtcbiAgICBwb3B1cC5hcHBlbmRDaGlsZChwb3B1cENsb3NlQnV0dG9uKTtcbiAgICBwb3B1cFdyYXBwZXIuYXBwZW5kQ2hpbGQocG9wdXApO1xuXG4gICAgLy8gUmVtb3ZlIG9sZCBwb3B1cCBpZiBleGlzdHMgYmVmb3JlIGFwcGVuZGluZyBuZXcgb25lXG4gICAgJChcIiNuZC1wb3B1cF9fd3JhcHBlclwiKS5yZW1vdmUoKTtcbiAgICB3aW5kb3cudG9wLmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocG9wdXBXcmFwcGVyKTtcbiAgfTtcblxuICBjb25zdCBzd2FwTm9kZXMgPSBmdW5jdGlvbiBzd2FwTm9kZXMobjEsIG4yKSB7XG4gICAgY29uc3QgcDEgPSBuMS5wYXJlbnROb2RlO1xuICAgIGNvbnN0IHAyID0gbjIucGFyZW50Tm9kZTtcbiAgICBsZXQgaTE7XG4gICAgbGV0IGkyO1xuXG4gICAgaWYgKCFwMSB8fCAhcDIgfHwgcDEuaXNFcXVhbE5vZGUobjIpIHx8IHAyLmlzRXF1YWxOb2RlKG4xKSkgcmV0dXJuO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwMS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHAxLmNoaWxkcmVuW2ldLmlzRXF1YWxOb2RlKG4xKSkge1xuICAgICAgICBpMSA9IGk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcDIuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwMi5jaGlsZHJlbltpXS5pc0VxdWFsTm9kZShuMikpIHtcbiAgICAgICAgaTIgPSBpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwMS5pc0VxdWFsTm9kZShwMikgJiYgaTEgPCBpMikge1xuICAgICAgaTIrKztcbiAgICB9XG4gICAgcDEuaW5zZXJ0QmVmb3JlKG4yLCBwMS5jaGlsZHJlbltpMV0pO1xuICAgIHAyLmluc2VydEJlZm9yZShuMSwgcDIuY2hpbGRyZW5baTJdKTtcbiAgfTtcblxuICBjb25zdCBhY3Rpb25BcHBsaWNhdG9yID0gKGFjdGlvbnMpID0+IHtcbiAgICBpZiAoIXdpbmRvdy5qUXVlcnkpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGFjdGlvbkFwcGxpY2F0b3IoYWN0aW9ucyk7XG4gICAgICB9LCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoY29uc3QgYWN0aW9uIG9mIGFjdGlvbnMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgaWYgKGFjdGlvbi5jb25kaXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IGVsaWdpYmxlRWxlbWVudHMgPSBjaGVja0FjdGlvbkNvbmRpdGlvbihhY3Rpb24uY29uZGl0aW9uLCBwcm9kdWN0SW5mbywgc2t1TGlzdCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxpZ2libGVFbGVtZW50cykge1xuICAgICAgICAgICAgICByZXN1bHQgPSB0cmFuc2Zvcm1lcihhY3Rpb24sIGVsZW1lbnQpO1xuICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSByZXN1bHQgPSB0cmFuc2Zvcm1lcihhY3Rpb24pO1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBsb2dnZXIuZmFpbGVkKGBDb3VsZG4ndCBhcHBseSBhY3Rpb24gJHthY3Rpb259IHdpdGggZXJyb3IgJHtlcnIubWVzc2FnZX1gKTtcbiAgICAgICAgICByZXR1cm4gZXJyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIEFwcGx5IGFjdGlvbnNcbiAgcmV0dXJuIGFjdGlvbkFwcGxpY2F0b3IoYWN0aW9ucyk7XG59XG5leHBvcnQgZGVmYXVsdCBhcHBseUFjdGlvbnM7XG4iLCJpbXBvcnQge1NFU1NJT05fU1RPUkFHRV9LRVlTLCBMT0NBTF9TVE9SQUdFX0tFWVN9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7Y29uZGl0aW9uQ2hlY2tlcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IENvdW50ZXIgQ2hlY2tlclwiKTtcblxuZXhwb3J0IGNvbnN0IGNoZWNrQ291bnRlclJ1bGUgPSAocnVsZSkgPT57XG4gIGxvZ2dlci5sb2coXCJDaGVja2luZyBydWxlXCIsIEpTT04uc3RyaW5naWZ5KHJ1bGUpKTtcbiAgY29uc3Qge29wZXJhdG9yLCBjb25kaXRpb24sIHZhbHVlfSA9IHJ1bGU7XG4gIHN3aXRjaCAob3BlcmF0b3IpIHtcbiAgICBjYXNlIFwicGFnZVZpZXdcIjpcbiAgICAgIHJldHVybiBwYWdlVmlld0hhbmRsZXIoY29uZGl0aW9uLCB2YWx1ZSk7XG4gICAgY2FzZSBcIkNBQmFza2V0UHJpY2VcIjpcbiAgICAgIHJldHVybiBjYUJhc2tldFByaWNlSGFuZGxlcihjb25kaXRpb24sIHZhbHVlKTtcbiAgICBkZWZhdWx0OlxuICAgICAgbG9nZ2VyLmZhaWxlZChcIk5vIHN1Y2ggb3BlcmF0b3JcIiwgb3BlcmF0b3IpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5jb25zdCBnZXRDb3VudGVyID0gKGNvdW50ZXIsIHR5cGUpID0+IHtcbiAgdHJ5IHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJzZXNzaW9uXCI6XG4gICAgICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGNvdW50ZXIpO1xuICAgICAgY2FzZSBcImxvY2FsXCI6XG4gICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShjb3VudGVyKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxvZ2dlci5mYWlsZWQoXCJObyBzdWNoIHR5cGVcIiwgdHlwZSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nZ2VyLmZhaWxlZChgQ291bGQgbm90IGdldCBjb3VudGVyICR7Y291bnRlcn1gLCBlcnIpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG5jb25zdCBwYWdlVmlld0hhbmRsZXIgPSAoY29uZGl0aW9uLCB2YWx1ZSkgPT4ge1xuICBjb25zdCBwYWdlVmlld3MgPSBwYXJzZUludChnZXRDb3VudGVyKFNFU1NJT05fU1RPUkFHRV9LRVlTLlBBR0VfVklFV1MsIFwic2Vzc2lvblwiKSk7XG4gIGxvZ2dlci5sb2coXCJQYWdlIHZpZXdzIGNvdW50ZXIgdmFsdWU6IFwiLCBwYWdlVmlld3MpO1xuICBpZiAocGFnZVZpZXdzID09PSBudWxsKSB7XG4gICAgbG9nZ2VyLmZhaWxlZChcIlBhZ2V2aWV3cyBjb3VudGVyIG5vdCBmb3VuZCBpbiBzZXNzaW9uIHN0b3JhZ2VcIik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBjb25kaXRpb25DaGVja2VyKHBhZ2VWaWV3cywgY29uZGl0aW9uLCBwYXJzZUludCh2YWx1ZSkpO1xufTtcblxuY29uc3QgY2FCYXNrZXRQcmljZUhhbmRsZXIgPSAoY29uZGl0aW9uLCB2YWx1ZSkgPT4ge1xuICBjb25zdCBjYUJhc2tldFByaWNlID0gcGFyc2VJbnQoXG4gICAgICBnZXRDb3VudGVyKExPQ0FMX1NUT1JBR0VfS0VZUy5DT1VQT05fQVBQTElDQUJMRV9CQVNLRVRfUFJJQ0UsIFwibG9jYWxcIikpO1xuICBsb2dnZXIubG9nKFwiQ291cG9uIGFwcGxpY2FibGUgYmFza2V0IHByaWNlIGNvdW50ZXIgdmFsdWU6IFwiLCBjYUJhc2tldFByaWNlKTtcbiAgaWYgKGNhQmFza2V0UHJpY2UgPT09IG51bGwpIHtcbiAgICBsb2dnZXIuZmFpbGVkKFwiQ291cG9uIGFwcGxpY2FibGUgYmFza2V0IHByaWNlIGNvdW50ZXIgbm90IGZvdW5kIGluIGxvY2FsIHN0b3JhZ2VcIik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBjb25kaXRpb25DaGVja2VyKGNhQmFza2V0UHJpY2UsIGNvbmRpdGlvbiwgcGFyc2VJbnQodmFsdWUpKTtcbn07XG5cbiIsImltcG9ydCB7Y29uZGl0aW9uQ2hlY2tlcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IEVsZW1lbnQgQ2hlY2tlclwiKTtcblxuZXhwb3J0IGNvbnN0IGNoZWNrRWxlbWVudFJ1bGUgPSAocnVsZSkgPT57XG4gIGxvZ2dlci5sb2coXCJDaGVja2luZyBydWxlXCIsIEpTT04uc3RyaW5naWZ5KHJ1bGUpKTtcbiAgY29uc3Qge29wZXJhdG9yLCBjb25kaXRpb24sIHZhbHVlLCBzZWxlY3Rvciwgc2VsZWN0b3JBbGwsIHNlbGVjdG9yRmFsbGJhY2sgPSBudWxsfSA9IHJ1bGU7XG4gIGxldCBtYWluU2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgaWYgKG1haW5TZWxlY3RvciAmJiAhd2luZG93LnRvcC5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKG1haW5TZWxlY3RvcikpIHtcbiAgICBtYWluU2VsZWN0b3IgPSBzZWxlY3RvckZhbGxiYWNrID8gc2VsZWN0b3JGYWxsYmFjayA6IG1haW5TZWxlY3RvcjtcbiAgfVxuXG4gIGlmIChvcGVyYXRvciA9PT0gbnVsbCkge1xuICAgIHJldHVybiBjb25kaXRpb25DaGVja2VyKHdpbmRvdy50b3AuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihtYWluU2VsZWN0b3IpLCBjb25kaXRpb24sIHZhbHVlKTtcbiAgfVxuICBpZiAobWFpblNlbGVjdG9yICYmICF3aW5kb3cudG9wLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobWFpblNlbGVjdG9yKSkge1xuICAgIGxvZ2dlci5mYWlsZWQoXCJTZWxlY3RvciBub3QgZm91bmQgb24gcGFnZVwiKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHNlbGVjdG9yQWxsICYmICF3aW5kb3cudG9wLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3JBbGwpKSB7XG4gICAgbG9nZ2VyLmZhaWxlZChcIlNlbGVjdG9yIG5vdCBmb3VuZCBvbiBwYWdlXCIpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGxldCBlbGVtZW50O1xuICBpZiAobWFpblNlbGVjdG9yKSBlbGVtZW50ID0gd2luZG93LnRvcC5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKG1haW5TZWxlY3Rvcik7XG4gIGVsc2UgaWYgKHNlbGVjdG9yQWxsKSBlbGVtZW50ID0gQXJyYXkuZnJvbSh3aW5kb3cudG9wLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3JBbGwpKTtcblxuICBzd2l0Y2ggKG9wZXJhdG9yKSB7XG4gICAgY2FzZSBcInRleHQtbnVtYmVyXCI6IHtcbiAgICAgIGxldCB0ZW1wVmFsO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZWxlbWVudCkpIHtcbiAgICAgICAgdGVtcFZhbCA9IGVsZW1lbnQucmVkdWNlKChyZXR1cm5WYWwsIGVsZW0pID0+IHtcbiAgICAgICAgICByZXR1cm5WYWwgKz0gcGFyc2VJbnQoZWxlbS50ZXh0Q29udGVudC5yZXBsYWNlKFwiVExcIiwgXCJcIikucmVwbGFjZShcIi5cIiwgXCJcIikpO1xuICAgICAgICAgIHJldHVybiByZXR1cm5WYWw7XG4gICAgICAgIH0sIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGVtcFZhbCA9IHBhcnNlSW50KHdpbmRvdy50b3AuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihtYWluU2VsZWN0b3IpLnRleHRDb250ZW50XG4gICAgICAgICAgICAucmVwbGFjZShcIlRMXCIsIFwiXCIpLnJlcGxhY2UoXCIuXCIsIFwiXCIpKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJ1blRpbWVWYWx1ZSA9IHBhcnNlSW50KHRlbXBWYWwpO1xuICAgICAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIocnVuVGltZVZhbHVlLCBjb25kaXRpb24sIHZhbHVlKTtcbiAgICB9XG4gICAgY2FzZSBcImNsYXNzTGlzdFwiOlxuICAgICAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIoQXJyYXkuZnJvbShlbGVtZW50LmNsYXNzTGlzdCksIGNvbmRpdGlvbiwgdmFsdWUpO1xuICAgIGNhc2UgXCJjb3VudFwiOiB7XG4gICAgICBjb25zdCBydW5UaW1lVmFsdWUgPSBBcnJheS5pc0FycmF5KGVsZW1lbnQpID8gZWxlbWVudC5sZW5ndGggOiBlbGVtZW50ID8gMSA6IDA7XG4gICAgICByZXR1cm4gY29uZGl0aW9uQ2hlY2tlcihydW5UaW1lVmFsdWUsIGNvbmRpdGlvbiwgdmFsdWUpO1xuICAgIH1cbiAgICBjYXNlIFwic3R5bGVcIjoge1xuICAgICAgY29uc3QgZWxlbWVudFN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gICAgICBjb25zdCBzdHlsZUtleSA9IHZhbHVlLnNwbGl0KFwiOlwiKVswXS50cmltKCk7XG4gICAgICBjb25zdCBzdHlsZVZhbHVlID0gdmFsdWUuc3BsaXQoXCI6XCIpWzFdLnRyaW0oKTtcbiAgICAgIGNvbnN0IHJ1blRpbWVWYWx1ZSA9IGVsZW1lbnRTdHlsZXNbc3R5bGVLZXldO1xuICAgICAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIocnVuVGltZVZhbHVlLCBjb25kaXRpb24sIHN0eWxlVmFsdWUpO1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgbG9nZ2VyLmZhaWxlZChcIk9wZXJhdG9yIG5vdCBkZWZpbmVkXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuIiwiaW1wb3J0IHtjb25kaXRpb25DaGVja2VyfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlclwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIk5leHRkYXkgRnVuY3Rpb24gQ2hlY2tlclwiKTtcblxuZXhwb3J0IGNvbnN0IGNoZWNrRnVuY3Rpb25SdWxlID0gKHJ1bGUsIG9wdHMpID0+e1xuICBsb2dnZXIubG9nKFwiQ2hlY2tpbmcgcnVsZVwiLCBKU09OLnN0cmluZ2lmeShydWxlKSk7XG4gIGNvbnN0IHtwcm9kdWN0SW5mb30gPSBvcHRzO1xuICBjb25zdCB7b3BlcmF0b3IsIGNvbmRpdGlvbiwgdmFsdWUsIGJpbmRpbmdzfSA9IHJ1bGU7XG4gIGlmICghb3BlcmF0b3IpIHtcbiAgICBsb2dnZXIuZmFpbGVkKFwiUnVsZSBmdW5jdGlvbiBub3QgZGVmaW5lZFwiKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGV0IGNvbnRleHQgPSB7fTtcbiAgaWYgKGJpbmRpbmdzID09IFwicHJvZHVjdEluZm9cIikge1xuICAgIGNvbnRleHQgPSB7XG4gICAgICBwcm9kdWN0SW5mbyxcbiAgICB9O1xuICB9XG4gIGNvbnN0IHJ1bGVGdW5jdGlvbiA9IEZ1bmN0aW9uKG9wZXJhdG9yKS5iaW5kKGNvbnRleHQpO1xuICBjb25zdCBydW50aW1lVmFsdWUgPSBydWxlRnVuY3Rpb24oKTtcbiAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIocnVudGltZVZhbHVlLCBjb25kaXRpb24sIHZhbHVlKTtcbn07XG4iLCJpbXBvcnQge1NFU1NJT05fU1RPUkFHRV9LRVlTfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQge2NvbmRpdGlvbkNoZWNrZXJ9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFwiTmV4dGRheSBTZXNzaW9uIENoZWNrZXJcIik7XG5cbmV4cG9ydCBjb25zdCBjaGVja1Nlc3Npb25SdWxlID0gKHJ1bGUpID0+e1xuICBsb2dnZXIubG9nKFwiQ2hlY2tpbmcgcnVsZVwiLCBKU09OLnN0cmluZ2lmeShydWxlKSk7XG4gIGNvbnN0IHtvcGVyYXRvciwgY29uZGl0aW9uLCB2YWx1ZX0gPSBydWxlO1xuICBzd2l0Y2ggKG9wZXJhdG9yKSB7XG4gICAgY2FzZSBcImR1cmF0aW9uXCI6XG4gICAgICByZXR1cm4gZHVyYXRpb25IYW5kbGVyKGNvbmRpdGlvbiwgdmFsdWUpO1xuICAgIGNhc2UgXCJoaXN0b3J5XCI6XG4gICAgICByZXR1cm4gaGlzdG9yeUhhbmRsZXIoY29uZGl0aW9uLCB2YWx1ZSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG5jb25zdCBnZXRTZXNzaW9uVGltZXN0YW1wID0gKCkgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgRGF0ZShwYXJzZUludCh3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShTRVNTSU9OX1NUT1JBR0VfS0VZUy5TRVNTSU9OX1RJTUVTVEFNUCkpKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nZ2VyLmZhaWxlZChcIkNvdWxkIG5vdCBnZXQgc2Vzc2lvbiB0aW1lc3RhbXBcIiwgZXJyKTtcbiAgICByZXR1cm4gRGF0ZS5ub3coKTtcbiAgfVxufTtcblxuY29uc3QgZHVyYXRpb25IYW5kbGVyID0gKGNvbmRpdGlvbiwgdmFsdWUpID0+IHtcbiAgY29uc3QgZHVyYXRpb24gPSAoRGF0ZS5ub3coKSAtIGdldFNlc3Npb25UaW1lc3RhbXAoKSkgLyAxMDAwO1xuICByZXR1cm4gY29uZGl0aW9uQ2hlY2tlcihkdXJhdGlvbiwgY29uZGl0aW9uLCBwYXJzZUludCh2YWx1ZSkpO1xufTtcblxuY29uc3QgaGlzdG9yeUhhbmRsZXIgPSAoY29uZGl0aW9uLCB2YWx1ZSkgPT4ge1xuICBjb25zdCBjdXJyZW50SGlzdG9yeSA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFNFU1NJT05fU1RPUkFHRV9LRVlTLlNFU1NJT05fSElTVE9SWSk/LnNwbGl0KFwiLFwiKTtcbiAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIoY3VycmVudEhpc3RvcnksIGNvbmRpdGlvbiwgdmFsdWUpO1xufTtcbiIsImltcG9ydCB7Y29uZGl0aW9uQ2hlY2tlcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IFVybCBDaGVja2VyXCIpO1xuXG5leHBvcnQgY29uc3QgY2hlY2tVcmxSdWxlID0gKHJ1bGUpID0+e1xuICBsb2dnZXIubG9nKFwiQ2hlY2tpbmcgcnVsZVwiLCBKU09OLnN0cmluZ2lmeShydWxlKSk7XG4gIGNvbnN0IHtvcGVyYXRvciwgY29uZGl0aW9uLCB2YWx1ZX0gPSBydWxlO1xuXG4gIHN3aXRjaCAob3BlcmF0b3IpIHtcbiAgICBjYXNlIFwicGF0aFwiOiB7XG4gICAgICBjb25zdCByZXF1ZXN0VVJMPSB3aW5kb3cudG9wLmxvY2F0aW9uLmhyZWY7XG4gICAgICBjb25zdCBwYXRoID0gbmV3IFVSTChyZXF1ZXN0VVJMKS5wYXRobmFtZVxuICAgICAgbG9nZ2VyLmxvZyhgQ2hlY2tpbmcgcGF0aCAke3BhdGh9IG1hdGNoZXMgcnVsZSBwYXRoICR7dmFsdWV9YCk7XG4gICAgICByZXR1cm4gY29uZGl0aW9uQ2hlY2tlcihwYXRoLCBjb25kaXRpb24sIHZhbHVlKTtcbiAgICB9XG4gIH1cbn07XG4iLCJpbXBvcnQge2NvbmRpdGlvbkNoZWNrZXJ9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHtNT0JJTEVfTUVESUFfUVVFUll9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlclwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIk5leHRkYXkgRW52IENoZWNrZXJcIik7XG5cbmV4cG9ydCBjb25zdCBjaGVja0VudlJ1bGUgPSAocnVsZSkgPT57XG4gIGxvZ2dlci5sb2coXCJDaGVja2luZyBydWxlXCIsIEpTT04uc3RyaW5naWZ5KHJ1bGUpKTtcbiAgY29uc3Qge29wZXJhdG9yLCBjb25kaXRpb24sIHZhbHVlfSA9IHJ1bGU7XG5cbiAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgIGNhc2UgXCJkZXZpY2VfdHlwZVwiOiB7XG4gICAgICBjb25zdCBpc01vYmlsZSA9IHdpbmRvdy5tYXRjaE1lZGlhKE1PQklMRV9NRURJQV9RVUVSWSkubWF0Y2hlcyA/IFwibW9iaWxlXCIgOiBcImRlc2t0b3BcIjtcbiAgICAgIHJldHVybiBjb25kaXRpb25DaGVja2VyKGlzTW9iaWxlLCBjb25kaXRpb24sIHZhbHVlKTtcbiAgICB9XG4gIH1cbn07XG4iLCJpbXBvcnQge2NvbmRpdGlvbkNoZWNrZXIsIGRldGVybWluZVBjdCwgZ2V0SWRlbnRpZmllcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IFJhbmRvbVBjdCBDaGVja2VyXCIpO1xuXG5leHBvcnQgY29uc3QgY2hlY2tSYW5kb21OdW1iZXJSdWxlID0gYXN5bmMgKHJ1bGUpID0+e1xuICBsb2dnZXIubG9nKFwiQ2hlY2tpbmcgcnVsZVwiLCBKU09OLnN0cmluZ2lmeShydWxlKSk7XG4gIGNvbnN0IHtjb25kaXRpb24sIHZhbHVlLCBzYWx0fSA9IHJ1bGU7XG4gIGlmICghc2FsdCkge1xuICAgIGxvZ2dlci5mYWlsZWQoXCJTYWx0IGlzIG5vdCBkZWZpbmVkXCIpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBpZGVudGlmaWVyID0gYXdhaXQgZ2V0SWRlbnRpZmllcigpO1xuICBjb25zdCByYW5kb21QY3QgPSBhd2FpdCBkZXRlcm1pbmVQY3QoaWRlbnRpZmllciArIHNhbHQpO1xuICBjb25zdCBydW50aW1lVmFsdWUgPSByYW5kb21QY3Q7XG4gIHJldHVybiBjb25kaXRpb25DaGVja2VyKHJ1bnRpbWVWYWx1ZSwgY29uZGl0aW9uLCB2YWx1ZSk7XG59O1xuIiwiaW1wb3J0IHtjb25kaXRpb25DaGVja2VyfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlclwiO1xuXG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFwiTmV4dGRheSBQcm9kdWN0SW5mbyBDaGVja2VyXCIpO1xuXG5leHBvcnQgY29uc3QgY2hlY2tQcm9kdWN0SW5mb1J1bGUgPSAocnVsZSwgb3B0cykgPT57XG4gIGxvZ2dlci5sb2coXCJDaGVja2luZyBydWxlXCIsIEpTT04uc3RyaW5naWZ5KHJ1bGUpKTtcbiAgY29uc3Qge29wZXJhdG9yLCBjb25kaXRpb24sIHZhbHVlfSA9IHJ1bGU7XG4gIGxldCBydW50aW1lVmFsdWUgPSBudWxsO1xuXG4gIGlmICghb3B0cz8uc2t1TGlzdCB8fCAhb3B0cz8uc2t1TGlzdC5sZW5ndGgpIHtcbiAgICBydW50aW1lVmFsdWUgPSAwO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAob3BlcmF0b3IpIHtcbiAgICAgIGNhc2UgXCJ0cmFuc2FjdGlvbkluMldlZWtzXCI6IHtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIkdldHRpbmcgVHJhbnNhY3Rpb25Db3VudCBmb3Igc2t1IFwiLCBvcHRzLnNrdUxpc3RbMF0pO1xuICAgICAgICBydW50aW1lVmFsdWUgPSBnZXRUcmFuc2FjdGlvbkNvdW50KG9wdHMuc2t1TGlzdFswXSwgb3B0cy5wcm9kdWN0SW5mbyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcImFkZFRvQ2FydEluMldlZWtzXCI6IHtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIkdldHRpbmcgQWRkVG9DYXJ0Q291bnQgZm9yIHNrdSBcIiwgb3B0cy5za3VMaXN0WzBdKTtcbiAgICAgICAgcnVudGltZVZhbHVlID0gZ2V0QWRkVG9DYXJ0Q291bnQob3B0cy5za3VMaXN0WzBdLCBvcHRzLnByb2R1Y3RJbmZvKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwicHJvZHVjdFZpZXdDb3VudFwiOiB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJHZXR0aW5nIHByb2R1Y3RWaWV3Q291bnQgZm9yIHNrdSBcIiwgb3B0cy5za3VMaXN0WzBdKTtcbiAgICAgICAgcnVudGltZVZhbHVlID0gZ2V0UHJldmlld0NvdW50KG9wdHMuc2t1TGlzdFswXSwgb3B0cy5wcm9kdWN0SW5mbyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY29uZGl0aW9uQ2hlY2tlcihydW50aW1lVmFsdWUsIGNvbmRpdGlvbiwgdmFsdWUpO1xufTtcblxuY29uc3QgZ2V0VHJhbnNhY3Rpb25Db3VudCA9IChza3UsIHByb2R1Y3RJbmZvKSA9PiB7XG4gIGlmIChza3UgJiYgcHJvZHVjdEluZm8gJiYgcHJvZHVjdEluZm9bc2t1XSkge1xuICAgIHJldHVybiBwcm9kdWN0SW5mb1tza3VdPy5jYXRhbG9nPy50cmFuc2FjdGlvbkluMldlZWtzO1xuICB9XG4gIHJldHVybiAtMTtcbn07XG5cbmNvbnN0IGdldEFkZFRvQ2FydENvdW50ID0gKHNrdSwgcHJvZHVjdEluZm8pID0+IHtcbiAgaWYgKHNrdSAmJiBwcm9kdWN0SW5mbyAmJiBwcm9kdWN0SW5mb1tza3VdKSB7XG4gICAgcmV0dXJuIHByb2R1Y3RJbmZvW3NrdV0/LmNhdGFsb2c/LmFkZFRvQ2FydEluMldlZWtzO1xuICB9XG4gIHJldHVybiAtMTtcbn07XG5cbmNvbnN0IGdldFByZXZpZXdDb3VudCA9IChza3UsIHByb2R1Y3RJbmZvKSA9PiB7XG4gIGlmIChza3UgJiYgcHJvZHVjdEluZm8gJiYgcHJvZHVjdEluZm9bc2t1XSkge1xuICAgIHJldHVybiBwcm9kdWN0SW5mb1tza3VdPy5jYXRhbG9nPy5wcm9kdWN0Vmlld0NvdW50O1xuICB9XG4gIHJldHVybiAtMTtcbn07XG4iLCJpbXBvcnQge2NoZWNrQ291bnRlclJ1bGV9IGZyb20gXCIuL2NvdW50ZXJDaGVja2VyXCI7XG5pbXBvcnQge2NoZWNrRGF0YUxheWVyUnVsZX0gZnJvbSBcIi4vZGF0YUxheWVyQ2hlY2tlclwiO1xuaW1wb3J0IHtjaGVja0VsZW1lbnRSdWxlfSBmcm9tIFwiLi9lbGVtZW50Q2hlY2tlclwiO1xuaW1wb3J0IHtjaGVja0Z1bmN0aW9uUnVsZX0gZnJvbSBcIi4vZnVuY3Rpb25DaGVja2VyXCI7XG5pbXBvcnQge2NoZWNrU2Vzc2lvblJ1bGV9IGZyb20gXCIuL3Nlc3Npb25DaGVja2VyXCI7XG5pbXBvcnQge2NoZWNrVXJsUnVsZX0gZnJvbSBcIi4vdXJsQ2hlY2tlclwiO1xuaW1wb3J0IHtjaGVja0VudlJ1bGV9IGZyb20gXCIuL2VudkNoZWNrZXJcIjtcbmltcG9ydCB7Y2hlY2tSYW5kb21OdW1iZXJSdWxlfSBmcm9tIFwiLi9yYW5kb21OdW1iZXJDaGVja2VyXCI7XG5pbXBvcnQge2NoZWNrUHJvZHVjdEluZm9SdWxlfSBmcm9tIFwiLi9wcm9kdWN0SW5mb0NoZWNrZXJcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlclwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIk5leHRkYXkgUnVsZSBFbmdpbmVcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJ1bGVFbmdpbmUge1xuICBjb25zdHJ1Y3Rvcihib2R5KSB7XG4gICAgY29uc3Qge2Jhc2VSdWxlU2V0LCBidXNpbmVzc1J1bGVTZXQsIGJpbmRpbmdzLCBjYWxsYmFjayA9IG51bGx9ID0gYm9keTtcbiAgICB0aGlzLmJhc2VSdWxlU2V0ID0gYmFzZVJ1bGVTZXQ7XG4gICAgdGhpcy5idXNpbmVzc1J1bGVTZXQgPSBidXNpbmVzc1J1bGVTZXQ7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuYmluZGluZ3MgPSBiaW5kaW5ncztcbiAgfVxuXG4gIGFzeW5jIGNoZWNrUnVsZXMoKSB7XG4gICAgZm9yIChjb25zdCBydWxlIG9mIHRoaXMuYmFzZVJ1bGVTZXQpIHtcbiAgICAgIGNvbnN0IHJ1bGVTYXRpc2ZpZWQgPSBhd2FpdCB0aGlzLmNoZWNrUnVsZShydWxlKTtcbiAgICAgIGlmICghcnVsZVNhdGlzZmllZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXN5bmMgY2hlY2tCdXNpbmVzc1J1bGVzKCkge1xuICAgIGZvciAoY29uc3QgcnVsZSBvZiB0aGlzLmJ1c2luZXNzUnVsZVNldCkge1xuICAgICAgY29uc3QgcnVsZVNhdGlzZmllZCA9IGF3YWl0IHRoaXMuY2hlY2tSdWxlKHJ1bGUpO1xuICAgICAgaWYgKHJ1bGVTYXRpc2ZpZWQpIHtcbiAgICAgICAgcmV0dXJuIHJ1bGUuYnVzaW5lc3NSdWxlSWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgYXN5bmMgY2hlY2tSdWxlKHJ1bGUpIHtcbiAgICBjb25zdCB7Y2hhaW4sIGNoYWluX2NvbmRpdGlvbiwgdHlwZX0gPSBydWxlO1xuICAgIGxldCBydWxlU2F0aXNmaWVkID0gbnVsbDtcbiAgICAvLyBjaGVjayBydWxlXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwic2Vzc2lvblwiOlxuICAgICAgICBydWxlU2F0aXNmaWVkID0gY2hlY2tTZXNzaW9uUnVsZShydWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiY291bnRlclwiOlxuICAgICAgICBydWxlU2F0aXNmaWVkID0gY2hlY2tDb3VudGVyUnVsZShydWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZWxlbWVudFwiOlxuICAgICAgICBydWxlU2F0aXNmaWVkID0gY2hlY2tFbGVtZW50UnVsZShydWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZGF0YUxheWVyXCI6XG4gICAgICAgIHJ1bGVTYXRpc2ZpZWQgPSBjaGVja0RhdGFMYXllclJ1bGUocnVsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInVybFwiOlxuICAgICAgICBydWxlU2F0aXNmaWVkID0gY2hlY2tVcmxSdWxlKHJ1bGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICBydWxlU2F0aXNmaWVkID0gY2hlY2tGdW5jdGlvblJ1bGUocnVsZSwgdGhpcy5iaW5kaW5ncyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImVudmlyb25tZW50XCI6XG4gICAgICAgIHJ1bGVTYXRpc2ZpZWQgPSBjaGVja0VudlJ1bGUocnVsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInJhbmRvbVwiOlxuICAgICAgICBydWxlU2F0aXNmaWVkID0gYXdhaXQgY2hlY2tSYW5kb21OdW1iZXJSdWxlKHJ1bGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJwcm9kdWN0SW5mb0xvb2t1cFwiOlxuICAgICAgICBydWxlU2F0aXNmaWVkID0gY2hlY2tQcm9kdWN0SW5mb1J1bGUocnVsZSwgdGhpcy5iaW5kaW5ncyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbG9nZ2VyLmZhaWxlZChgTm8gc3VjaCBydWxlIHR5cGU6ICR7dHlwZX1gKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGNoYWluKSB7XG4gICAgICBzd2l0Y2ggKGNoYWluX2NvbmRpdGlvbikge1xuICAgICAgICBjYXNlIFwiYW5kXCI6XG4gICAgICAgICAgcnVsZVNhdGlzZmllZCA9IHJ1bGVTYXRpc2ZpZWQgJiYgYXdhaXQgdGhpcy5jaGVja1J1bGUoY2hhaW4pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwib3JcIjpcbiAgICAgICAgICBydWxlU2F0aXNmaWVkID0gcnVsZVNhdGlzZmllZCB8fCBhd2FpdCB0aGlzLmNoZWNrUnVsZShjaGFpbik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ4b3JcIjpcbiAgICAgICAgICBydWxlU2F0aXNmaWVkID0gcnVsZVNhdGlzZmllZCAhPSBhd2FpdCB0aGlzLmNoZWNrUnVsZShjaGFpbik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgbG9nZ2VyLmZhaWxlZChcIk5vIHN1Y2ggY2hhaW4gY29uZGl0aW9uXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcnVsZVNhdGlzZmllZDtcbiAgfVxufVxuIiwiaW1wb3J0IFJ1bGVFbmdpbmUgZnJvbSBcIi4uL05leHRkYXlSdWxlRW5naW5lXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIlNlZ21lbnRhdGlvbkNvbXB1dGVyXCIpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29tcHV0ZVNlZ21lbnQodHJlYXRtZW50V2VpZ2h0cykge1xuICBsb2dnZXIubG9nKFwiRGV0ZXJtaW5pbmcgdXNlciBzZWdtZW50XCIpO1xuICBmb3IgKGNvbnN0IHNlZ21lbnQgb2YgT2JqZWN0LmtleXModHJlYXRtZW50V2VpZ2h0cykpIHtcbiAgICBjb25zdCBydWxlU2V0ID0gdHJlYXRtZW50V2VpZ2h0c1tzZWdtZW50XT8ucnVsZVNldDtcbiAgICBpZiAoIXJ1bGVTZXQpIGNvbnRpbnVlO1xuICAgIGNvbnN0IHNlZ21lbnRSdWxlRW5naW5lID0gbmV3IFJ1bGVFbmdpbmUoe2Jhc2VSdWxlU2V0OiBydWxlU2V0LCBidXNpbmVzc1J1bGVTZXQ6IFtdLCBiaW5kaW5nczogbnVsbH0pO1xuICAgIGlmIChhd2FpdCBzZWdtZW50UnVsZUVuZ2luZS5jaGVja1J1bGVzKCkpIHtcbiAgICAgIGxvZ2dlci5sb2coYFVzZXIgc2VnbWVudCBtYXRjaGVkOiAke3NlZ21lbnR9YCk7XG4gICAgICByZXR1cm4gc2VnbWVudDtcbiAgICB9XG4gIH1cblxuICBsb2dnZXIubG9nKFwiVXNlciBzZWdtZW50IG5vdCBtYXRjaGVkLCByZXR1cm5pbmcgZGVmYXVsdFwiKTtcbiAgcmV0dXJuIFwiZGVmYXVsdFwiO1xufVxuIiwiaW1wb3J0IHtTRVNTSU9OX1NUT1JBR0VfS0VZUywgVFJFQVRNRU5UU19EVVJBVElPTn0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHtmZXRjaFRyZWF0bWVudHMsIGZldGNoVHJlYXRtZW50V2VpZ2h0c30gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQge2NvbXB1dGVTZWdtZW50fSBmcm9tIFwiLi4vQmVhZ2xlSW5mb0xheWVyL3NlZ21lbnQtY29tcHV0ZXJcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlclwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIk5leHRkYXkgVHJlYXRtZW50IFJlcG9zaXRvcnlcIik7XG5cbmNsYXNzIFRyZWF0bWVudFJlcG9zaXRvcnkge1xuICBjb25zdHJ1Y3Rvcihib2R5KSB7XG4gICAgY29uc3Qge3RyZWF0bWVudHMsIHRyZWF0bWVudFdlaWdodHN9ID0gYm9keTtcbiAgICB0aGlzLnRyZWF0bWVudHMgPSB0cmVhdG1lbnRzO1xuXG4gICAgdGhpcy50cmVhdG1lbnRXZWlnaHRzID0gdHJlYXRtZW50V2VpZ2h0cztcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBnZXRUcmVhdG1lbnRzKCkge1xuICAgIGxvZ2dlci5sb2coXCJMb2FkaW5nIHRyZWF0bWVudHNcIik7XG4gICAgY29uc3Qge1RSRUFUTUVOVFN9ID0gU0VTU0lPTl9TVE9SQUdFX0tFWVM7XG4gICAgY29uc3QgdHJlYXRtZW50c09iaiA9IEpTT04ucGFyc2Uod2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oVFJFQVRNRU5UUykpO1xuICAgIGxldCB0cmVhdG1lbnRzID0gdHJlYXRtZW50c09iaj8udHJlYXRtZW50cztcbiAgICBjb25zdCB0aW1lc3RhbXAgPSB0cmVhdG1lbnRzT2JqPy50aW1lc3RhbXA7XG4gICAgaWYgKCF0cmVhdG1lbnRzIHx8ICF0aW1lc3RhbXApIHtcbiAgICAgIGxvZ2dlci5mYWlsZWQoXCJUcmVhdG1lbnRzIG5vdCBmb3VuZCBpbiBsb2NhbCBzdG9yYWdlXCIpO1xuICAgICAgdHJlYXRtZW50cyA9IGF3YWl0IGZldGNoVHJlYXRtZW50cygpO1xuICAgICAgY29uc3QgdHJlYXRtZW50V2l0aFRpbWVzdGFtcCA9IHtcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICB0cmVhdG1lbnRzLFxuICAgICAgfTtcbiAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFRSRUFUTUVOVFMsIEpTT04uc3RyaW5naWZ5KHRyZWF0bWVudFdpdGhUaW1lc3RhbXApKTtcbiAgICAgIHJldHVybiB0cmVhdG1lbnRzO1xuICAgIH1cbiAgICBpZiAodGltZXN0YW1wKSB7XG4gICAgICBjb25zdCBlbGFwc2VkRGF5cyA9IChEYXRlLm5vdygpIC0gdGltZXN0YW1wKSAvICgxMDAwICogMzYwMCAqIDI0KTtcbiAgICAgIGlmIChlbGFwc2VkRGF5cyA+IFRSRUFUTUVOVFNfRFVSQVRJT04pIHtcbiAgICAgICAgbG9nZ2VyLmZhaWxlZChcIlRyZWF0bWVudHMgYXJlIGV4cGlyZWRcIik7XG4gICAgICAgIHRyZWF0bWVudHMgPSBhd2FpdCBmZXRjaFRyZWF0bWVudHMoKTtcbiAgICAgICAgY29uc3QgdHJlYXRtZW50V2l0aFRpbWVzdGFtcCA9IHtcbiAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgdHJlYXRtZW50cyxcbiAgICAgICAgfTtcbiAgICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oVFJFQVRNRU5UUywgSlNPTi5zdHJpbmdpZnkodHJlYXRtZW50V2l0aFRpbWVzdGFtcCkpO1xuICAgICAgICByZXR1cm4gdHJlYXRtZW50cztcbiAgICAgIH1cbiAgICB9XG4gICAgbG9nZ2VyLnN1Y2Nlc3MoXCJUcmVhdG1lbnRzIGFyZSBsb2FkZWQgZnJvbSBsb2NhbCBzdG9yYWdlXCIpO1xuICAgIHJldHVybiB0cmVhdG1lbnRzO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGdldFRyZWF0bWVudFdlaWdodHMoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCBmZXRjaFRyZWF0bWVudFdlaWdodHMoKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlci53YXJuKGVyci5tZXNzYWdlKTtcbiAgICAgIHRoaXMudHJlYXRtZW50V2VpZ2h0cyA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0TWF0Y2hlZFRyZWF0bWVudHMoKSB7XG4gICAgY29uc3QgdHJlYXRtZW50V2VpZ2h0cyA9IHRoaXMudHJlYXRtZW50V2VpZ2h0cztcbiAgICBjb25zdCB1c2VyR3JvdXAgPSBhd2FpdCBjb21wdXRlU2VnbWVudCh0cmVhdG1lbnRXZWlnaHRzKTtcbiAgICBjb25zdCB0cmVhdG1lbnRzID0gdGhpcy50cmVhdG1lbnRzO1xuICAgIGlmICh0cmVhdG1lbnRXZWlnaHRzKSB7XG4gICAgICBjb25zdCB1c2VyR3JvdXBXZWlnaHRzID0gKHVzZXJHcm91cCAmJiB0cmVhdG1lbnRXZWlnaHRzW3VzZXJHcm91cF0pID9cbiAgICAgIHRyZWF0bWVudFdlaWdodHNbdXNlckdyb3VwXSA6IHRyZWF0bWVudFdlaWdodHNbXCJkZWZhdWx0XCJdO1xuICAgICAgZm9yIChjb25zdCB0cmVhdG1lbnQgb2YgdHJlYXRtZW50cykge1xuICAgICAgICB0cmVhdG1lbnQud2VpZ2h0ID0gdXNlckdyb3VwV2VpZ2h0c1t0cmVhdG1lbnQ/LmlkXT8ud2VpZ2h0IHx8IDA7XG4gICAgICAgIGlmICghdHJlYXRtZW50LmFjdGlvbnMuc29tZSgoYSkgPT4gYS52YXJpYW50cykpIGNvbnRpbnVlO1xuICAgICAgICBmb3IgKGNvbnN0IGFjdGlvbiBvZiB0cmVhdG1lbnQuYWN0aW9ucykge1xuICAgICAgICAgIGlmICghYWN0aW9uLnZhcmlhbnRzKSBjb250aW51ZTtcbiAgICAgICAgICBmb3IgKGNvbnN0IHZhcmlhbnRLZXkgb2YgT2JqZWN0LmtleXMoYWN0aW9uLnZhcmlhbnRzKSkge1xuICAgICAgICAgICAgaWYgKHVzZXJHcm91cFdlaWdodHNbdHJlYXRtZW50LmlkXT8udmFyaWFudHMgJiYgdXNlckdyb3VwV2VpZ2h0c1t0cmVhdG1lbnQuaWRdPy52YXJpYW50c1t2YXJpYW50S2V5XSkge1xuICAgICAgICAgICAgICBhY3Rpb24udmFyaWFudHNbdmFyaWFudEtleV0ud2VpZ2h0ID0gdXNlckdyb3VwV2VpZ2h0c1t0cmVhdG1lbnQuaWRdLnZhcmlhbnRzW3ZhcmlhbnRLZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxvZ2dlci5sb2coYCR7dHJlYXRtZW50cy5sZW5ndGh9IHRyZWF0bWVudHMgdXNlciBncm91cCBtYXRjaGVkYCk7XG4gICAgaWYgKCF0cmVhdG1lbnRzLmxlbmd0aCkgcmV0dXJuIFtdO1xuICAgIHJldHVybiB0cmVhdG1lbnRzO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRyZWF0bWVudFJlcG9zaXRvcnk7XG4iLCJpbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmltcG9ydCBhcHBseUFjdGlvbnMgZnJvbSBcIi4uL05leHRkYXlBcHBseUFjdGlvbnMvaW5kZXhcIjtcbmltcG9ydCBUcmVhdG1lbnRSZXBvc2l0b3J5IGZyb20gXCIuLi9OZXh0ZGF5VHJlYXRtZW50UmVwb3NpdG9yeS9pbmRleFwiO1xuaW1wb3J0IFJ1bGVFbmdpbmUgZnJvbSBcIi4uL05leHRkYXlSdWxlRW5naW5lXCI7XG5pbXBvcnQge1xuICBjaGVja3BvaW50LFxuICBjaGVja3BvaW50cyxcbiAgYWRkVHJlYXRtZW50LFxufSBmcm9tIFwiLi4vQmVhZ2xlSW5mb0xheWVyXCI7XG5pbXBvcnQge1xuICBNT0JJTEVfTUVESUFfUVVFUlksXG4gIFRSRUFUTUVOVF9SQVRJTyxcbiAgU0VTU0lPTl9TVE9SQUdFX0tFWVMsXG59IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7XG4gIGluaXRpYXRlU2Vzc2lvblN0b3JhZ2VzLFxuICBpbmplY3RTdHlsZVNoZWV0LFxuICByZW1vdmVEb2N1bWVudEhpZGUsXG4gIGRldGVybWluZVBjdCxcbiAgcHJlcGFyZUFjdGlvbnMsXG59IGZyb20gXCIuLi91dGlsc1wiO1xuXG5cbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJCZWFnbGVPbkNvbXBvbmVudFwiKTtcblxuY29uc3QgYmVhZ2xlT24gPSBhc3luYyAoaWRlbnRpZmllciwgbW9uaXRvciwgZGVidWdNb2RlKSA9PiB7XG4gIG1vbml0b3Iuc2VuZExvZ3MoKTtcblxuICBjb25zdCBzZWFyY2hQYXJhbXMgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoO1xuICBsZXQgZGVidWdGaWx0ZXJlZFRyZWF0bWVudHMgPSBudWxsO1xuXG4gIGlmIChkZWJ1Z01vZGUgJiYgc2VhcmNoUGFyYW1zLmluY2x1ZGVzKFwiZmlsdGVyPVwiKSkge1xuICAgIGRlYnVnRmlsdGVyZWRUcmVhdG1lbnRzID0gc2VhcmNoUGFyYW1zLnNsaWNlKFxuICAgICAgICBzZWFyY2hQYXJhbXMuaW5kZXhPZihcIltcIikgKyAxLFxuICAgICAgICBzZWFyY2hQYXJhbXMubGFzdEluZGV4T2YoXCJdXCIpLFxuICAgICkuc3BsaXQoXCIsXCIpLm1hcCgoaXRlbSkgPT4gcGFyc2VJbnQoaXRlbSwgMTApKTtcbiAgfVxuXG4gIGluamVjdFN0eWxlU2hlZXQoKTtcbiAgaW5pdGlhdGVTZXNzaW9uU3RvcmFnZXMoKTtcbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgcmVtb3ZlRG9jdW1lbnRIaWRlKCk7XG4gIH0sIDIwMDApO1xuICBjb25zdCB0cmVhdG1lbnRzUHJvbWlzZSA9IFRyZWF0bWVudFJlcG9zaXRvcnkuZ2V0VHJlYXRtZW50cygpO1xuICBjb25zdCB0cmVhdG1lbnRXZWlnaHRzUHJvbWlzZSA9IFRyZWF0bWVudFJlcG9zaXRvcnkuZ2V0VHJlYXRtZW50V2VpZ2h0cygpO1xuICBjb25zdCBpc01vYmlsZSA9IHdpbmRvdy5tYXRjaE1lZGlhKE1PQklMRV9NRURJQV9RVUVSWSkubWF0Y2hlcztcbiAgY29uc3QgT0JTRVJWRVJfQ09ORklHID0ge3N1YnRyZWU6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgYXR0cmlidXRlczogdHJ1ZX07XG4gIGNvbnN0IHtORF9TS1VfTElTVCwgTkRfU0tVX0lORk8sIE5EX1NLVV9MSVNUX0JBU0tFVCwgTkRfU0tVX0lORk9fQkFTS0VUfSA9IFNFU1NJT05fU1RPUkFHRV9LRVlTO1xuXG4gIGNvbnN0IFt0cmVhdG1lbnRzLCB0cmVhdG1lbnRXZWlnaHRzXSA9IGF3YWl0IFByb21pc2UuYWxsKFt0cmVhdG1lbnRzUHJvbWlzZSwgdHJlYXRtZW50V2VpZ2h0c1Byb21pc2VdKTtcblxuICBsb2dnZXIuc3VjY2VzcyhcIkZvdW5kIHRyZWF0bWVudHM6IFwiLCB0cmVhdG1lbnRzKTtcblxuICBjb25zdCB0cmVhdG1lbnRSZXBvc2l0b3J5ID0gbmV3IFRyZWF0bWVudFJlcG9zaXRvcnkoe1xuICAgIHRyZWF0bWVudHMsXG4gICAgdHJlYXRtZW50V2VpZ2h0cyxcbiAgfSk7XG4gIGNoZWNrcG9pbnQoY2hlY2twb2ludHMuVHJlYXRtZW50UmVwb3NpdG9yeUNyZWF0ZWQpO1xuICBjb25zdCBtYXRjaGVkVHJlYXRtZW50cyA9IGF3YWl0IHRyZWF0bWVudFJlcG9zaXRvcnkuZ2V0TWF0Y2hlZFRyZWF0bWVudHMoKTtcbiAgaWYgKCFtYXRjaGVkVHJlYXRtZW50cy5sZW5ndGgpIHtcbiAgICBsb2dnZXIubG9nKFwiTm8gdHJlYXRtZW50cyBtYXRjaGVkLCByZXR1cm5pbmcgd2l0aG91dCBmdXJ0aGVyIGFjdGlvblwiKTtcbiAgICByZW1vdmVEb2N1bWVudEhpZGUoKTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcmVBcHBseVRyZWF0bWVudHNNYXAgPSB7fTtcbiAgZm9yIChjb25zdCB0cmVhdG1lbnQgb2YgbWF0Y2hlZFRyZWF0bWVudHMpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgZW5nYWdlVHJlYXRtZW50KHRyZWF0bWVudCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2dnZXIuZmFpbGVkKFwiRXJyb3IgZXhlY3V0aW5nIHJ1bGVzXCIsIGVycik7XG4gICAgfVxuICB9XG4gIHJlbW92ZURvY3VtZW50SGlkZSgpO1xuICBjaGVja3BvaW50KGNoZWNrcG9pbnRzLlRyZWF0bWVudHNBcHBsaWVkKTtcbiAgbG9nZ2VyLnN1Y2Nlc3MoXCJBcHBsaWVkIHRyZWF0bWVudHM6IFwiLCB3aW5kb3cuYmVhZ2xlSW5mb0xheWVyLmEpO1xuXG4gIHNldEludGVydmFsKCgpID0+IHtcbiAgICBtb25pdG9yLnVwZGF0ZUxhdGVzdENoYW5nZXMoKTtcbiAgfSwgMTAwMCk7XG5cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMocmVBcHBseVRyZWF0bWVudHNNYXApKSB7XG4gICAgY29uc3QgdHJlYXRtZW50SWRzID0gcmVBcHBseVRyZWF0bWVudHNNYXBba2V5XTtcbiAgICBjb25zdCByZUFwcGx5VHJlYXRtZW50cyA9IG1hdGNoZWRUcmVhdG1lbnRzLmZpbHRlcigodCkgPT4gdHJlYXRtZW50SWRzLmluY2x1ZGVzKHQuaWQpKTtcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgY2FzZSBcImluZmluaXRlX3Njcm9sbFwiOiB7XG4gICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGZvciAoY29uc3QgdHJlYXRtZW50IG9mIHJlQXBwbHlUcmVhdG1lbnRzKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKGBSZXRyeWluZyB0cmVhdG1lbnQgJHt0cmVhdG1lbnQuaWR9IGZyb20gaW5maW5pdGVfc2Nyb2xsYCk7XG4gICAgICAgICAgICBlbmdhZ2VUcmVhdG1lbnQodHJlYXRtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKHdpbmRvdy50b3AuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcbiAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwidGltZW91dFwiOiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGZvciAoY29uc3QgdHJlYXRtZW50IG9mIHJlQXBwbHlUcmVhdG1lbnRzKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKGBSZXRyeWluZyB0cmVhdG1lbnQgJHt0cmVhdG1lbnQuaWR9IGZyb20gdGltZW91dGApO1xuICAgICAgICAgICAgZW5nYWdlVHJlYXRtZW50KHRyZWF0bWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCA1MDApO1xuICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJlbGVtZW50X2NoYW5nZVwiOiB7XG4gICAgICAgIGZvciAoY29uc3QgdHJlYXRtZW50IG9mIHJlQXBwbHlUcmVhdG1lbnRzKSB7XG4gICAgICAgICAgY29uc3QgcmVhcHBseVNlbGVjdG9yTGlzdCA9IEFycmF5LmlzQXJyYXkodHJlYXRtZW50LnJlYXBwbHlfc2VsZWN0b3IpID9cbiAgICAgICAgICAgIHRyZWF0bWVudC5yZWFwcGx5X3NlbGVjdG9yIDogW3RyZWF0bWVudC5yZWFwcGx5X3NlbGVjdG9yXTtcbiAgICAgICAgICBmb3IgKGNvbnN0IHNlbGVjdG9yIG9mIHJlYXBwbHlTZWxlY3Rvckxpc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB3aW5kb3cudG9wLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIubG9nKGBSZXRyeWluZyB0cmVhdG1lbnQgJHt0cmVhdG1lbnQuaWR9IGZyb20gZWxlbWVudF9jaGFuZ2VgKTtcbiAgICAgICAgICAgICAgICBlbmdhZ2VUcmVhdG1lbnQodHJlYXRtZW50KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUoZWxlbWVudCwgT0JTRVJWRVJfQ09ORklHKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwib25fc2Nyb2xsXCI6IHtcbiAgICAgICAgd2luZG93Lm9uc2Nyb2xsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZm9yIChjb25zdCB0cmVhdG1lbnQgb2YgcmVBcHBseVRyZWF0bWVudHMpIHtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coYFJldHJ5aW5nIHRyZWF0bWVudCAke3RyZWF0bWVudC5pZH0gZnJvbSBvbl9zY3JvbGxgKTtcbiAgICAgICAgICAgIGVuZ2FnZVRyZWF0bWVudCh0cmVhdG1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwicXVlcnlfc2VhcmNoX2NoYW5nZVwiOiB7XG4gICAgICAgIGxldCBxdWVyeVN0cmluZyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XG4gICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggIT09IHF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgICAgICBxdWVyeVN0cmluZyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRyZWF0bWVudCBvZiByZUFwcGx5VHJlYXRtZW50cykge1xuICAgICAgICAgICAgICBsb2dnZXIubG9nKGBSZXRyeWluZyB0cmVhdG1lbnQgJHt0cmVhdG1lbnQuaWR9IGZyb20gcXVlcnlfc2VhcmNoX2NoYW5nZWApO1xuICAgICAgICAgICAgICBlbmdhZ2VUcmVhdG1lbnQodHJlYXRtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LCBPQlNFUlZFUl9DT05GSUcpO1xuICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxvZ2dlci5mYWlsZWQoXCJSZWFwcGx5IGV2ZW50IG5vdCBmb3VuZDogXCIsIGtleSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBjaGVja3BvaW50KGNoZWNrcG9pbnRzLlJlYXBwbHlUcmVhdG1lbnRMaXN0ZW5lcnMpO1xuXG4gIGFzeW5jIGZ1bmN0aW9uIGVuZ2FnZVRyZWF0bWVudCh0cmVhdG1lbnQpIHtcbiAgICBjb25zdCB7XG4gICAgICBpZCxcbiAgICAgIGFjdGlvbnMsXG4gICAgICBiYXNlUnVsZVNldCxcbiAgICAgIGRldmljZSxcbiAgICAgIGRlcGVuZGFudF9vbl90cmVhdG1lbnQsXG4gICAgICByZWFwcGx5X2V2ZW50LFxuICAgICAgYnVzaW5lc3NSdWxlU2V0LFxuICAgICAgd2VpZ2h0LFxuICAgICAgZGVsYXksXG4gICAgICBwcm9kdWN0SW5mb1N0b3JhZ2UsXG4gICAgfSA9IHRyZWF0bWVudDtcbiAgICBpZiAoZGVidWdGaWx0ZXJlZFRyZWF0bWVudHMgJiYgIWRlYnVnRmlsdGVyZWRUcmVhdG1lbnRzLmluY2x1ZGVzKGlkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZGV2aWNlID09PSBcIm1vYmlsZVwiICYmICFpc01vYmlsZSkge1xuICAgICAgbG9nZ2VyLmZhaWxlZChcIlRyZWF0bWVudCBkZXZpY2UgJ21vYmlsZScgbWlzbWF0Y2hcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChkZXZpY2UgPT09IFwiZGVza3RvcFwiICYmIGlzTW9iaWxlKSB7XG4gICAgICBsb2dnZXIuZmFpbGVkKFwiVHJlYXRtZW50IGRldmljZSAnZGVza3RvcCcgbWlzbWF0Y2hcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChyZWFwcGx5X2V2ZW50KSB7XG4gICAgICBsZXQgcmVhcHBseV9ldmVudF9hcnJheSA9IHJlYXBwbHlfZXZlbnQ7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVhcHBseV9ldmVudCkpIHJlYXBwbHlfZXZlbnRfYXJyYXkgPSBbcmVhcHBseV9ldmVudF07XG4gICAgICBsb2dnZXIubG9nKGBSZWFwcGx5IGV2ZW50ICcke3JlYXBwbHlfZXZlbnR9JyBmb3VuZCBmb3IgdHJlYXRtZW50OiAke2lkfWApO1xuICAgICAgZm9yIChjb25zdCByZWFwcGx5RXZlbnQgb2YgcmVhcHBseV9ldmVudF9hcnJheSkge1xuICAgICAgICBjb25zdCBwcmV2aW91c1ZhbHVlID0gcmVBcHBseVRyZWF0bWVudHNNYXBbcmVhcHBseUV2ZW50XSA/XG4gICAgICAgICAgcmVBcHBseVRyZWF0bWVudHNNYXBbcmVhcHBseUV2ZW50XSA6IFtdO1xuICAgICAgICBpZiAocHJldmlvdXNWYWx1ZS5pbmNsdWRlcyhpZCkpIHtcbiAgICAgICAgICBsb2dnZXIubG9nKFwiVHJlYXRtZW50IGFscmVhZHkgYWRkZWQgZm9yIHJlYXBwbHkgZXZlbnRcIik7XG4gICAgICAgIH0gZWxzZSByZUFwcGx5VHJlYXRtZW50c01hcFtyZWFwcGx5RXZlbnRdID0gWy4uLnByZXZpb3VzVmFsdWUsIGlkXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgc2t1TGlzdDtcbiAgICBsZXQgcHJvZHVjdEluZm87XG5cbiAgICBpZiAocHJvZHVjdEluZm9TdG9yYWdlICYmIHByb2R1Y3RJbmZvU3RvcmFnZSA9PT0gXCJiYXNrZXRcIikge1xuICAgICAgc2t1TGlzdCA9IEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShORF9TS1VfTElTVF9CQVNLRVQpKTtcbiAgICAgIHByb2R1Y3RJbmZvID0gSlNPTi5wYXJzZShzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKE5EX1NLVV9JTkZPX0JBU0tFVCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBza3VMaXN0ID0gSlNPTi5wYXJzZShzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKE5EX1NLVV9MSVNUKSk7XG4gICAgICBwcm9kdWN0SW5mbyA9IEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShORF9TS1VfSU5GTykpO1xuICAgIH1cblxuICAgIGNvbnN0IGJpbmRpbmdzID0ge3Byb2R1Y3RJbmZvLCBza3VMaXN0fTtcbiAgICBjb25zdCBydWxlRW5naW5lID0gbmV3IFJ1bGVFbmdpbmUoe2Jhc2VSdWxlU2V0LCBidXNpbmVzc1J1bGVTZXQsIGJpbmRpbmdzfSk7XG4gICAgbG9nZ2VyLmxvZyhcIlN0YXJ0aW5nIGJhc2UgcnVsZSBzZXQgY2hlY2sgZm9yIHRyZWF0bWVudDogXCIgKyBpZCk7XG4gICAgaWYgKCFiYXNlUnVsZVNldCB8fCBhd2FpdCBydWxlRW5naW5lLmNoZWNrUnVsZXMoKSkge1xuICAgICAgbGV0IHRyZWF0bWVudFNraXBSYXRpbyA9IHdlaWdodCA9PT0gMTAwID8gMCA6ICgxMDAgLSB3ZWlnaHQgfHwgVFJFQVRNRU5UX1JBVElPKTtcbiAgICAgIGlmIChkZXBlbmRhbnRfb25fdHJlYXRtZW50KSB7XG4gICAgICAgIC8vIElmIGRlcGVuZGFudCBvbiB0cmVhdG1lbnQgaXMgZm91bmQgYW5kIGhhcyB3ZWlnaHQ7IHVzZSBpdHMgc2tpcCByYXRpb1xuICAgICAgICBjb25zdCBkZXBlbmRhbnRPblRyZWF0bWVudFdlaWdodCA9IG1hdGNoZWRUcmVhdG1lbnRzLmZpbmQoKHQpID0+IHQuaWQgPT09IGRlcGVuZGFudF9vbl90cmVhdG1lbnQpPy53ZWlnaHQ7XG4gICAgICAgIHRyZWF0bWVudFNraXBSYXRpbyA9IGRlcGVuZGFudE9uVHJlYXRtZW50V2VpZ2h0ID09PSAxMDAgPyAwIDogKDEwMCAtIGRlcGVuZGFudE9uVHJlYXRtZW50V2VpZ2h0IHx8XG4gICAgICAgICAgVFJFQVRNRU5UX1JBVElPKTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5sb2coXCJUcmVhdG1lbnQgc2tpcCByYXRpbzogXCIgKyB0cmVhdG1lbnRTa2lwUmF0aW8pO1xuICAgICAgLy8gRGV0ZXJtaW5pbmcgaWRlbnRpZmllciBmb3IgY2FsY3VsYXRpbmcgdHJlYXRtZW50IHBlcmNlbnRhZ2UgKHRyZWF0bWVudFBjdClcbiAgICAgIGNvbnN0IGRldGVybWluaW5nSWRlbnRpZmllciA9IGRlcGVuZGFudF9vbl90cmVhdG1lbnQgfHwgaWQ7XG5cbiAgICAgIC8vIHRyZWF0bWVudFBjdCBpcyB0aGUgcGVyY2VudGFnZSB2YWx1ZSBmb3IgdGhlIHRyZWF0bWVudCB1c2VkIHRvIGRldGVybWluZSBpZiBpdCBzaG91bGQgYmUgc2tpcHBlZCBvciBub3RcbiAgICAgIC8vIHRyZWF0bWVudFBjdCBpcyAxMDAgd2hlbiBkZWJ1ZyBtb2RlIGlzIDEsIGVuc3VyaW5nIG5vIHRyZWF0bWVudHMgYXJlIHNraXBwZWRcbiAgICAgIGNvbnN0IHRyZWF0bWVudFBjdCA9IGRlYnVnTW9kZSA9PT0gMSA/IDEwMCA6IGF3YWl0IGRldGVybWluZVBjdChpZGVudGlmaWVyICsgZGV0ZXJtaW5pbmdJZGVudGlmaWVyKTtcbiAgICAgIGxvZ2dlci5sb2coXCJUcmVhdG1lbnRQY3Q6IFwiICsgdHJlYXRtZW50UGN0ICsgYCB3aXRoIGRlYnVnIG1vZGUgJHtkZWJ1Z01vZGUgPyBcIm9uXCIgOiBcIm9mZlwifWApO1xuICAgICAgbGV0IGJ1c2luZXNzUnVsZUlkID0gbnVsbDtcbiAgICAgIGlmIChidXNpbmVzc1J1bGVTZXQpIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIlN0YXJ0aW5nIHN1YiB2YXJpYW50IHJ1bGUgc2V0IGNoZWNrIGZvciB0cmVhdG1lbnQ6IFwiICsgaWQpO1xuICAgICAgICBidXNpbmVzc1J1bGVJZCA9IGF3YWl0IHJ1bGVFbmdpbmUuY2hlY2tCdXNpbmVzc1J1bGVzKCk7XG4gICAgICAgIGlmIChidXNpbmVzc1J1bGVJZCkge1xuICAgICAgICAgIGxvZ2dlci5sb2coXCJBcHBseWluZyBidXNpbmVzcyBydWxlIHRyYW5zZm9ybWF0aW9uIHdpdGggaWQ6IFwiLCBidXNpbmVzc1J1bGVJZCk7XG4gICAgICAgIH0gZWxzZSBsb2dnZXIubG9nKFwiQXBwbHlpbmcgdHJlYXRtZW50IHdpdGggZGVmYXVsdCB2YWx1ZXNcIik7XG4gICAgICB9XG4gICAgICBpZiAodHJlYXRtZW50UGN0IDwgdHJlYXRtZW50U2tpcFJhdGlvKSB7XG4gICAgICAgIGxvZ2dlci5sb2coYFRyZWF0bWVudCAke2lkfSBza2lwcGVkIGR1ZSB0byB0cmVhdG1lbnQgc3BsaXQgcmF0aW9gKTtcbiAgICAgICAgYWRkVHJlYXRtZW50KGlkLCBidXNpbmVzc1J1bGVJZCwgdmFyaWFudCwgXCJza2lwcGVkXCIsIGRlcGVuZGFudF9vbl90cmVhdG1lbnQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBbcHJlcGFyZWQsIHZhcmlhbnRdID0gYXdhaXQgcHJlcGFyZUFjdGlvbnMoaWRlbnRpZmllciwgYWN0aW9ucywgYnVzaW5lc3NSdWxlSWQpO1xuICAgICAgLy8gZGVsYXkgbG9naWMgbmVlZHMgcmVmYWN0b3Jpbmcgd2hlbiBpdCB3aWxsIGJlIHVzZWQgYWdhaW5cbiAgICAgIGlmIChkZWxheSkgYXdhaXQgZGVsYXkoZGVsYXkpO1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXBwbHlBY3Rpb25zKHByZXBhcmVkLCBiaW5kaW5ncyk7XG4gICAgICBpZiAocmVzID09PSBmYWxzZSkge1xuICAgICAgICBhZGRUcmVhdG1lbnQoaWQsIGJ1c2luZXNzUnVsZUlkLCB2YXJpYW50LCBcImZhaWxlZFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYWRkVHJlYXRtZW50KGlkLCBidXNpbmVzc1J1bGVJZCwgdmFyaWFudCwgXCJhcHBsaWVkXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsb2dnZXIuZmFpbGVkKFwiUnVsZSBjaGVjayBmYWlsZWQgZm9yIHRyZWF0bWVudDogXCIsIGlkKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYmVhZ2xlT247XG4iLCJpbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmltcG9ydCBNb25pdG9yIGZyb20gXCIuLi9OZXh0ZGF5TW9uaXRvci9pbmRleFwiO1xuaW1wb3J0IGJlYWdsZU9uIGZyb20gXCIuLi9CZWFnbGVPblwiO1xuaW1wb3J0IHtcbiAgY2hlY2twb2ludCxcbiAgY2hlY2twb2ludHMsXG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyLFxuICBpbml0aWFsaXplQmVhZ2xlSW5mb0xheWVyLFxuICBnZXRDcml0aWNhbEVsZW1lbnRzLFxufSBmcm9tIFwiLi4vQmVhZ2xlSW5mb0xheWVyXCI7XG5pbXBvcnQge1xuICBTUExJVF9SQVRJTyxcbiAgU0VTU0lPTl9TVE9SQUdFX0tFWVMsXG4gIExPQ0FMX1NUT1JBR0VfS0VZUyxcbiAgTUFYX1RJTUVPVVRfUEVSX1NFU1NJT04sXG59IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7XG4gIGdldElkZW50aWZpZXIsXG4gIHJlbW92ZURvY3VtZW50SGlkZSxcbiAgZGV0ZXJtaW5lUGN0LFxuICBnZXREZWJ1Z01vZGUsXG4gIGlzU2VuZEJlYWNvblN1cHBvcnRlZCxcbn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbihhc3luYyBmdW5jdGlvbigpIHtcbiAgY2hlY2twb2ludChjaGVja3BvaW50cy5CZWFnbGVMb2FkZWQpO1xuICBsZXQgbW9uaXRvciA9IG51bGw7XG4gIC8vIGlzT24gY2FuIGJlIHRydWUgKE9OKSwgZmFsc2UgKE9GRiksIG9yIG51bGwgKERFQlVHKVxuICBsZXQgaXNPbiA9IG51bGw7XG4gIGNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoKTtcbiAgY29uc3Qge1RJTUVPVVRfQ09VTlR9ID0gU0VTU0lPTl9TVE9SQUdFX0tFWVM7XG4gIGxldCB0aW1lb3V0Q291bnRlciA9IDA7XG4gIGxvZ2dlci5pbmZvKFwiTmV4dGRheSBpbml0aWFsaXppbmdcIik7XG4gIHRyeSB7XG4gICAgLy8gYXNuYyBzdGFydCBpbmZvTGF5ZXIgcG9wdWxhdGlvblxuICAgIGluaXRpYWxpemVCZWFnbGVJbmZvTGF5ZXIoKTtcblxuICAgIC8vIGNoZWNrIGlmIGRlYnVnIG1vZGUgaXMgb24sIGFsc28gYWRkcyBkYm0gdG8gYmVhZ2xlSW5mb0xheWVyXG4gICAgY29uc3QgZGVidWdNb2RlID0gZ2V0RGVidWdNb2RlKCk7XG4gICAgbW9uaXRvciA9IG5ldyBNb25pdG9yKCk7XG4gICAgY2hlY2twb2ludChjaGVja3BvaW50cy5Jbml0aWFsaXplZCk7XG5cbiAgICBjb25zdCBpZGVudGlmaWVyID0gYXdhaXQgZ2V0SWRlbnRpZmllcigpO1xuICAgIGxvZ2dlci5sb2coXCJGb3VuZCBjb29raWUgaWRlbnRpZmllcjogXCIsIGlkZW50aWZpZXIpO1xuICAgIGNvbnN0IGNvb2tpZVBjdCA9IGF3YWl0IGRldGVybWluZVBjdChpZGVudGlmaWVyKTtcbiAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcIm9uSGFzaFBjdFwiLCBjb29raWVQY3QpO1xuICAgIGlmICghZGVidWdNb2RlKSB7XG4gICAgICAvLyBpZiBjYW5ub3QgcmVhZCBjb29raWUgdGhyb3cgZXJyb3IgYW5kIHN0b3AsIG9ubHkgaW4gbm9uLWRlYnVnIG1vZGVcbiAgICAgIGlmIChjb29raWVQY3QgPT09IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBkZXRlcm1pbmUgY29va2llIHBjdFwiKTtcbiAgICAgIH1cblxuICAgICAgLy8gZG8gbm90IGNvbnRpbnVlIGlmIHNlbmRCZWFjb24gaXMgbm90IHN1cHBvcnRlZFxuICAgICAgaWYgKCFpc1NlbmRCZWFjb25TdXBwb3J0ZWQoKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZW5kQmVhY29uIGlzIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgICB9XG5cbiAgICAgIHRpbWVvdXRDb3VudGVyID0gcGFyc2VJbnQoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShUSU1FT1VUX0NPVU5UKSkgfHwgMDtcbiAgICAgIGlmICh0aW1lb3V0Q291bnRlciA+IE1BWF9USU1FT1VUX1BFUl9TRVNTSU9OKSB7XG4gICAgICAgIGNoZWNrcG9pbnQoY2hlY2twb2ludHMuVGltZW91dFRocmVzaG9sZFJlYWNoZWQpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOZXh0ZGF5IHRpbWVvdXQgdGhyZXNob2xkIHJlYWNoZWRcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2dlci5pbmZvKFwiRGVidWcgbW9kZSBvbjogYWxsIGFwcGxpY2FibGUgdHJlYXRtZW50cyB3aWxsIGJlIGFwcGxpZWRcIik7XG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oTE9DQUxfU1RPUkFHRV9LRVlTLk9VVF9PRl9TQ09QRSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLy8gY29sbGVjdCBhbGwgY3JpdGljYWwgZGF0YSBwaWVjZXMgYmVmb3JlIG1vdmluZyBvbiB0byBjb250cm9sIG9yIHRyZWF0bWVudFxuICAgIGNvbnN0IGNlbHRzID0gYXdhaXQgZ2V0Q3JpdGljYWxFbGVtZW50cygpO1xuXG4gICAgLy8gQ2hlY2sgaWYgdXNlciBpcyBhZG1pbiwgbWFraW5nIHRoZW0gb3V0IG9mIHNjb3BlXG4gICAgLy8gVGhpcyBuZWVkcyB0byB3YWl0IGZvciBpbml0aWFsaXplQmVhZ2xlSW5mb0xheWVyIHRvIHNldCB0aGUgdnZzSXNTaG93cm9vbSB2YWx1ZVxuICAgIGNvbnN0IGlzU2hvd3Jvb20gPSBjZWx0cy52dnNJc1Nob3dyb29tO1xuXG4gICAgaWYgKCF3aW5kb3cudG9wLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJuZXh0RGF5LWhpZGVcIikpIHtcbiAgICAgIGNoZWNrcG9pbnQoY2hlY2twb2ludHMuU2NyaXB0VGltZU91dCk7XG4gICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFRJTUVPVVRfQ09VTlQsIHRpbWVvdXRDb3VudGVyICsgMSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOZXh0ZGF5IHNjcmlwdCB0aW1lZCBvdXRcIik7XG4gICAgfVxuXG4gICAgLy8gVml2ZW5zZSBzcGVjaWZpY1xuICAgIGlmIChpc1Nob3dyb29tICYmIGlzU2hvd3Jvb20gPT09IFwidHJ1ZVwiKSB7XG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oTE9DQUxfU1RPUkFHRV9LRVlTLk9VVF9PRl9TQ09QRSwgdHJ1ZSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVc2VyIGlzIGZyb20gVlZTIHNob3dyb29tL2NhbGxjZW50ZXJcIik7XG4gICAgfSBlbHNlIGlmIChpc1Nob3dyb29tID09PSBudWxsIHx8IGlzU2hvd3Jvb20gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGRldGVybWluZSBpZiB1c2VyIGlzIGZyb20gVlZTIHNob3dyb29tL2NhbGxjZW50ZXJcIik7XG4gICAgfVxuXG4gICAgY29uc3QgaXNPdXRPZlNjb3BlID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKExPQ0FMX1NUT1JBR0VfS0VZUy5PVVRfT0ZfU0NPUEUpO1xuICAgIGlmIChpc091dE9mU2NvcGUgPT09IFwidHJ1ZVwiKSB7XG4gICAgICBsb2dnZXIud2FybihcIlVzZXIgaXMgb3V0IG9mIHNjb3BlXCIpO1xuICAgICAgLy8gc2V0IGlzT24gdG8gdHJ1ZS9mYWxzZSB3aGVuIG5vdCBkZWJ1Z01vZGUgYnV0IG91dCBvZiBzY29wZSBpLmUuIG5kX2RlYnVnPTAgZm9yIHRlc3RhYmlsaXR5XG4gICAgICBpc09uID0gZGVidWdNb2RlID8gdHJ1ZSA6IGNvb2tpZVBjdCA+PSBTUExJVF9SQVRJTztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgZ3JlYXRlciB0aGFuIFNQTElUX1JBVElPLCB0aGVuIGluIE9OIG1vZGVcbiAgICAgIGlzT24gPSBjb29raWVQY3QgPj0gU1BMSVRfUkFUSU87XG4gICAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcImlzT25cIiwgaXNPbik7XG4gICAgICB3aW5kb3cuZGF0YUxheWVyID0gd2luZG93LmRhdGFMYXllciB8fCBbXTtcbiAgICAgIHdpbmRvdy5kYXRhTGF5ZXIucHVzaCh7ZXZlbnQ6IFwiR0xPVlwiLCBHTE9WX09OOiBpc09uLnRvU3RyaW5nKCl9KTtcbiAgICAgIC8vIHdlIG1hZGUgdGhlIG9uLW9mZiBkZWNpc2lvblxuICAgICAgY2hlY2twb2ludChjaGVja3BvaW50cy5Vc2VyT25PZmYpO1xuICAgIH1cblxuICAgIGlmIChpc09uID09PSBmYWxzZSkgdGhyb3cgbmV3IEVycm9yKFwiQ29udHJvbCBncm91cDogbm8gdHJlYXRtZW50cyBhcHBsaWVkXCIpO1xuXG4gICAgbG9nZ2VyLmxvZyhcIkZvdW5kIGNvb2tpZSBwZXJjZW50YWdlOiBcIiwgY29va2llUGN0KTtcbiAgICBsb2dnZXIubG9nKFwiU3BsaXRfcmF0aW86IFwiLCBTUExJVF9SQVRJTyk7XG4gICAgbG9nZ2VyLmxvZyhcImNvb2tpZVBjdCA8IFNQTElUX1JBVElPXCIsIGNvb2tpZVBjdCA8IFNQTElUX1JBVElPKTtcbiAgICBsb2dnZXIuaW5mbyhgQ29udHJvbCBncm91cCByYXRpbzogJHtTUExJVF9SQVRJT30lYCk7XG5cbiAgICAvLyBUT0RPOiBjaGVjayBpZiBiZWFnbGVJbmZvTGF5ZXIgaGFzIGNyaXRpY2FsIGRhdGFcbiAgICAvLyBnZXQgUGFnZVR5cGUsIGlmIHNhbGVzIGdldCBnYVB1cmNoYXNlUmV2ZW51ZSwgZ2FQdXJjaGFzZVBheVR5cGUgZXRjLiBieSB1c2luZyBnZXRGcm9tQmVhZ2xlSW5mb0xheWVyKFwiLi4uKTtcbiAgICAvLyBvbmNlIG1pbmltYWwgaW5mbyBpcyB0aGVyZSwgZG8gbG9nZ2luZyAuLi5cblxuICAgIC8vIFRPRE86IG1vdmUgdG8gaGVyZSAtLT4gbW9uaXRvci5zZW5kTG9ncygpO1xuICAgIGJlYWdsZU9uKGlkZW50aWZpZXIsIG1vbml0b3IsIGRlYnVnTW9kZSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJlbW92ZURvY3VtZW50SGlkZSgpO1xuICAgIGxvZ2dlci53YXJuKFwiTmV4dGRheTogXCIsIGVyci5tZXNzYWdlKTtcbiAgICBtb25pdG9yLnNlbmRMb2dzKGVyci5tZXNzYWdlLCB0cnVlKTtcbiAgfVxufSkoKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicnVudGltZSIsInVuZGVmaW5lZCIsIk9wIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCIkU3ltYm9sIiwiU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsIm9iaiIsImtleSIsInZhbHVlIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJlcnIiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJzZWxmIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsImNyZWF0ZSIsImNvbnRleHQiLCJDb250ZXh0IiwiX2ludm9rZSIsInN0YXRlIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIm1ldGhvZCIsImFyZyIsIkdlblN0YXRlRXhlY3V0aW5nIiwiRXJyb3IiLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwidHlwZSIsImRvbmUiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsImZuIiwiY2FsbCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsInRoaXMiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJ2YWx1ZXMiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsImZvckVhY2giLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVzdWx0IiwiX19hd2FpdCIsInRoZW4iLCJ1bndyYXBwZWQiLCJlcnJvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiVHlwZUVycm9yIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInB1c2giLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImlzTmFOIiwibGVuZ3RoIiwiaSIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsIml0ZXIiLCJrZXlzIiwib2JqZWN0IiwicmV2ZXJzZSIsInBvcCIsInNraXBUZW1wUmVzZXQiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsIm8iLCJnZXQiLCJwcm9wIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwiX25leHQiLCJfdGhyb3ciLCJfYXN5bmNUb0dlbmVyYXRvciIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsIl90eXBlb2YiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJMT0dfQVBJX1VSTCIsIk1PQklMRV9NRURJQV9RVUVSWSIsIlNQTElUX1JBVElPIiwiSURMRV9USU1FT1VUIiwiU0VTU0lPTl9TVE9SQUdFX0tFWVMiLCJMT0NBTF9TVE9SQUdFX0tFWVMiLCJMb2dnZXIiLCJvcmlnaW4iLCJERUJVRyIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJjb25zb2xlIiwibG9nIiwibWVzc2FnZUNvbmZpZyIsImFyZ3VtZW50Iiwid2FybiIsIl9kZWZpbmVQcm9wZXJ0eSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwibWluTGVuIiwidG9TdHJpbmciLCJmcm9tIiwidGVzdCIsIl9zbGljZWRUb0FycmF5IiwiaXNBcnJheSIsIl9pIiwiX3MiLCJfZSIsIl9hcnIiLCJfbiIsIl9kIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYmVhZ2xlSW5mb0xheWVyIiwiY2hlY2twb2ludHMiLCJlIiwiZiIsImFjdGl2ZVNLVUxpc3QiLCJjdXJyZW50UGFnZVR5cGUiLCJCZWFnbGVMb2FkZWQiLCJJbml0aWFsaXplZCIsIlVzZXJPbk9mZiIsIlNjcmlwdFRpbWVPdXQiLCJUcmVhdG1lbnRSZXBvc2l0b3J5Q3JlYXRlZCIsIlRyZWF0bWVudHNBcHBsaWVkIiwiUmVhcHBseVRyZWF0bWVudExpc3RlbmVycyIsIlRpbWVvdXRUaHJlc2hvbGRSZWFjaGVkIiwiT0JTRVJWRVJfQ09ORklHIiwic3VidHJlZSIsImNoaWxkTGlzdCIsImF0dHJpYnV0ZXMiLCJsb2dnZXIiLCJjaGVja3BvaW50IiwiZmluZCIsImlkIiwidGltZSIsIkRhdGUiLCJub3ciLCJhZGRUb0JlYWdsZUluZm9MYXllciIsImluZm9MYXllciIsInRvcCIsImluZGV4T2YiLCJzcGxpdCIsImxhc3RLZXkiLCJ0cmltIiwiZ2V0RnJvbUJlYWdsZUluZm9MYXllciIsImJsb2NraW5nIiwicG9sbEludGVydmFsIiwidGltZW91dCIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwic2V0VGltZW91dCIsImFkZFRyZWF0bWVudCIsImJ1c2luZXNzUnVsZUlkIiwidmFyaWFudCIsInN0YXR1cyIsImRlcGVuZGFudF9vbl90cmVhdG1lbnQiLCJwYXJzZVNlYXJjaFBhdGhzRGVsYXkiLCJwYXJzZVNlYXJjaFBhdGhzUmV0cnkiLCJpbml0aWFsaXplQmVhZ2xlSW5mb0xheWVyIiwicHJlcGFyZUNvcmVEYXRhIiwicGFyc2VyQ2FsbGVyIiwicHJvZHVjdEluZm9Mb29rdXAiLCJjcml0aWNhbEVsZW1lbnRzIiwiZ2V0Q3JpdGljYWxFbGVtZW50cyIsImNlbHRzIiwiY3JpdGljYWxFbGVtZW50c1Byb21pc2VzIiwibWFwIiwiZWxlbWVudCIsImFsbCIsImluZGV4IiwiSlNPTiIsInN0cmluZ2lmeSIsInNlYXJjaFBhdGhzIiwiUGFnZVR5cGVEZXBlbmQiLCJzZWxlY3RvciIsInRyaWdnZXIiLCJvcGVyYW5kIiwib2JzZXJ2ZXIiLCJjaGlsZHJlbiIsInNlYXJjaE9iaiIsInNlYXJjaEVsZW1lbnQiLCJqc29uR2V0IiwicHJvY2Vzc1RyaWdnZXIiLCJpc0ZvdW5kIiwiZmlsdGVyUGFyYW1zIiwiZmlsdGVyTmFtZSIsImZpbHRlclZhbHVlIiwiZmlsdGVyTWF0Y2giLCJxdWVyeVNlbGVjdG9yIiwiTXV0YXRpb25PYnNlcnZlciIsInRvQmVVcGRhdGVkIiwiY2hpbGQiLCJjaGlsZEVsZW1lbnRzIiwiZmlsdGVyIiwidHJpZ2dlclJlc3RhcnQiLCJvYnNlcnZlIiwiaW5uZXJUZXh0IiwiYXR0cmliVmFsdWVTZXQiLCJTZXQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYXR0cmliVmFsdWUiLCJnZXRBdHRyaWJ1dGUiLCJhZGQiLCJzaXplIiwic2V0VmFsdWUiLCJzdW1QcmljZSIsImNoaWxkVGV4dCIsInJlcGxhY2UiLCJwYXJzZUludCIsImFycmF5SW5uZXJUZXh0IiwiQ09VUE9OX0FQUExJQ0FCTEVfQkFTS0VUX1BSSUNFIiwiTkRfU0tVX0xJU1QiLCJzZXRJdGVtIiwiY291cG9uQXBwbGljYWJsZVRvdGFsUHJpY2UiLCJmYWlsZWQiLCJza3VMaXN0Iiwic2Vzc2lvblN0b3JhZ2UiLCJza3UiLCJwYXJzZVNlYXJjaFBhdGhzIiwiZG9tU3RhdHVzIiwiZG9jdW1lbnQiLCJyZWFkeVN0YXRlIiwid2ludG9wIiwiZGF0YUxheWVyIiwid2luZG9jIiwiZm91bmROYW1lcyIsInByZXZGb3VuZE5hbWVzIiwibm90Rm91bmROYW1lcyIsImhhcyIsImRhdGFMYXllckl0ZW0iLCJzb3JnQXJyYXlJbm5lciIsImdldFNPUkdBcnJheSIsInNvcmdJdGVtIiwiam9pbiIsInBhdGgiLCJjb25jYXRTZXBhcmF0b3IiLCJwYXRoQXJyYXkiLCJjdXJyZW50Iiwic3ViUGF0aCIsInN1YkFycmF5Iiwic3ViS2V5Iiwic3ViVmFsdWUiLCJ3aW5kb3dQdHIiLCJuYXZQdHIiLCJuYXZpZ2F0b3IiLCJleHRyYWN0Q29va2llSWRlbnRpZmllciIsImNvb2tpZSIsInZpZXdJZCIsImNyeXB0byIsInJhbmRvbVVVSUQiLCJzZXNzaW9uSWQiLCJwbGF0Zm9ybSIsInVzZXJBZ2VudERhdGEiLCJ1c2VyQWdlbnQiLCJkZXZpY2VQaXhlbFJhdGlvIiwid2luZG93U2NyZWVuIiwiYXZhaWxIZWlnaHQiLCJzY3JlZW4iLCJhdmFpbExlZnQiLCJhdmFpbFRvcCIsImF2YWlsV2lkdGgiLCJjb2xvckRlcHRoIiwiaGVpZ2h0IiwicGl4ZWxEZXB0aCIsIndpZHRoIiwid2luZG93VlBvcnQiLCJ2aXN1YWxWaWV3cG9ydCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJwYWdlTGVmdCIsInBhZ2VUb3AiLCJzY2FsZSIsIk1hdGgiLCJyb3VuZCIsImFicyIsIm9yaWVudGF0aW9uIiwidGVtcCIsImhpc3RvcnkiLCJuYXZBZ2VudCIsImJyYW5kcyIsImJyYW5kIiwidmVyc2lvbiIsIm1vYmlsZSIsImhhcmR3YXJlQ29uY3VycmVuY3kiLCJsYW5ndWFnZSIsImJyb3dzZXJMYW5ndWFnZSIsInN5c3RlbUxhbmd1YWdlIiwidXNlckxhbmd1YWdlIiwibWF4VG91Y2hQb2ludHMiLCJ2ZW5kb3IiLCJwZXJmTWV0cmljcyIsInBlcmZvcm1hbmNlIiwiZ2V0RW50cmllc0J5VHlwZSIsInBlcmZOYXZpZ2F0aW9uTWV0cmljcyIsImNvbm5lY3QiLCJjb25uZWN0RW5kIiwiY29ubmVjdFN0YXJ0IiwicmVxdWVzdCIsInJlc3BvbnNlRW5kIiwicmVxdWVzdFN0YXJ0IiwiZG9tIiwiZG9tQ29tcGxldGUiLCJkb21JbnRlcmFjdGl2ZSIsImxvYWQiLCJsb2FkRXZlbnRFbmQiLCJsb2FkRXZlbnRTdGFydCIsImR1cmF0aW9uIiwiY29ubmVjdGlvbiIsImRvd25saW5rIiwiY3VycmVudFVSTCIsIlVSTCIsImxvY2F0aW9uIiwiaHJlZiIsImhvc3RuYW1lIiwiZG9Ob3RUcmFjayIsIm1zRG9Ob3RUcmFjayIsInJlZmVycmVyIiwicGF0aG5hbWUiLCJzb3JnQXJyYXkiLCJzVGFnIiwiY250bnQiLCJ0ZXh0Q29udGVudCIsImpzb25jb250ZW50IiwicGFyc2UiLCJoZWFkZXJzIiwiSGVhZGVycyIsImFwcGVuZCIsImZldGNoIiwiYm9keSIsIm1vZGUiLCJwcm9kdWN0SW5mbyIsIm9rIiwianNvbiIsInN1Y2Nlc3MiLCJjIiwiZ2V0UmFuZG9tVmFsdWVzIiwiVWludDhBcnJheSIsInJlbW92ZURvY3VtZW50SGlkZSIsImRvY3VtZW50RWxlbWVudCIsImNsYXNzTGlzdCIsInJlbW92ZSIsImZldGNoVHJlYXRtZW50cyIsInRyZWF0bWVudHMiLCJqc29uVHJlYXRtZW50IiwiZmV0Y2hUcmVhdG1lbnRXZWlnaHRzIiwidHJlYXRtZW50V2VpZ2h0cyIsImpzb25UcmVhdG1lbnRXZWlnaHRzIiwiY29va2llU3RyaW5nIiwiY29va2llTmFtZSIsImlkZW50aWZpZXIiLCJ2IiwicmVkdWNlIiwiYWNjIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZGV0ZXJtaW5lUGN0Iiwic3Vic3RyaW5nRW5kUG9zaXRpb24iLCJzdWJzdHJpbmdTdGFydFBvc2l0aW9uIiwiY3JlYXRlSGFzaFN0cmluZyIsImhhc2hTdHJpbmciLCJoYXNoTnVtYmVyIiwic3Vic3RyaW5nIiwic3RyaW5nVG9IYXNoIiwiZW5jb2RlZCIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwic3VidGxlIiwiZGlnZXN0IiwiaGFzaEJ1ZmZlciIsImhhc2hBcnJheSIsImIiLCJwYWRTdGFydCIsInN0eWxlQXBwbGljYXRvciIsImVsZW1lbnRzIiwic3R5bGVDaGFuZ2VzTWFwIiwiZW50cmllcyIsInN0eWxlIiwiaW5qZWN0U3R5bGVTaGVldCIsInN0eWxlU2hlZXQiLCJjcmVhdGVFbGVtZW50IiwicmVsIiwiaGVhZCIsImFwcGVuZENoaWxkIiwicHJlcGFyZUFjdGlvbnMiLCJhY3Rpb25zVG9QcmVwYXJlIiwiYWN0aW9ucyIsImFjdGlvbiIsImJ1c2luZXNzUnVsZVRyYW5zZm9ybWF0aW9ucyIsInZhcmlhbnRzIiwiYnVzaW5lc3NUcmFuc2Zvcm1hdGlvbiIsInZhcmlhbnRLZXkiLCJ3ZWlnaHQiLCJjb25kaXRpb25DaGVja2VyIiwicnVuVGltZVZhbHVlIiwiY29uZGl0aW9uIiwiaW5jbHVkZXMiLCJtaW4iLCJtYXgiLCJSZWdFeHAiLCJnZXREZWJ1Z01vZGUiLCJORF9ERUJVR19NT0RFIiwiT1VUX09GX1NDT1BFIiwicXVlcnlTdHJpbmciLCJzZWFyY2giLCJyZW1vdmVJdGVtIiwiZ2V0SWRlbnRpZmllciIsImV4dHJhY3RJZGVudGlmaWVySW50ZXJ2YWwiLCJkZWxheSIsIm1zIiwicmVzIiwiaXNTZW5kQmVhY29uU3VwcG9ydGVkIiwic2VuZEJlYWNvbiIsImlkbGVUaW1lciIsInRpbWVPdXQiLCJjYWxsQmFjayIsInJlc2V0VGltZXIiLCJjbGVhclRpbWVvdXQiLCJpZGxlVGltZW91dCIsIm9udG91Y2hzdGFydCIsIk1vbml0b3IiLCJhcHBsaWVkVHJlYXRtZW50c0hhc2giLCJhcHBsaWVkVHJlYXRtZW50c0NoYW5nZXMiLCJlbGlnaWJsZU5vdEFwcGxpZWRUcmVhdG1lbnRzSGFzaCIsImVsaWdpYmxlTm90QXBwbGllZFRyZWF0bWVudHNDaGFuZ2VzIiwiaXNMb2dnZWQiLCJpbml0aWFsaXplRXhpdEV2ZW50TGlzdGVuZXJzIiwibWVzc2FnZSIsImlzRXJyb3IiLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlUXVldWVMb2dzIiwicGFja2FnZUxvZ0RhdGEiLCJyZXF1ZXN0QmxvYiIsInF1ZXVlTG9ncyIsImFwcGxpZWRUcmVhdG1lbnRzQ3VycmVudEhhc2giLCJlbGlnaWJsZU5vdEFwcGxpZWRUcmVhdG1lbnRzQ3VycmVudEhhc2giLCJ0IiwibSIsIkJsb2IiLCJ2SWQiLCJpc0V4aXRFdmVudENhcHR1cmVkIiwibG9nRGF0YSIsInBhY2thZ2VVcGRhdGVMb2dEYXRhIiwiY2FwdHVyZSIsInF1ZXVlZCIsInF1ZXVlSW50ZXJ2YWwiLCJyZXBsYWNlQWxsIiwic3RyIiwiY2hlY2tEYXRhTGF5ZXJSdWxlIiwicnVsZSIsIm9wZXJhdG9yIiwicnVudGltZVZhbHVlIiwiZGF0YUxheWVyRmluZGVyIiwicmVwbGFjZUZuRXhlY3V0b3IiLCJyZXBsYWNlRm4iLCJzaW5nbGUiLCJyZXBsYWNlRnVuY3Rpb24iLCJiaW5kIiwidmFsIiwiY3VycmVudFJlcGxhY2VGbiIsInJGbiIsInJlcGxhY2VWYWwiLCJzdG9yYWdlIiwicmVwbGFjZU9iamVjdEV4dHJhY3RvciIsImF0dHJpYnV0ZSIsImlubmVyX2NvbmRpdGlvbiIsImVsaWdpYmxlRWxlbWVudHMiLCJlbGVtZW50U2t1IiwiY2F0YWxvZyIsIiQiLCJiaW5kaW5ncyIsIlBPUFVQX0RJU1BMQVlfRkxBRyIsInRyYW5zZm9ybWVyIiwiYXBwbHlFdmVudCIsImNvbnRlbnRTZWxlY3RvciIsInNlbGVjdG9yRmFsbGJhY2siLCJtZENvbmRpdGlvbiIsIm1vdmVfc2VsZWN0b3JfMSIsIm1vdmVfc2VsZWN0b3JfMiIsInBUeXBlIiwibWMiLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsInJlcGxhY2VyIiwiU3RyaW5nIiwiYmVmb3JlIiwiYWZ0ZXIiLCJnZXRQcm9kdWN0SW5mbyIsImNyZWF0ZVBvcHVwIiwiZXZlbnQiLCJkaXNwbGF5UG9wdXAiLCJyIiwicHVzaFN0YXRlIiwib25jZSIsInRleHQiLCJodG1sIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsIm9yaWdpbmFsVGl0bGUiLCJ0aXRsZSIsImhhbmRsZURvY3VtZW50VGl0bGVUYWJDaGFuZ2UiLCJjc3MiLCJwcm9wZXJ0eSIsInByb3BlcnR5VmFsdWUiLCJuMSIsIm4yIiwic3dhcE5vZGVzIiwic291cmNlIiwiZGVzdGluYXRpb24iLCJwcmVwZW5kIiwidG9Mb3dlckNhc2UiLCJzZW50ZW5jZSIsIndvcmQiLCJ0b1VwcGVyQ2FzZSIsInJlcGxhY2VXaXRoVmFsIiwiaHRtbFN0ciIsInRyYW5zYWN0aW9uSW4yV2Vla3MiLCJhZGRUb0NhcnRJbjJXZWVrcyIsInByb2R1Y3RWaWV3Q291bnQiLCJ0aXRsZXMiLCJwYXJzZWRUaXRsZXMiLCJwYXJzZWRUaXRsZSIsImhpZGRlbiIsImhhbmRsZVBvcHVwQ2xpY2siLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicVBvcHVwIiwiZ2V0RWxlbWVudEJ5SWQiLCJwb3B1cFdyYXBwZXIiLCJwb3B1cENsb3NlQnV0dG9uIiwib25jbGljayIsImNvbnRlbnRzIiwic2hpZnQiLCJzcmMiLCJ0ZW1wbGF0ZSIsImlubmVySFRNTCIsInBvcHVwIiwiY29udGVudCIsImZpcnN0Q2hpbGQiLCJpMSIsImkyIiwicDEiLCJwYXJlbnROb2RlIiwicDIiLCJpc0VxdWFsTm9kZSIsImluc2VydEJlZm9yZSIsImFjdGlvbkFwcGxpY2F0b3IiLCJqUXVlcnkiLCJjaGVja0FjdGlvbkNvbmRpdGlvbiIsImFwcGx5QWN0aW9ucyIsImNoZWNrQ291bnRlclJ1bGUiLCJwYWdlVmlld0hhbmRsZXIiLCJjYUJhc2tldFByaWNlSGFuZGxlciIsImdldENvdW50ZXIiLCJjb3VudGVyIiwicGFnZVZpZXdzIiwiY2FCYXNrZXRQcmljZSIsImNoZWNrRWxlbWVudFJ1bGUiLCJzZWxlY3RvckFsbCIsIm1haW5TZWxlY3RvciIsInRlbXBWYWwiLCJyZXR1cm5WYWwiLCJlbGVtIiwiZWxlbWVudFN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJzdHlsZUtleSIsInN0eWxlVmFsdWUiLCJjaGVja0Z1bmN0aW9uUnVsZSIsIm9wdHMiLCJydWxlRnVuY3Rpb24iLCJjaGVja1Nlc3Npb25SdWxlIiwiZHVyYXRpb25IYW5kbGVyIiwiaGlzdG9yeUhhbmRsZXIiLCJnZXRTZXNzaW9uVGltZXN0YW1wIiwiY3VycmVudEhpc3RvcnkiLCJjaGVja1VybFJ1bGUiLCJyZXF1ZXN0VVJMIiwiY2hlY2tFbnZSdWxlIiwiaXNNb2JpbGUiLCJjaGVja1JhbmRvbU51bWJlclJ1bGUiLCJzYWx0IiwicmFuZG9tUGN0IiwiY2hlY2tQcm9kdWN0SW5mb1J1bGUiLCJnZXRUcmFuc2FjdGlvbkNvdW50IiwiZ2V0QWRkVG9DYXJ0Q291bnQiLCJnZXRQcmV2aWV3Q291bnQiLCJSdWxlRW5naW5lIiwiYmFzZVJ1bGVTZXQiLCJidXNpbmVzc1J1bGVTZXQiLCJjYWxsYmFjayIsImNoZWNrUnVsZSIsImNoYWluIiwiY2hhaW5fY29uZGl0aW9uIiwicnVsZVNhdGlzZmllZCIsImNvbXB1dGVTZWdtZW50Iiwic2VnbWVudCIsInJ1bGVTZXQiLCJzZWdtZW50UnVsZUVuZ2luZSIsImNoZWNrUnVsZXMiLCJUcmVhdG1lbnRSZXBvc2l0b3J5IiwidXNlckdyb3VwIiwidXNlckdyb3VwV2VpZ2h0cyIsInRyZWF0bWVudCIsInNvbWUiLCJUUkVBVE1FTlRTIiwidHJlYXRtZW50c09iaiIsInRpbWVzdGFtcCIsInRyZWF0bWVudFdpdGhUaW1lc3RhbXAiLCJiZWFnbGVPbiIsIm1vbml0b3IiLCJkZWJ1Z01vZGUiLCJlbmdhZ2VUcmVhdG1lbnQiLCJkZXZpY2UiLCJyZWFwcGx5X2V2ZW50IiwicHJvZHVjdEluZm9TdG9yYWdlIiwiZGVidWdGaWx0ZXJlZFRyZWF0bWVudHMiLCJyZWFwcGx5X2V2ZW50X2FycmF5IiwicmVhcHBseUV2ZW50IiwicHJldmlvdXNWYWx1ZSIsInJlQXBwbHlUcmVhdG1lbnRzTWFwIiwiTkRfU0tVX0xJU1RfQkFTS0VUIiwiTkRfU0tVX0lORk9fQkFTS0VUIiwiTkRfU0tVX0lORk8iLCJydWxlRW5naW5lIiwidHJlYXRtZW50U2tpcFJhdGlvIiwiZGVwZW5kYW50T25UcmVhdG1lbnRXZWlnaHQiLCJtYXRjaGVkVHJlYXRtZW50cyIsImRldGVybWluaW5nSWRlbnRpZmllciIsInRyZWF0bWVudFBjdCIsImNoZWNrQnVzaW5lc3NSdWxlcyIsInByZXBhcmVkIiwic2VuZExvZ3MiLCJzZWFyY2hQYXJhbXMiLCJsYXN0SW5kZXhPZiIsIml0ZW0iLCJQQUdFX1ZJRVdTIiwiU0VTU0lPTl9JRCIsIlNFU1NJT05fVElNRVNUQU1QIiwiU0VTU0lPTl9ISVNUT1JZIiwicG9wdXBEaXNwbGF5RmxhZyIsInNlc3Npb25UaW1lc3RhbXAiLCJzZXNzaW9uSGlzdG9yeSIsInRyZWF0bWVudHNQcm9taXNlIiwidHJlYXRtZW50V2VpZ2h0c1Byb21pc2UiLCJ0cmVhdG1lbnRSZXBvc2l0b3J5IiwiZ2V0TWF0Y2hlZFRyZWF0bWVudHMiLCJ1cGRhdGVMYXRlc3RDaGFuZ2VzIiwidHJlYXRtZW50SWRzIiwicmVBcHBseVRyZWF0bWVudHMiLCJSZXNpemVPYnNlcnZlciIsInJlYXBwbHlfc2VsZWN0b3IiLCJvbnNjcm9sbCIsImlzT24iLCJUSU1FT1VUX0NPVU5UIiwidGltZW91dENvdW50ZXIiLCJjb29raWVQY3QiLCJpc1Nob3dyb29tIiwidnZzSXNTaG93cm9vbSIsImNvbnRhaW5zIiwiR0xPVl9PTiJdLCJzb3VyY2VSb290IjoiIn0=
