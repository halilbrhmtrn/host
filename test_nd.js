!function(){var e={757:function(e,t,n){e.exports=n(666)},666:function(e){var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof h?t:h,a=Object.create(o.prototype),i=new T(r||[]);return a._invoke=function(e,t,n){var r=d;return function(o,a){if(r===p)throw new Error("Generator is already running");if(r===v){if("throw"===o)throw a;return N()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var s=L(i,n);if(s){if(s===g)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=v,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var c=l(e,t,n);if("normal"===c.type){if(r=n.done?v:f,c.arg===g)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=v,n.method="throw",n.arg=c.arg)}}}(e,n,i),a}function l(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d="suspendedStart",f="suspendedYield",p="executing",v="completed",g={};function h(){}function m(){}function y(){}var w={};c(w,a,(function(){return this}));var b=Object.getPrototypeOf,k=b&&b(b(C([])));k&&k!==n&&r.call(k,a)&&(w=k);var S=y.prototype=h.prototype=Object.create(w);function I(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function n(o,a,i,s){var c=l(e[o],e,a);if("throw"!==c.type){var u=c.arg,d=u.value;return d&&"object"==typeof d&&r.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,i,s)}),(function(e){n("throw",e,i,s)})):t.resolve(d).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,s)}))}s(c.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function L(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,L(e,n),"throw"===n.method))return g;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var o=l(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,g):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function _(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function C(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:N}}function N(){return{value:t,done:!0}}return m.prototype=y,c(S,"constructor",y),c(y,"constructor",m),m.displayName=c(y,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,c(e,s,"GeneratorFunction")),e.prototype=Object.create(S),e},e.awrap=function(e){return{__await:e}},I(x.prototype),c(x.prototype,i,(function(){return this})),e.AsyncIterator=x,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new x(u(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},I(S),c(S,s,"Generator"),c(S,a,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=C,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(_),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return s.type="throw",s.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],s=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),_(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;_(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:C(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),g}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){"use strict";function e(e,t,n,r,o,a,i){try{var s=e[a](i),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,o)}function t(t){return function(){var n=this,r=arguments;return new Promise((function(o,a){var i=t.apply(n,r);function s(t){e(i,o,a,s,c,"next",t)}function c(t){e(i,o,a,s,c,"throw",t)}s(void 0)}))}}var r=n(757),o=n.n(r);function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t,n){return t&&s(e.prototype,t),n&&s(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var u=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";if(!e)return"";var r=e.indexOf(t);if(r<0)return e;for(;e.indexOf(t)>=0;){var o=e.indexOf(t);e=(o>0?e.substring(0,o):"")+n+e.substring(o+t.length)}return e},l=window.location.href.includes("staging.vivense")?"https://ndvivense.glov.ai/weights_staging.json":"https://ndvivense.glov.ai/weights.json",d=window.location.href.includes("staging.vivense")?"https://ndvivense.glov.ai/nd-styles_staging.css":"https://ndvivense.glov.ai/nd-styles.css?id=".concat(u((new Date).toISOString().substring(0,13).replace("T",""),"-","")),f="https://europe-west3-nextday-34eb3.cloudfunctions.net/api/logResponse",p="(max-width: 440px)",v={SESSION_ID:"__nextday_session_id",SESSION_TIMESTAMP:"ND_SessionTimestamp",SESSION_HISTORY:"BN_SessionHistory",TREATMENTS:"ND_Treatments",PAGE_VIEWS:"ND_PageViews",POPUP_DISPLAY_FLAG:"ND_PopupDisplayFlag",ND_SKU_LIST_LISTING:"ND_SkuListListing",ND_SKU_LIST_PRODUCT:"ND_SkuListProduct",ND_SKU_LIST_BASKET:"ND_SkuListBasket",ND_SKU_INFO_LISTING:"ND_ProductInfoListing",ND_SKU_INFO_PRODUCT:"ND_ProductInfoProduct",ND_SKU_INFO_BASKET:"Nd_ProductInfoBasket",TIMEOUT_COUNT:"ND_TimeoutCount"},g="ND_CABasketPrice",h="ND_Debug",m="ND_OutOfScope",y="ND_UserId",w=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Nextday Client SDK";i(this,e),this.origin=t,this.DEBUG=window.localStorage.getItem(h)}return c(e,[{key:"info",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).info.apply(e,["[".concat(t,"]")].concat(r))}},{key:"log",value:function(){var e=this.DEBUG,t=this.origin;if(e){for(var n,r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];(n=console).log.apply(n,["[".concat(t,"]")].concat(o))}}},{key:"failed",value:function(){var e,t=this.DEBUG,n=this.origin;if(t){for(var r="%c%s   ",o=arguments.length,i=new Array(o),s=0;s<o;s++)i[s]=arguments[s];i.forEach((function(e){switch(a(e)){case"bigint":case"number":case"boolean":r+="%d   ";break;case"string":r+="%s   ";break;default:r+="%o   "}})),(e=console).log.apply(e,[r,"color: red","[".concat(n,"]")].concat(i))}}},{key:"success",value:function(){var e,t=this.DEBUG,n=this.origin;if(t){for(var r="%c%s   ",o=arguments.length,i=new Array(o),s=0;s<o;s++)i[s]=arguments[s];i.forEach((function(e){switch(a(e)){case"bigint":case"number":case"boolean":r+="%d   ";break;case"string":r+="%s   ";break;default:r+="%o   "}})),(e=console).log.apply(e,[r,"color: green","[".concat(n,"]")].concat(i))}}},{key:"warn",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).warn.apply(e,["[".concat(t,"]")].concat(r))}},{key:"error",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).error.apply(e,["[".concat(t,"]")].concat(r))}}]),e}(),b=w;function k(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function S(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function I(e,t){if(e){if("string"==typeof e)return S(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?S(e,t):void 0}}function x(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,s=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){s=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(s)throw o}}return a}}(e,t)||I(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function L(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var O=new b("Nextday DataLayer Checker"),_=function(e){O.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value,o=T(t);return oe(o,n,r)},T=function(e){O.log("Searching beagleInfoLayer for key ",e);var t=window.beagleInfoLayer[e];if(e.includes("."))try{var n=e.split(".");t=window.beagleInfoLayer[n[0]];for(var r=1;r<n.length;r++)t=t[n[r]]}catch(n){O.failed("Couldn't extract key ".concat(e," from beagleInfoLayer")),t=null}if(t)return O.success("Found key ".concat(e," with value ").concat(t)),t;O.failed("Key ".concat(e," not found in beagleInfoLayer")),O.log("Searching dataLayer for key ",e);var o,a=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return L(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?L(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}(window.dataLayer);try{for(a.s();!(o=a.n()).done;){var i=o.value;if(Object.keys(i).includes(e))return O.success("Found key ".concat(e," with value ").concat(i[e])),i[e]}}catch(e){a.e(e)}finally{a.f()}return O.failed("Key ".concat(e," not found in dataLayer")),null},C=new b("Nextday Url Checker"),N=function(e){C.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("path"===t){var o=window.location.href,a=o.includes("ajax/mobile-search/loadOtherPages.php")?decodeURIComponent(new URL(o).search.replace("?originalPath=","")):new URL(o).pathname;return C.log("Checking path ".concat(a," matches rule path ").concat(r)),oe(a,n,r)}};function A(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function P(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?A(Object(n),!0).forEach((function(t){k(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):A(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function E(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return D(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?D(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function D(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}window.beagleInfoLayer=window.beagleInfoLayer||{checkpoints:[],a:{},e:{},f:{}};var R={PageType:/(?:PageType'[ ]*:[ ]*')(.*)(?:')/,content_name:/(?:content_name[ ]*:[ ]*")(.*)(?:")/,content_name_alt:/(?:content_name'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAPageType:/(?:PageType'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAOrderId:/(?:purchase[\s\S]*actionField[\s\S]*'id'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAOrderRev:/(?:purchase[\s\S]*actionField[\s\S]*'revenue'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAOrderType:/(?:purchase[\s\S]*actionField[\s\S]*'dimension15'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAIsAdmin:/(?:dataLayer[\s\S]*'isAdmin'[ ]*:[ ]*")(.*)(?:")/},j={BeagleLoaded:1,Initialized:2,UserOnOff:3,ScriptTimeOut:7,TreatmentRepositoryCreated:4,TreatmentsApplied:5,ReapplyTreatmentListeners:6,TimeoutThresholdReached:8},U=new b("BeagleInfoLayer"),M=function(){var e=t(o().mark((function e(){var t,n,r,a,i,s,c,u,l;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:U.log("Initializing beagleInfoLayer"),t=document.scripts,n=t.length;try{B()}catch(e){console.warn("Could not prepare log data: ",e.message)}if(t&&n){e.next=7;break}return U.warn("Could not parse body"),e.abrupt("return");case 7:r=0,a=t.length-1;case 9:if(!(a>-1)){e.next=35;break}i=t[a].textContent,s=0,c=Object.keys(R);case 12:if(!(s<c.length)){e.next=32;break}if(u=c[s],!(l=(l=R[u].exec(i))?l[1]:null)){e.next=29;break}u.indexOf("_alt")>0&&(u=u.substring(0,u.lastIndexOf("_alt"))),e.prev=18,V(u,decodeURIComponent(JSON.parse('"'+l+'"'))),e.next=26;break;case 22:return e.prev=22,e.t0=e.catch(18),U.warn("Could not decode foundVal ".concat(l)),e.abrupt("continue",29);case 26:if((r+=1)!==Object.keys(R).length){e.next=29;break}return e.abrupt("return");case 29:s++,e.next=12;break;case 32:a--,e.next=9;break;case 35:return e.next=37,se(10);case 37:if(n===t.length){e.next=41;break}return U.log("New scripts detected, re-initializing beagleInfoLayer"),e.next=41,M();case 41:case"end":return e.stop()}}),e,null,[[18,22]])})));return function(){return e.apply(this,arguments)}}(),q=function(e){try{U.log("Checkpoint: '".concat(e,"' Reached!")),window.beagleInfoLayer.checkpoints.push({checkpoint:Object.keys(j).find((function(t){return j[t]===e})),id:e,time:Date.now()})}catch(e){U.warn(e)}},V=function(e,t){null!=e&&null!=t&&(window.beagleInfoLayer[e]=t)},F=function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,a={businessRuleId:t,variant:n};switch(r){case"applied":window.beagleInfoLayer.a[e]=a;break;case"skipped":a.dependant_on_treatment=o,window.beagleInfoLayer.e[e]=a;break;case"failed":window.beagleInfoLayer.f[e]=a}},B=function(){var e,t,n,r,o,a,i,s,c,u,l,d,f,p,g,h,m,y,w,b,k,S,I,x,L,O,_,T,C,N,A,D,R,j,M,q,F,B,G,J,K,H,W,$,z=crypto.randomUUID(),Y=sessionStorage.getItem(v.SESSION_ID),X=new URL(window.location.href),Z=(null===(e=window.navigator)||void 0===e||null===(t=e.userAgentData)||void 0===t?void 0:t.platform)||(null===(n=window.navigator)||void 0===n?void 0:n.platform)||(null===(r=window.navigator)||void 0===r?void 0:r.userAgent),ee={},te=E(window.dataLayer);try{for(te.s();!($=te.n()).done;){var ne=$.value;ee=P(P({},ee),ne)}}catch(e){te.e(e)}finally{te.f()}var re=JSON.parse(Q(document.cookie,"VL_CM_0")),oe={};if(re&&re.Items){var ae,ie=E(re.Items);try{for(ie.s();!(ae=ie.n()).done;){var se=ae.value;oe[se.K]=decodeURIComponent(se.V)}}catch(e){ie.e(e)}finally{ie.f()}}V("cookieVLPVinVisit",oe.VL_PVCountInVisit),V("cookieVLVisitDuration",oe.VL_TotalDuration),V("cookieVLTotalPV",oe.VL_TotalPV),V("cookieVLTotalVisit",oe.VL_TotalVisit),V("gaPageType",ee.PageType),V("gaProductName",ee.content_name),V("gaViewType",ee.content_type),V("gaProductCategory",ee.content_category),V("gaProductID",ee.content_ids),V("vvsProductCategory",ee.vivense_category),V("gaListingName",null===(o=ee.ecommerce)||void 0===o||null===(a=o.detail)||void 0===a||null===(i=a.actionField)||void 0===i?void 0:i.list),V("vvsIsShowroom",void 0===window.isAdmin?ee.isAdmin:window.isAdmin),V("vvsProductGroup",ee.productGroup),V("vvsUserId",ee.userId),V("vvsCategory",ee.vivense_category),V("gaCategoryProductCont",ee.category_product_count),V("gaCartProducts",(null===(s=ee.ecommerce)||void 0===s||null===(c=s.checkout)||void 0===c?void 0:c.products)||(null===(u=ee.ecommerce)||void 0===u||null===(l=u.purchase)||void 0===l?void 0:l.products)),V("vvsPDPProduct",null===(d=ee.vivenseProducts)||void 0===d?void 0:d.pop()),V("gaPurchaseId",null===(f=ee.ecommerce)||void 0===f||null===(p=f.purchase)||void 0===p||null===(g=p.actionField)||void 0===g?void 0:g.id),V("gaPurchaseRevenue",null===(h=ee.ecommerce)||void 0===h||null===(m=h.purchase)||void 0===m||null===(y=m.actionField)||void 0===y?void 0:y.revenue),V("gaPurchasePayType",null===(w=ee.ecommerce)||void 0===w||null===(b=w.purchase)||void 0===b||null===(k=b.actionField)||void 0===k?void 0:k.dimension15),V("windowParams",window.location.search),V("windowPRatio",window.devicePixelRatio),V("windowInner",window.innerWidth);var ce={};ce.availHeight=null===(S=window.screen)||void 0===S?void 0:S.availHeight,ce.availHeight=null===(I=window.screen)||void 0===I?void 0:I.availHeight,ce.availLeft=null===(x=window.screen)||void 0===x?void 0:x.availLeft,ce.availTop=null===(L=window.screen)||void 0===L?void 0:L.availTop,ce.availWidth=null===(O=window.screen)||void 0===O?void 0:O.availWidth,ce.colorDepth=null===(_=window.screen)||void 0===_?void 0:_.colorDepth,ce.height=null===(T=window.screen)||void 0===T?void 0:T.height,ce.pixelDepth=null===(C=window.screen)||void 0===C?void 0:C.pixelDepth,ce.width=null===(N=window.screen)||void 0===N?void 0:N.width,V("windowScreen",ce);var ue={};if(ue.height=null===(A=window.visualViewport)||void 0===A?void 0:A.height,ue.offsetLeft=null===(D=window.visualViewport)||void 0===D?void 0:D.offsetLeft,ue.offsetTop=null===(R=window.visualViewport)||void 0===R?void 0:R.offsetTop,ue.onresize=null===(j=window.visualViewport)||void 0===j?void 0:j.onresize,ue.onscroll=null===(M=window.visualViewport)||void 0===M?void 0:M.onscroll,ue.pageLeft=null===(q=window.visualViewport)||void 0===q?void 0:q.pageLeft,ue.pageTop=null===(F=window.visualViewport)||void 0===F?void 0:F.pageTop,ue.scale=null===(B=window.visualViewport)||void 0===B?void 0:B.scale,ue.width=null===(G=window.visualViewport)||void 0===G?void 0:G.width,V("windowVPort",ue),screen.width){var de=parseInt(screen.width),fe=screen.height?parseInt(screen.height):0;if(0!==de&&0!==fe){if(/iPad|iPhone|iPod/.test(Z)&&window.devicePixelRatio)de=Math.round(de*window.devicePixelRatio),fe=Math.round(fe*window.devicePixelRatio);else if(90===Math.abs(window.orientation)){var pe=de;de=fe,fe=pe}V("window",de+"x"+fe)}}if(V("navHistSize",null===(J=window.history)||void 0===J?void 0:J.length),V("navAgent",navigator.userAgent),!window.beagleInfoLayer.navAgent&&navigator.userAgentData){var ve,ge,he,me,ye,we=null===(ve=navigator)||void 0===ve||null===(ge=ve.userAgentData)||void 0===ge||null===(he=ge.brands)||void 0===he?void 0:he.map((function(e){return e.brand+":"+e.version})).join();we+=null!==(me=navigator)&&void 0!==me&&null!==(ye=me.userAgentData)&&void 0!==ye&&ye.mobile?"mobi":" ",V("navAgent",we+=Z)}V("navHWCores",navigator.hardwareConcurrency),V("navLanguage",navigator.language||navigator.browserLanguage||navigator.systemLanguage||navigator.userLanguage),V("navTouch",navigator.maxTouchPoints),V("navPlatform",Z),V("navVendor",navigator.vendor),V("cookieGaId",Q(document.cookie,"_ga")),V("cookieLastBreadCrumb",Q(document.cookie,"lastbreadcrumb")),V("cookieLastCategory",Q(document.cookie,"lastcategory")),V("cookieFirstEntry",decodeURIComponent(Q(document.cookie,"vivensefirst")));var be={};if(window.performance&&window.performance.getEntriesByType("navigation")[0]){var ke=window.performance.getEntriesByType("navigation")[0];be.pld=Math.round(ke.domContentLoadedEventEnd-ke.connectStart),be.net=Math.round(ke.connectEnd-ke.fetchStart),be.srv=Math.round(ke.responseStart-ke.requestStart),be.tfr=Math.round(ke.responseEnd-ke.responseStart),be.dmi=Math.round(ke.domInteractive-ke.responseEnd),be.dcp=Math.round(ke.domComplete-ke.domInteractive),be.onl=Math.round(ke.loadEventEnd-ke.loadEventStart)}V("perfMetrics",be),V("internetSpeed",null===(K=window.navigator)||void 0===K||null===(H=K.connection)||void 0===H?void 0:H.downlink);var Se,Ie,xe=E(document.querySelectorAll('[type="application/ld+json"]'));try{for(xe.s();!(Se=xe.n()).done;){var Le=Se.value;try{var Oe=Le.textContent,_e=JSON.parse(Oe),Te="@";switch(_e["@type"]){case"Organization":case"WebSite":break;case"CollectionPage":var Ce,Ne=E(_e.breadcrumb.itemListElement);try{for(Ne.s();!(Ce=Ne.n()).done;)Te+=" | "+Ce.value.item.name}catch(e){Ne.e(e)}finally{Ne.f()}V("sorgBreadcrumb",Te);var Ae={};Ae.name=_e.mainEntity.name,Ae.countItems=_e.mainEntity.numberOfItems,V("sorgListing",Ae);break;case"BreadcrumbList":var Pe,Ee=E(_e.itemListElement);try{for(Ee.s();!(Pe=Ee.n()).done;)Te+=" | "+Pe.value.name}catch(e){Ee.e(e)}finally{Ee.f()}V("sorgBreadcrumb",Te);break;case"Product":var De={};De.sku=_e.sku,De.name=_e.name,_e.offers&&(De.price=_e.offers.price,De.priceCurrency=_e.offers.priceCurrency,De.priceValidUntil=_e.offers.priceValidUntil),V("sorgProduct",De);break;default:console.log(_e)}}catch(e){U.warn(e.message)}}}catch(e){xe.e(e)}finally{xe.f()}V("v","0.0.27"),V("n","nextday-session_id-".concat(Y)),V("sr",50),V("donttrack",navigator.doNotTrack||window.doNotTrack||navigator.msDoNotTrack),V("u",X.href),V("d",X.hostname),V("r",document.referrer),V("vId",z),V("isOn",null);try{V("vvsCntFavProds",window.favoriteProducts?JSON.parse(window.favoriteProducts).length:null)}catch(e){V("vvsCntFavProds",null),U.warn(e.message)}V("vvsHasSetEmail",window.userEmail.length>0),V("vvsLoginType",window.userId>0?"member":"guest"),Ie=document.querySelector('[class*="basket_summary_total"], [class*="total_row"]'),V("vvsPurcPriceElt",Ie?Ie.innerText:null),Ie=document.querySelector('[class*="order_follow_numb"], [class*="cart-title-bottom"]'),V("vvsPurchaseOrderID",Ie?Ie.innerText:null),Ie=document.querySelector('[class*="payment_type_title"], [class*="cart-title-info"]'),V("vvsPurcTypeElt",Ie?Ie.innerText:null),Ie=document.querySelector('[id*="breadcrumb-ol"], [class*="long-breadcrumb"]'),V("vvsViewCrumb",Ie?Ie.innerText:null),Ie=document.querySelector('[class*="order-final-number"]'),V("vvsCartTotal",Ie?Ie.innerText:null),Ie=document.querySelector('[class*="basket_total_price"]'),V("vvsViewBasketTotal",Ie?Ie.innerText:null),Ie=document.querySelector('[id*="cart_quantity"], [class*="basket_length"]'),V("vvsViewBasketCount",Ie?Ie.innerText:null),Ie=document.querySelector('[class*="welcome_username"]'),V("vvsViewLoggedin",!!Ie&&Ie.innerText.length>0),Ie=document.querySelectorAll('[class*="vivense-showrooms"] > *'),V("vvsPDPShowroomCount",Ie?Ie.length:null),Ie=document.querySelector('[class*="delivery-date"]'),V("vvsPDPDeliveryDate",Ie?Ie.innerText:null),V("vvsPDPDeliveryDateFormatted",le(null===(W=Ie)||void 0===W?void 0:W.innerText)),Ie=document.querySelector('[class*="product-title"], [class*="header-bottom"]'),V("vvsPDPTitle",Ie?Ie.innerText:null),Ie=document.querySelector('[class*="count-of-product"]'),V("vvsPLPItemCount",Ie?Ie.innerText:null),Ie=document.querySelector('[class*="subcategories-title"]'),V("vvsPLPName",Ie?Ie.innerText:null)};function G(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return J(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?J(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function J(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var K=new b("Nextday Utils"),H={ocak:0,"şubat":1,mart:2,nisan:3,"mayıs":4,haziran:5,temmuz:6,"ağustos":7,"eylül":8,ekim:9,"kasım":10,"aralık":11};"randomUUID"in crypto||(crypto.randomUUID=function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(e){return(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)}))});var W=function(){document.documentElement.classList.remove("nextDay-hide")},z=function(){var e=t(o().mark((function e(){var t;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return K.log("Fetching treatments"),e.next=3,fetch("https://host-b96.pages.dev/treatments.json");case 3:return t=e.sent,e.next=6,t.json();case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),Y=function(){var e=t(o().mark((function e(){var t;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return K.log("Fetching treatment weights"),e.next=3,fetch(l);case 3:return t=e.sent,e.next=6,t.json();case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),Q=function(e,t){if(!e)return null;var n=e.split(";").map((function(e){return e.split("=")})).reduce((function(e,t){return t[0]&&t[1]&&(e[decodeURIComponent(t[0].trim())]=decodeURIComponent(t[1].trim())),e}),{})[t];return n?("_ga"===t&&(n=n.split(".")[2]),n):null},X=function(){var e=t(o().mark((function e(t){var n,r,a,i;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=8+(n=9),t){e.next=5;break}return e.abrupt("return",-1);case 5:return e.next=7,Z(t);case 7:return a=e.sent,i=parseInt(a.substring(n,r),16),e.abrupt("return",i%100);case 10:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Z=function(){var e=t(o().mark((function e(t){var n,r,a;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=(new TextEncoder).encode(t),e.next=3,crypto.subtle.digest("SHA-1",n);case 3:return r=e.sent,a=Array.from(new Uint8Array(r)),e.abrupt("return",a.map((function(e){return e.toString(16).padStart(2,"0")})).join(""));case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),ee=function(e){var t=document.documentElement.scrollTop,n=setInterval((function(){var r=document.documentElement.scrollTop;t-400>r?(clearInterval(n),e()):t=r}),500)},te=function(e,t){K.log("Applying style changes",t,"to elements",e);for(var n=0;n<e.length;n++)for(var r=e[n],o=0,a=Object.entries(t);o<a.length;o++){var i=x(a[o],2),s=i[0],c=i[1];r.style[s]=c}},ne=function(){var e=t(o().mark((function e(){var t;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(t=document.createElement("link")).rel="stylesheet",t.type="text/css",t.href=d,document.head.appendChild(t);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),re=function(){var e=t(o().mark((function e(t,n,r){var a,i,s,c,u,l,d,f,p,v,g,h,m,y,w,b,k,S,I,x,L;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:a=JSON.parse(JSON.stringify(n)),i=null,s=G(a),e.prev=3,s.s();case 5:if((c=s.n()).done){e.next=55;break}if(u=c.value,l=u.businessRuleTransformations,d=u.variants,l||d){e.next=10;break}return e.abrupt("continue",53);case 10:if(r&&l){f=G(l);try{for(f.s();!(p=f.n()).done;)if((v=p.value).id===r)for(g in v)"id"!==g&&(u[g]=v[g])}catch(e){f.e(e)}finally{f.f()}}if(!d){e.next=53;break}h=0,m=Object.keys(d);case 13:if(!(h<m.length)){e.next=53;break}return y=m[h],e.next=17,X(t+y);case 17:if(!(e.sent<u.variants[y].weight)){e.next=50;break}if(i=y,!r||!d[y].businessRuleTransformations){e.next=48;break}w=G(d[y].businessRuleTransformations),e.prev=22,w.s();case 24:if((b=w.n()).done){e.next=38;break}if((k=b.value).id!=r){e.next=36;break}S=0,I=Object.keys(k);case 28:if(!(S<I.length)){e.next=36;break}if("id"!==(x=I[S])){e.next=32;break}return e.abrupt("continue",33);case 32:u[x]=k[x];case 33:S++,e.next=28;break;case 36:e.next=24;break;case 38:e.next=43;break;case 40:e.prev=40,e.t0=e.catch(22),w.e(e.t0);case 43:return e.prev=43,w.f(),e.finish(43);case 46:e.next=49;break;case 48:for(L in d[y])"weight"!==L&&"businessRuleTransformations"!==L&&(u[L]=d[y][L]);case 49:return e.abrupt("break",53);case 50:h++,e.next=13;break;case 53:e.next=5;break;case 55:e.next=60;break;case 57:e.prev=57,e.t1=e.catch(3),s.e(e.t1);case 60:return e.prev=60,s.f(),e.finish(60);case 63:return e.abrupt("return",[a,i]);case 64:case"end":return e.stop()}}),e,null,[[3,57,60,63],[22,40,43,46]])})));return function(t,n,r){return e.apply(this,arguments)}}(),oe=function(e,t,n){if("notExist"===t)return e?(K.failed("conditionChecker: -not satisfied- target does exist"),!1):(K.success("conditionChecker: -satisfied- target does not exist"),!0);if(null==e||null==t)return K.failed("conditionChecker: runTimeValue or condition is not defined"),!1;switch(t){case"exist":return e?(K.success("conditionChecker: -satisfied- target does exist"),!0):(K.failed("conditionChecker: -not satisfied- target does not exist"),!1);case"contains":return e.includes(n)?(K.success("conditionChecker: -satisfied- target contains value"),!0):(K.failed("conditionChecker: -not satisfied- target does not contain value"),!1);case"notContains":return e.includes(n)?(K.failed("conditionChecker: -not satisfied- target contains value"),!1):(K.success("conditionChecker: -satisfied- target does not contain value"),!0);case"equal":return e===n?(K.success("conditionChecker: -satisfied- target equals value"),!0):(K.failed("conditionChecker: -not satisfied- target does not equal value"),!1);case"notEqual":return e!==n?(K.success("conditionChecker: -satisfied- target does not equal value"),!0):(K.failed("conditionChecker: -not satisfied- target equals value"),!1);case"greaterThan":return e>n?(K.success("conditionChecker: -satisfied- target is greater than value"),!0):(K.failed("conditionChecker: -not satisfied- target is not greater than value"),!1);case"lessThan":return e<n?(K.success("conditionChecker: -satisfied- target is less than value"),!0):(K.failed("conditionChecker: -not satisfied- target is not less than value"),!1);case"greaterEquals":return e>=n?(K.success("conditionChecker: -satisfied- target is greater or equal than value"),!0):(K.failed("conditionChecker: -not satisfied- target is not greater or equal than value"),!1);case"lessEquals":return e<=n?(K.success("conditionChecker: -satisfied- target is less or equal than value"),!0):(K.failed("conditionChecker: -not satisfied- target is not less or equal than value"),!1);case"between":var r=x(n.split(","),2),o=r[0],a=r[1];return o=parseInt(o),a=parseInt(a),e>=o&&e<=a?(K.success("conditionChecker: -satisfied- target is between min and max"),!0):(K.failed("conditionChecker: -not satisfied- target is not between min and max"),!1);default:return K.failed("conditionChecker: condition is not defined ",t),!1}},ae=function(){var e=h,t=m,n=window.location.search;if(n.includes("nd_debug=1"))return window.localStorage.setItem(e,1),window.localStorage.setItem(t,!0),V("dbm","on"),1;if(n.includes("nd_debug=2"))return window.localStorage.setItem(e,2),window.localStorage.setItem(t,!0),V("dbm","on"),2;if(n.includes("nd_debug=0"))return window.localStorage.removeItem(e),window.localStorage.setItem(t,!0),V("dbm","off"),0;var r=parseInt(window.localStorage.getItem(e));return V("dbm",r?"on":"off"),r||0},ie=function(){var e=t(o().mark((function e(){var t,n=arguments;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.length>0&&void 0!==n[0]?n[0]:"_ga",e.abrupt("return",new Promise((function(e,n){var r=window.localStorage.getItem(y);if(r&&e(r),r=Q(document.cookie,t))window.localStorage.setItem(y,r),e(r);else{var o=setInterval((function(){(r=Q(document.cookie,t))&&(clearInterval(o),window.localStorage.setItem(y,r),e(r))}),10);setTimeout((function(){clearInterval(o),n(new Error("Could not extract cookie identifier"))}),1e3)}})));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),se=function(e){return new Promise((function(t){return setTimeout(t,e)}))},ce=function(){var e=v.ND_SKU_LIST_BASKET,t=v.ND_SKU_LIST_LISTING,n=v.ND_SKU_LIST_PRODUCT,r=[],o={operator:"PageType",condition:"equal",value:"Homepage"};if(_(o))return null;if(o.value="Listingpage",_(o))return Array.from(document.querySelectorAll(".product-card")).forEach((function(e){r.push(e.getAttribute("data-product-sku"))})),r.length?(sessionStorage.setItem(t,JSON.stringify(r)),r):(K.failed("Product SKUs not found on Listingpage"),null);if(o.value="Productpage",_(o)){var a,i,s,c=document.querySelector(".product-sku");return c?(r.push(c.getAttribute("data-sku")||(null===(a=c.textContent)||void 0===a||null===(i=a.trim())||void 0===i||null===(s=i.replace(/\)/g,""))||void 0===s?void 0:s.replace(/\(/g,""))),sessionStorage.setItem(n,JSON.stringify(r)),r):(K.failed("Product SKU not found on Productpage"),null)}return o.operator="path",o.value="/siparis-listesi.html",N(o)?(Array.from(document.querySelectorAll(".cart-inside")).forEach((function(e){r.push(e.getAttribute("data-sku"))})),r.length?(sessionStorage.setItem(e,JSON.stringify(r)),r):(K.failed("Product SKUs not found on basket page"),null)):(K.failed("Unidentified page type"),null)},ue=function(){return navigator.sendBeacon&&"function"==typeof navigator.sendBeacon},le=function(e){if(!e||"string"!=typeof e)return e;var t={startMonthIndex:void 0,endMonthIndex:void 0,startDay:void 0,endDay:void 0},n=e.match("([\\d]+)-([\\d]+)\\s?([\\wıüğşöçİÖÇĞÜ]+)");if(n&&4===n.length)t.startDay=parseInt(n[1]),t.endDay=parseInt(n[2]),t.startMonthIndex=H[n[3].toLowerCase()],t.endMonthIndex=t.startMonthIndex;else{if(!(n=e.match("([\\d]+)\\s+([\\wıüğşöçİÖÇĞÜ]+)-([\\d]+)\\s+([\\wıüğşöçİÖÇĞÜ]+)"))||5!==n.length)return e;t.startDay=parseInt(n[1]),t.startMonthIndex=H[n[2].toLowerCase()],t.endDay=parseInt(n[3]),t.endMonthIndex=H[n[4].toLowerCase()]}try{var r=new Date;if(!t.startMonthIndex||!t.endMonthIndex)return e;var o=t.startMonthIndex>=r.getMonth()?r.getFullYear():r.getFullYear()+1,a=t.endMonthIndex>=r.getMonth()?r.getFullYear():r.getFullYear()+1,i=new Date(o,t.startMonthIndex,t.startDay),s=new Date(a,t.endMonthIndex,t.endDay),c=Math.ceil(Math.abs(i-r)/864e5),u=Math.ceil(Math.abs(s-r)/864e5),l=c<7?0:Math.ceil(c/7),d=u<7?0:Math.ceil(u/7);return 0===l&&0===d?"".concat(c," - ").concat(u," Gün"):0===l&&d>=1?"".concat(c," Gün - ").concat(d," Hafta"):l===d?"".concat(l," Hafta"):"".concat(l," - ").concat(d," Hafta")}catch(t){return e}};function de(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function fe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?de(Object(n),!0).forEach((function(t){k(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):de(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var pe=function(){function e(){i(this,e),this.logger=new b("Nextday Monitor"),this.logger.log("Initializing monitor"),this.appliedTreatmentsHash=null,this.appliedTreatmentsChanges=!1,this.eligibleNotAppliedTreatmentsHash=null,this.eligibleNotAppliedTreatmentsChanges=!1,this.headers={type:"text/plain"},this.isLogged=!1,this.initializeExitEventListeners()}var n,r,a;return c(e,[{key:"sendLogs",value:(a=t(o().mark((function e(){var t,n,r,a=this,i=arguments;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=i.length>0&&void 0!==i[0]?i[0]:null,n=i.length>1&&void 0!==i[1]&&i[1],(r=this.logger).log("Sending logs"),"complete"!==document.readyState?(r.log("Document ready state is not complete"),window.addEventListener("load",(function(){r.log("In onload event"),a.handleQueueLogs(a.packageLogData(t),n)}),!0)):this.handleQueueLogs(this.packageLogData(t),n);case 5:case"end":return e.stop()}}),e,this)}))),function(){return a.apply(this,arguments)})},{key:"handleQueueLogs",value:(r=t(o().mark((function e(t){var n,r=arguments;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r.length>1&&void 0!==r[1]&&r[1]||!this.isLogged){e.next=3;break}return e.abrupt("return");case 3:if(n=this.logger,t){e.next=7;break}return n.failed("Could not create request blob"),e.abrupt("return");case 7:return n.log("Request blob to send: ",t),this.queueLogs(t),this.isLogged=!0,e.next=12,Z(JSON.stringify(window.beagleInfoLayer.a));case 12:return this.appliedTreatmentsHash=e.sent,e.next=15,Z(JSON.stringify(window.beagleInfoLayer.e));case 15:this.eligibleNotAppliedTreatmentsHash=e.sent;case 16:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"updateLatestChanges",value:(n=t(o().mark((function e(){var t,n;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Z(JSON.stringify(window.beagleInfoLayer.a));case 2:return t=e.sent,e.next=5,Z(JSON.stringify(window.beagleInfoLayer.e));case 5:n=e.sent,t!==this.appliedTreatmentsHash&&(this.appliedTreatmentsChanges=!0,this.appliedTreatmentsHash=t),n!==this.eligibleNotAppliedTreatmentsHash&&(this.eligibleNotAppliedTreatmentsChanges=!0,this.eligibleNotAppliedTreatmentsHash=n);case 8:case"end":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:"packageLogData",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=this.headers,n=fe({},window.beagleInfoLayer),r=e||(Object.keys(n.a||{}).length?"Treatments applied":"No treatments applied");return n.t=Date.now(),n.m=r,new Blob([JSON.stringify(n)],t)}},{key:"packageUpdateLogData",value:function(){var e=this.headers,t=this.appliedTreatmentsChanges,n=this.eligibleNotAppliedTreatmentsChanges;if(!t&&!n)return!1;var r={t:Date.now(),a:t?window.beagleInfoLayer.a:{},e:n?window.beagleInfoLayer.e:{},vId:window.beagleInfoLayer.vId};return new Blob([JSON.stringify(r)],e)}},{key:"initializeExitEventListeners",value:function(){var e=this,t=this.logger,n=!1;t.log("Initializing exit event listener"),window.addEventListener("beforeunload",(function(){if(e.isLogged){if(!n){n=!0,t.log("In beforeunload event");var r=e.packageUpdateLogData();r?e.queueLogs(r):t.log("No changes to log")}}else e.handleQueueLogs(e.packageLogData())}),{capture:!0}),window.addEventListener("pagehide",(function(){if(e.isLogged){if(!n){n=!0,t.log("In pagehide event");var r=e.packageUpdateLogData();r?e.queueLogs(r):t.log("No changes to log")}}else e.handleQueueLogs(e.packageLogData())}),{capture:!0})}},{key:"queueLogs",value:function(e){var t=this.logger;if(ue()){var n=navigator.sendBeacon(f,e),r=setInterval((function(){n?(clearInterval(r),t.log("Logs queued successfully")):n=navigator.sendBeacon(f,e)}),10);setTimeout((function(){clearInterval(r),n||t.log("Logs not queued")}),1e3)}else fetch(f,e)}}]),e}(),ve=pe,ge=new b("Nextday Api"),he=function(){var e=t(o().mark((function e(){var t,n,r,a,i,s,c;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(ge.log("Starting product info lookup"),t=ce()){e.next=5;break}return ge.failed("No sku found"),e.abrupt("return",null);case 5:return(n=new Headers).append("Content-Type","application/json"),e.prev=7,e.next=10,fetch("https://catalog-api.adoraai.com",{method:"POST",body:JSON.stringify(t),headers:n,mode:"cors"});case 10:r=e.sent,e.next=17;break;case 13:return e.prev=13,e.t0=e.catch(7),ge.warn("Fetch to catalog api failed"),e.abrupt("return",null);case 17:if(r.ok){e.next=20;break}return ge.failed("Product info lookup failed"),e.abrupt("return",null);case 20:return e.next=22,r.json();case 22:if(r=e.sent){e.next=26;break}return ge.failed("Product info extraction from response failed"),e.abrupt("return",null);case 26:return ge.success("Product info lookup successful"),a=v.ND_SKU_INFO_LISTING,i=v.ND_SKU_INFO_BASKET,s=v.ND_SKU_INFO_PRODUCT,c={operator:"PageType",condition:"equal",value:"Listingpage"},checkDataLayerRule(c)&&sessionStorage.setItem(a,JSON.stringify(r)),c.value="Productpage",checkDataLayerRule(c)&&(sessionStorage.setItem(s),JSON.stringify(r)),c.operator="path",c.value="/siparis-listesi.html",checkDataLayerRule(c)&&sessionStorage.setItem(i,JSON.stringify(r)),e.abrupt("return",r);case 36:case"end":return e.stop()}}),e,null,[[7,13]])})));return function(){return e.apply(this,arguments)}}();function me(e){return function(e){if(Array.isArray(e))return S(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||I(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ye(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return we(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?we(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function we(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function be(){return be=t(o().mark((function e(n,r){var a,i,s,c,l,d,f,g,h;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=new b("Nextday Apply Actions"),i=v.POPUP_DISPLAY_FLAG,s=function(e){a.log("Applying action: ",JSON.stringify(e));var t=e.operator,n=e.type,o=e.applyEvent,s=e.contentSelector,l=e.selector,h=e.selectorFallback,m=e.mdCondition,y=e.move_selector_1,w=e.move_selector_2,b=e.replaceFn;if("noop"!==t){var k=e.value,S=$(l);if(m&&!window.matchMedia(m).matches)return a.failed("Media condition mismatch: ",m),!1;if(y&&!w||w&&!y)return a.failed("Both move selectors are required"),!1;if(y&&w){if(!$(y).length)return a.failed("Move selector 1 not found: ",y),!1;if(!$(w).length)return a.failed("Move selector 2 not found: ",w),!1}else{if(!l)return a.failed("Selector not specified"),!1;if(!S.length){if(!$(h).length&&"remove"===t)return;if("no-selector"!==l&&(a.failed("Selector not found: ",l),a.log("Trying fallback selector: ",h),h&&(S=$(h)),!S.length))return a.failed("Fallback selector not found"),!1}}var I=function(e,t){if(e&&t.includes("{{REPLACE}}")){a.log("Executing replace function: ",e);var n={dataLayerFinder:T,productInfo:r},o=Function(e).bind(n);t=u(t,"{{REPLACE}}",o())}return t};if(Array.isArray(k)?k.forEach((function(e,t){var n=b?b[t]||b:"";k[t]=I(n,e)})):k=I(b,k),"remove"===t)S&&(a.log("Removing: ",l),S.remove()),a.log("Cannot found element with selector: ",l);else if("insert"===t)switch(n){case"before":a.log("Inserting before: ",k),String(k).includes("nd-add-to-win")&&$(".nd-add-to-win").remove(),S.before(k);break;case"after":a.log("Inserting after: ",k),S.after(k);break;case"popup":if(0!==parseInt(sessionStorage.getItem(i))){a.log("Popup already displayed in session");break}if(a.log("Creating Popup: ",k),f(k,s),o){var x,L=window.matchMedia(p).matches,O=ye(o);try{for(O.s();!(x=O.n()).done;)switch(x.value){case"exitIntent":a.log("Adding exit intent listener"),L?ee(d):document.documentElement.addEventListener("mouseleave",d,{once:!0});break;case"copyIntent":a.log("Adding copy intent listener"),document.documentElement.addEventListener("copy",d,{once:!0})}}catch(e){O.e(e)}finally{O.f()}}else setTimeout((function(){d()}),timeout)}else if("edit"===t)switch(n){case"text":a.log("Editing text: ",k),S.text(k);break;case"html":a.log("Editing html: ",k),S.html(k);break;case"styleApplicator":a.log("Applying style: ",k);var _=JSON.parse(k);a.log("Style Changes Map: ",_),te(S,_);break;case"addClass":a.log("addding class to ".concat(S," named ").concat(k)),S.addClass(k);break;case"removeClass":a.log("remove class from ".concat(S," named ").concat(k)),S.removeClass(k);break;case"documentTitle":if(a.log("changing document title from ".concat(S," to ").concat(k)),o){var C,N=ye(o);try{for(N.s();!(C=N.n()).done;)"tabChange"==C.value&&function(){a.log("catching event tabchange..");var e=document.title;document.addEventListener("visibilitychange",(function(t){return c(t,k,e)}))}()}catch(e){N.e(e)}finally{N.f()}}break;default:a.log("Unknown edit type: ",n)}else if("setattribute"===t)switch(a.log("Setting attribute: ",attribute,k),attribute){case"src":S.css("content","url(".concat(k.trim(),")"));break;case"style":var A=k.split(":")[0].trim(),P=k.split(":")[1].trim();S.css(A,P,"!important")}else if("replace"===t)a.log("Replacing: ",k),S.replaceAll(k);else if("swap"===t){a.log("Swapping: ",y,w);var E=document.querySelector(y),D=document.querySelector(w);g(E,D)}else if("injectscript"===t)a.log("Injecting script: ",k),S.append("<script>".concat(k,"<\/script>"));else if("move"===t){a.log("Moving ".concat(y," to ").concat(w));var R=document.querySelector(y),j=document.querySelector(w);R.remove(),j.prepend(R)}else if("productInfoLookup"===t){var U=function(e,t){return e&&t.includes("{{REPLACE_PRODUCTINFO}}")&&(t=u(t,"{{REPLACE_PRODUCTINFO}}",e)),t},M=v.ND_SKU_LIST,q=JSON.parse(sessionStorage.getItem(M))[0],V=null;switch(n){case"transactionIn2Weeks":var F;V=U(null===(F=r[q].catalog.transactionIn2Weeks)||void 0===F?void 0:F.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","),k),a.log("Replacing transcationIn2Weeks ",r[q].catalog.transactionIn2Weeks);break;case"addToCartIn2Weeks":var B;V=U(null===(B=r[q].catalog.addToCartIn2Weeks)||void 0===B?void 0:B.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","),k),a.log("Replacing AddToCartCount ",r[q].catalog.addToCartIn2Weeks);break;case"productViewCount":var G;V=U(null===(G=r[q].catalog.productViewCount)||void 0===G?void 0:G.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","),k),a.log("Replacing productViewCount for",r[q].catalog.productViewCount);break;default:a.failed("no such type found for productInfoLookup operator")}S.before(V)}else a.failed("No such operator exists yet",t)}else a.failed("Noop Operator: No operation is applied on target ")},c=function(){var e=t(o().mark((function e(t,n,r){var a,i;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:a=Array.isArray(n)?n:[n],i=0;case 2:if(!(i<a.length)){e.next=16;break}if(!document.hidden){e.next=12;break}return document.title=a[i],e.next=7,se(3e3);case 7:return document.title=r,e.next=10,se(3e3);case 10:e.next=13;break;case 12:document.title=r;case 13:i++,e.next=2;break;case 16:if(document.hidden){e.next=21;break}return document.title=r,e.abrupt("return");case 21:c(t,n,r);case 22:case"end":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}(),l=function e(t){var n=t.target.id;n&&"nd-popup__wrapper"===n&&($("#nd-popup__wrapper").remove(),window.removeEventListener("click",e,!0))},d=function e(){sessionStorage.setItem(i,1);var t=document.querySelector("#grt-shadow-host");t&&(t.style.display="none"),document.getElementById("nd-popup__wrapper").style.display="block",window.addEventListener("click",l,!0),document.documentElement.removeEventListener("mouseleave",e,{once:!0}),document.documentElement.removeEventListener("copy",e,{once:!0}),setTimeout((function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",l,!0)}),15e3)},f=function(e,t){var n=document.createElement("div");n.classList.add("nd-popup__wrapper"),n.id="nd-popup__wrapper";var r=document.createElement("button");if(r.classList.add("nd-popup__button-close"),r.innerText="X",r.onclick=function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",l,!0)},t)for(var o=Array.from(document.querySelectorAll(t));e.includes("{{REPLACE}}")&&o.length>0;)e=e.replace("{{REPLACE}}",o.shift().src);var a=document.createElement("template");a.innerHTML=e.trim();var i=a.content.firstChild;i.appendChild(r),n.appendChild(i),$("#nd-popup__wrapper").remove(),document.body.appendChild(n)},g=function(e,t){var n,r,o=e.parentNode,a=t.parentNode;if(o&&a&&!o.isEqualNode(t)&&!a.isEqualNode(e)){for(var i=0;i<o.children.length;i++)o.children[i].isEqualNode(e)&&(n=i);for(var s=0;s<a.children.length;s++)a.children[s].isEqualNode(t)&&(r=s);o.isEqualNode(a)&&n<r&&r++,o.insertBefore(t,o.children[n]),a.insertBefore(e,a.children[r])}},h=function e(t){if(window.jQuery){var n,r=ye(t);try{for(r.s();!(n=r.n()).done;){var o=n.value;try{if(!1===s(o))return!1}catch(e){return a.failed("Couldn't apply action ".concat(o," with error ").concat(e.message)),e}}}catch(e){r.e(e)}finally{r.f()}}else setTimeout((function(){e(t)}),10)},e.abrupt("return",h(n));case 10:case"end":return e.stop()}}),e)}))),be.apply(this,arguments)}var ke=function(e,t){return be.apply(this,arguments)};function Se(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Ie(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ie(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function Ie(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var xe=new b("Nextday Treatment Repository"),Le=function(){function e(t){i(this,e);var n=t.treatments,r=t.treatmentWeights;this.treatments=n,this.treatmentWeights=r}var n,r;return c(e,[{key:"getMatchedTreatments",value:function(){var e=this.treatmentWeights,t=this.getUserGroup(),n=this.treatments;if(e){var r,o=t&&e[t]?e[t]:e.default,a=Se(n);try{for(a.s();!(r=a.n()).done;){var i=r.value;if(o[i.id]&&(i.weight=o[i.id].weight,i.actions.find((function(e){return e.variants})))){var s,c=Se(i.actions);try{for(c.s();!(s=c.n()).done;){var u=s.value;if(u.variants)for(var l=0,d=Object.keys(u.variants);l<d.length;l++){var f,p,v,g=d[l];null!==(f=o[i.id])&&void 0!==f&&f.variants&&null!==(p=o[i.id])&&void 0!==p&&p.variants[g]&&(u.variants[g].weight=null===(v=o[i.id])||void 0===v?void 0:v.variants[g])}}}catch(e){c.e(e)}finally{c.f()}}}}catch(e){a.e(e)}finally{a.f()}}return xe.log("".concat(n.length," treatments user group matched")),n.length?n:[]}},{key:"getUserGroup",value:function(){return window.matchMedia(p).matches?"UGB":"UGA"}}],[{key:"getTreatments",value:(r=t(o().mark((function e(){var t,n,r,a,i,s;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(xe.log("Loading treatments"),t=v.TREATMENTS,n=JSON.parse(window.sessionStorage.getItem(t)),r=null==n?void 0:n.treatments,a=null==n?void 0:n.timestamp,r&&a){e.next=13;break}return xe.failed("Treatments not found in local storage"),e.next=9,z();case 9:return r=e.sent,i={timestamp:Date.now(),treatments:r},window.sessionStorage.setItem(t,JSON.stringify(i)),e.abrupt("return",r);case 13:if(!a){e.next=23;break}if(!((Date.now()-a)/864e5>1)){e.next=23;break}return xe.failed("Treatments are expired"),e.next=19,z();case 19:return r=e.sent,s={timestamp:Date.now(),treatments:r},window.sessionStorage.setItem(t,JSON.stringify(s)),e.abrupt("return",r);case 23:return xe.success("Treatments are loaded from local storage"),e.abrupt("return",r);case 25:case"end":return e.stop()}}),e)}))),function(){return r.apply(this,arguments)})},{key:"getTreatmentWeights",value:(n=t(o().mark((function e(){return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,Y();case 3:return e.abrupt("return",e.sent);case 6:e.prev=6,e.t0=e.catch(0),xe.warn(e.t0.message),this.treatmentWeights=null;case 10:case"end":return e.stop()}}),e,this,[[0,6]])}))),function(){return n.apply(this,arguments)})}]),e}(),Oe=Le,_e=new b("Nextday Counter Checker"),Te=function(e){_e.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"pageView":return Ne(n,r);case"CABasketPrice":return Ae(n,r);default:return _e.failed("No such operator",t),!1}},Ce=function(e,t){try{switch(t){case"session":return sessionStorage.getItem(e);case"local":return localStorage.getItem(e);default:return _e.failed("No such type",t),null}}catch(t){return _e.failed("Could not get counter ".concat(e),t),null}},Ne=function(e,t){var n=parseInt(Ce(v.PAGE_VIEWS,"session"));return _e.log("Page views counter value: ",n),null===n?(_e.failed("Pageviews counter not found in session storage"),!1):oe(n,e,parseInt(t))},Ae=function(e,t){var n=parseInt(Ce(g,"local"));return _e.log("Coupon applicable basket price counter value: ",n),null===n?(_e.failed("Coupon applicable basket price counter not found in local storage"),!1):oe(n,e,parseInt(t))},Pe=new b("Nextday Element Checker"),Ee=function(e){Pe.log("Checking rule",JSON.stringify(e));var t,n=e.operator,r=e.condition,o=e.value,a=e.selector,i=e.selectorAll,s=e.selectorFallback,c=void 0===s?null:s,u=a;if(u&&!document.querySelector(u)&&(u=c||u),null===n)return oe(document.querySelector(u),r,o);if(u&&!document.querySelector(u))return Pe.failed("Selector not found on page"),!1;if(i&&!document.querySelectorAll(i))return Pe.failed("Selector not found on page"),!1;switch(u?t=document.querySelector(u):i&&(t=Array.from(document.querySelectorAll(i))),n){case"text-number":var l;l=Array.isArray(t)?t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0):parseInt(document.querySelector(u).textContent.replace("TL","").replace(".",""));var d=parseInt(l);return oe(d,r,o);case"classList":return oe(Array.from(t.classList),r,o);case"count":var f=Array.isArray(t)?t.length:t?1:0;return oe(f,r,o);case"style":var p=getComputedStyle(t),v=o.split(":")[0].trim(),g=o.split(":")[1].trim(),h=p[v];return oe(h,r,g);default:return Pe.failed("Operator not defined"),!1}},De=new b("Nextday Function Checker"),Re=function(e,t){De.log("Checking rule",JSON.stringify(e));var n=t.productInfo,r=e.operator,o=e.condition,a=e.value,i=e.bindings;if(!r)return De.failed("Rule function not defined"),!1;var s={};"productInfo"==i&&(s={productInfo:n});var c=Function(r).bind(s)();return oe(c,o,a)},je=new b("Nextday Session Checker"),Ue=function(e){je.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"duration":return Me(n,r);case"history":return qe(n,r);default:return null}},Me=function(e,t){var n=(Date.now()-function(){try{return new Date(parseInt(window.sessionStorage.getItem(v.SESSION_TIMESTAMP)))}catch(e){return je.failed("Could not get session timestamp",e),Date.now()}}())/1e3;return oe(n,e,parseInt(t))},qe=function(e,t){var n,r=null===(n=window.sessionStorage.getItem(v.SESSION_HISTORY))||void 0===n?void 0:n.split(",");return oe(r,e,t)},Ve=new b("Nextday Env Checker"),Fe=function(e){Ve.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("device_type"===t){var o=window.matchMedia(p).matches?"mobile":"desktop";return oe(o,n,r)}},Be=new b("Nextday RandomPct Checker"),Ge=function(){var e=t(o().mark((function e(t){var n,r,a,i,s,c;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Be.log("Checking rule",JSON.stringify(t)),n=t.condition,r=t.value,a=t.salt){e.next=5;break}return Be.failed("Salt is not defined"),e.abrupt("return",!1);case 5:return e.next=7,ie();case 7:return i=e.sent,e.next=10,X(i+a);case 10:return s=e.sent,c=s,e.abrupt("return",oe(c,n,r));case 13:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Je=new b("Nextday ProductInfo Checker"),Ke=function(e,t){Je.log("Checking rule",JSON.stringify(e));var n=e.operator,r=e.condition,o=e.value,a=null;switch(n){case"transactionIn2Weeks":Je.log("Getting TransactionCount for sku ",t.skuList[0]),a=He(t.skuList[0],t.productInfo);break;case"addToCartIn2Weeks":Je.log("Getting AddToCartCount for sku ",t.skuList[0]),a=We(t.skuList[0],t.productInfo);break;case"productViewCount":Je.log("Getting productViewCount for sku ",t.skuList[0]),a=$e(t.skuList[0],t.productInfo)}return oe(a,r,o)},He=function(e,t){var n,r;return null===(n=t[e])||void 0===n||null===(r=n.catalog)||void 0===r?void 0:r.transactionIn2Weeks},We=function(e,t){var n,r;return null===(n=t[e])||void 0===n||null===(r=n.catalog)||void 0===r?void 0:r.addToCartIn2Weeks},$e=function(e,t){var n,r;return null===(n=t[e])||void 0===n||null===(r=n.catalog)||void 0===r?void 0:r.productViewCount};function ze(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Ye(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ye(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function Ye(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Qe=new b("Nextday Rule Engine"),Xe=function(){function e(t){i(this,e);var n=t.baseRuleSet,r=t.businessRuleSet,o=t.bindings,a=t.callback,s=void 0===a?null:a;this.baseRuleSet=n,this.businessRuleSet=r,this.callback=s,this.bindings=o}var n,r,a;return c(e,[{key:"checkRules",value:(a=t(o().mark((function e(){var t,n,r;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=ze(this.baseRuleSet),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=12;break}return r=n.value,e.next=7,this.checkRule(r);case 7:if(e.sent){e.next=10;break}return e.abrupt("return",!1);case 10:e.next=3;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(1),t.e(e.t0);case 17:return e.prev=17,t.f(),e.finish(17);case 20:return e.abrupt("return",!0);case 21:case"end":return e.stop()}}),e,this,[[1,14,17,20]])}))),function(){return a.apply(this,arguments)})},{key:"checkBusinessRules",value:(r=t(o().mark((function e(){var t,n,r;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=ze(this.businessRuleSet),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=12;break}return r=n.value,e.next=7,this.checkRule(r);case 7:if(!e.sent){e.next=10;break}return e.abrupt("return",r.businessRuleId);case 10:e.next=3;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(1),t.e(e.t0);case 17:return e.prev=17,t.f(),e.finish(17);case 20:return e.abrupt("return",null);case 21:case"end":return e.stop()}}),e,this,[[1,14,17,20]])}))),function(){return r.apply(this,arguments)})},{key:"checkRule",value:(n=t(o().mark((function e(t){var n,r,a,i;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=t.chain,r=t.chain_condition,a=t.type,i=null,e.t0=a,e.next="session"===e.t0?5:"counter"===e.t0?7:"element"===e.t0?9:"dataLayer"===e.t0?11:"url"===e.t0?13:"function"===e.t0?15:"environment"===e.t0?17:"random"===e.t0?19:"productInfoLookup"===e.t0?23:25;break;case 5:return i=Ue(t),e.abrupt("break",27);case 7:return i=Te(t),e.abrupt("break",27);case 9:return i=Ee(t),e.abrupt("break",27);case 11:return i=_(t),e.abrupt("break",27);case 13:return i=N(t),e.abrupt("break",27);case 15:return i=Re(t,this.bindings),e.abrupt("break",27);case 17:return i=Fe(t),e.abrupt("break",27);case 19:return e.next=21,Ge(t);case 21:return i=e.sent,e.abrupt("break",27);case 23:return i=Ke(t,this.bindings),e.abrupt("break",27);case 25:return Qe.failed("No such rule type: ".concat(a)),e.abrupt("return",null);case 27:if(!n){e.next=53;break}e.t1=r,e.next="and"===e.t1?31:"or"===e.t1?38:"xor"===e.t1?45:51;break;case 31:if(e.t2=i,!e.t2){e.next=36;break}return e.next=35,this.checkRule(n);case 35:e.t2=e.sent;case 36:return i=e.t2,e.abrupt("break",53);case 38:if(e.t3=i,e.t3){e.next=43;break}return e.next=42,this.checkRule(n);case 42:e.t3=e.sent;case 43:return i=e.t3,e.abrupt("break",53);case 45:return e.t4=i,e.next=48,this.checkRule(n);case 48:return e.t5=e.sent,i=e.t4!=e.t5,e.abrupt("break",53);case 51:return Qe.failed("No such chain condition"),e.abrupt("break",53);case 53:return e.abrupt("return",i);case 54:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})}]),e}();function Ze(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return et(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?et(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function et(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var tt=new b("BeagleOnComponent"),nt=function(){var e=t(o().mark((function e(n,r,a,i){var s,c,u,l,d,f,h,m,y,w,b,k,S,I,L,O,T,C,N,A,P,E,D,R,U,M,V,B,G,J,K;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return K=function(){var e=g;if(window.location.href.includes("/siparis-listesi.html")){var t=Array.from(document.querySelectorAll(".price"));if(t.push.apply(t,me(Array.from(document.querySelectorAll(".new-price")))),!t.length)return tt.failed("Price elements not found"),void window.localStorage.setItem(e,0);tt.log("Price elements: ",t);var n=t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0);tt.log("Coupon applicable total price: ",n),n>=0&&window.localStorage.setItem(e,n)}else(window.location.href.includes("/siparis-ozeti.html")||null===window.localStorage.getItem(e))&&window.localStorage.setItem(e,0)},J=function(){return J=t(o().mark((function e(t){var r,a,s,u,l,f,p,v,g,S,I,L,O,T,C,A,D,R,j,U,M,q,V,B,G,J,K,H,W;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.id,a=t.actions,s=t.baseRuleSet,u=t.device,l=t.dependant_on_treatment,f=t.reapply_event,p=t.businessRuleSet,v=t.weight,g=t.delay,S=t.productInfoStorage,!c||c.includes(r)){e.next=3;break}return e.abrupt("return");case 3:if("mobile"!==u||d){e.next=6;break}return tt.failed("Treatment device 'mobile' mismatch"),e.abrupt("return");case 6:if("desktop"!==u||!d){e.next=9;break}return tt.failed("Treatment device 'desktop' mismatch"),e.abrupt("return");case 9:if(f){I=f,Array.isArray(f)||(I=[f]),tt.log("Reapply event '".concat(f,"' found for treatment: ").concat(r)),L=Ze(I);try{for(L.s();!(O=L.n()).done;)T=O.value,(C=E[T]?E[T]:[]).includes(r)?tt.log("Treatment already added for reapply event"):E[T]=[].concat(me(C),[r])}catch(e){L.e(e)}finally{L.f()}}if(A=null,D=N,_(R={operator:"PageType",condition:"equal",value:"Listingpage"})&&(A=JSON.parse(sessionStorage.getItem(h)),D=JSON.parse(sessionStorage.getItem(b))),R.value="Productpage",_(R)&&(A=JSON.parse(sessionStorage.getItem(y)),D=JSON.parse(sessionStorage.getItem(k))),R.operator="path",R.value="/siparis-listesi.html",_(R)&&(A=JSON.parse(sessionStorage.getItem(m)),D=JSON.parse(sessionStorage.getItem(w))),S&&(A=JSON.parse(sessionStorage.getItem(S)),D=JSON.parse(sessionStorage.getItem(S))),j=new Xe({baseRuleSet:s,businessRuleSet:p,bindings:{productInfo:D,skuList:A}}),tt.log("Starting base rule set check for treatment: "+r),e.t0=!s,e.t0){e.next=28;break}return e.next=27,j.checkRules();case 27:e.t0=e.sent;case 28:if(!e.t0){e.next=70;break}if(U=100===v?0:100-v||50,l&&(q=null===(M=P.find((function(e){return e.id===l})))||void 0===M?void 0:M.weight,U=100===q?0:100-q||50),tt.log("Treatment skip ratio: "+U),V=l||r,1!==i){e.next=37;break}e.t1=100,e.next=40;break;case 37:return e.next=39,X(n+V);case 39:e.t1=e.sent;case 40:if(B=e.t1,tt.log("TreatmentPct: "+B+" with debug mode ".concat(i?"on":"off")),G=null,!p){e.next=49;break}return tt.log("Starting sub variant rule set check for treatment: "+r),e.next=47,j.checkBusinessRules();case 47:(G=e.sent)?tt.log("Applying business rule transformation with id: ",G):tt.log("Applying treatment with default values");case 49:if(!(B<U)){e.next=53;break}return tt.log("Treatment ".concat(r," skipped due to treatment split ratio")),F(r,G,W,"skipped",l),e.abrupt("return");case 53:return e.next=55,re(n,a,G);case 55:if(J=e.sent,K=x(J,2),H=K[0],W=K[1],!g){e.next=62;break}return e.next=62,g(g);case 62:return e.next=64,ke(H,N);case 64:if(!1!==e.sent){e.next=68;break}return F(r,G,W,"failed"),e.abrupt("return");case 68:return F(r,G,W,"applied"),e.abrupt("return");case 70:tt.failed("Rule check failed for treatment: ",r);case 71:case"end":return e.stop()}}),e)}))),J.apply(this,arguments)},G=function(e){return J.apply(this,arguments)},r.sendLogs(),s=window.location.search,c=i&&s.includes("filter=")?s.slice(s.indexOf("[")+1,s.lastIndexOf("]")).split(",").map((function(e){return parseInt(e,10)})):null,ne(),void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,H=v.PAGE_VIEWS,$=v.POPUP_DISPLAY_FLAG,z=v.SESSION_ID,Y=v.SESSION_TIMESTAMP,Q=v.SESSION_HISTORY,Z=sessionStorage.getItem(H),ee=sessionStorage.getItem($),te=sessionStorage.getItem(z),oe=sessionStorage.getItem(Y),ae=sessionStorage.getItem(Q),Z?sessionStorage.setItem(H,parseInt(Z)+1):sessionStorage.setItem(H,1),null===ee&&sessionStorage.setItem($,0),te||sessionStorage.setItem(z,crypto.randomUUID()),oe||sessionStorage.setItem(Y,Date.now()),ae?sessionStorage.setItem(Q,[window.location.pathname,ae]):sessionStorage.setItem(Q,[window.location.pathname]),setTimeout((function(){W()}),2e3),u=Oe.getTreatments(),l=Oe.getTreatmentWeights(),d=window.matchMedia(p).matches,f={subtree:!0,childList:!0,attributes:!0},h=v.ND_SKU_LIST_LISTING,m=v.ND_SKU_LIST_BASKET,y=v.ND_SKU_LIST_PRODUCT,w=v.ND_SKU_INFO_BASKET,b=v.ND_SKU_INFO_LISTING,k=v.ND_SKU_INFO_PRODUCT,K(),window.location.href.includes("/siparis-listesi.html")&&(S=new MutationObserver((function(){tt.log("Mutation observed, calling collectCABasketPrice"),K()})),(I=document.querySelector("#checkoutForm"))&&S.observe(I,f)),e.next=18,Promise.all([u,l,a]);case 18:if(L=e.sent,O=x(L,3),T=O[0],C=O[1],N=O[2],tt.success("Found treatments: ",T),A=new Oe({treatments:T,treatmentWeights:C}),q(j.TreatmentRepositoryCreated),(P=A.getMatchedTreatments()).length){e.next=31;break}return tt.log("No treatments matched, returning without further action"),W(),e.abrupt("return");case 31:E={},D=Ze(P),e.prev=33,D.s();case 35:if((R=D.n()).done){e.next=47;break}return U=R.value,e.prev=37,e.next=40,G(U);case 40:e.next=45;break;case 42:e.prev=42,e.t0=e.catch(37),tt.failed("Error executing rules",e.t0);case 45:e.next=35;break;case 47:e.next=52;break;case 49:e.prev=49,e.t1=e.catch(33),D.e(e.t1);case 52:return e.prev=52,D.f(),e.finish(52);case 55:for(W(),q(j.TreatmentsApplied),tt.success("Applied treatments: ",window.beagleInfoLayer.a),setInterval((function(){r.updateLatestChanges()}),1e3),M=function(){var e=B[V],t=E[e],n=P.filter((function(e){return t.includes(e.id)}));switch(e){case"infinite_scroll":var r=new ResizeObserver((function(){var e,t=Ze(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;tt.log("Retrying treatment ".concat(r.id," from infinite_scroll")),G(r)}}catch(e){t.e(e)}finally{t.f()}}));r.observe(document.documentElement);break;case"timeout":setTimeout((function(){var e,t=Ze(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;tt.log("Retrying treatment ".concat(r.id," from timeout")),G(r)}}catch(e){t.e(e)}finally{t.f()}}),500);break;case"element_change":var o,a=Ze(n);try{var i=function(){var e,t=o.value,n=Ze(Array.isArray(t.reapply_selector)?t.reapply_selector:[t.reapply_selector]);try{for(n.s();!(e=n.n()).done;){var r=e.value,a=document.querySelector(r);a&&new MutationObserver((function(){tt.log("Retrying treatment ".concat(t.id," from element_change")),G(t)})).observe(a,f)}}catch(e){n.e(e)}finally{n.f()}};for(a.s();!(o=a.n()).done;)i()}catch(e){a.e(e)}finally{a.f()}break;case"on_scroll":window.onscroll=function(){var e,t=Ze(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;tt.log("Retrying treatment ".concat(r.id," from on_scroll")),G(r)}}catch(e){t.e(e)}finally{t.f()}};break;case"query_search_change":var s=window.location.search,c=new MutationObserver((function(){if(window.location.search!==s){s=window.location.search;var e,t=Ze(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;tt.log("Retrying treatment ".concat(r.id," from query_search_change")),G(r)}}catch(e){t.e(e)}finally{t.f()}}}));c.observe(document,f);break;default:tt.failed("Reapply event not found: ",e)}},V=0,B=Object.keys(E);V<B.length;V++)M();q(j.ReapplyTreatmentListeners);case 62:case"end":return e.stop()}var H,$,z,Y,Q,Z,ee,te,oe,ae}),e,null,[[33,49,52,55],[37,42]])})));return function(t,n,r,o){return e.apply(this,arguments)}}(),rt=nt;t(o().mark((function e(){var t,n,r,a,i,s,c,u,l,d,f,p;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return q(j.BeagleLoaded),t=null,n=null,r=new b,a=v.TIMEOUT_COUNT,i=0,r.info("Nextday initializing"),e.prev=7,e.next=10,M();case 10:return c=he(),u=ae(),t=new ve,q(j.Initialized),e.next=16,ie();case 16:return l=e.sent,r.log("Found cookie identifier: ",l),e.next=20,X(l);case 20:if(d=e.sent,u){e.next=40;break}if(!(d<50)){e.next=29;break}if(-1!==d){e.next=25;break}throw new Error("Could not determine cookie pct");case 25:V("isOn",n=!1),e.next=31;break;case 29:V("isOn",n=!0);case 31:if(q(j.UserOnOff),ue()){e.next=34;break}throw new Error("sendBeacon is not supported");case 34:if(!((i=parseInt(sessionStorage.getItem(a))||0)>1)){e.next=38;break}throw q(j.TimeoutThresholdReached),new Error("Nextday timeout threshold reached");case 38:e.next=42;break;case 40:r.info("Debug mode on: all applicable treatments will be applied"),window.localStorage.setItem(m,!0);case 42:if(document.documentElement.classList.contains("nextDay-hide")){e.next=46;break}throw q(j.ScriptTimeOut),sessionStorage.setItem(a,i+1),new Error("Nextday script timed out");case 46:if(null!==(s=window.beagleInfoLayer)&&void 0!==s&&s.vvsIsShowroom&&window.localStorage.setItem(m,!0),"true"===window.localStorage.getItem(m)?(r.warn("User is out of scope"),null!="isOn"&&delete window.beagleInfoLayer.isOn):(window.dataLayer=window.dataLayer||[],!0===(null===(f=window.beagleInfoLayer)||void 0===f?void 0:f.isOn)?window.dataLayer.push({event:"GLOV",GLOV_ON:"true"}):!1===(null===(p=window.beagleInfoLayer)||void 0===p?void 0:p.isOn)&&window.dataLayer.push({event:"GLOV",GLOV_ON:"false"})),!1!==n){e.next=51;break}throw new Error("Control group: no treatments applied");case 51:r.log("Found cookie percentage: ",d),r.log("Split_ratio: ",50),r.log("cookiePct < SPLIT_RATIO",d<50),r.info("Control group ratio: ".concat(50,"%")),rt(l,t,c,u),e.next=63;break;case 58:e.prev=58,e.t0=e.catch(7),W(),console.warn("Nextday: ",e.t0.message),t.sendLogs(e.t0.message,!0);case 63:case"end":return e.stop()}}),e,null,[[7,58]])})))()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
