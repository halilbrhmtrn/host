!function(){var e={757:function(e,t,n){e.exports=n(666)},666:function(e){var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof h?t:h,a=Object.create(o.prototype),i=new C(r||[]);return a._invoke=function(e,t,n){var r=d;return function(o,a){if(r===p)throw new Error("Generator is already running");if(r===g){if("throw"===o)throw a;return P()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var c=L(i,n);if(c){if(c===v)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=g,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var s=l(e,t,n);if("normal"===s.type){if(r=n.done?g:f,s.arg===v)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=g,n.method="throw",n.arg=s.arg)}}}(e,n,i),a}function l(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d="suspendedStart",f="suspendedYield",p="executing",g="completed",v={};function h(){}function m(){}function y(){}var w={};s(w,a,(function(){return this}));var b=Object.getPrototypeOf,k=b&&b(b(T([])));k&&k!==n&&r.call(k,a)&&(w=k);var x=y.prototype=h.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function I(e,t){function n(o,a,i,c){var s=l(e[o],e,a);if("throw"!==s.type){var u=s.arg,d=u.value;return d&&"object"==typeof d&&r.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,i,c)}),(function(e){n("throw",e,i,c)})):t.resolve(d).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,c)}))}c(s.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function L(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,L(e,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=l(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,v):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function A(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function C(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function T(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:P}}function P(){return{value:t,done:!0}}return m.prototype=y,s(x,"constructor",y),s(y,"constructor",m),m.displayName=s(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,s(e,c,"GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},S(I.prototype),s(I.prototype,i,(function(){return this})),e.AsyncIterator=I,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new I(u(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(x),s(x,c,"Generator"),s(x,a,(function(){return this})),s(x,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=T,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(A),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return c.type="throw",c.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],c=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var s=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(s&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),A(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;A(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:T(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),v}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){"use strict";function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function r(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}}(e,t)||r(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e){return function(e){if(Array.isArray(e))return t(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||r(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t,n,r,o,a,i){try{var c=e[a](i),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(r,o)}function c(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function c(e){i(a,r,o,c,s,"next",e)}function s(e){i(a,r,o,c,s,"throw",e)}c(void 0)}))}}var s=n(757),u=n.n(s);function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t,n){return t&&d(e.prototype,t),n&&d(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var p="https://europe-west3-nextday-34eb3.cloudfunctions.net/api/logResponse",g="(max-width: 440px)",v="__nextday_session_id",h="ND_SessionTimestamp",m="BN_SessionHistory",y="ND_PageViews",w="ND_PopupDisplayFlag",b="ND_SkuList",k="ND_CABasketPrice",x="ND_Debug",S=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Nextday Client SDK";l(this,e),this.origin=t,this.DEBUG=window.localStorage.getItem(x)}return f(e,[{key:"info",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).info.apply(e,["[".concat(t,"]")].concat(r))}},{key:"log",value:function(){var e=this.DEBUG,t=this.origin;if(e){for(var n,r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];(n=console).log.apply(n,["[".concat(t,"]")].concat(o))}}},{key:"warn",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).warn.apply(e,["[".concat(t,"]")].concat(r))}},{key:"error",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).error.apply(e,["[".concat(t,"]")].concat(r))}}]),e}(),I=S;function L(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var O=new I("Nextday DataLayer Checker"),A=function(e){O.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value,o=C(t);return re(o,n,r)},C=function(e){O.log("Searching beagleInfoLayer for key ",e);var t=window.beagleInfoLayer[e];if(t)return O.log("Found key ".concat(e," with value ").concat(t)),t;O.log("Key ".concat(e," not found in beagleInfoLayer")),O.log("Searching dataLayer for key ",e);var n,r=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return L(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?L(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}(window.dataLayer);try{for(r.s();!(n=r.n()).done;){var o=n.value;if(Object.keys(o).includes(e))return O.log("Found key ".concat(e," with value ").concat(o[e])),o[e]}}catch(e){r.e(e)}finally{r.f()}return O.log("Key ".concat(e," not found in dataLayer")),null},T=new I("Nextday Url Checker"),P=function(e){T.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("path"===t){var o=window.location.href,a=o.includes("ajax/mobile-search/loadOtherPages.php")?decodeURIComponent(new URL(o).search.replace("?originalPath=","")):new URL(o).pathname;return T.log("Checking path ".concat(a," matches rule path ").concat(r)),re(a,n,r)}};function E(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function N(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?_(Object(n),!0).forEach((function(t){E(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):_(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function j(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return R(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?R(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function R(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}window.beagleInfoLayer=window.beagleInfoLayer||{checkpoints:[],a:{},e:{}};var D={PageType:/(?:PageType'[ ]*:[ ]*')(.*)(?:')/,content_name:/(?:content_name[ ]*:[ ]*")(.*)(?:")/,content_name_alt:/(?:content_name'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAPageType:/(?:PageType'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAOrderId:/(?:purchase[\s\S]*actionField[\s\S]*'id'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAOrderRev:/(?:purchase[\s\S]*actionField[\s\S]*'revenue'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAOrderType:/(?:purchase[\s\S]*actionField[\s\S]*'dimension15'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAIsAdmin:/(?:dataLayer[\s\S]*'isAdmin'[ ]*:[ ]*")(.*)(?:")/},q={BeagleLoaded:1,Initialized:2,UserOnOff:3,ScriptTimeOut:7,TreatmentRepositoryCreated:4,TreatmentsApplied:5,ReapplyTreatmentListeners:6,TimeoutThresholdReached:8},V=new I("BeagleInfoLayer"),U=function(){V.log("Initializing beagleInfoLayer"),J();var e=document.getElementsByTagName("script");if(e&&e.length)for(var t=0,n=e.length-1;n>-1;n--)for(var r=e[n].textContent,o=0,a=Object.keys(D);o<a.length;o++){var i=a[o],c=D[i].exec(r);if(c=c?c[1]:null){i.indexOf("_alt")>0&&(i=i.substring(0,i.lastIndexOf("_alt")));try{F(i,decodeURIComponent(JSON.parse('"'+c+'"')))}catch(e){V.warn("Could not decode foundVal ".concat(c)),F(i,null)}if((t+=1)===Object.keys(D).length)return}}else V.warn("Could not parse body")},M=function(e){try{V.log("Checkpoint: '".concat(e,"' Reached!")),window.beagleInfoLayer.checkpoints.push({checkpoint:Object.keys(q).find((function(t){return q[t]===e})),id:e,time:Date.now()})}catch(e){V.warn(e)}},F=function(e,t){null!=e&&null!=t&&(window.beagleInfoLayer[e]=t)},B=function(e,t){window.beagleInfoLayer.a[e]=t},J=function(){var e,t,n,r,o,a,i,c,s,u,l,d,f,p,g,h,m,y,w,b,k,x,S,I,L,O,A,C,T,P,E,_,R,D,q,U,M,B,J,G,H,$,z,K=crypto.randomUUID(),Q=sessionStorage.getItem(v),Y=new URL(window.location.href),X=(null===(e=window.navigator)||void 0===e||null===(t=e.userAgentData)||void 0===t?void 0:t.platform)||(null===(n=window.navigator)||void 0===n?void 0:n.platform)||(null===(r=window.navigator)||void 0===r?void 0:r.userAgent),Z={},ee=j(window.dataLayer);try{for(ee.s();!(z=ee.n()).done;){var te=z.value;Z=N(N({},Z),te)}}catch(e){ee.e(e)}finally{ee.f()}var ne=JSON.parse(W(document.cookie,"VL_CM_0")),re={};if(ne&&ne.Items){var oe,ae=j(ne.Items);try{for(ae.s();!(oe=ae.n()).done;){var ie=oe.value;re[ie.K]=decodeURIComponent(ie.V)}}catch(e){ae.e(e)}finally{ae.f()}}F("cookieVLPVinVisit",re.VL_PVCountInVisit),F("cookieVLVisitDuration",re.VL_TotalDuration),F("cookieVLTotalPV",re.VL_TotalPV),F("cookieVLTotalVisit",re.VL_TotalVisit),F("gaPageType",Z.PageType),F("gaProductName",Z.content_name),F("gaViewType",Z.content_type),F("gaProductCategory",Z.content_category),F("gaProductID",Z.content_ids),F("vvsProductCategory",Z.vivense_category),F("gaListingName",null===(o=Z.ecommerce)||void 0===o||null===(a=o.detail)||void 0===a||null===(i=a.actionField)||void 0===i?void 0:i.list),F("vvsIsShowroom",void 0===window.isAdmin?Z.isAdmin:window.isAdmin),F("vvsProductGroup",Z.productGroup),F("vvsUserId",Z.userId),F("vvsCategory",Z.vivense_category),F("gaCategoryProductCont",Z.category_product_count),F("gaCartProducts",(null===(c=Z.ecommerce)||void 0===c||null===(s=c.checkout)||void 0===s?void 0:s.products)||(null===(u=Z.ecommerce)||void 0===u||null===(l=u.purchase)||void 0===l?void 0:l.products)),F("vvsPDPProduct",null===(d=Z.vivenseProducts)||void 0===d?void 0:d.pop()),F("gaPurchaseId",null===(f=Z.ecommerce)||void 0===f||null===(p=f.purchase)||void 0===p||null===(g=p.actionField)||void 0===g?void 0:g.id),F("gaPurchaseRevenue",null===(h=Z.ecommerce)||void 0===h||null===(m=h.purchase)||void 0===m||null===(y=m.actionField)||void 0===y?void 0:y.revenue),F("gaPurchasePayType",null===(w=Z.ecommerce)||void 0===w||null===(b=w.purchase)||void 0===b||null===(k=b.actionField)||void 0===k?void 0:k.dimension15),F("windowParams",window.location.search),F("windowPRatio",window.devicePixelRatio),F("windowInner",window.innerWidth);var ce={};ce.availHeight=null===(x=window.screen)||void 0===x?void 0:x.availHeight,ce.availHeight=null===(S=window.screen)||void 0===S?void 0:S.availHeight,ce.availLeft=null===(I=window.screen)||void 0===I?void 0:I.availLeft,ce.availTop=null===(L=window.screen)||void 0===L?void 0:L.availTop,ce.availWidth=null===(O=window.screen)||void 0===O?void 0:O.availWidth,ce.colorDepth=null===(A=window.screen)||void 0===A?void 0:A.colorDepth,ce.height=null===(C=window.screen)||void 0===C?void 0:C.height,ce.pixelDepth=null===(T=window.screen)||void 0===T?void 0:T.pixelDepth,ce.width=null===(P=window.screen)||void 0===P?void 0:P.width,F("windowScreen",ce);var se={};if(se.height=null===(E=window.visualViewport)||void 0===E?void 0:E.height,se.offsetLeft=null===(_=window.visualViewport)||void 0===_?void 0:_.offsetLeft,se.offsetTop=null===(R=window.visualViewport)||void 0===R?void 0:R.offsetTop,se.onresize=null===(D=window.visualViewport)||void 0===D?void 0:D.onresize,se.onscroll=null===(q=window.visualViewport)||void 0===q?void 0:q.onscroll,se.pageLeft=null===(U=window.visualViewport)||void 0===U?void 0:U.pageLeft,se.pageTop=null===(M=window.visualViewport)||void 0===M?void 0:M.pageTop,se.scale=null===(B=window.visualViewport)||void 0===B?void 0:B.scale,se.width=null===(J=window.visualViewport)||void 0===J?void 0:J.width,F("windowVPort",se),screen.width){var ue=parseInt(screen.width),le=screen.height?parseInt(screen.height):0;if(0!==ue&&0!==le){if(/iPad|iPhone|iPod/.test(X)&&window.devicePixelRatio)ue=Math.round(ue*window.devicePixelRatio),le=Math.round(le*window.devicePixelRatio);else if(90===Math.abs(window.orientation)){var de=ue;ue=le,le=de}F("window",ue+"x"+le)}}if(F("navHistSize",null===(G=window.history)||void 0===G?void 0:G.length),F("navAgent",navigator.userAgent),!window.beagleInfoLayer.navAgent&&navigator.userAgentData){var fe,pe,ge,ve,he,me=null===(fe=navigator)||void 0===fe||null===(pe=fe.userAgentData)||void 0===pe||null===(ge=pe.brands)||void 0===ge?void 0:ge.map((function(e){return e.brand+":"+e.version})).join();me+=null!==(ve=navigator)&&void 0!==ve&&null!==(he=ve.userAgentData)&&void 0!==he&&he.mobile?"mobi":" ",F("navAgent",me+=X)}F("navHWCores",navigator.hardwareConcurrency),F("navLanguage",navigator.language||navigator.browserLanguage||navigator.systemLanguage||navigator.userLanguage),F("navTouch",navigator.maxTouchPoints),F("navPlatform",X),F("navVendor",navigator.vendor),F("cookieGaId",W(document.cookie,"_ga")),F("cookieLastBreadCrumb",W(document.cookie,"lastbreadcrumb")),F("cookieLastCategory",W(document.cookie,"lastcategory")),F("cookieFirstEntry",decodeURIComponent(W(document.cookie,"vivensefirst")));var ye={};if(window.performance&&window.performance.getEntriesByType("navigation")[0]){var we=window.performance.getEntriesByType("navigation")[0];ye.pld=Math.round(we.domContentLoadedEventEnd-we.connectStart),ye.net=Math.round(we.connectEnd-we.fetchStart),ye.srv=Math.round(we.responseStart-we.requestStart),ye.tfr=Math.round(we.responseEnd-we.responseStart),ye.dmi=Math.round(we.domInteractive-we.responseEnd),ye.dcp=Math.round(we.domComplete-we.domInteractive),ye.onl=Math.round(we.loadEventEnd-we.loadEventStart)}F("perfMetrics",ye),F("internetSpeed",null===(H=window.navigator)||void 0===H||null===($=H.connection)||void 0===$?void 0:$.downlink);var be,ke,xe=j(document.querySelectorAll('[type="application/ld+json"]'));try{for(xe.s();!(be=xe.n()).done;){var Se=be.value;try{var Ie=Se.textContent,Le=JSON.parse(Ie),Oe="@";switch(Le["@type"]){case"Organization":case"WebSite":break;case"CollectionPage":var Ae,Ce=j(Le.breadcrumb.itemListElement);try{for(Ce.s();!(Ae=Ce.n()).done;)Oe+=" | "+Ae.value.item.name}catch(e){Ce.e(e)}finally{Ce.f()}F("sorgBreadcrumb",Oe);var Te={};Te.name=Le.mainEntity.name,Te.countItems=Le.mainEntity.numberOfItems,F("sorgListing",Te);break;case"BreadcrumbList":var Pe,Ee=j(Le.itemListElement);try{for(Ee.s();!(Pe=Ee.n()).done;)Oe+=" | "+Pe.value.name}catch(e){Ee.e(e)}finally{Ee.f()}F("sorgBreadcrumb",Oe);break;case"Product":var _e={};_e.sku=Le.sku,_e.name=Le.name,Le.offers&&(_e.price=Le.offers.price,_e.priceCurrency=Le.offers.priceCurrency,_e.priceValidUntil=Le.offers.priceValidUntil),F("sorgProduct",_e);break;default:console.log(Le)}}catch(e){V.warn(e.message)}}}catch(e){xe.e(e)}finally{xe.f()}F("v","0.0.26"),F("n","nextday-session_id-".concat(Q)),F("sr",50),F("donttrack",navigator.doNotTrack||window.doNotTrack||navigator.msDoNotTrack),F("u",Y.href),F("d",Y.hostname),F("r",document.referrer),F("vId",K),F("isOn",null);try{F("vvsCntFavProds",window.favoriteProducts?JSON.parse(window.favoriteProducts).length:null)}catch(e){F("vvsCntFavProds",null),V.warn(e.message)}F("vvsHasSetEmail",window.userEmail.length>0),F("vvsLoginType",window.userId>0?"member":"guest"),ke=document.querySelector('[class*="basket_summary_total"], [class*="total_row"]'),F("vvsPurcPriceElt",ke?ke.innerText:null),ke=document.querySelector('[class*="order_follow_numb"], [class*="cart-title-bottom"]'),F("vvsPurchaseOrderID",ke?ke.innerText:null),ke=document.querySelector('[class*="payment_type_title"], [class*="cart-title-info"]'),F("vvsPurcTypeElt",ke?ke.innerText:null),ke=document.querySelector('[id*="breadcrumb-ol"], [class*="long-breadcrumb"]'),F("vvsViewCrumb",ke?ke.innerText:null),ke=document.querySelector('[class*="order-final-number"]'),F("vvsCartTotal",ke?ke.innerText:null),ke=document.querySelector('[class*="basket_total_price"]'),F("vvsViewBasketTotal",ke?ke.innerText:null),ke=document.querySelector('[id*="cart_quantity"], [class*="basket_length"]'),F("vvsViewBasketCount",ke?ke.innerText:null),ke=document.querySelector('[class*="welcome_username"]'),F("vvsViewLoggedin",!!ke&&ke.innerText.length>0),ke=document.querySelectorAll('[class*="vivense-showrooms"] > *'),F("vvsPDPShowroomCount",ke?ke.length:null),ke=document.querySelector('[class*="delivery-date"]'),F("vvsPDPDeliveryDate",ke?ke.innerText:null),ke=document.querySelector('[class*="product-title"], [class*="header-bottom"]'),F("vvsPDPTitle",ke?ke.innerText:null),ke=document.querySelector('[class*="count-of-product"]'),F("vvsPLPItemCount",ke?ke.innerText:null),ke=document.querySelector('[class*="subcategories-title"]'),F("vvsPLPName",ke?ke.innerText:null)};function G(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return H(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?H(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function H(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var z=new I("Nextday Utils");"randomUUID"in crypto||oe();var K=function(){document.documentElement.classList.remove("nextDay-hide")},Q=function(){var e=c(u().mark((function e(){var t;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return z.log("Fetching treatments"),e.next=3,fetch("https://host-b96.pages.dev/treatments.json");case 3:return t=e.sent,e.next=6,t.json();case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),W=function(e,t){if(!e)return null;var n=e.split(";").map((function(e){return e.split("=")})).reduce((function(e,t){return t[0]&&t[1]&&(e[decodeURIComponent(t[0].trim())]=decodeURIComponent(t[1].trim())),e}),{})[t];return n?("_ga"===t&&(n=n.split(".")[2]),n):null},Y=function(){var e=c(u().mark((function e(t){var n,r,o,a;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=8+(n=9),t){e.next=5;break}return e.abrupt("return",-1);case 5:return e.next=7,X(t);case 7:return o=e.sent,a=parseInt(o.substring(n,r),16),e.abrupt("return",a%100);case 10:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),X=function(){var e=c(u().mark((function e(t){var n,r,o;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=(new TextEncoder).encode(t),e.next=3,crypto.subtle.digest("SHA-1",n);case 3:return r=e.sent,o=Array.from(new Uint8Array(r)),e.abrupt("return",o.map((function(e){return e.toString(16).padStart(2,"0")})).join(""));case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Z=function(e){var t=document.documentElement.scrollTop,n=setInterval((function(){var r=document.documentElement.scrollTop;t-400>r?(clearInterval(n),e()):t=r}),500)},ee=function(e,t){z.log("Applying style changes",t,"to elements",e);for(var n=0;n<e.length;n++)for(var r=e[n],a=0,i=Object.entries(t);a<i.length;a++){var c=o(i[a],2),s=c[0],u=c[1];r.style[s]=u}},te=function(){var e=c(u().mark((function e(){var t;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(t=document.createElement("link")).rel="stylesheet",t.type="text/css",t.href="https://host-b96.pages.dev/nd-styles.css",document.head.appendChild(t);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),ne=function(e,t){var n,r=JSON.parse(JSON.stringify(e)),o=G(r);try{for(o.s();!(n=o.n()).done;){var a=n.value,i=a.subVariants;if(i){var c,s=G(i);try{for(s.s();!(c=s.n()).done;){var u=c.value;if(u.id===t)for(var l in u)"id"!==l&&(a[l]=u[l])}}catch(e){s.e(e)}finally{s.f()}}}}catch(e){o.e(e)}finally{o.f()}return r},re=function(e,t,n){if("notExist"===t)return e?(z.log("conditionChecker: -not satisfied- target does exist"),!1):(z.log("conditionChecker: -satisfied- target does not exist"),!0);if(null==e||null==t)return z.log("conditionChecker: runTimeValue or condition is not defined"),!1;switch(t){case"exist":return e?(z.log("conditionChecker: -satisfied- target does exist"),!0):(z.log("conditionChecker: -not satisfied- target does not exist"),!1);case"contains":return e.includes(n)?(z.log("conditionChecker: -satisfied- target contains value"),!0):(z.log("conditionChecker: -not satisfied- target does not contain value"),!1);case"notContains":return e.includes(n)?(z.log("conditionChecker: -not satisfied- target contains value"),!1):(z.log("conditionChecker: -satisfied- target does not contain value"),!0);case"equal":return e===n?(z.log("conditionChecker: -satisfied- target equals value"),!0):(z.log("conditionChecker: -not satisfied- target does not equal value"),!1);case"notEqual":return e!==n?(z.log("conditionChecker: -satisfied- target does not equal value"),!0):(z.log("conditionChecker: -not satisfied- target equals value"),!1);case"greaterThan":return e>n?(z.log("conditionChecker: -satisfied- target is greater than value"),!0):(z.log("conditionChecker: -not satisfied- target is not greater than value"),!1);case"lessThan":return e<n?(z.log("conditionChecker: -satisfied- target is less than value"),!0):(z.log("conditionChecker: -not satisfied- target is not less than value"),!1);case"greaterEquals":return e>=n?(z.log("conditionChecker: -satisfied- target is greater or equal than value"),!0):(z.log("conditionChecker: -not satisfied- target is not greater or equal than value"),!1);case"lessEquals":return e<=n?(z.log("conditionChecker: -satisfied- target is less or equal than value"),!0):(z.log("conditionChecker: -not satisfied- target is not less or equal than value"),!1);case"between":var r=o(n.split(","),2),a=r[0],i=r[1];return a=parseInt(a),i=parseInt(i),e>=a&&e<=i?(z.log("conditionChecker: -satisfied- target is between min and max"),!0):(z.log("conditionChecker: -not satisfied- target is not between min and max"),!1);default:return z.log("conditionChecker: condition is not defined ",t),!1}},oe=function(){crypto.randomUUID=function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(e){return(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)}))}},ae=function(){var e=x,t=window.location.search;if(t.includes("nd_debug=1"))return window.localStorage.setItem(e,1),F("dbm","on"),1;if(t.includes("nd_debug=2"))return window.localStorage.setItem(e,2),F("dbm","on"),2;if(t.includes("nd_debug=0"))return window.localStorage.removeItem(e),F("dbm","off"),0;var n=parseInt(window.localStorage.getItem(e));return F("dbm",n?"on":"off"),n||0},ie=function(){var e=c(u().mark((function e(){var t,n=arguments;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.length>0&&void 0!==n[0]?n[0]:"_ga",e.abrupt("return",new Promise((function(e,n){var r=W(document.cookie,t);if(r)e(r);else{var o=setInterval((function(){(r=W(document.cookie,t))&&(clearInterval(o),e(r))}),10);setTimeout((function(){clearInterval(o),n(new Error("Could not extract cookie identifier"))}),1e3)}})));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),ce=function(e){return new Promise((function(t){return setTimeout(t,e)}))},se=function(){var e=b,t=[],n={operator:"PageType",condition:"equal",value:"Homepage"};if(A(n))return null;if(n.value="Listingpage",A(n))return Array.from(document.querySelectorAll(".product-card")).forEach((function(e){t.push(e.getAttribute("data-product-sku"))})),t.length?(sessionStorage.setItem(e,JSON.stringify(t)),t):(z.log("Product SKUs not found on Listingpage"),null);if(n.value="Productpage",A(n)){var r=document.querySelector(".product-sku");return r?(t.push(r.getAttribute("data-sku")),sessionStorage.setItem(e,JSON.stringify(t)),t):(z.log("Product SKU not found on Productpage"),null)}return n.operator="path",n.value="/siparis-listesi.html",P(n)?(Array.from(document.querySelectorAll(".cart-inside")).forEach((function(e){t.push(e.getAttribute("data-sku"))})),t.length?(sessionStorage.setItem(e,JSON.stringify(t)),t):(z.log("Product SKUs not found on basket page"),null)):(z.log("Unidentified page type"),null)},ue=function(){return navigator.sendBeacon&&"function"==typeof navigator.sendBeacon},le=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";if(!e)return"";var r=e.indexOf(t);if(r<0)return e;for(;e.indexOf(t)>=0;){var o=e.indexOf(t);e=(o>0?e.substring(0,o):"")+n+e.substring(o+t.length)}return e};function de(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return fe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?fe(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function fe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function pe(){return pe=c(u().mark((function e(t,n){var r,o,a,i,s,l,d,f;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:r=new I("Nextday Apply Treatments"),o=w,a=function(e){r.log("Applying treatment: ",JSON.stringify(e));var t=e.operator,a=e.type,c=e.applyEvent,s=e.contentSelector,u=e.selector,p=e.selectorFallback,v=e.mdCondition,h=e.move_selector_1,m=e.move_selector_2,y=e.replaceFn,w=e.value,b=$(u);if(!v||window.matchMedia(v).matches)if(h&&!m||m&&!h)r.log("Both move selectors are required");else{if(h&&m){if(!$(h).length)return void r.log("Move selector 1 not found: ",h);if(!$(m).length)return void r.log("Move selector 2 not found: ",m)}else{if(!u)return void r.log("Selector not specified");if(!b.length&&"no-selector"!==u&&(r.log("Selector not found: ",u),r.log("Trying fallback selector: ",p),p&&(b=$(p)),!b.length))return void r.log("Fallback selector not found")}var k=function(e,t){if(e&&t.includes("{{REPLACE}}")){r.log("Executing replace function: ",e);var o={dataLayerFinder:C,productInfo:n},a=Function(e).bind(o);t=le(t,"{{REPLACE}}",a())}return t};if(Array.isArray(w)?w.forEach((function(e,t){var n=y?y[t]||y:"";w[t]=k(n,e)})):w=k(y,w),"remove"===t)b&&(r.log("Removing: ",u),b.remove()),r.log("Cannot found element with selector: ",u);else if("insert"===t)switch(a){case"before":r.log("Inserting before: ",w),String(w).includes("nd-add-to-win")&&$(".nd-add-to-win").remove(),b.before(w);break;case"after":r.log("Inserting after: ",w),b.after(w);break;case"popup":if(0!==parseInt(sessionStorage.getItem(o))){r.log("Popup already displayed in session");break}if(r.log("Creating Popup: ",w),d(w,s),c){var x,S=window.matchMedia(g).matches,I=de(c);try{for(I.s();!(x=I.n()).done;)switch(x.value){case"exitIntent":r.log("Adding exit intent listener"),S?Z(l):document.documentElement.addEventListener("mouseleave",l,{once:!0});break;case"copyIntent":r.log("Adding copy intent listener"),document.documentElement.addEventListener("copy",l,{once:!0})}}catch(e){I.e(e)}finally{I.f()}}else setTimeout((function(){l()}),timeout)}else if("edit"===t)switch(a){case"text":r.log("Editing text: ",w),b.text(w);break;case"html":r.log("Editing html: ",w),b.html(w);break;case"styleApplicator":r.log("Applying style: ",w);var L=JSON.parse(w);r.log("Style Changes Map: ",L),ee(b,L);break;case"addClass":r.log("addding class to ".concat(b," named ").concat(w)),b.addClass(w);break;case"removeClass":r.log("remove class from ".concat(b," named ").concat(w)),b.removeClass(w);break;case"documentTitle":if(r.log("changing document title from ".concat(b," to ").concat(w)),c){var O,A=de(c);try{for(A.s();!(O=A.n()).done;)"tabChange"==O.value&&function(){r.log("catching event tabchange..");var e=document.title;document.addEventListener("visibilitychange",(function(t){return i(t,w,e)}))}()}catch(e){A.e(e)}finally{A.f()}}break;case"addBanner":if(!n){r.log("Product info unavailable");break}r.log("Adding banner: ",w);var T=JSON.parse(sessionStorage.getItem("ND_SkuList"))[0];if(!T){r.log("Could not find product sku");break}Object.keys(n).includes(T)&&b.before(w);break;default:r.log("Unknown edit type: ",a)}else if("setattribute"===t)switch(r.log("Setting attribute: ",attribute,w),attribute){case"src":b.css("content","url(".concat(w.trim(),")"));break;case"style":var P=w.split(":")[0].trim(),E=w.split(":")[1].trim();b.css(P,E,"!important")}else if("replace"===t)r.log("Replacing: ",w),b.replaceAll(w);else if("swap"===t){r.log("Swapping: ",h,m);var _=document.querySelector(h),N=document.querySelector(m);f(_,N)}else if("injectscript"===t)r.log("Injecting script: ",w),b.append("<script>".concat(w,"<\/script>"));else if("move"===t){r.log("Moving ".concat(h," to ").concat(m));var j=document.querySelector(h),R=document.querySelector(m);j.remove(),R.prepend(j)}else"noop"===t?r.log("Noop Operator: No operation is applied on target "):r.log("No such operator exists yet",t)}else r.log("Media condition mismatch: ",v)},i=function(){var e=c(u().mark((function e(t,n,r){var o,a;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:o=Array.isArray(n)?n:[n],a=0;case 2:if(!(a<o.length)){e.next=16;break}if(!document.hidden){e.next=12;break}return document.title=o[a],e.next=7,ce(3e3);case 7:return document.title=r,e.next=10,ce(3e3);case 10:e.next=13;break;case 12:document.title=r;case 13:a++,e.next=2;break;case 16:if(document.hidden){e.next=21;break}return document.title=r,e.abrupt("return");case 21:i(t,n,r);case 22:case"end":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}(),s=function e(t){var n=t.target.id;n&&"nd-popup__wrapper"===n&&($("#nd-popup__wrapper").remove(),window.removeEventListener("click",e,!0))},l=function e(){sessionStorage.setItem(o,1);var t=document.querySelector("#grt-shadow-host");t&&(t.style.display="none"),document.getElementById("nd-popup__wrapper").style.display="block",window.addEventListener("click",s,!0),document.documentElement.removeEventListener("mouseleave",e,{once:!0}),document.documentElement.removeEventListener("copy",e,{once:!0}),setTimeout((function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",s,!0)}),15e3)},d=function(e,t){var n=document.createElement("div");n.classList.add("nd-popup__wrapper"),n.id="nd-popup__wrapper";var r=document.createElement("button");if(r.classList.add("nd-popup__button-close"),r.innerText="X",r.onclick=function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",s,!0)},t)for(var o=Array.from(document.querySelectorAll(t));e.includes("{{REPLACE}}")&&o.length>0;)e=e.replace("{{REPLACE}}",o.shift().src);var a=document.createElement("template");a.innerHTML=e.trim();var i=a.content.firstChild;i.appendChild(r),n.appendChild(i),$("#nd-popup__wrapper").remove(),document.body.appendChild(n)},f=function(e,t){var n,r,o=e.parentNode,a=t.parentNode;if(o&&a&&!o.isEqualNode(t)&&!a.isEqualNode(e)){for(var i=0;i<o.children.length;i++)o.children[i].isEqualNode(e)&&(n=i);for(var c=0;c<a.children.length;c++)a.children[c].isEqualNode(t)&&(r=c);o.isEqualNode(a)&&n<r&&r++,o.insertBefore(t,o.children[n]),a.insertBefore(e,a.children[r])}},function e(t){if(window.jQuery){var n,o=de(t);try{for(o.s();!(n=o.n()).done;){var i=n.value;try{a(i)}catch(e){r.log("Couldn't apply treatment ".concat(i.id," with error ").concat(e.message));continue}}}catch(e){o.e(e)}finally{o.f()}}else setTimeout((function(){e(t)}),10)}(t);case 10:case"end":return e.stop()}}),e)}))),pe.apply(this,arguments)}var ge=function(e,t){return pe.apply(this,arguments)};function ve(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function he(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ve(Object(n),!0).forEach((function(t){E(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ve(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var me=function(){function e(){l(this,e),this.logger=new I("Nextday Monitor"),this.logger.log("Initializing monitor"),this.appliedTreatmentsHash=null,this.appliedTreatmentsChanges=!1,this.eligibleNotAppliedTreatmentsHash=null,this.eligibleNotAppliedTreatmentsChanges=!1,this.headers={type:"application/json"},this.isLogged=!1,this.initializeExitEventListeners()}var t,n,r;return f(e,[{key:"sendLogs",value:(r=c(u().mark((function e(){var t,n,r,o=this,a=arguments;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=a.length>0&&void 0!==a[0]?a[0]:null,n=a.length>1&&void 0!==a[1]&&a[1],(r=this.logger).log("Sending logs"),"complete"!==document.readyState?(r.log("Document ready state is not complete"),window.addEventListener("load",(function(){r.log("In onload event"),o.handleQueueLogs(o.packageLogData(t),n)}),!0)):this.handleQueueLogs(this.packageLogData(t),n);case 5:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"handleQueueLogs",value:(n=c(u().mark((function e(t){var n,r=arguments;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r.length>1&&void 0!==r[1]&&r[1]||!this.isLogged){e.next=3;break}return e.abrupt("return");case 3:if(n=this.logger,t){e.next=7;break}return n.log("Could not create request blob"),e.abrupt("return");case 7:return n.log("Request blob to send: ",t),this.queueLogs(t),this.isLogged=!0,e.next=12,X(JSON.stringify(window.beagleInfoLayer.a));case 12:return this.appliedTreatmentsHash=e.sent,e.next=15,X(JSON.stringify(window.beagleInfoLayer.e));case 15:this.eligibleNotAppliedTreatmentsHash=e.sent;case 16:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})},{key:"updateLatestChanges",value:(t=c(u().mark((function e(){var t,n;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this.logger.log("Checking if there are changes"),e.next=4,X(JSON.stringify(window.beagleInfoLayer.a));case 4:return t=e.sent,e.next=7,X(JSON.stringify(window.beagleInfoLayer.e));case 7:n=e.sent,t!==this.appliedTreatmentsHash&&(this.appliedTreatmentsChanges=!0,this.appliedTreatmentsHash=t),n!==this.eligibleNotAppliedTreatmentsHash&&(this.eligibleNotAppliedTreatmentsChanges=!0,this.eligibleNotAppliedTreatmentsHash=n);case 10:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"packageLogData",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=this.headers,n=he({},window.beagleInfoLayer),r=e||(Object.keys(n.a||{}).length?"Treatments applied":"No treatments applied");return n.t=Date.now(),n.m=r,new Blob([JSON.stringify(n)],t)}},{key:"packageUpdateLogData",value:function(){var e=this.headers,t=this.appliedTreatmentsChanges,n=this.eligibleNotAppliedTreatmentsChanges;if(!t&&!n)return!1;var r={t:Date.now(),a:t?window.beagleInfoLayer.a:{},e:n?window.beagleInfoLayer.e:{},vId:window.beagleInfoLayer.vId};return new Blob([JSON.stringify(r)],e)}},{key:"initializeExitEventListeners",value:function(){var e=this,t=this.logger,n=!1;t.log("Initializing exit event listener"),window.addEventListener("beforeunload",(function(){if(e.isLogged){if(!n){n=!0,t.log("In beforeunload event");var r=e.packageUpdateLogData();r?e.queueLogs(r):t.log("No changes to log")}}else e.handleQueueLogs(e.packageLogData())}),{capture:!0}),window.addEventListener("pagehide",(function(){if(e.isLogged){if(!n){n=!0,t.log("In pagehide event");var r=e.packageUpdateLogData();r?e.queueLogs(r):t.log("No changes to log")}}else e.handleQueueLogs(e.packageLogData())}),{capture:!0})}},{key:"queueLogs",value:function(e){var t=this.logger;if(ue()){var n=navigator.sendBeacon(p,e),r=setInterval((function(){n?(clearInterval(r),t.log("Logs queued successfully")):n=navigator.sendBeacon(p,e)}),10);setTimeout((function(){clearInterval(r),n||t.log("Logs not queued")}),1e3)}else fetch(p,e)}}]),e}(),ye=me,we=new I("Nextday Treatment Repository"),be=function(){function e(t){l(this,e);var n=t.cookiePct,r=t.treatments;this.treatments=r,this.cookiePct=n}var t;return f(e,[{key:"getMatchedTreatments",value:function(){var e=this.getUserSegment(),t=this.treatments.filter((function(t){return t.apply_on_user_segment==e||"*"===t.apply_on_user_segment}));return we.log("".concat(t.length," treatments segment matched")),t.length?t:[]}},{key:"getUserSegment",value:function(){if(-1===this.cookiePct)throw we.log("New user has no segment"),new Error("New User");return this.cookiePct<50?"A":"B"}}],[{key:"getTreatments",value:(t=c(u().mark((function e(){var t,n,r,o,a,i;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(we.log("Loading treatments"),t="ND_Treatments",n=JSON.parse(window.sessionStorage.getItem(t)),r=null==n?void 0:n.treatments,o=null==n?void 0:n.timestamp,r&&o){e.next=13;break}return we.log("Treatments not found in local storage"),e.next=9,Q();case 9:return r=e.sent,a={timestamp:Date.now(),treatments:r},window.sessionStorage.setItem(t,JSON.stringify(a)),e.abrupt("return",r);case 13:if(!o){e.next=23;break}if(!((Date.now()-o)/864e5>1)){e.next=23;break}return we.log("Treatments are expired"),e.next=19,Q();case 19:return r=e.sent,i={timestamp:Date.now(),treatments:r},window.sessionStorage.setItem(t,JSON.stringify(i)),e.abrupt("return",r);case 23:return we.log("Treatments are loaded from local storage"),e.abrupt("return",r);case 25:case"end":return e.stop()}}),e)}))),function(){return t.apply(this,arguments)})}]),e}(),ke=be,xe=new I("Nextday Counter Checker"),Se=function(e){xe.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"pageView":return Le(n,r);case"CABasketPrice":return Oe(n,r);default:return xe.log("No such operator",t),!1}},Ie=function(e,t){try{switch(t){case"session":return sessionStorage.getItem(e);case"local":return localStorage.getItem(e);default:return xe.log("No such type",t),null}}catch(t){return xe.log("Could not get counter ".concat(e),t),null}},Le=function(e,t){var n=parseInt(Ie(y,"session"));return xe.log("Page views counter value: ",n),null===n?(xe.log("Pageviews counter not found in session storage"),!1):re(n,e,parseInt(t))},Oe=function(e,t){var n=parseInt(Ie(k,"local"));return xe.log("Coupon applicable basket price counter value: ",n),null===n?(xe.log("Coupon applicable basket price counter not found in local storage"),!1):re(n,e,parseInt(t))},Ae=new I("Nextday Element Checker"),Ce=function(e){Ae.log("Checking rule",JSON.stringify(e));var t,n=e.operator,r=e.condition,o=e.value,a=e.selector,i=e.selectorAll,c=e.selectorFallback,s=void 0===c?null:c,u=a;if(u&&!document.querySelector(u)&&(u=s||u),null===n)return re(document.querySelector(u),r,o);if(u&&!document.querySelector(u))return Ae.log("Selector not found on page"),!1;if(i&&!document.querySelectorAll(i))return Ae.log("Selector not found on page"),!1;switch(u?t=document.querySelector(u):i&&(t=Array.from(document.querySelectorAll(i))),n){case"text-number":var l;l=Array.isArray(t)?t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0):parseInt(document.querySelector(u).textContent.replace("TL","").replace(".",""));var d=parseInt(l);return re(d,r,o);case"classList":return re(Array.from(t.classList),r,o);case"count":var f=Array.isArray(t)?t.length:t?1:0;return re(f,r,o);default:return Ae.log("Operator not defined"),!1}},Te=new I("Nextday Function Checker"),Pe=function(e,t){Te.log("Checking rule",JSON.stringify(e));var n=t.productInfo,r=e.operator,o=e.condition,a=e.value,i=e.bindings;if(!r)return Te.log("Rule function not defined"),!1;var c={};"productInfo"==i&&(c={productInfo:n});var s=Function(r).bind(c)();return re(s,o,a)},Ee=new I("Nextday Session Checker"),_e=function(e){Ee.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"duration":return Ne(n,r);case"history":return je(n,r);default:return null}},Ne=function(e,t){var n=(Date.now()-function(){try{return new Date(parseInt(window.sessionStorage.getItem(h)))}catch(e){return Ee.log("Could not get session timestamp",e),Date.now()}}())/1e3;return re(n,e,parseInt(t))},je=function(e,t){var n,r=null===(n=window.sessionStorage.getItem(m))||void 0===n?void 0:n.split(",");return re(r,e,t)},Re=new I("Nextday Env Checker"),De=function(e){Re.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("device_type"===t){var o=window.matchMedia(g).matches?"mobile":"desktop";return re(o,n,r)}},qe=new I("Nextday RandomPct Checker"),Ve=function(){var e=c(u().mark((function e(t){var n,r,o,a,i,c;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(qe.log("Checking rule",JSON.stringify(t)),n=t.condition,r=t.value,o=t.salt){e.next=5;break}return qe.log("Salt is not defined"),e.abrupt("return",!1);case 5:return e.next=7,ie();case 7:return a=e.sent,e.next=10,Y(a+o);case 10:return i=e.sent,c=i,e.abrupt("return",re(c,n,r));case 13:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();function Ue(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Me(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Me(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function Me(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Fe=new I("Nextday Rule Engine"),Be=function(){function e(t){l(this,e);var n=t.baseRuleSet,r=t.subVariantRuleSet,o=t.bindings,a=t.callback,i=void 0===a?null:a;this.baseRuleSet=n,this.subVariantRuleSet=r,this.callback=i,this.bindings=o}var t,n,r;return f(e,[{key:"checkRules",value:(r=c(u().mark((function e(){var t,n,r;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=Ue(this.baseRuleSet),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=12;break}return r=n.value,e.next=7,this.checkRule(r);case 7:if(e.sent){e.next=10;break}return e.abrupt("return",!1);case 10:e.next=3;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(1),t.e(e.t0);case 17:return e.prev=17,t.f(),e.finish(17);case 20:return e.abrupt("return",!0);case 21:case"end":return e.stop()}}),e,this,[[1,14,17,20]])}))),function(){return r.apply(this,arguments)})},{key:"checkSubVariantRules",value:(n=c(u().mark((function e(){var t,n,r;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=Ue(this.subVariantRuleSet),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=12;break}return r=n.value,e.next=7,this.checkRule(r);case 7:if(!e.sent){e.next=10;break}return e.abrupt("return",r.subVariantId);case 10:e.next=3;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(1),t.e(e.t0);case 17:return e.prev=17,t.f(),e.finish(17);case 20:return e.abrupt("return",null);case 21:case"end":return e.stop()}}),e,this,[[1,14,17,20]])}))),function(){return n.apply(this,arguments)})},{key:"checkRule",value:(t=c(u().mark((function e(t){var n,r,o,a;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=t.chain,r=t.chain_condition,o=t.type,a=null,e.t0=o,e.next="session"===e.t0?5:"counter"===e.t0?7:"element"===e.t0?9:"dataLayer"===e.t0?11:"url"===e.t0?13:"function"===e.t0?15:"environment"===e.t0?17:"random"===e.t0?19:23;break;case 5:return a=_e(t),e.abrupt("break",25);case 7:return a=Se(t),e.abrupt("break",25);case 9:return a=Ce(t),e.abrupt("break",25);case 11:return a=A(t),e.abrupt("break",25);case 13:return a=P(t),e.abrupt("break",25);case 15:return a=Pe(t,this.bindings),e.abrupt("break",25);case 17:return a=De(t),e.abrupt("break",25);case 19:return e.next=21,Ve(t);case 21:return a=e.sent,e.abrupt("break",25);case 23:return Fe.log("No such rule type: ".concat(o)),e.abrupt("return",null);case 25:if(!n){e.next=51;break}e.t1=r,e.next="and"===e.t1?29:"or"===e.t1?36:"xor"===e.t1?43:49;break;case 29:if(e.t2=a,!e.t2){e.next=34;break}return e.next=33,this.checkRule(n);case 33:e.t2=e.sent;case 34:return a=e.t2,e.abrupt("break",51);case 36:if(e.t3=a,e.t3){e.next=41;break}return e.next=40,this.checkRule(n);case 40:e.t3=e.sent;case 41:return a=e.t3,e.abrupt("break",51);case 43:return e.t4=a,e.next=46,this.checkRule(n);case 46:return e.t5=e.sent,a=e.t4!=e.t5,e.abrupt("break",51);case 49:return Fe.log("No such chain condition"),e.abrupt("break",51);case 51:return e.abrupt("return",a);case 52:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})}]),e}(),Je=new I("Nextday Api"),Ge=function(){var e=c(u().mark((function e(){var t,n,r;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Je.log("Starting product info lookup"),t=se()){e.next=5;break}return Je.log("No sku found"),e.abrupt("return",null);case 5:return(n=new Headers).append("Content-Type","application/json"),e.prev=7,e.next=10,fetch("https://catalog-api.adoraai.com",{method:"POST",body:JSON.stringify(t),headers:n,mode:"cors"});case 10:r=e.sent,e.next=17;break;case 13:return e.prev=13,e.t0=e.catch(7),Je.warn("Fetch to catalog api failed"),e.abrupt("return",null);case 17:if(r.ok){e.next=20;break}return Je.log("Product info lookup failed"),e.abrupt("return",null);case 20:return e.next=22,r.json();case 22:if(r=e.sent){e.next=26;break}return Je.log("Product info extraction from response failed"),e.abrupt("return",null);case 26:return Je.log("Product info lookup successful"),e.abrupt("return",r);case 28:case"end":return e.stop()}}),e,null,[[7,13]])})));return function(){return e.apply(this,arguments)}}();function He(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return $e(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?$e(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function $e(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}c(u().mark((function t(){var n,r,i,s,l;return u().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return M(q.BeagleLoaded),n=null,r=new I,i="ND_TimeoutCount",s=0,r.info("Nextday initializing"),t.prev=6,t.delegateYield(u().mark((function e(){var t,l,d,f,p,b,x,S,I,L,O,A,C,T,P,E,_,N,j,R,D,V,J,G,H,$,z,Q;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return U(),d=Ge(),f=ae(),n=new ye,M(q.Initialized),e.next=7,ie();case 7:return p=e.sent,r.log("Found cookie identifier: ",p),e.next=11,Y(p);case 11:if(b=e.sent,f){e.next=29;break}if(!(b<50)){e.next=19;break}if(-1!==b){e.next=16;break}throw new Error("Could not determine cookie pct");case 16:F("isOn",!1),e.next=20;break;case 19:F("isOn",!0);case 20:if(M(q.UserOnOff),ue()){e.next=23;break}throw new Error("sendBeacon is not supported");case 23:if(!((s=parseInt(sessionStorage.getItem(i))||0)>1)){e.next=27;break}throw M(q.TimeoutThresholdReached),new Error("Nextday timeout threshold reached");case 27:e.next=30;break;case 29:r.info("Debug mode on: all applicable treatments will be applied");case 30:if(document.documentElement.classList.contains("nextDay-hide")){e.next=34;break}throw M(q.ScriptTimeOut),sessionStorage.setItem(i,s+1),new Error("Nextday script timed out");case 34:if(window.dataLayer=window.dataLayer||[],!0===(null===(t=window.beagleInfoLayer)||void 0===t?void 0:t.isOn)?window.dataLayer.push({event:"GLOV",GLOV_ON:"true"}):!1===(null===(l=window.beagleInfoLayer)||void 0===l?void 0:l.isOn)&&window.dataLayer.push({event:"GLOV",GLOV_ON:"false"}),!1!==window.beagleInfoLayer.isOn){e.next=38;break}throw new Error("Control group: no treatments applied");case 38:return n.sendLogs(),x=window.location.search,S=f&&x.includes("filter=")?x.slice(x.indexOf("[")+1,x.lastIndexOf("]")).split(",").map((function(e){return parseInt(e,10)})):null,te(),void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,W=y,X=w,Z=v,ee=h,re=m,oe=sessionStorage.getItem(W),ce=sessionStorage.getItem(X),se=sessionStorage.getItem(Z),le=sessionStorage.getItem(ee),de=sessionStorage.getItem(re),oe?sessionStorage.setItem(W,parseInt(oe)+1):sessionStorage.setItem(W,1),null===ce&&sessionStorage.setItem(X,0),se||sessionStorage.setItem(Z,crypto.randomUUID()),le||sessionStorage.setItem(ee,Date.now()),de?sessionStorage.setItem(re,[window.location.pathname,de]):sessionStorage.setItem(re,[window.location.pathname]),setTimeout((function(){K()}),2e3),I=ke.getTreatments(),L=window.matchMedia(g).matches,O={subtree:!0,childList:!0,attributes:!0},A=function(){var e=c(u().mark((function e(t){var n,o,i,c,s,l,d,g,v,h,m,y,w,b,k,x,I,O,A,C,T;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=t.id,o=t.actions,i=t.baseRuleSet,c=t.device,s=t.dependant_on_treatment,l=t.reapply_event,d=t.subVariantRuleSet,g=t.weight,!S||S.includes(n)){e.next=3;break}return e.abrupt("return");case 3:if("mobile"!==c||L){e.next=6;break}return r.log("Treatment device 'mobile' mismatch"),e.abrupt("return");case 6:if("desktop"!==c||!L){e.next=9;break}return r.log("Treatment device 'desktop' mismatch"),e.abrupt("return");case 9:if(l){v=l,Array.isArray(l)||(v=[l]),r.log("Reapply event '".concat(l,"' found for treatment: ").concat(n)),h=He(v);try{for(h.s();!(m=h.n()).done;)y=m.value,(w=V[y]?V[y]:[]).includes(n)?r.log("Treatment already added for reapply event"):V[y]=[].concat(a(w),[n])}catch(e){h.e(e)}finally{h.f()}}if(b=new Be({baseRuleSet:i,subVariantRuleSet:d,bindings:{productInfo:j}}),r.log("Starting base rule set check for treatment: "+n),e.t0=!i,e.t0){e.next=18;break}return e.next=17,b.checkRules();case 17:e.t0=e.sent;case 18:if(!e.t0){e.next=50;break}if(k=100===g?0:100-g||50,s&&(I=null===(x=D.find((function(e){return e.id===s})))||void 0===x?void 0:x.weight,k=100===I?0:100-I||50),r.log("Treatment skip ratio: "+k),O=s||n,1!==f){e.next=27;break}e.t1=100,e.next=30;break;case 27:return e.next=29,Y(p+O);case 29:e.t1=e.sent;case 30:if(A=e.t1,r.log("TreatmentPct: "+A+" with debug mode ".concat(f?"on":"off")),C=null,T=o,!d){e.next=40;break}return r.log("Starting sub variant rule set check for treatment: "+n),e.next=38,b.checkSubVariantRules();case 38:(C=e.sent)?(r.log("Applying sub variant with id: ",C),T=ne(o,C)):r.log("Applying treatment with default values");case 40:if(!(A<k)){e.next=46;break}return r.log("Treatment ".concat(n," skipped due to treatment split ratio")),u=n,P={dependant_on_treatment:s||null,subVariantId:C},window.beagleInfoLayer.e[u]=P,e.abrupt("return");case 46:return e.next=48,ge(T,j);case 48:return B(n,{subVariantId:C}),e.abrupt("return");case 50:r.log("Rule check failed for treatment: ",n);case 51:case"end":return e.stop()}var u,P}),e)})));return function(t){return e.apply(this,arguments)}}(),(C=function(){var e=k;if(window.location.href.includes("/siparis-listesi.html")){var t=Array.from(document.querySelectorAll(".price"));if(t.push.apply(t,a(Array.from(document.querySelectorAll(".new-price")))),!t.length)return r.log("Price elements not found"),void window.localStorage.setItem(e,0);r.log("Price elements: ",t);var n=t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0);r.log("Coupon applicable total price: ",n),n>=0&&window.localStorage.setItem(e,n)}else(window.location.href.includes("/siparis-ozeti.html")||null===window.localStorage.getItem(e))&&window.localStorage.setItem(e,0)})(),window.location.href.includes("/siparis-listesi.html")&&(T=new MutationObserver((function(){r.log("Mutation observed, calling collectCABasketPrice"),C()})),(P=document.querySelector("#checkoutForm"))&&T.observe(P,O)),e.next=53,Promise.all([I,d]);case 53:if(E=e.sent,_=o(E,2),N=_[0],j=_[1],r.log("Found treatments: ",N),r.log("Found cookie percentage: ",b),r.log("Split_ratio: ",50),r.log("cookiePct < SPLIT_RATIO",b<50),r.info("Control group ratio: ".concat(50,"%")),R=new ke({treatments:N,cookiePct:b}),M(q.TreatmentRepositoryCreated),(D=R.getMatchedTreatments()).length){e.next=69;break}return r.log("No treatments matched, returning without further action"),K(),e.abrupt("return",{v:void 0});case 69:V={},J=He(D),e.prev=71,J.s();case 73:if((G=J.n()).done){e.next=85;break}return H=G.value,e.prev=75,e.next=78,A(H);case 78:e.next=83;break;case 80:e.prev=80,e.t0=e.catch(75),r.log("Error executing rules",e.t0);case 83:e.next=73;break;case 85:e.next=90;break;case 87:e.prev=87,e.t1=e.catch(71),J.e(e.t1);case 90:return e.prev=90,J.f(),e.finish(90);case 93:for(K(),M(q.TreatmentsApplied),r.log("Applied treatments: ",window.beagleInfoLayer.a),setInterval((function(){n.updateLatestChanges()}),1e3),$=function(){var e=Q[z],t=V[e],n=D.filter((function(e){return t.includes(e.id)}));switch(e){case"infinite_scroll":var o=new ResizeObserver((function(){var e,t=He(n);try{for(t.s();!(e=t.n()).done;){var o=e.value;r.log("Retrying treatment ".concat(o.id," from infinite_scroll")),A(o)}}catch(e){t.e(e)}finally{t.f()}}));o.observe(document.documentElement);break;case"timeout":setTimeout((function(){var e,t=He(n);try{for(t.s();!(e=t.n()).done;){var o=e.value;r.log("Retrying treatment ".concat(o.id," from timeout")),A(o)}}catch(e){t.e(e)}finally{t.f()}}),500);break;case"element_change":var a,i=He(n);try{var c=function(){var e,t=a.value,n=He(Array.isArray(t.reapply_selector)?t.reapply_selector:[t.reapply_selector]);try{for(n.s();!(e=n.n()).done;){var o=e.value,i=document.querySelector(o);i&&new MutationObserver((function(){r.log("Retrying treatment ".concat(t.id," from element_change")),A(t)})).observe(i,O)}}catch(e){n.e(e)}finally{n.f()}};for(i.s();!(a=i.n()).done;)c()}catch(e){i.e(e)}finally{i.f()}break;case"on_scroll":window.onscroll=function(){var e,t=He(n);try{for(t.s();!(e=t.n()).done;){var o=e.value;r.log("Retrying treatment ".concat(o.id," from on_scroll")),A(o)}}catch(e){t.e(e)}finally{t.f()}};break;case"query_search_change":var s=window.location.search,u=new MutationObserver((function(){if(window.location.search!==s){s=window.location.search;var e,t=He(n);try{for(t.s();!(e=t.n()).done;){var o=e.value;r.log("Retrying treatment ".concat(o.id," from query_search_change")),A(o)}}catch(e){t.e(e)}finally{t.f()}}}));u.observe(document,O);break;default:r.log("Reapply event not found: ",e)}},z=0,Q=Object.keys(V);z<Q.length;z++)$();M(q.ReapplyTreatmentListeners);case 100:case"end":return e.stop()}var W,X,Z,ee,re,oe,ce,se,le,de}),e,null,[[71,87,90,93],[75,80]])}))(),"t0",8);case 8:if("object"!==e(l=t.t0)){t.next=11;break}return t.abrupt("return",l.v);case 11:t.next=18;break;case 13:t.prev=13,t.t1=t.catch(6),K(),console.warn("Nextday: ",t.t1.message),n.sendLogs(t.t1.message,!0);case 18:case"end":return t.stop()}}),t,null,[[6,13]])})))()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJ1Q0FBQUEsRUFBT0MsUUFBVSxFQUFqQixNLGdCQ09BLElBQUlDLEVBQVcsU0FBVUQsR0FDdkIsYUFFQSxJQUVJRSxFQUZBQyxFQUFLQyxPQUFPQyxVQUNaQyxFQUFTSCxFQUFHSSxlQUVaQyxFQUE0QixtQkFBWEMsT0FBd0JBLE9BQVMsR0FDbERDLEVBQWlCRixFQUFRRyxVQUFZLGFBQ3JDQyxFQUFzQkosRUFBUUssZUFBaUIsa0JBQy9DQyxFQUFvQk4sRUFBUU8sYUFBZSxnQkFFL0MsU0FBU0MsRUFBT0MsRUFBS0MsRUFBS0MsR0FPeEIsT0FOQWYsT0FBT2dCLGVBQWVILEVBQUtDLEVBQUssQ0FDOUJDLE1BQU9BLEVBQ1BFLFlBQVksRUFDWkMsY0FBYyxFQUNkQyxVQUFVLElBRUxOLEVBQUlDLEdBRWIsSUFFRUYsRUFBTyxHQUFJLElBQ1gsTUFBT1EsR0FDUFIsRUFBUyxTQUFTQyxFQUFLQyxFQUFLQyxHQUMxQixPQUFPRixFQUFJQyxHQUFPQyxHQUl0QixTQUFTTSxFQUFLQyxFQUFTQyxFQUFTQyxFQUFNQyxHQUVwQyxJQUFJQyxFQUFpQkgsR0FBV0EsRUFBUXRCLHFCQUFxQjBCLEVBQVlKLEVBQVVJLEVBQy9FQyxFQUFZNUIsT0FBTzZCLE9BQU9ILEVBQWV6QixXQUN6QzZCLEVBQVUsSUFBSUMsRUFBUU4sR0FBZSxJQU16QyxPQUZBRyxFQUFVSSxRQXVNWixTQUEwQlYsRUFBU0UsRUFBTU0sR0FDdkMsSUFBSUcsRUFBUUMsRUFFWixPQUFPLFNBQWdCQyxFQUFRQyxHQUM3QixHQUFJSCxJQUFVSSxFQUNaLE1BQU0sSUFBSUMsTUFBTSxnQ0FHbEIsR0FBSUwsSUFBVU0sRUFBbUIsQ0FDL0IsR0FBZSxVQUFYSixFQUNGLE1BQU1DLEVBS1IsT0FBT0ksSUFNVCxJQUhBVixFQUFRSyxPQUFTQSxFQUNqQkwsRUFBUU0sSUFBTUEsSUFFRCxDQUNYLElBQUlLLEVBQVdYLEVBQVFXLFNBQ3ZCLEdBQUlBLEVBQVUsQ0FDWixJQUFJQyxFQUFpQkMsRUFBb0JGLEVBQVVYLEdBQ25ELEdBQUlZLEVBQWdCLENBQ2xCLEdBQUlBLElBQW1CRSxFQUFrQixTQUN6QyxPQUFPRixHQUlYLEdBQXVCLFNBQW5CWixFQUFRSyxPQUdWTCxFQUFRZSxLQUFPZixFQUFRZ0IsTUFBUWhCLEVBQVFNLFNBRWxDLEdBQXVCLFVBQW5CTixFQUFRSyxPQUFvQixDQUNyQyxHQUFJRixJQUFVQyxFQUVaLE1BREFELEVBQVFNLEVBQ0ZULEVBQVFNLElBR2hCTixFQUFRaUIsa0JBQWtCakIsRUFBUU0sU0FFTixXQUFuQk4sRUFBUUssUUFDakJMLEVBQVFrQixPQUFPLFNBQVVsQixFQUFRTSxLQUduQ0gsRUFBUUksRUFFUixJQUFJWSxFQUFTQyxFQUFTNUIsRUFBU0UsRUFBTU0sR0FDckMsR0FBb0IsV0FBaEJtQixFQUFPRSxLQUFtQixDQU81QixHQUpBbEIsRUFBUUgsRUFBUXNCLEtBQ1piLEVBQ0FjLEVBRUFKLEVBQU9iLE1BQVFRLEVBQ2pCLFNBR0YsTUFBTyxDQUNMN0IsTUFBT2tDLEVBQU9iLElBQ2RnQixLQUFNdEIsRUFBUXNCLE1BR1MsVUFBaEJILEVBQU9FLE9BQ2hCbEIsRUFBUU0sRUFHUlQsRUFBUUssT0FBUyxRQUNqQkwsRUFBUU0sSUFBTWEsRUFBT2IsT0EvUVBrQixDQUFpQmhDLEVBQVNFLEVBQU1NLEdBRTdDRixFQWNULFNBQVNzQixFQUFTSyxFQUFJMUMsRUFBS3VCLEdBQ3pCLElBQ0UsTUFBTyxDQUFFZSxLQUFNLFNBQVVmLElBQUttQixFQUFHQyxLQUFLM0MsRUFBS3VCLElBQzNDLE1BQU9oQixHQUNQLE1BQU8sQ0FBRStCLEtBQU0sUUFBU2YsSUFBS2hCLElBaEJqQ3hCLEVBQVF5QixLQUFPQSxFQW9CZixJQUFJYSxFQUF5QixpQkFDekJtQixFQUF5QixpQkFDekJoQixFQUFvQixZQUNwQkUsRUFBb0IsWUFJcEJLLEVBQW1CLEdBTXZCLFNBQVNqQixLQUNULFNBQVM4QixLQUNULFNBQVNDLEtBSVQsSUFBSUMsRUFBb0IsR0FDeEIvQyxFQUFPK0MsRUFBbUJyRCxHQUFnQixXQUN4QyxPQUFPc0QsUUFHVCxJQUFJQyxFQUFXN0QsT0FBTzhELGVBQ2xCQyxFQUEwQkYsR0FBWUEsRUFBU0EsRUFBU0csRUFBTyxNQUMvREQsR0FDQUEsSUFBNEJoRSxHQUM1QkcsRUFBT3NELEtBQUtPLEVBQXlCekQsS0FHdkNxRCxFQUFvQkksR0FHdEIsSUFBSUUsRUFBS1AsRUFBMkJ6RCxVQUNsQzBCLEVBQVUxQixVQUFZRCxPQUFPNkIsT0FBTzhCLEdBWXRDLFNBQVNPLEVBQXNCakUsR0FDN0IsQ0FBQyxPQUFRLFFBQVMsVUFBVWtFLFNBQVEsU0FBU2hDLEdBQzNDdkIsRUFBT1gsRUFBV2tDLEdBQVEsU0FBU0MsR0FDakMsT0FBT3dCLEtBQUs1QixRQUFRRyxFQUFRQyxTQWtDbEMsU0FBU2dDLEVBQWN4QyxFQUFXeUMsR0FDaEMsU0FBU0MsRUFBT25DLEVBQVFDLEVBQUttQyxFQUFTQyxHQUNwQyxJQUFJdkIsRUFBU0MsRUFBU3RCLEVBQVVPLEdBQVNQLEVBQVdRLEdBQ3BELEdBQW9CLFVBQWhCYSxFQUFPRSxLQUVKLENBQ0wsSUFBSXNCLEVBQVN4QixFQUFPYixJQUNoQnJCLEVBQVEwRCxFQUFPMUQsTUFDbkIsT0FBSUEsR0FDaUIsaUJBQVZBLEdBQ1BiLEVBQU9zRCxLQUFLekMsRUFBTyxXQUNkc0QsRUFBWUUsUUFBUXhELEVBQU0yRCxTQUFTQyxNQUFLLFNBQVM1RCxHQUN0RHVELEVBQU8sT0FBUXZELEVBQU93RCxFQUFTQyxNQUM5QixTQUFTcEQsR0FDVmtELEVBQU8sUUFBU2xELEVBQUttRCxFQUFTQyxNQUkzQkgsRUFBWUUsUUFBUXhELEdBQU80RCxNQUFLLFNBQVNDLEdBSTlDSCxFQUFPMUQsTUFBUTZELEVBQ2ZMLEVBQVFFLE1BQ1AsU0FBU0ksR0FHVixPQUFPUCxFQUFPLFFBQVNPLEVBQU9OLEVBQVNDLE1BdkJ6Q0EsRUFBT3ZCLEVBQU9iLEtBNEJsQixJQUFJMEMsRUFnQ0psQixLQUFLNUIsUUE5QkwsU0FBaUJHLEVBQVFDLEdBQ3ZCLFNBQVMyQyxJQUNQLE9BQU8sSUFBSVYsR0FBWSxTQUFTRSxFQUFTQyxHQUN2Q0YsRUFBT25DLEVBQVFDLEVBQUttQyxFQUFTQyxNQUlqQyxPQUFPTSxFQWFMQSxFQUFrQkEsRUFBZ0JILEtBQ2hDSSxFQUdBQSxHQUNFQSxLQWtIVixTQUFTcEMsRUFBb0JGLEVBQVVYLEdBQ3JDLElBQUlLLEVBQVNNLEVBQVNsQyxTQUFTdUIsRUFBUUssUUFDdkMsR0FBSUEsSUFBV3JDLEVBQVcsQ0FLeEIsR0FGQWdDLEVBQVFXLFNBQVcsS0FFSSxVQUFuQlgsRUFBUUssT0FBb0IsQ0FFOUIsR0FBSU0sRUFBU2xDLFNBQWlCLFNBRzVCdUIsRUFBUUssT0FBUyxTQUNqQkwsRUFBUU0sSUFBTXRDLEVBQ2Q2QyxFQUFvQkYsRUFBVVgsR0FFUCxVQUFuQkEsRUFBUUssUUFHVixPQUFPUyxFQUlYZCxFQUFRSyxPQUFTLFFBQ2pCTCxFQUFRTSxJQUFNLElBQUk0QyxVQUNoQixrREFHSixPQUFPcEMsRUFHVCxJQUFJSyxFQUFTQyxFQUFTZixFQUFRTSxFQUFTbEMsU0FBVXVCLEVBQVFNLEtBRXpELEdBQW9CLFVBQWhCYSxFQUFPRSxLQUlULE9BSEFyQixFQUFRSyxPQUFTLFFBQ2pCTCxFQUFRTSxJQUFNYSxFQUFPYixJQUNyQk4sRUFBUVcsU0FBVyxLQUNaRyxFQUdULElBQUlxQyxFQUFPaEMsRUFBT2IsSUFFbEIsT0FBTTZDLEVBT0ZBLEVBQUs3QixNQUdQdEIsRUFBUVcsRUFBU3lDLFlBQWNELEVBQUtsRSxNQUdwQ2UsRUFBUXFELEtBQU8xQyxFQUFTMkMsUUFRRCxXQUFuQnRELEVBQVFLLFNBQ1ZMLEVBQVFLLE9BQVMsT0FDakJMLEVBQVFNLElBQU10QyxHQVVsQmdDLEVBQVFXLFNBQVcsS0FDWkcsR0FORXFDLEdBM0JQbkQsRUFBUUssT0FBUyxRQUNqQkwsRUFBUU0sSUFBTSxJQUFJNEMsVUFBVSxvQ0FDNUJsRCxFQUFRVyxTQUFXLEtBQ1pHLEdBb0RYLFNBQVN5QyxFQUFhQyxHQUNwQixJQUFJQyxFQUFRLENBQUVDLE9BQVFGLEVBQUssSUFFdkIsS0FBS0EsSUFDUEMsRUFBTUUsU0FBV0gsRUFBSyxJQUdwQixLQUFLQSxJQUNQQyxFQUFNRyxXQUFhSixFQUFLLEdBQ3hCQyxFQUFNSSxTQUFXTCxFQUFLLElBR3hCMUIsS0FBS2dDLFdBQVdDLEtBQUtOLEdBR3ZCLFNBQVNPLEVBQWNQLEdBQ3JCLElBQUl0QyxFQUFTc0MsRUFBTVEsWUFBYyxHQUNqQzlDLEVBQU9FLEtBQU8sZ0JBQ1BGLEVBQU9iLElBQ2RtRCxFQUFNUSxXQUFhOUMsRUFHckIsU0FBU2xCLEVBQVFOLEdBSWZtQyxLQUFLZ0MsV0FBYSxDQUFDLENBQUVKLE9BQVEsU0FDN0IvRCxFQUFZMEMsUUFBUWtCLEVBQWN6QixNQUNsQ0EsS0FBS29DLE9BQU0sR0E4QmIsU0FBU2hDLEVBQU9pQyxHQUNkLEdBQUlBLEVBQVUsQ0FDWixJQUFJQyxFQUFpQkQsRUFBUzNGLEdBQzlCLEdBQUk0RixFQUNGLE9BQU9BLEVBQWUxQyxLQUFLeUMsR0FHN0IsR0FBNkIsbUJBQWxCQSxFQUFTZCxLQUNsQixPQUFPYyxFQUdULElBQUtFLE1BQU1GLEVBQVNHLFFBQVMsQ0FDM0IsSUFBSUMsR0FBSyxFQUFHbEIsRUFBTyxTQUFTQSxJQUMxQixPQUFTa0IsRUFBSUosRUFBU0csUUFDcEIsR0FBSWxHLEVBQU9zRCxLQUFLeUMsRUFBVUksR0FHeEIsT0FGQWxCLEVBQUtwRSxNQUFRa0YsRUFBU0ksR0FDdEJsQixFQUFLL0IsTUFBTyxFQUNMK0IsRUFPWCxPQUhBQSxFQUFLcEUsTUFBUWpCLEVBQ2JxRixFQUFLL0IsTUFBTyxFQUVMK0IsR0FHVCxPQUFPQSxFQUFLQSxLQUFPQSxHQUt2QixNQUFPLENBQUVBLEtBQU0zQyxHQUlqQixTQUFTQSxJQUNQLE1BQU8sQ0FBRXpCLE1BQU9qQixFQUFXc0QsTUFBTSxHQStNbkMsT0E3bUJBSyxFQUFrQnhELFVBQVl5RCxFQUM5QjlDLEVBQU9xRCxFQUFJLGNBQWVQLEdBQzFCOUMsRUFBTzhDLEVBQTRCLGNBQWVELEdBQ2xEQSxFQUFrQjZDLFlBQWMxRixFQUM5QjhDLEVBQ0FoRCxFQUNBLHFCQWFGZCxFQUFRMkcsb0JBQXNCLFNBQVNDLEdBQ3JDLElBQUlDLEVBQXlCLG1CQUFYRCxHQUF5QkEsRUFBT0UsWUFDbEQsUUFBT0QsSUFDSEEsSUFBU2hELEdBRzJCLHVCQUFuQ2dELEVBQUtILGFBQWVHLEVBQUtFLFFBSWhDL0csRUFBUWdILEtBQU8sU0FBU0osR0FRdEIsT0FQSXhHLE9BQU82RyxlQUNUN0csT0FBTzZHLGVBQWVMLEVBQVE5QyxJQUU5QjhDLEVBQU9NLFVBQVlwRCxFQUNuQjlDLEVBQU80RixFQUFROUYsRUFBbUIsc0JBRXBDOEYsRUFBT3ZHLFVBQVlELE9BQU82QixPQUFPb0MsR0FDMUJ1QyxHQU9UNUcsRUFBUW1ILE1BQVEsU0FBUzNFLEdBQ3ZCLE1BQU8sQ0FBRXNDLFFBQVN0QyxJQXNFcEI4QixFQUFzQkUsRUFBY25FLFdBQ3BDVyxFQUFPd0QsRUFBY25FLFVBQVdPLEdBQXFCLFdBQ25ELE9BQU9vRCxRQUVUaEUsRUFBUXdFLGNBQWdCQSxFQUt4QnhFLEVBQVFvSCxNQUFRLFNBQVMxRixFQUFTQyxFQUFTQyxFQUFNQyxFQUFhNEMsUUFDeEMsSUFBaEJBLElBQXdCQSxFQUFjNEMsU0FFMUMsSUFBSUMsRUFBTyxJQUFJOUMsRUFDYi9DLEVBQUtDLEVBQVNDLEVBQVNDLEVBQU1DLEdBQzdCNEMsR0FHRixPQUFPekUsRUFBUTJHLG9CQUFvQmhGLEdBQy9CMkYsRUFDQUEsRUFBSy9CLE9BQU9SLE1BQUssU0FBU0YsR0FDeEIsT0FBT0EsRUFBT3JCLEtBQU9xQixFQUFPMUQsTUFBUW1HLEVBQUsvQixXQXVLakRqQixFQUFzQkQsR0FFdEJyRCxFQUFPcUQsRUFBSXZELEVBQW1CLGFBTzlCRSxFQUFPcUQsRUFBSTNELEdBQWdCLFdBQ3pCLE9BQU9zRCxRQUdUaEQsRUFBT3FELEVBQUksWUFBWSxXQUNyQixNQUFPLHdCQWtDVHJFLEVBQVF1SCxLQUFPLFNBQVNDLEdBQ3RCLElBQUlELEVBQU8sR0FDWCxJQUFLLElBQUlyRyxLQUFPc0csRUFDZEQsRUFBS3RCLEtBQUsvRSxHQU1aLE9BSkFxRyxFQUFLRSxVQUlFLFNBQVNsQyxJQUNkLEtBQU9nQyxFQUFLZixRQUFRLENBQ2xCLElBQUl0RixFQUFNcUcsRUFBS0csTUFDZixHQUFJeEcsS0FBT3NHLEVBR1QsT0FGQWpDLEVBQUtwRSxNQUFRRCxFQUNicUUsRUFBSy9CLE1BQU8sRUFDTCtCLEVBUVgsT0FEQUEsRUFBSy9CLE1BQU8sRUFDTCtCLElBc0NYdkYsRUFBUW9FLE9BQVNBLEVBTWpCakMsRUFBUTlCLFVBQVksQ0FDbEJ5RyxZQUFhM0UsRUFFYmlFLE1BQU8sU0FBU3VCLEdBY2QsR0FiQTNELEtBQUs0RCxLQUFPLEVBQ1o1RCxLQUFLdUIsS0FBTyxFQUdadkIsS0FBS2YsS0FBT2UsS0FBS2QsTUFBUWhELEVBQ3pCOEQsS0FBS1IsTUFBTyxFQUNaUSxLQUFLbkIsU0FBVyxLQUVoQm1CLEtBQUt6QixPQUFTLE9BQ2R5QixLQUFLeEIsSUFBTXRDLEVBRVg4RCxLQUFLZ0MsV0FBV3pCLFFBQVEyQixJQUVuQnlCLEVBQ0gsSUFBSyxJQUFJWixLQUFRL0MsS0FFUSxNQUFuQitDLEVBQUtjLE9BQU8sSUFDWnZILEVBQU9zRCxLQUFLSSxLQUFNK0MsS0FDakJSLE9BQU9RLEVBQUtlLE1BQU0sTUFDckI5RCxLQUFLK0MsR0FBUTdHLElBTXJCNkgsS0FBTSxXQUNKL0QsS0FBS1IsTUFBTyxFQUVaLElBQ0l3RSxFQURZaEUsS0FBS2dDLFdBQVcsR0FDTEcsV0FDM0IsR0FBd0IsVUFBcEI2QixFQUFXekUsS0FDYixNQUFNeUUsRUFBV3hGLElBR25CLE9BQU93QixLQUFLaUUsTUFHZDlFLGtCQUFtQixTQUFTK0UsR0FDMUIsR0FBSWxFLEtBQUtSLEtBQ1AsTUFBTTBFLEVBR1IsSUFBSWhHLEVBQVU4QixLQUNkLFNBQVNtRSxFQUFPQyxFQUFLQyxHQVluQixPQVhBaEYsRUFBT0UsS0FBTyxRQUNkRixFQUFPYixJQUFNMEYsRUFDYmhHLEVBQVFxRCxLQUFPNkMsRUFFWEMsSUFHRm5HLEVBQVFLLE9BQVMsT0FDakJMLEVBQVFNLElBQU10QyxLQUdObUksRUFHWixJQUFLLElBQUk1QixFQUFJekMsS0FBS2dDLFdBQVdRLE9BQVMsRUFBR0MsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUlkLEVBQVEzQixLQUFLZ0MsV0FBV1MsR0FDeEJwRCxFQUFTc0MsRUFBTVEsV0FFbkIsR0FBcUIsU0FBakJSLEVBQU1DLE9BSVIsT0FBT3VDLEVBQU8sT0FHaEIsR0FBSXhDLEVBQU1DLFFBQVU1QixLQUFLNEQsS0FBTSxDQUM3QixJQUFJVSxFQUFXaEksRUFBT3NELEtBQUsrQixFQUFPLFlBQzlCNEMsRUFBYWpJLEVBQU9zRCxLQUFLK0IsRUFBTyxjQUVwQyxHQUFJMkMsR0FBWUMsRUFBWSxDQUMxQixHQUFJdkUsS0FBSzRELEtBQU9qQyxFQUFNRSxTQUNwQixPQUFPc0MsRUFBT3hDLEVBQU1FLFVBQVUsR0FDekIsR0FBSTdCLEtBQUs0RCxLQUFPakMsRUFBTUcsV0FDM0IsT0FBT3FDLEVBQU94QyxFQUFNRyxpQkFHakIsR0FBSXdDLEdBQ1QsR0FBSXRFLEtBQUs0RCxLQUFPakMsRUFBTUUsU0FDcEIsT0FBT3NDLEVBQU94QyxFQUFNRSxVQUFVLE9BRzNCLEtBQUkwQyxFQU1ULE1BQU0sSUFBSTdGLE1BQU0sMENBTGhCLEdBQUlzQixLQUFLNEQsS0FBT2pDLEVBQU1HLFdBQ3BCLE9BQU9xQyxFQUFPeEMsRUFBTUcsZ0JBVTlCMUMsT0FBUSxTQUFTRyxFQUFNZixHQUNyQixJQUFLLElBQUlpRSxFQUFJekMsS0FBS2dDLFdBQVdRLE9BQVMsRUFBR0MsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUlkLEVBQVEzQixLQUFLZ0MsV0FBV1MsR0FDNUIsR0FBSWQsRUFBTUMsUUFBVTVCLEtBQUs0RCxNQUNyQnRILEVBQU9zRCxLQUFLK0IsRUFBTyxlQUNuQjNCLEtBQUs0RCxLQUFPakMsRUFBTUcsV0FBWSxDQUNoQyxJQUFJMEMsRUFBZTdDLEVBQ25CLE9BSUE2QyxJQUNVLFVBQVRqRixHQUNTLGFBQVRBLElBQ0RpRixFQUFhNUMsUUFBVXBELEdBQ3ZCQSxHQUFPZ0csRUFBYTFDLGFBR3RCMEMsRUFBZSxNQUdqQixJQUFJbkYsRUFBU21GLEVBQWVBLEVBQWFyQyxXQUFhLEdBSXRELE9BSEE5QyxFQUFPRSxLQUFPQSxFQUNkRixFQUFPYixJQUFNQSxFQUVUZ0csR0FDRnhFLEtBQUt6QixPQUFTLE9BQ2R5QixLQUFLdUIsS0FBT2lELEVBQWExQyxXQUNsQjlDLEdBR0ZnQixLQUFLeUUsU0FBU3BGLElBR3ZCb0YsU0FBVSxTQUFTcEYsRUFBUTBDLEdBQ3pCLEdBQW9CLFVBQWhCMUMsRUFBT0UsS0FDVCxNQUFNRixFQUFPYixJQWNmLE1BWG9CLFVBQWhCYSxFQUFPRSxNQUNTLGFBQWhCRixFQUFPRSxLQUNUUyxLQUFLdUIsS0FBT2xDLEVBQU9iLElBQ00sV0FBaEJhLEVBQU9FLE1BQ2hCUyxLQUFLaUUsS0FBT2pFLEtBQUt4QixJQUFNYSxFQUFPYixJQUM5QndCLEtBQUt6QixPQUFTLFNBQ2R5QixLQUFLdUIsS0FBTyxPQUNhLFdBQWhCbEMsRUFBT0UsTUFBcUJ3QyxJQUNyQy9CLEtBQUt1QixLQUFPUSxHQUdQL0MsR0FHVDBGLE9BQVEsU0FBUzVDLEdBQ2YsSUFBSyxJQUFJVyxFQUFJekMsS0FBS2dDLFdBQVdRLE9BQVMsRUFBR0MsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUlkLEVBQVEzQixLQUFLZ0MsV0FBV1MsR0FDNUIsR0FBSWQsRUFBTUcsYUFBZUEsRUFHdkIsT0FGQTlCLEtBQUt5RSxTQUFTOUMsRUFBTVEsV0FBWVIsRUFBTUksVUFDdENHLEVBQWNQLEdBQ1AzQyxJQUtiLE1BQVMsU0FBUzRDLEdBQ2hCLElBQUssSUFBSWEsRUFBSXpDLEtBQUtnQyxXQUFXUSxPQUFTLEVBQUdDLEdBQUssSUFBS0EsRUFBRyxDQUNwRCxJQUFJZCxFQUFRM0IsS0FBS2dDLFdBQVdTLEdBQzVCLEdBQUlkLEVBQU1DLFNBQVdBLEVBQVEsQ0FDM0IsSUFBSXZDLEVBQVNzQyxFQUFNUSxXQUNuQixHQUFvQixVQUFoQjlDLEVBQU9FLEtBQWtCLENBQzNCLElBQUlvRixFQUFTdEYsRUFBT2IsSUFDcEIwRCxFQUFjUCxHQUVoQixPQUFPZ0QsR0FNWCxNQUFNLElBQUlqRyxNQUFNLDBCQUdsQmtHLGNBQWUsU0FBU3ZDLEVBQVVmLEVBQVlFLEdBYTVDLE9BWkF4QixLQUFLbkIsU0FBVyxDQUNkbEMsU0FBVXlELEVBQU9pQyxHQUNqQmYsV0FBWUEsRUFDWkUsUUFBU0EsR0FHUyxTQUFoQnhCLEtBQUt6QixTQUdQeUIsS0FBS3hCLElBQU10QyxHQUdOOEMsSUFRSmhELEVBOXNCSyxDQXF0QmlCRCxFQUFPQyxTQUd0QyxJQUNFNkksbUJBQXFCNUksRUFDckIsTUFBTzZJLEdBV21CLGlCQUFmQyxXQUNUQSxXQUFXRixtQkFBcUI1SSxFQUVoQytJLFNBQVMsSUFBSyx5QkFBZEEsQ0FBd0MvSSxNQzl1QnhDZ0osRUFBMkIsR0FHL0IsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQmpKLElBQWpCa0osRUFDSCxPQUFPQSxFQUFhcEosUUFHckIsSUFBSUQsRUFBU2tKLEVBQXlCRSxHQUFZLENBR2pEbkosUUFBUyxJQU9WLE9BSEFxSixFQUFvQkYsR0FBVXBKLEVBQVFBLEVBQU9DLFFBQVNrSixHQUcvQ25KLEVBQU9DLFFDcEJma0osRUFBb0JJLEVBQUksU0FBU3ZKLEdBQ2hDLElBQUl3SixFQUFTeEosR0FBVUEsRUFBT3lKLFdBQzdCLFdBQWEsT0FBT3pKLEVBQWdCLFNBQ3BDLFdBQWEsT0FBT0EsR0FFckIsT0FEQW1KLEVBQW9CTyxFQUFFRixFQUFRLENBQUVHLEVBQUdILElBQzVCQSxHQ0xSTCxFQUFvQk8sRUFBSSxTQUFTekosRUFBUzJKLEdBQ3pDLElBQUksSUFBSXpJLEtBQU95SSxFQUNYVCxFQUFvQlUsRUFBRUQsRUFBWXpJLEtBQVNnSSxFQUFvQlUsRUFBRTVKLEVBQVNrQixJQUM1RWQsT0FBT2dCLGVBQWVwQixFQUFTa0IsRUFBSyxDQUFFRyxZQUFZLEVBQU13SSxJQUFLRixFQUFXekksTUNKM0VnSSxFQUFvQlUsRUFBSSxTQUFTM0ksRUFBSzZJLEdBQVEsT0FBTzFKLE9BQU9DLFVBQVVFLGVBQWVxRCxLQUFLM0MsRUFBSzZJLEksd0JDQWhGLFNBQVNDLEVBQVE5SSxHQUc5QixPQUFPOEksRUFBVSxtQkFBcUJ0SixRQUFVLGlCQUFtQkEsT0FBT0UsU0FBVyxTQUFVTSxHQUM3RixjQUFjQSxHQUNaLFNBQVVBLEdBQ1osT0FBT0EsR0FBTyxtQkFBcUJSLFFBQVVRLEVBQUk2RixjQUFnQnJHLFFBQVVRLElBQVFSLE9BQU9KLFVBQVksZ0JBQWtCWSxHQUN2SDhJLEVBQVE5SSxHQ1BFLFNBQVMrSSxFQUFrQkMsRUFBS0MsSUFDbEMsTUFBUEEsR0FBZUEsRUFBTUQsRUFBSXpELFVBQVEwRCxFQUFNRCxFQUFJekQsUUFFL0MsSUFBSyxJQUFJQyxFQUFJLEVBQUcwRCxFQUFPLElBQUlDLE1BQU1GLEdBQU16RCxFQUFJeUQsRUFBS3pELElBQzlDMEQsRUFBSzFELEdBQUt3RCxFQUFJeEQsR0FHaEIsT0FBTzBELEVDTk0sU0FBU0UsRUFBNEJULEVBQUdVLEdBQ3JELEdBQUtWLEVBQUwsQ0FDQSxHQUFpQixpQkFBTkEsRUFBZ0IsT0FBTyxFQUFpQkEsRUFBR1UsR0FDdEQsSUFBSWhCLEVBQUlsSixPQUFPQyxVQUFVa0ssU0FBUzNHLEtBQUtnRyxHQUFHOUIsTUFBTSxHQUFJLEdBRXBELE1BRFUsV0FBTndCLEdBQWtCTSxFQUFFOUMsY0FBYXdDLEVBQUlNLEVBQUU5QyxZQUFZQyxNQUM3QyxRQUFOdUMsR0FBcUIsUUFBTkEsRUFBb0JjLE1BQU1JLEtBQUtaLEdBQ3hDLGNBQU5OLEdBQXFCLDJDQUEyQ21CLEtBQUtuQixHQUFXLEVBQWlCTSxFQUFHVSxRQUF4RyxHQ0hhLFNBQVNJLEVBQWVULEVBQUt4RCxHQUMxQyxPQ0xhLFNBQXlCd0QsR0FDdEMsR0FBSUcsTUFBTU8sUUFBUVYsR0FBTSxPQUFPQSxFREl4QixDQUFlQSxJRUxULFNBQStCQSxFQUFLeEQsR0FDakQsSUFBSW1FLEVBQVksTUFBUFgsRUFBYyxLQUF5QixvQkFBWHhKLFFBQTBCd0osRUFBSXhKLE9BQU9FLFdBQWFzSixFQUFJLGNBRTNGLEdBQVUsTUFBTlcsRUFBSixDQUNBLElBSUlDLEVBQUlDLEVBSkpDLEVBQU8sR0FDUEMsR0FBSyxFQUNMQyxHQUFLLEVBSVQsSUFDRSxJQUFLTCxFQUFLQSxFQUFHaEgsS0FBS3FHLEtBQVFlLEdBQU1ILEVBQUtELEVBQUdyRixRQUFRL0IsUUFDOUN1SCxFQUFLOUUsS0FBSzRFLEVBQUcxSixRQUVUc0YsR0FBS3NFLEVBQUt2RSxTQUFXQyxHQUg0QnVFLEdBQUssSUFLNUQsTUFBT3hKLEdBQ1B5SixHQUFLLEVBQ0xILEVBQUt0SixFQUNMLFFBQ0EsSUFDT3dKLEdBQXNCLE1BQWhCSixFQUFXLFFBQVdBLEVBQVcsU0FDNUMsUUFDQSxHQUFJSyxFQUFJLE1BQU1ILEdBSWxCLE9BQU9DLEdGdEJ1QixDQUFxQmQsRUFBS3hELElBQU0sRUFBMkJ3RCxFQUFLeEQsSUdMakYsV0FDYixNQUFNLElBQUlyQixVQUFVLDZJSElnRixHSUR2RixTQUFTOEYsRUFBbUJqQixHQUN6QyxPQ0phLFNBQTRCQSxHQUN6QyxHQUFJRyxNQUFNTyxRQUFRVixHQUFNLE9BQU8sRUFBaUJBLEdER3pDLENBQWtCQSxJRUxaLFNBQTBCM0MsR0FDdkMsR0FBc0Isb0JBQVg3RyxRQUFtRCxNQUF6QjZHLEVBQUs3RyxPQUFPRSxXQUEyQyxNQUF0QjJHLEVBQUssY0FBdUIsT0FBTzhDLE1BQU1JLEtBQUtsRCxHRkluRixDQUFnQjJDLElBQVEsRUFBMkJBLElHTHZFLFdBQ2IsTUFBTSxJQUFJN0UsVUFBVSx3SUhJd0UsR0lMOUYsU0FBUytGLEVBQW1CQyxFQUFLekcsRUFBU0MsRUFBUXlHLEVBQU9DLEVBQVFwSyxFQUFLc0IsR0FDcEUsSUFDRSxJQUFJNkMsRUFBTytGLEVBQUlsSyxHQUFLc0IsR0FDaEJyQixFQUFRa0UsRUFBS2xFLE1BQ2pCLE1BQU84RCxHQUVQLFlBREFMLEVBQU9LLEdBSUxJLEVBQUs3QixLQUNQbUIsRUFBUXhELEdBRVJrRyxRQUFRMUMsUUFBUXhELEdBQU80RCxLQUFLc0csRUFBT0MsR0FJeEIsU0FBU0MsRUFBa0I1SCxHQUN4QyxPQUFPLFdBQ0wsSUFBSS9CLEVBQU9vQyxLQUNQd0gsRUFBT0MsVUFDWCxPQUFPLElBQUlwRSxTQUFRLFNBQVUxQyxFQUFTQyxHQUNwQyxJQUFJd0csRUFBTXpILEVBQUcrSCxNQUFNOUosRUFBTTRKLEdBRXpCLFNBQVNILEVBQU1sSyxHQUNiZ0ssRUFBbUJDLEVBQUt6RyxFQUFTQyxFQUFReUcsRUFBT0MsRUFBUSxPQUFRbkssR0FHbEUsU0FBU21LLEVBQU85SixHQUNkMkosRUFBbUJDLEVBQUt6RyxFQUFTQyxFQUFReUcsRUFBT0MsRUFBUSxRQUFTOUosR0FHbkU2SixPQUFNbkwsTyxzQkMvQkcsU0FBU3lMLEVBQWdCQyxFQUFVQyxHQUNoRCxLQUFNRCxhQUFvQkMsR0FDeEIsTUFBTSxJQUFJekcsVUFBVSxxQ0NGeEIsU0FBUzBHLEVBQWtCQyxFQUFRQyxHQUNqQyxJQUFLLElBQUl2RixFQUFJLEVBQUdBLEVBQUl1RixFQUFNeEYsT0FBUUMsSUFBSyxDQUNyQyxJQUFJd0YsRUFBYUQsRUFBTXZGLEdBQ3ZCd0YsRUFBVzVLLFdBQWE0SyxFQUFXNUssYUFBYyxFQUNqRDRLLEVBQVczSyxjQUFlLEVBQ3RCLFVBQVcySyxJQUFZQSxFQUFXMUssVUFBVyxHQUNqRG5CLE9BQU9nQixlQUFlMkssRUFBUUUsRUFBVy9LLElBQUsrSyxJQUluQyxTQUFTQyxFQUFhTCxFQUFhTSxFQUFZQyxHQU01RCxPQUxJRCxHQUFZTCxFQUFrQkQsRUFBWXhMLFVBQVc4TCxHQUNyREMsR0FBYU4sRUFBa0JELEVBQWFPLEdBQ2hEaE0sT0FBT2dCLGVBQWV5SyxFQUFhLFlBQWEsQ0FDOUN0SyxVQUFVLElBRUxzSyxFQ2JGLElBSU1RLEVBQWMsd0VBRWRDLEVBQXFCLHFCQVNyQkMsRUFDQyx1QkFEREEsRUFFUSxzQkFGUkEsRUFHTSxvQkFITkEsRUFLQyxlQUxEQSxFQU1TLHNCQU5UQSxFQU9FLGFBR0ZDLEVBQ3FCLG1CQURyQkEsRUFFSSxXQzdCWEMsRUFBQUEsV0FDSixhQUEyQyxJQUEvQkMsRUFBK0IsdURBQXRCLHFCQUFzQixVQUN6QzFJLEtBQUswSSxPQUFTQSxFQUNkMUksS0FBSzJJLE1BQVFDLE9BQU9DLGFBQWFDLFFBQVFOLEcsOEJBRzNDLFdBQWMsVUFDTEUsRUFBVTFJLEtBQVYwSSxPQURLLG1CQUFObEIsRUFBTSx5QkFBTkEsRUFBTSxpQkFFWixFQUFBdUIsU0FBUTFILEtBQVIsb0JBQWlCcUgsRUFBakIsYUFBK0JsQixNLGlCQUdqQyxXQUNFLElBQU9tQixFQUFpQjNJLEtBQWpCMkksTUFBT0QsRUFBVTFJLEtBQVYwSSxPQUNkLEdBQUlDLEVBQU8sOEJBRk5uQixFQUVNLHlCQUZOQSxFQUVNLGlCQUNULEVBQUF1QixTQUFRQyxJQUFSLG9CQUFnQk4sRUFBaEIsYUFBOEJsQixPLGtCQUlsQyxXQUFjLFVBQ0xrQixFQUFVMUksS0FBVjBJLE9BREssbUJBQU5sQixFQUFNLHlCQUFOQSxFQUFNLGlCQUVaLEVBQUF1QixTQUFRRSxLQUFSLG9CQUFpQlAsRUFBakIsYUFBK0JsQixNLG1CQUdqQyxXQUFlLFVBQ05rQixFQUFVMUksS0FBVjBJLE9BRE0sbUJBQU5sQixFQUFNLHlCQUFOQSxFQUFNLGlCQUViLEVBQUF1QixTQUFROUgsTUFBUixvQkFBa0J5SCxFQUFsQixhQUFnQ2xCLFEsRUF6QjlCaUIsR0E2Qk4sSSwwR0M1QkEsSUFBTVMsRUFBUyxJQUFJVCxFQUFPLDZCQUViVSxFQUFxQixTQUFDQyxHQUNqQ0YsRUFBT0YsSUFBSSxnQkFBaUJLLEtBQUtDLFVBQVVGLElBQzNDLElBQU9HLEVBQThCSCxFQUE5QkcsU0FBVUMsRUFBb0JKLEVBQXBCSSxVQUFXck0sRUFBU2lNLEVBQVRqTSxNQUN0QnNNLEVBQWVDLEVBQWdCSCxHQUNyQyxPQUFPSSxHQUFpQkYsRUFBY0QsRUFBV3JNLElBR3RDdU0sRUFBa0IsU0FBQ3hNLEdBQzlCZ00sRUFBT0YsSUFBSSxxQ0FBc0M5TCxHQUNqRCxJQUFNME0sRUFBTWhCLE9BQU9pQixnQkFBZ0IzTSxHQUNuQyxHQUFJME0sRUFFRixPQURBVixFQUFPRixJQUFQLG9CQUF3QjlMLEVBQXhCLHVCQUEwQzBNLElBQ25DQSxFQUVUVixFQUFPRixJQUFQLGNBQWtCOUwsRUFBbEIsa0NBRUFnTSxFQUFPRixJQUFJLCtCQUFnQzlMLEdBVEwsUSwyNUJBQUEsQ0FVcEIwTCxPQUFPa0IsV0FWYSxJQVV0QywyQkFBb0MsS0FBekI3TSxFQUF5QixRQUVsQyxHQURhYixPQUFPbUgsS0FBS3RHLEdBQ2hCOE0sU0FBUzdNLEdBRWhCLE9BREFnTSxFQUFPRixJQUFQLG9CQUF3QjlMLEVBQXhCLHVCQUEwQ0QsRUFBSUMsS0FDdkNELEVBQUlDLElBZHVCLDhCQWtCdEMsT0FEQWdNLEVBQU9GLElBQVAsY0FBa0I5TCxFQUFsQiw0QkFDTyxNQzNCSGdNLEVBQVMsSUFBSVQsRUFBTyx1QkFFYnVCLEVBQWUsU0FBQ1osR0FDM0JGLEVBQU9GLElBQUksZ0JBQWlCSyxLQUFLQyxVQUFVRixJQUMzQyxJQUFPRyxFQUE4QkgsRUFBOUJHLFNBQVVDLEVBQW9CSixFQUFwQkksVUFBV3JNLEVBQVNpTSxFQUFUak0sTUFFNUIsR0FDTyxTQURDb00sRUFDTixDQUNFLElBQU1VLEVBQVlyQixPQUFPc0IsU0FBU0MsS0FFNUJDLEVBRFNILEVBQVdGLFNBQVMseUNBRW5DTSxtQkFDSSxJQUFJQyxJQUFJTCxHQUFZTSxPQUFPQyxRQUFRLGlCQUFrQixLQUZsQyxJQUFJRixJQUFJTCxHQUFZUSxTQUszQyxPQURBdkIsRUFBT0YsSUFBUCx3QkFBNEJvQixFQUE1Qiw4QkFBc0RqTixJQUMvQ3dNLEdBQWlCUyxFQUFNWixFQUFXck0sS0NqQmhDLFNBQVN1TixFQUFnQnpOLEVBQUtDLEVBQUtDLEdBWWhELE9BWElELEtBQU9ELEVBQ1RiLE9BQU9nQixlQUFlSCxFQUFLQyxFQUFLLENBQzlCQyxNQUFPQSxFQUNQRSxZQUFZLEVBQ1pDLGNBQWMsRUFDZEMsVUFBVSxJQUdaTixFQUFJQyxHQUFPQyxFQUdORixFLHNrRENSVDJMLE9BQU9pQixnQkFBa0JqQixPQUFPaUIsaUJBQW1CLENBQUNjLFlBQWEsR0FDL0RqRixFQUFHLEdBQUlrRixFQUFHLElBRVosSUFBTUMsRUFBZSxDQUNuQkMsU0FBVSxtQ0FDVkMsYUFBYyxzQ0FDZEMsaUJBQWtCLHVDQUNsQkMsaUJBQWtCLG1DQUNsQkMsZ0JBQWlCLCtEQUNqQkMsaUJBQWtCLG9FQUNsQkMsa0JBQW1CLHdFQUNuQkMsZ0JBQWlCLG9EQUdOVixFQUFjLENBQ3pCVyxhQUFjLEVBQ2RDLFlBQWEsRUFDYkMsVUFBVyxFQUNYQyxjQUFlLEVBQ2ZDLDJCQUE0QixFQUM1QkMsa0JBQW1CLEVBQ25CQywwQkFBMkIsRUFDM0JDLHdCQUF5QixHQUdyQjNDLEVBQVMsSUFBSVQsRUFBTyxtQkFFYnFELEVBQTRCLFdBQ3ZDNUMsRUFBT0YsSUFBSSxnQ0FDWCtDLElBRUEsSUFBTUMsRUFBVUMsU0FBU0MscUJBQXFCLFVBQzlDLEdBQUtGLEdBQVlBLEVBQVF4SixPQUt6QixJQURBLElBQUkySixFQUFtQixFQUNkMUosRUFBSXVKLEVBQVF4SixPQUFTLEVBQUdDLEdBQUssRUFBR0EsSUFFdkMsSUFEQSxJQUFNMkosRUFBb0JKLEVBQVF2SixHQUFHNEosWUFDckMsTUFBZ0JqUSxPQUFPbUgsS0FBS3NILEdBQTVCLGVBQTJDLENBQXRDLElBQUkzTixFQUFHLEtBQ05vUCxFQUFXekIsRUFBYTNOLEdBQUtxUCxLQUFLSCxHQUV0QyxHQURBRSxFQUFXQSxFQUFXQSxFQUFTLEdBQUssS0FDdEIsQ0FDUnBQLEVBQUlzUCxRQUFRLFFBQVUsSUFBR3RQLEVBQU1BLEVBQUl1UCxVQUFVLEVBQUd2UCxFQUFJd1AsWUFBWSxVQUNwRSxJQUNFQyxFQUFxQnpQLEVBQUttTixtQkFBbUJoQixLQUFLdUQsTUFBTSxJQUFPTixFQUFXLE9BQzFFLE1BQU85TyxHQUNQMEwsRUFBT0QsS0FBUCxvQ0FBeUNxRCxJQUN6Q0ssRUFBcUJ6UCxFQUFLLE1BRzVCLElBREFpUCxHQUFvQixLQUNLL1AsT0FBT21ILEtBQUtzSCxHQUFjckksT0FBUSxhQWxCL0QwRyxFQUFPRCxLQUFLLHlCQXdCSDRELEVBQWEsU0FBQ0EsR0FDekIsSUFDRTNELEVBQU9GLElBQVAsdUJBQTJCNkQsRUFBM0IsZUFDQWpFLE9BQU9pQixnQkFBZ0JjLFlBQVkxSSxLQUFLLENBQ3RDNEssV0FBWXpRLE9BQU9tSCxLQUFLb0gsR0FBYW1DLE1BQUssU0FBQzVQLEdBQUQsT0FBU3lOLEVBQVl6TixLQUFTMlAsS0FDeEVFLEdBQUlGLEVBQ0pHLEtBQU1DLEtBQUtDLFFBRWIsTUFBT3RDLEdBQ1AxQixFQUFPRCxLQUFLMkIsS0FLSCtCLEVBQXVCLFNBQUN6UCxFQUFLQyxHQUNwQ0QsTUFBQUEsR0FBQUEsTUFBcUNDLElBQ3pDeUwsT0FBT2lCLGdCQUFnQjNNLEdBQU9DLElBR25CZ1EsRUFBc0IsU0FBQ2pRLEVBQUtDLEdBQ3ZDeUwsT0FBT2lCLGdCQUFnQm5FLEVBQUV4SSxHQUFPQyxHQU81QjRPLEVBQWMsV0FBTSwwRkFDbEJxQixFQUFTQyxPQUFPQyxhQUNoQkMsRUFBWUMsZUFBZTFFLFFBQVFQLEdBQ25Da0YsRUFBYSxJQUFJbkQsSUFBSTFCLE9BQU9zQixTQUFTQyxNQUNyQ3VELEdBQVcsVUFBQTlFLE9BQU8rRSxpQkFBUCxtQkFBa0JDLHFCQUFsQixlQUFpQ0YsWUFBakMsVUFBNkM5RSxPQUFPK0UsaUJBQXBELGFBQTZDLEVBQWtCRCxZQUEvRCxVQUNqQjlFLE9BQU8rRSxpQkFEVSxhQUNqQixFQUFrQkUsV0FFZEMsRUFBWSxHQVBRLEtBU0VsRixPQUFPa0IsV0FUVCxJQVN4Qiw2QkFBNEMsS0FBakNpRSxHQUFpQyxRQUMxQ0QsRUFBWSxFQUFILEtBQU9BLEdBQWNDLEtBVlIsZ0NBYXhCLElBQU1DLEdBQWEzRSxLQUFLdUQsTUFBTXFCLEVBQXdCaEMsU0FBU2lDLE9BQVEsWUFFakVDLEdBQVksR0FFbEIsR0FBSUgsSUFBY0EsR0FBV0ksTUFBTyxhQUNWSixHQUFXSSxPQURELElBQ2xDLDhCQUEwQyxLQUEvQkMsR0FBK0IsU0FDeENGLEdBQVVFLEdBQVVDLEdBQUtqRSxtQkFBbUJnRSxHQUFVRSxJQUZ0QixpQ0FTcEM1QixFQUFxQixvQkFBcUJ3QixHQUFVSyxtQkFDcEQ3QixFQUFxQix3QkFBeUJ3QixHQUFVTSxrQkFDeEQ5QixFQUFxQixrQkFBbUJ3QixHQUFVTyxZQUNsRC9CLEVBQXFCLHFCQUFzQndCLEdBQVVRLGVBSXJEaEMsRUFBcUIsYUFBY21CLEVBQVVoRCxVQUM3QzZCLEVBQXFCLGdCQUFpQm1CLEVBQVUvQyxjQUNoRDRCLEVBQXFCLGFBQWNtQixFQUFVYyxjQUM3Q2pDLEVBQXFCLG9CQUFxQm1CLEVBQVVlLGtCQUNwRGxDLEVBQXFCLGNBQWVtQixFQUFVZ0IsYUFDOUNuQyxFQUFxQixxQkFBc0JtQixFQUFVaUIsa0JBQ3JEcEMsRUFBcUIsZ0JBQUQsVUFBa0JtQixFQUFVa0IsaUJBQTVCLGlCQUFrQixFQUFxQkMsY0FBdkMsaUJBQWtCLEVBQTZCQyxtQkFBL0MsYUFBa0IsRUFBMENDLE1BQ2hGeEMsRUFBcUIscUJBQW1DelEsSUFBakIwTSxPQUFPd0csUUFBdUJ0QixFQUFVc0IsUUFBVXhHLE9BQU93RyxTQUNoR3pDLEVBQXFCLGtCQUFtQm1CLEVBQVV1QixjQUNsRDFDLEVBQXFCLFlBQWFtQixFQUFVd0IsUUFDNUMzQyxFQUFxQixjQUFlbUIsRUFBVWlCLGtCQUM5Q3BDLEVBQXFCLHdCQUF5Qm1CLEVBQVV5Qix3QkFDeEQ1QyxFQUFxQixrQkFBa0IsVUFBQW1CLEVBQVVrQixpQkFBVixtQkFBcUJRLGdCQUFyQixlQUErQkMsWUFBL0IsVUFDckMzQixFQUFVa0IsaUJBRDJCLGlCQUNyQyxFQUFxQlUsZ0JBRGdCLGFBQ3JDLEVBQStCRCxXQUNqQzlDLEVBQXFCLGdCQUFELFVBQWtCbUIsRUFBVTZCLHVCQUE1QixhQUFrQixFQUEyQmpNLE9BQ2pFaUosRUFBcUIsZUFBRCxVQUFpQm1CLEVBQVVrQixpQkFBM0IsaUJBQWlCLEVBQXFCVSxnQkFBdEMsaUJBQWlCLEVBQStCUixtQkFBaEQsYUFBaUIsRUFBNENuQyxJQUNqRkosRUFBcUIsb0JBQUQsVUFBc0JtQixFQUFVa0IsaUJBQWhDLGlCQUFzQixFQUFxQlUsZ0JBQTNDLGlCQUFzQixFQUErQlIsbUJBQXJELGFBQXNCLEVBQTRDVSxTQUN0RmpELEVBQXFCLG9CQUFELFVBQXNCbUIsRUFBVWtCLGlCQUFoQyxpQkFBc0IsRUFBcUJVLGdCQUEzQyxpQkFBc0IsRUFBK0JSLG1CQUFyRCxhQUFzQixFQUE0Q1csYUFHdEZsRCxFQUFxQixlQUFnQi9ELE9BQU9zQixTQUFTSyxRQUNyRG9DLEVBQXFCLGVBQWdCL0QsT0FBT2tILGtCQUM1Q25ELEVBQXFCLGNBQWUvRCxPQUFPbUgsWUFFM0MsSUFBTUMsR0FBZSxHQUNyQkEsR0FBYUMsWUFBYixVQUEyQnJILE9BQU9zSCxjQUFsQyxhQUEyQixFQUFlRCxZQUMxQ0QsR0FBYUMsWUFBYixVQUEyQnJILE9BQU9zSCxjQUFsQyxhQUEyQixFQUFlRCxZQUMxQ0QsR0FBYUcsVUFBYixVQUF5QnZILE9BQU9zSCxjQUFoQyxhQUF5QixFQUFlQyxVQUN4Q0gsR0FBYUksU0FBYixVQUF3QnhILE9BQU9zSCxjQUEvQixhQUF3QixFQUFlRSxTQUN2Q0osR0FBYUssV0FBYixVQUEwQnpILE9BQU9zSCxjQUFqQyxhQUEwQixFQUFlRyxXQUN6Q0wsR0FBYU0sV0FBYixVQUEwQjFILE9BQU9zSCxjQUFqQyxhQUEwQixFQUFlSSxXQUN6Q04sR0FBYU8sT0FBYixVQUFzQjNILE9BQU9zSCxjQUE3QixhQUFzQixFQUFlSyxPQUNyQ1AsR0FBYVEsV0FBYixVQUEwQjVILE9BQU9zSCxjQUFqQyxhQUEwQixFQUFlTSxXQUN6Q1IsR0FBYVMsTUFBYixVQUFxQjdILE9BQU9zSCxjQUE1QixhQUFxQixFQUFlTyxNQUNwQzlELEVBQXFCLGVBQWdCcUQsSUFFckMsSUFBTVUsR0FBYyxHQVlwQixHQVhBQSxHQUFZSCxPQUFaLFVBQXFCM0gsT0FBTytILHNCQUE1QixhQUFxQixFQUF1QkosT0FDNUNHLEdBQVlFLFdBQVosVUFBeUJoSSxPQUFPK0gsc0JBQWhDLGFBQXlCLEVBQXVCQyxXQUNoREYsR0FBWUcsVUFBWixVQUF3QmpJLE9BQU8rSCxzQkFBL0IsYUFBd0IsRUFBdUJFLFVBQy9DSCxHQUFZSSxTQUFaLFVBQXVCbEksT0FBTytILHNCQUE5QixhQUF1QixFQUF1QkcsU0FDOUNKLEdBQVlLLFNBQVosVUFBdUJuSSxPQUFPK0gsc0JBQTlCLGFBQXVCLEVBQXVCSSxTQUM5Q0wsR0FBWU0sU0FBWixVQUF1QnBJLE9BQU8rSCxzQkFBOUIsYUFBdUIsRUFBdUJLLFNBQzlDTixHQUFZTyxRQUFaLFVBQXNCckksT0FBTytILHNCQUE3QixhQUFzQixFQUF1Qk0sUUFDN0NQLEdBQVlRLE1BQVosVUFBb0J0SSxPQUFPK0gsc0JBQTNCLGFBQW9CLEVBQXVCTyxNQUMzQ1IsR0FBWUQsTUFBWixVQUFvQjdILE9BQU8rSCxzQkFBM0IsYUFBb0IsRUFBdUJGLE1BQzNDOUQsRUFBcUIsY0FBZStELElBRWhDUixPQUFPTyxNQUFPLENBQ2hCLElBQUlBLEdBQVFVLFNBQVNqQixPQUFPTyxPQUN4QkYsR0FBVUwsT0FBT0ssT0FBVVksU0FBU2pCLE9BQU9LLFFBQVUsRUFDekQsR0FBYyxJQUFWRSxJQUEwQixJQUFYRixHQUFjLENBRS9CLEdBRFksbUJBQW1COUosS0FBS2lILElBQ3pCOUUsT0FBT2tILGlCQUVoQlcsR0FBUVcsS0FBS0MsTUFBTVosR0FBUTdILE9BQU9rSCxrQkFDbENTLEdBQVNhLEtBQUtDLE1BQU1kLEdBQVMzSCxPQUFPa0gsdUJBRXBDLEdBQXFDLEtBQWpDc0IsS0FBS0UsSUFBSTFJLE9BQU8ySSxhQUFxQixDQUd2QyxJQUFNQyxHQUFPZixHQUNiQSxHQUFRRixHQUNSQSxHQUFTaUIsR0FHYjdFLEVBQXFCLFNBQVU4RCxHQUFRLElBQU1GLEtBUWpELEdBSEE1RCxFQUFxQixjQUFELFVBQWdCL0QsT0FBTzZJLGVBQXZCLGFBQWdCLEVBQWdCalAsUUFDcERtSyxFQUFxQixXQUFZZ0IsVUFBVUUsWUFFdENqRixPQUFPaUIsZ0JBQWdCNkgsVUFDdEIvRCxVQUFVQyxjQUFlLG9CQUV2QjhELEdBQVEsV0FBRy9ELGlCQUFILG1CQUFHLEdBQVdDLHFCQUFkLG1CQUFHLEdBQTBCK0QsY0FBN0IsY0FBRyxHQUFrQ0MsS0FBSSxTQUFTaEgsR0FDNUQsT0FBT0EsRUFBRWlILE1BQVEsSUFBTWpILEVBQUVrSCxXQUN4QkMsT0FFSEwsSUFBc0IsUUFBVCxHQUFBL0QsaUJBQUEsc0JBQVdDLHFCQUFYLFdBQTBCb0UsT0FBUyxPQUFTLElBR3pEckYsRUFBcUIsV0FEckIrRSxJQUFZaEUsR0FJaEJmLEVBQXFCLGFBQWNnQixVQUFVc0UscUJBQzdDdEYsRUFBcUIsY0FBZWdCLFVBQVV1RSxVQUFZdkUsVUFBVXdFLGlCQUNuRXhFLFVBQVV5RSxnQkFBa0J6RSxVQUFVMEUsY0FDdkMxRixFQUFxQixXQUFZZ0IsVUFBVTJFLGdCQUMzQzNGLEVBQXFCLGNBQWVlLEdBQ3BDZixFQUFxQixZQUFhZ0IsVUFBVTRFLFFBRzVDNUYsRUFBcUIsYUFBY3NCLEVBQXdCaEMsU0FBU2lDLE9BQVEsUUFDNUV2QixFQUFxQix1QkFBd0JzQixFQUF3QmhDLFNBQVNpQyxPQUFRLG1CQUN0RnZCLEVBQXFCLHFCQUFzQnNCLEVBQXdCaEMsU0FBU2lDLE9BQVEsaUJBQ3BGdkIsRUFBcUIsbUJBQW9CdEMsbUJBQ3JDNEQsRUFBd0JoQyxTQUFTaUMsT0FBUSxrQkFHN0MsSUFBTXNFLEdBQWMsR0FDcEIsR0FBSTVKLE9BQU82SixhQUFlN0osT0FBTzZKLFlBQVlDLGlCQUFpQixjQUFjLEdBQUksQ0FDOUUsSUFBTUMsR0FBd0IvSixPQUFPNkosWUFBWUMsaUJBQWlCLGNBQWMsR0FDaEZGLEdBQVlJLElBQU14QixLQUFLQyxNQUFNc0IsR0FBc0JFLHlCQUEyQkYsR0FBc0JHLGNBQ3BHTixHQUFZTyxJQUFNM0IsS0FBS0MsTUFBTXNCLEdBQXNCSyxXQUFhTCxHQUFzQk0sWUFDdEZULEdBQVlVLElBQU05QixLQUFLQyxNQUFNc0IsR0FBc0JRLGNBQWdCUixHQUFzQlMsY0FDekZaLEdBQVlhLElBQU1qQyxLQUFLQyxNQUFNc0IsR0FBc0JXLFlBQWNYLEdBQXNCUSxlQUN2RlgsR0FBWWUsSUFBTW5DLEtBQUtDLE1BQU1zQixHQUFzQmEsZUFBaUJiLEdBQXNCVyxhQUMxRmQsR0FBWWlCLElBQU1yQyxLQUFLQyxNQUFNc0IsR0FBc0JlLFlBQWNmLEdBQXNCYSxnQkFDdkZoQixHQUFZbUIsSUFBTXZDLEtBQUtDLE1BQU1zQixHQUFzQmlCLGFBQWVqQixHQUFzQmtCLGdCQUUxRmxILEVBQXFCLGNBQWU2RixJQUNwQzdGLEVBQXFCLGdCQUFELFVBQWtCL0QsT0FBTytFLGlCQUF6QixpQkFBa0IsRUFBa0JtRyxrQkFBcEMsYUFBa0IsRUFBOEJDLFVBR3BFLElBdEp3QixHQWlPcEJDLEdBak9vQixLQXNKRi9ILFNBQVNnSSxpQkFBaUIsaUNBdEp4QixJQXdKeEIsOEJBQWtDLEtBQXZCQyxHQUF1QixTQUNoQyxJQUNFLElBQU1DLEdBQVFELEdBQUs3SCxZQUNiK0gsR0FBYy9LLEtBQUt1RCxNQUFNdUgsSUFDM0JFLEdBQWdCLElBQ3BCLE9BQVFELEdBQVksVUFFbEIsSUFBSyxlQUVMLElBQUssVUFDSCxNQUVGLElBQUssaUJBQWtCLFlBQ0dBLEdBQVcsV0FBWCxpQkFESCxJQUNyQiw4QkFDRUMsSUFBaUIsTUFEbUQsU0FDbEMsS0FBVCxLQUZOLGdDQUlyQjFILEVBQXFCLGlCQUFrQjBILElBQ3ZDLElBQU1DLEdBQWMsR0FDcEJBLEdBQVl2UixLQUFPcVIsR0FBVyxXQUFYLEtBQ25CRSxHQUFZQyxXQUFhSCxHQUFXLFdBQVgsY0FDekJ6SCxFQUFxQixjQUFlMkgsSUFFcEMsTUFFRixJQUFLLGlCQUFMLFlBQzBCRixHQUFXLGlCQURyQyxJQUNFLDhCQUNFQyxJQUFpQixNQURxQyxTQUNwQixLQUZ0QyxnQ0FJRTFILEVBQXFCLGlCQUFrQjBILElBQ3ZDLE1BQ0YsSUFBSyxVQUNILElBQU1HLEdBQWMsR0FDcEJBLEdBQVlDLElBQU1MLEdBQVcsSUFDN0JJLEdBQVl6UixLQUFPcVIsR0FBVyxLQUMxQkEsR0FBVyxTQUNiSSxHQUFZRSxNQUFRTixHQUFXLE9BQVgsTUFDcEJJLEdBQVlHLGNBQWdCUCxHQUFXLE9BQVgsY0FDNUJJLEdBQVlJLGdCQUFrQlIsR0FBVyxPQUFYLGlCQUVoQ3pILEVBQXFCLGNBQWU2SCxJQUVwQyxNQUNGLFFBQ0V6TCxRQUFRQyxJQUFJb0wsS0FFaEIsTUFBTzVXLEdBQ1AwTCxFQUFPRCxLQUFLekwsRUFBSXFYLFdBdE1JLGdDQTJNeEJsSSxFQUFxQixJQUFLLFVBQzFCQSxFQUFxQixJQUFELDZCQUE0QlksSUFDaERaLEVBQXFCLEtMMVJJLElLNlJ6QkEsRUFBcUIsWUFBYWdCLFVBQVVtSCxZQUFjbE0sT0FBT2tNLFlBQWNuSCxVQUFVb0gsY0FDekZwSSxFQUFxQixJQUFLYyxFQUFXdEQsTUFDckN3QyxFQUFxQixJQUFLYyxFQUFXdUgsVUFDckNySSxFQUFxQixJQUFLVixTQUFTZ0osVUFDbkN0SSxFQUFxQixNQUFPUyxHQUM1QlQsRUFBcUIsT0FBUSxNQUc3QixJQUNFQSxFQUFxQixpQkFBa0IvRCxPQUFPc00saUJBQW1CN0wsS0FBS3VELE1BQU1oRSxPQUFPc00sa0JBQWtCMVMsT0FBUyxNQUM5RyxNQUFPaEYsR0FDUG1QLEVBQXFCLGlCQUFrQixNQUN2Q3pELEVBQU9ELEtBQUt6TCxFQUFJcVgsU0FFbEJsSSxFQUFxQixpQkFBa0IvRCxPQUFPdU0sVUFBVTNTLE9BQVMsR0FDakVtSyxFQUFxQixlQUFnQi9ELE9BQU8wRyxPQUFTLEVBQUksU0FBVyxTQUlwRTBFLEdBQWtCL0gsU0FBU21KLGNBQWMseURBQ3pDekksRUFBcUIsa0JBQW9CcUgsR0FBbUJBLEdBQWdCcUIsVUFBWSxNQUV4RnJCLEdBQWtCL0gsU0FBU21KLGNBQWMsOERBQ3pDekksRUFBcUIscUJBQXVCcUgsR0FBbUJBLEdBQWdCcUIsVUFBWSxNQUUzRnJCLEdBQWtCL0gsU0FBU21KLGNBQWMsNkRBQ3pDekksRUFBcUIsaUJBQW1CcUgsR0FBbUJBLEdBQWdCcUIsVUFBWSxNQUV2RnJCLEdBQWtCL0gsU0FBU21KLGNBQWMscURBQ3pDekksRUFBcUIsZUFBaUJxSCxHQUFtQkEsR0FBZ0JxQixVQUFZLE1BRXJGckIsR0FBa0IvSCxTQUFTbUosY0FBYyxpQ0FDekN6SSxFQUFxQixlQUFpQnFILEdBQW1CQSxHQUFnQnFCLFVBQVksTUFFckZyQixHQUFrQi9ILFNBQVNtSixjQUFjLGlDQUN6Q3pJLEVBQXFCLHFCQUF1QnFILEdBQW1CQSxHQUFnQnFCLFVBQVksTUFFM0ZyQixHQUFrQi9ILFNBQVNtSixjQUFjLG1EQUN6Q3pJLEVBQXFCLHFCQUF1QnFILEdBQW1CQSxHQUFnQnFCLFVBQVksTUFFM0ZyQixHQUFrQi9ILFNBQVNtSixjQUFjLCtCQUN6Q3pJLEVBQXFCLG9CQUFvQnFILElBQW1CQSxHQUFnQnFCLFVBQVU3UyxPQUFTLEdBRS9Gd1IsR0FBa0IvSCxTQUFTZ0ksaUJBQWlCLG9DQUM1Q3RILEVBQXFCLHNCQUF3QnFILEdBQW1CQSxHQUFnQnhSLE9BQVMsTUFFekZ3UixHQUFrQi9ILFNBQVNtSixjQUFjLDRCQUN6Q3pJLEVBQXFCLHFCQUF1QnFILEdBQW1CQSxHQUFnQnFCLFVBQVksTUFFM0ZyQixHQUFrQi9ILFNBQVNtSixjQUFjLHNEQUN6Q3pJLEVBQXFCLGNBQWdCcUgsR0FBbUJBLEdBQWdCcUIsVUFBWSxNQUVwRnJCLEdBQWtCL0gsU0FBU21KLGNBQWMsK0JBQ3pDekksRUFBcUIsa0JBQW9CcUgsR0FBbUJBLEdBQWdCcUIsVUFBWSxNQUV4RnJCLEdBQWtCL0gsU0FBU21KLGNBQWMsa0NBQ3pDekksRUFBcUIsYUFBZXFILEdBQW1CQSxHQUFnQnFCLFVBQVksTyx1Z0NDcFZyRixJQUFNbk0sRUFBUyxJQUFJVCxFQUFPLGlCQUVwQixlQUFnQjRFLFFBSWxCaUksS0FJRyxJQUFNQyxFQUFxQixXQUNoQ3RKLFNBQVN1SixnQkFBZ0JDLFVBQVVDLE9BQU8saUJBRy9CQyxFQUFlLDZCQUFHLDJGQUM3QnpNLEVBQU9GLElBQUksdUJBRGtCLFNBRUo0TSxNTnZCUSw4Q01xQkosY0FFdkJDLEVBRnVCLGdCQUdoQkEsRUFBV0MsT0FISyxtRkFBSCxxREFNZjdILEVBQTBCLFNBQUM4SCxFQUFjQyxHQUNwRCxJQUFLRCxFQUNILE9BQU8sS0FHVCxJQVVJRSxFQVZXRixFQUNWRyxNQUFNLEtBQ050RSxLQUFJLFNBQUN1RSxHQUFELE9BQU9BLEVBQUVELE1BQU0sUUFDbkJFLFFBQU8sU0FBQ0MsRUFBS0YsR0FJWixPQUhJQSxFQUFFLElBQU1BLEVBQUUsS0FDWkUsRUFBSWhNLG1CQUFtQjhMLEVBQUUsR0FBR0csU0FBV2pNLG1CQUFtQjhMLEVBQUUsR0FBR0csU0FFMURELElBQ04sSUFFaUJMLEdBQ3hCLE9BQUtDLEdBR2MsUUFBZkQsSUFHRkMsRUFBYUEsRUFBV0MsTUFBTSxLQUROLElBR25CRCxHQVBFLE1BVUVNLEVBQVksNkJBQUcsV0FBT04sR0FBUCxnRkFHcEJPLEVBRGtCLEdBRGxCQyxFQUF5QixHQUcxQlIsRUFKcUIsMENBS2hCLEdBTGdCLHVCQU9EUyxFQUFpQlQsR0FQaEIsY0FPcEJVLEVBUG9CLE9BVXBCQyxFQUFhekYsU0FBU3dGLEVBQVdsSyxVQUFVZ0ssRUFBd0JELEdBQXVCLElBVnRFLGtCQVluQkksRUFBYSxLQVpNLDRDQUFILHNEQWVaRixFQUFnQiw2QkFBRyxXQUFPRyxHQUFQLGtGQUV4QkMsR0FBVSxJQUFJQyxhQUFjQyxPQUFPSCxHQUZYLFNBS0x4SixPQUFPNEosT0FBT0MsT0FBTyxRQUFTSixHQUx6QixjQUt4QkssRUFMd0IsT0FReEJDLEVBQVloUixNQUFNSSxLQUFLLElBQUk2USxXQUFXRixJQVJkLGtCQVd2QkMsRUFBVXhGLEtBQUksU0FBQzBGLEdBQUQsT0FBT0EsRUFBRS9RLFNBQVMsSUFBSWdSLFNBQVMsRUFBRyxRQUFNeEYsS0FBSyxLQVhwQywyQ0FBSCxzREFjaEJ5RixFQUFxQixTQUFDQyxHQUNqQyxJQVdJQyxFQUFnQnpMLFNBQVN1SixnQkFBZ0JtQyxVQUN2Q0MsRUFBcUJDLGFBWmQsV0FDWCxJQUFNRixFQUFZMUwsU0FBU3VKLGdCQUFnQm1DLFVBQ3ZDRCxFQUFnQixJQUFNQyxHQUN4QkcsY0FBY0YsR0FDZEgsS0FFQUMsRUFBZ0JDLElBTXlCLE1BVWxDSSxHQUFrQixTQUFDQyxFQUFVQyxHQUN4Qy9PLEVBQU9GLElBQUkseUJBQTBCaVAsRUFBaUIsY0FBZUQsR0FDckUsSUFBSyxJQUFJdlYsRUFBSSxFQUFHQSxFQUFJdVYsRUFBU3hWLE9BQVFDLElBRW5DLElBREEsSUFBTXlWLEVBQVVGLEVBQVN2VixHQUN6QixNQUEyQnJHLE9BQU8rYixRQUFRRixHQUExQyxlQUE0RCxDQUF2RCxnQkFBTy9hLEVBQVAsS0FBWUMsRUFBWixLQUNIK2EsRUFBUUUsTUFBTWxiLEdBQU9DLElBS2RrYixHQUFnQiw2QkFBRyxxRkFDeEJDLEVBQWFyTSxTQUFTc00sY0FBYyxTQUMvQkMsSUFBTSxhQUNqQkYsRUFBVy9ZLEtBQU8sV0FDbEIrWSxFQUFXbk8sS052SHNCLDJDTXdIakM4QixTQUFTd00sS0FBS0MsWUFBWUosR0FMSSwyQ0FBSCxxREFRaEJLLEdBQWlCLFNBQUNDLEVBQWtCQyxHQUMvQyxJQURnRSxFQUMxREMsRUFBVXpQLEtBQUt1RCxNQUFNdkQsS0FBS0MsVUFBVXNQLElBRHNCLElBRTNDRSxHQUYyQyxJQUVoRSwyQkFBOEIsS0FBbkJDLEVBQW1CLFFBQ3JCQyxFQUFlRCxFQUFmQyxZQUNQLEdBQUtBLEVBQUwsQ0FGNEIsVUFHSEEsR0FIRyxJQUc1QiwyQkFBc0MsS0FBM0JDLEVBQTJCLFFBQ3BDLEdBQUlBLEVBQVdsTSxLQUFPOEwsRUFDcEIsSUFBSyxJQUFNM2IsS0FBTytiLEVBQ0osT0FBUi9iLElBQ0Y2YixFQUFPN2IsR0FBTytiLEVBQVcvYixLQVBMLGlDQUZrQyw4QkFlaEUsT0FBTzRiLEdBaUNJblAsR0FBbUIsU0FBQ3VQLEVBQWMxUCxFQUFXck0sR0FDeEQsR0FBa0IsYUFBZHFNLEVBQ0YsT0FBSzBQLEdBSUxoUSxFQUFPRixJQUFJLHdEQUNKLElBSkxFLEVBQU9GLElBQUksd0RBQ0osR0FLWCxHQUFJa1EsTUFBQUEsR0FBQUEsTUFFRjFQLEVBR0EsT0FEQU4sRUFBT0YsSUFBSSwrREFDSixFQUVULE9BQVFRLEdBQ04sSUFBSyxRQUNILE9BQUkwUCxHQUNGaFEsRUFBT0YsSUFBSSxvREFDSixJQUVURSxFQUFPRixJQUFJLDREQUNKLEdBQ1QsSUFBSyxXQUNILE9BQUlrUSxFQUFhblAsU0FBUzVNLElBQ3hCK0wsRUFBT0YsSUFBSSx3REFDSixJQUVURSxFQUFPRixJQUFJLG9FQUNKLEdBQ1QsSUFBSyxjQUNILE9BQUtrUSxFQUFhblAsU0FBUzVNLElBSTNCK0wsRUFBT0YsSUFBSSw0REFDSixJQUpMRSxFQUFPRixJQUFJLGdFQUNKLEdBSVgsSUFBSyxRQUNILE9BQUlrUSxJQUFpQi9iLEdBQ25CK0wsRUFBT0YsSUFBSSxzREFDSixJQUVURSxFQUFPRixJQUFJLGtFQUNKLEdBQ1QsSUFBSyxXQUNILE9BQUlrUSxJQUFpQi9iLEdBQ25CK0wsRUFBT0YsSUFBSSw4REFDSixJQUVURSxFQUFPRixJQUFJLDBEQUNKLEdBQ1QsSUFBSyxjQUNILE9BQUlrUSxFQUFlL2IsR0FDakIrTCxFQUFPRixJQUFJLCtEQUNKLElBRVRFLEVBQU9GLElBQUksdUVBQ0osR0FDVCxJQUFLLFdBQ0gsT0FBSWtRLEVBQWUvYixHQUNqQitMLEVBQU9GLElBQUksNERBQ0osSUFFVEUsRUFBT0YsSUFBSSxvRUFDSixHQUNULElBQUssZ0JBQ0gsT0FBSWtRLEdBQWdCL2IsR0FDbEIrTCxFQUFPRixJQUFJLHdFQUNKLElBRVRFLEVBQU9GLElBQUksZ0ZBQ0osR0FDVCxJQUFLLGFBQ0gsT0FBSWtRLEdBQWdCL2IsR0FDbEIrTCxFQUFPRixJQUFJLHFFQUNKLElBRVRFLEVBQU9GLElBQUksNkVBQ0osR0FDVCxJQUFLLFVBQ0gsUUFBaUI3TCxFQUFNK1ksTUFBTSxLQUE3QixHQUFLaUQsRUFBTCxLQUFVQyxFQUFWLEtBR0EsT0FGQUQsRUFBTWhJLFNBQVNnSSxHQUNmQyxFQUFNakksU0FBU2lJLEdBQ1hGLEdBQWdCQyxHQUFPRCxHQUFnQkUsR0FDekNsUSxFQUFPRixJQUFJLGdFQUNKLElBRVRFLEVBQU9GLElBQUksd0VBQ0osR0FFVCxRQUVFLE9BREFFLEVBQU9GLElBQUksOENBQStDUSxJQUNuRCxJQUlBOEwsR0FBcUIsV0FDaENqSSxPQUFPQyxXQUFhLFdBQ2xCLE9BQ0UsQ0FBQyxNQUFRLEtBQU8sS0FBTyxLQUFPLE1BQU05QyxRQUFRLFVBQzFDLFNBQUM2TyxHQUFELE9BQVFBLEVBQUloTSxPQUFPaU0sZ0JBQWdCLElBQUlqQyxXQUFXLElBQUksR0FBSyxJQUFNZ0MsRUFBSSxHQUFHOVMsU0FBUyxTQUs1RWdULEdBQWUsV0FDMUIsSUFBT0MsRUFBaUJoUixFQUNsQmlSLEVBQWM3USxPQUFPc0IsU0FBU0ssT0FDcEMsR0FBSWtQLEVBQVkxUCxTQUFTLGNBR3ZCLE9BRkFuQixPQUFPQyxhQUFhNlEsUUFBUUYsRUFBZSxHQUMzQzdNLEVBQXFCLE1BQU8sTUFDckIsRUFFVCxHQUFJOE0sRUFBWTFQLFNBQVMsY0FHdkIsT0FGQW5CLE9BQU9DLGFBQWE2USxRQUFRRixFQUFlLEdBQzNDN00sRUFBcUIsTUFBTyxNQUNyQixFQUVULEdBQUk4TSxFQUFZMVAsU0FBUyxjQUd2QixPQUZBbkIsT0FBT0MsYUFBYThRLFdBQVdILEdBQy9CN00sRUFBcUIsTUFBTyxPQUNyQixFQUVULElBQU1pTixFQUFVekksU0FBU3ZJLE9BQU9DLGFBQWFDLFFBQVEwUSxJQUVyRCxPQURBN00sRUFBcUIsTUFBUWlOLEVBQVUsS0FBTyxPQUN0Q0EsR0FBVyxHQUdSQyxHQUFhLDZCQUFHLHVHQUFPN0QsRUFBUCwrQk4vU0YsTU0rU0Usa0JBQ3BCLElBQUkzUyxTQUFRLFNBQUMxQyxFQUFTQyxHQUMzQixJQUFJbU0sRUFBS2tCLEVBQXdCaEMsU0FBU2lDLE9BQVE4SCxHQUNsRCxHQUFJakosRUFDRnBNLEVBQVFvTSxPQUNILENBQ0wsSUFBTStNLEVBQTRCakMsYUFBWSxZQUM1QzlLLEVBQUtrQixFQUF3QmhDLFNBQVNpQyxPQUFROEgsTUFFNUM4QixjQUFjZ0MsR0FDZG5aLEVBQVFvTSxNQUVULElBQ0hnTixZQUFXLFdBQ1RqQyxjQUFjZ0MsR0FDZGxaLEVBQU8sSUFBSWxDLE1BQU0sMENBQ2hCLFVBaEJvQiwyQ0FBSCxxREFxQmJzYixHQUFRLFNBQUNDLEdBQUQsT0FBUSxJQUFJNVcsU0FBUSxTQUFDdUcsR0FBRCxPQUFTbVEsV0FBV25RLEVBQUtxUSxPQUdyREMsR0FBZSxXQUMxQixJQUFPQyxFQUFlNVIsRUFDaEI2UixFQUFVLEdBR1ZoUixFQUFPLENBQ1hHLFNBQVUsV0FDVkMsVUFBVyxRQUNYck0sTUFBTyxZQUVULEdBQUlnTSxFQUFtQkMsR0FDckIsT0FBTyxLQUtULEdBREFBLEVBQUtqTSxNQUFRLGNBQ1RnTSxFQUFtQkMsR0FLckIsT0FKaUJoRCxNQUFNSSxLQUFLeUYsU0FBU2dJLGlCQUFpQixrQkFDN0MxVCxTQUFRLFNBQUNxSyxHQUNoQndQLEVBQVFuWSxLQUFLMkksRUFBRXlQLGFBQWEsd0JBRXpCRCxFQUFRNVgsUUFJYmdMLGVBQWVrTSxRQUFRUyxFQUFhOVEsS0FBS0MsVUFBVThRLElBRTVDQSxJQUxMbFIsRUFBT0YsSUFBSSx5Q0FDSixNQVNYLEdBREFJLEVBQUtqTSxNQUFRLGNBQ1RnTSxFQUFtQkMsR0FBTyxDQUM1QixJQUFNOE8sRUFBVWpNLFNBQVNtSixjQUFjLGdCQUN2QyxPQUFLOEMsR0FJTGtDLEVBQVFuWSxLQUFLaVcsRUFBUW1DLGFBQWEsYUFDbEM3TSxlQUFla00sUUFBUVMsRUFBYTlRLEtBQUtDLFVBQVU4USxJQUU1Q0EsSUFOTGxSLEVBQU9GLElBQUksd0NBQ0osTUFXWCxPQUZBSSxFQUFLRyxTQUFXLE9BQ2hCSCxFQUFLak0sTUFBUSx3QkFDVDZNLEVBQWFaLElBQ0VoRCxNQUFNSSxLQUFLeUYsU0FBU2dJLGlCQUFpQixpQkFDN0MxVCxTQUFRLFNBQUNxSyxHQUNoQndQLEVBQVFuWSxLQUFLMkksRUFBRXlQLGFBQWEsZ0JBRXpCRCxFQUFRNVgsUUFJYmdMLGVBQWVrTSxRQUFRUyxFQUFhOVEsS0FBS0MsVUFBVThRLElBRTVDQSxJQUxMbFIsRUFBT0YsSUFBSSx5Q0FDSixRQU9YRSxFQUFPRixJQUFJLDBCQUNKLE9BR0lzUixHQUF3QixrQkFBTTNNLFVBQVU0TSxZQUE4QyxtQkFBekI1TSxVQUFVNE0sWUMzWXZFQyxHQUFhLFNBQUNDLEVBQUszTixHQUF1QixJQUFqQnRDLEVBQWlCLHVEQUFQLEdBQzlDLElBQUtpUSxFQUFLLE1BQU8sR0FFakIsSUFBTUMsRUFBUUQsRUFBSWpPLFFBQVFNLEdBQzFCLEdBQUk0TixFQUFRLEVBQUcsT0FBT0QsRUFFdEIsS0FBT0EsRUFBSWpPLFFBQVFNLElBQVMsR0FBRyxDQUM3QixJQUFNNE4sRUFBUUQsRUFBSWpPLFFBQVFNLEdBQzFCMk4sR0FBT0MsRUFBUSxFQUFJRCxFQUFJaE8sVUFBVSxFQUFHaU8sR0FBUyxJQUFNbFEsRUFBVWlRLEVBQUloTyxVQUFVaU8sRUFBUTVOLEVBQUt0SyxRQUcxRixPQUFPaVksRywraUNDSlQsV0FBK0I1RSxFQUFZOEUsR0FBM0MscUZBQ1F6UixFQUFTLElBQUlULEVBQU8sNEJBQ25CbVMsRUFBc0JyUyxFQUV2QnNTLEVBQWMsU0FBcUJDLEdBQ3ZDNVIsRUFBT0YsSUFBSSx1QkFBd0JLLEtBQUtDLFVBQVV3UixJQUNsRCxJQUNFdlIsRUFVRXVSLEVBVkZ2UixTQUNBaEssRUFTRXViLEVBVEZ2YixLQUNBd2IsRUFRRUQsRUFSRkMsV0FDQUMsRUFPRUYsRUFQRkUsZ0JBQ0FDLEVBTUVILEVBTkZHLFNBQ0FDLEVBS0VKLEVBTEZJLGlCQUNBQyxFQUlFTCxFQUpGSyxZQUNBQyxFQUdFTixFQUhGTSxnQkFDQUMsRUFFRVAsRUFGRk8sZ0JBQ0FDLEVBQ0VSLEVBREZRLFVBRUduZSxFQUFTMmQsRUFBVDNkLE1BQ0QrYSxFQUFVcUQsRUFBRU4sR0FHaEIsSUFEV0UsR0FBY3ZTLE9BQU80UyxXQUFXTCxHQUFhTSxRQUt4RCxHQUNHTCxJQUFvQkMsR0FDcEJBLElBQW9CRCxFQUVyQmxTLEVBQU9GLElBQUksd0NBSmIsQ0FPQSxHQUFJb1MsR0FBbUJDLEVBQWlCLENBQ3RDLElBQUtFLEVBQUVILEdBQWlCNVksT0FFdEIsWUFEQTBHLEVBQU9GLElBQUksOEJBQStCb1MsR0FHNUMsSUFBS0csRUFBRUYsR0FBaUI3WSxPQUV0QixZQURBMEcsRUFBT0YsSUFBSSw4QkFBK0JxUyxPQUd2QyxLQUFLSixFQUVWLFlBREEvUixFQUFPRixJQUFJLDBCQUdYLElBQUtrUCxFQUFRMVYsUUFDTSxnQkFBYnlZLElBQ0YvUixFQUFPRixJQUFJLHVCQUF3QmlTLEdBQ25DL1IsRUFBT0YsSUFBSSw2QkFBOEJrUyxHQUNyQ0EsSUFBa0JoRCxFQUFVcUQsRUFBRUwsS0FDN0JoRCxFQUFRMVYsUUFFWCxZQURBMEcsRUFBT0YsSUFBSSwrQkFPbkIsSUFBTTBTLEVBQW9CLFNBQUNKLEVBQVduZSxHQUNwQyxHQUFJbWUsR0FBYW5lLEVBQU00TSxTQUFTLGVBQWdCLENBQzlDYixFQUFPRixJQUFJLCtCQUFnQ3NTLEdBQzNDLElBQU1wZCxFQUFVLENBQ2R3TCxnQkFBQUEsRUFDQWlSLFlBQUFBLEdBRUlnQixFQUFrQjNXLFNBQVNzVyxHQUFXTSxLQUFLMWQsR0FDakRmLEVBQVFxZCxHQUFXcmQsRUFBTyxjQUFld2UsS0FFM0MsT0FBT3hlLEdBWVQsR0FUSWlKLE1BQU1PLFFBQVF4SixHQUNoQkEsRUFBTW9ELFNBQVEsU0FBQ3NiLEVBQUtwWixHQUNsQixJQUFNcVosRUFBbUJSLEVBQVlBLEVBQVU3WSxJQUFNNlksRUFBWSxHQUNqRW5lLEVBQU1zRixHQUFLaVosRUFBa0JJLEVBQWtCRCxNQUdqRDFlLEVBQVF1ZSxFQUFrQkosRUFBV25lLEdBR3RCLFdBQWJvTSxFQUNFMk8sSUFDRmhQLEVBQU9GLElBQUksYUFBY2lTLEdBQ3pCL0MsRUFBUXhDLFVBRVZ4TSxFQUFPRixJQUFJLHVDQUF3Q2lTLFFBQzlDLEdBQWlCLFdBQWIxUixFQUNULE9BQVFoSyxHQUNOLElBQUssU0FDSDJKLEVBQU9GLElBQUkscUJBQXNCN0wsR0FDN0I0ZSxPQUFPNWUsR0FBTzRNLFNBQVMsa0JBQ3pCd1IsRUFBRSxrQkFBa0I3RixTQUV0QndDLEVBQVE4RCxPQUFPN2UsR0FDZixNQUNGLElBQUssUUFDSCtMLEVBQU9GLElBQUksb0JBQXFCN0wsR0FDaEMrYSxFQUFRK0QsTUFBTTllLEdBQ2QsTUFDRixJQUFLLFFBRUQsR0FBNkQsSUFBekRnVSxTQUFTM0QsZUFBZTFFLFFBQVE4UixJQUE0QixDQUM5RDFSLEVBQU9GLElBQUksc0NBQ1gsTUFLRixHQUhBRSxFQUFPRixJQUFJLG1CQUFvQjdMLEdBQy9CK2UsRUFBWS9lLEVBQU82ZCxHQUVmRCxFQUFZLENBQ2QsSUFEYyxFQUNSL0ksRUFBU3BKLE9BQU80UyxXQUFXbFQsR0FBb0JtVCxRQUR2QyxLQUVNVixHQUZOLElBRWQsMkJBQ0UsT0FEOEIsU0FFNUIsSUFBSyxhQUNIN1IsRUFBT0YsSUFBSSwrQkFDUGdKLEVBQ0Z3RixFQUFtQjJFLEdBRW5CbFEsU0FBU3VKLGdCQUFnQjRHLGlCQUNyQixhQUNBRCxFQUNBLENBQUNFLE1BQU0sSUFHYixNQUNGLElBQUssYUFDSG5ULEVBQU9GLElBQUksK0JBQ1hpRCxTQUFTdUosZ0JBQWdCNEcsaUJBQ3JCLE9BQ0FELEVBQ0EsQ0FBQ0UsTUFBTSxLQXJCSCxvQ0E0QmR0QyxZQUFXLFdBQ1RvQyxNQUNDRyxjQUtOLEdBQWlCLFNBQWIvUyxFQUNULE9BQVFoSyxHQUNOLElBQUssT0FDSDJKLEVBQU9GLElBQUksaUJBQWtCN0wsR0FDN0IrYSxFQUFRcUUsS0FBS3BmLEdBQ2IsTUFDRixJQUFLLE9BQ0grTCxFQUFPRixJQUFJLGlCQUFrQjdMLEdBQzdCK2EsRUFBUXNFLEtBQUtyZixHQUNiLE1BQ0YsSUFBSyxrQkFFRCtMLEVBQU9GLElBQUksbUJBQW9CN0wsR0FDL0IsSUFBTThhLEVBQWtCNU8sS0FBS3VELE1BQU16UCxHQUNuQytMLEVBQU9GLElBQUksc0JBQXVCaVAsR0FDbENGLEdBQWdCRyxFQUFTRCxHQUUzQixNQUNGLElBQUssV0FDSC9PLEVBQU9GLElBQVAsMkJBQStCa1AsRUFBL0Isa0JBQWdEL2EsSUFDaEQrYSxFQUFRdUUsU0FBU3RmLEdBQ2pCLE1BQ0YsSUFBSyxjQUNIK0wsRUFBT0YsSUFBUCw0QkFBZ0NrUCxFQUFoQyxrQkFBaUQvYSxJQUNqRCthLEVBQVF3RSxZQUFZdmYsR0FDcEIsTUFDRixJQUFLLGdCQUVILEdBREErTCxFQUFPRixJQUFQLHVDQUEyQ2tQLEVBQTNDLGVBQXlEL2EsSUFDckQ0ZCxFQUFZLFlBQ01BLEdBRE4sSUFDZCwyQkFDZSxhQURpQixTQUNKLFdBQ3hCN1IsRUFBT0YsSUFBSSw4QkFDWCxJQUFNMlQsRUFBZ0IxUSxTQUFTMlEsTUFDL0IzUSxTQUFTbVEsaUJBQWlCLG9CQUFvQixTQUFDeFIsR0FBRCxPQUM1Q2lTLEVBQTZCalMsRUFBR3pOLEVBQU93ZixNQUpqQixHQUZkLCtCQVdoQixNQUNGLElBQUssWUFHRCxJQUFLaEMsRUFBYSxDQUNoQnpSLEVBQU9GLElBQUksNEJBQ1gsTUFFRkUsRUFBT0YsSUFBSSxrQkFBbUI3TCxHQUM5QixJQUFNMmYsRUFBYXpULEtBQUt1RCxNQUFNWSxlQUFlMUUsUUFOdkJQLGVBTTZDLEdBQ25FLElBQUt1VSxFQUFZLENBQ2Y1VCxFQUFPRixJQUFJLDhCQUNYLE1BR0E1TSxPQUFPbUgsS0FBS29YLEdBQWE1USxTQUFTK1MsSUFFbEM1RSxFQUFROEQsT0FBTzdlLEdBR25CLE1BQ0YsUUFDRStMLEVBQU9GLElBQUksc0JBQXVCekosUUFHakMsR0FBaUIsaUJBQWJnSyxFQUVULE9BREFMLEVBQU9GLElBQUksc0JBQXVCK1QsVUFBVzVmLEdBQ3JDNGYsV0FDTixJQUFLLE1BQ0g3RSxFQUFROEUsSUFBSSxVQUFaLGNBQThCN2YsRUFBTW1aLE9BQXBDLE1BQ0EsTUFDRixJQUFLLFFBRUgsSUFBTTJHLEVBQVc5ZixFQUFNK1ksTUFBTSxLQUFLLEdBQUdJLE9BRS9CNEcsRUFBZ0IvZixFQUFNK1ksTUFBTSxLQUFLLEdBQUdJLE9BRTFDNEIsRUFBUThFLElBQUlDLEVBQVVDLEVBQWUsbUJBS3BDLEdBQWlCLFlBQWIzVCxFQUNUTCxFQUFPRixJQUFJLGNBQWU3TCxHQUMxQithLEVBQVFzQyxXQUFXcmQsUUFDZCxHQUFpQixTQUFib00sRUFBcUIsQ0FDOUJMLEVBQU9GLElBQUksYUFBY29TLEVBQWlCQyxHQUMxQyxJQUFNOEIsRUFBS2xSLFNBQVNtSixjQUFjZ0csR0FDNUJnQyxFQUFLblIsU0FBU21KLGNBQWNpRyxHQUNsQ2dDLEVBQVVGLEVBQUlDLFFBQ1QsR0FBaUIsaUJBQWI3VCxFQUNUTCxFQUFPRixJQUFJLHFCQUFzQjdMLEdBQ2pDK2EsRUFBUW9GLE9BQVIsa0JBQTBCbmdCLEVBQTFCLG9CQUNLLEdBQWlCLFNBQWJvTSxFQUFxQixDQUM5QkwsRUFBT0YsSUFBUCxpQkFBcUJvUyxFQUFyQixlQUEyQ0MsSUFDM0MsSUFBTWtDLEVBQVN0UixTQUFTbUosY0FBY2dHLEdBQ2hDb0MsRUFBY3ZSLFNBQVNtSixjQUFjaUcsR0FDM0NrQyxFQUFPN0gsU0FDUDhILEVBQVlDLFFBQVFGLE9BQ0UsU0FBYmhVLEVBQ1RMLEVBQU9GLElBQUkscURBRVhFLEVBQU9GLElBQUksOEJBQStCTyxRQTlOMUNMLEVBQU9GLElBQUksNkJBQThCbVMsSUFrT3ZDMEIsRUF6UFIsNkJBeVB1QyxXQUFPYSxFQUFPQyxFQUFRaEIsR0FBdEIseUVBQzdCaUIsRUFBZ0J4WCxNQUFNTyxRQUFRZ1gsR0FBcUJBLEVBQVgsQ0FBQ0EsR0FDdENsYixFQUFJLEVBRnNCLFlBRW5CQSxFQUFJbWIsRUFBYXBiLFFBRkUscUJBRzdCeUosU0FBUzRSLE9BSG9CLHdCQUkvQjVSLFNBQVMyUSxNQUFRZ0IsRUFBYW5iLEdBSkMsU0FLekJ1WCxHQUFNLEtBTG1CLGNBTS9CL04sU0FBUzJRLE1BQVFELEVBTmMsVUFPekIzQyxHQUFNLEtBUG1CLGdDQVMvQi9OLFNBQVMyUSxNQUFRRCxFQVRjLFFBRU1sYSxJQUZOLDBCQVk5QndKLFNBQVM0UixPQVpxQix3QkFhakM1UixTQUFTMlEsTUFBUUQsRUFiZ0IsMkJBZ0JqQ0UsRUFBNkJhLEVBQU9DLEVBQVFoQixHQWhCWCw0Q0F6UHZDLDBEQTZRUW1CLEVBQW1CLFNBQW5CQSxFQUFvQkosR0FDeEIsSUFBTTNRLEVBQUsyUSxFQUFNM1YsT0FBT2dGLEdBQ3BCQSxHQUFhLHNCQUFQQSxJQUNSd08sRUFBRSxzQkFBc0I3RixTQUN4QjlNLE9BQU9tVixvQkFBb0IsUUFBU0QsR0FBa0IsS0FJcEQzQixFQUFlLFNBQWZBLElBQ0ozTyxlQUFla00sUUFBUWtCLEVBQW9CLEdBQzNDLElBQU1vRCxFQUFTL1IsU0FBU21KLGNBQWMsb0JBQ2xDNEksSUFBUUEsRUFBTzVGLE1BQVAsUUFBMEIsUUFDdENuTSxTQUFTZ1MsZUFBZSxxQkFBcUI3RixNQUE3QyxRQUFnRSxRQUNoRXhQLE9BQU93VCxpQkFBaUIsUUFBUzBCLEdBQWtCLEdBRW5EN1IsU0FBU3VKLGdCQUFnQnVJLG9CQUFvQixhQUFjNUIsRUFBYyxDQUN2RUUsTUFBTSxJQUVScFEsU0FBU3VKLGdCQUFnQnVJLG9CQUFvQixPQUFRNUIsRUFBYyxDQUNqRUUsTUFBTSxJQUdSdEMsWUFBVyxXQUNUd0IsRUFBRSxzQkFBc0I3RixTQUN4QjlNLE9BQU9tVixvQkFBb0IsUUFBU0QsR0FBa0IsS0FDckQsT0FHQzVCLEVBQWMsU0FBQy9lLEVBQU82ZCxHQUUxQixJQUFNa0QsRUFBZWpTLFNBQVNzTSxjQUFjLE9BRTVDMkYsRUFBYXpJLFVBQVUwSSxJQUFJLHFCQUMzQkQsRUFBYW5SLEdBQUssb0JBR2xCLElBQU1xUixFQUFtQm5TLFNBQVNzTSxjQUFjLFVBUWhELEdBUEE2RixFQUFpQjNJLFVBQVUwSSxJQUFJLDBCQUMvQkMsRUFBaUIvSSxVQUFZLElBQzdCK0ksRUFBaUJDLFFBQVUsV0FDekI5QyxFQUFFLHNCQUFzQjdGLFNBQ3hCOU0sT0FBT21WLG9CQUFvQixRQUFTRCxHQUFrQixJQUdwRDlDLEVBRUYsSUFEQSxJQUFNc0QsRUFBV2xZLE1BQU1JLEtBQUt5RixTQUFTZ0ksaUJBQWlCK0csSUFDL0M3ZCxFQUFNNE0sU0FBUyxnQkFBa0J1VSxFQUFTOWIsT0FBUyxHQUN4RHJGLEVBQVFBLEVBQU1xTixRQUFRLGNBQWU4VCxFQUFTQyxRQUFRQyxLQUsxRCxJQUFNQyxFQUFXeFMsU0FBU3NNLGNBQWMsWUFDeENrRyxFQUFTQyxVQUFZdmhCLEVBQU1tWixPQUMzQixJQUFNcUksRUFBUUYsRUFBU0csUUFBUUMsV0FDL0JGLEVBQU1qRyxZQUFZMEYsR0FDbEJGLEVBQWF4RixZQUFZaUcsR0FHekJwRCxFQUFFLHNCQUFzQjdGLFNBQ3hCekosU0FBUzZTLEtBQUtwRyxZQUFZd0YsSUFHdEJiLEVBQVksU0FBbUJGLEVBQUlDLEdBQ3ZDLElBRUkyQixFQUNBQyxFQUhFQyxFQUFLOUIsRUFBRytCLFdBQ1JDLEVBQUsvQixFQUFHOEIsV0FJZCxHQUFLRCxHQUFPRSxJQUFNRixFQUFHRyxZQUFZaEMsS0FBTytCLEVBQUdDLFlBQVlqQyxHQUF2RCxDQUVBLElBQUssSUFBSTFhLEVBQUksRUFBR0EsRUFBSXdjLEVBQUdJLFNBQVM3YyxPQUFRQyxJQUNsQ3djLEVBQUdJLFNBQVM1YyxHQUFHMmMsWUFBWWpDLEtBQzdCNEIsRUFBS3RjLEdBR1QsSUFBSyxJQUFJQSxFQUFJLEVBQUdBLEVBQUkwYyxFQUFHRSxTQUFTN2MsT0FBUUMsSUFDbEMwYyxFQUFHRSxTQUFTNWMsR0FBRzJjLFlBQVloQyxLQUM3QjRCLEVBQUt2YyxHQUlMd2MsRUFBR0csWUFBWUQsSUFBT0osRUFBS0MsR0FDN0JBLElBRUZDLEVBQUdLLGFBQWFsQyxFQUFJNkIsRUFBR0ksU0FBU04sSUFDaENJLEVBQUdHLGFBQWFuQyxFQUFJZ0MsRUFBR0UsU0FBU0wsTUFHTixTQUF0Qk8sRUFBdUJDLEdBQzNCLEdBQUs1VyxPQUFPNlcsT0FJTCxZQUNtQkQsR0FEbkIsSUFDTCwyQkFBdUMsS0FBNUIxRSxFQUE0QixRQUNyQyxJQUNFRCxFQUFZQyxHQUNaLE1BQU90ZCxHQUNQMEwsRUFBT0YsSUFBUCxtQ0FDZ0M4UixFQUFVL04sR0FEMUMsdUJBQzJEdlAsRUFBSXFYLFVBSy9ELFdBWEMsb0NBSExrRixZQUFXLFdBQ1R3RixFQUFvQkMsS0FDbkIsSUFtQlBELENBQW9CMUosR0E3WHRCLDRDLHlCQStYQSxPLFNBL1grQixFQUFoQjZKLEcsb21CQ0hSLElBQU1DLEdBQWIsV0FDRSxhQUFjLFVBQ1ozZixLQUFLa0osT0FBUyxJQUFJVCxFQUFPLG1CQUN6QnpJLEtBQUtrSixPQUFPRixJQUFJLHdCQUVoQmhKLEtBQUs0ZixzQkFBd0IsS0FDN0I1ZixLQUFLNmYsMEJBQTJCLEVBQ2hDN2YsS0FBSzhmLGlDQUFtQyxLQUN4QzlmLEtBQUsrZixxQ0FBc0MsRUFDM0MvZixLQUFLZ2dCLFFBQVUsQ0FDYnpnQixLQUFNLG9CQUVSUyxLQUFLaWdCLFVBQVcsRUFFaEJqZ0IsS0FBS2tnQiwrQkFkVCwyREFpQkUsMkdBQWVyTCxFQUFmLCtCQUF5QixLQUFNc0wsRUFBL0IsaUNBQ1NqWCxFQUFVbEosS0FBVmtKLFFBQ0FGLElBQUksZ0JBRWlCLGFBQXhCaUQsU0FBU21VLFlBQ1hsWCxFQUFPRixJQUFJLHdDQUNYSixPQUFPd1QsaUJBQWlCLFFBQVEsV0FDOUJsVCxFQUFPRixJQUFJLG1CQUNYLEVBQUtxWCxnQkFBZ0IsRUFBS0MsZUFBZXpMLEdBQVVzTCxNQUNsRCxJQUVIbmdCLEtBQUtxZ0IsZ0JBQWdCcmdCLEtBQUtzZ0IsZUFBZXpMLEdBQVVzTCxHQVh2RCxnREFqQkYseUZBZ0NFLFdBQXNCSSxHQUF0Qix3SEFDa0J2Z0IsS0FBS2lnQixTQUR2QixvREFFUy9XLEVBQVVsSixLQUFWa0osT0FFRnFYLEVBSlAsdUJBS0lyWCxFQUFPRixJQUFJLGlDQUxmLGlDQVFFRSxFQUFPRixJQUFJLHlCQUEwQnVYLEdBQ3JDdmdCLEtBQUt3Z0IsVUFBVUQsR0FFZnZnQixLQUFLaWdCLFVBQVcsRUFYbEIsVUFZcUN2SixFQUFpQnJOLEtBQUtDLFVBQVVWLE9BQU9pQixnQkFBZ0JuRSxJQVo1RixlQVlFMUYsS0FBSzRmLHNCQVpQLGlCQWFnRGxKLEVBQzFDck4sS0FBS0MsVUFBVVYsT0FBT2lCLGdCQUFnQmUsSUFkNUMsUUFhRTVLLEtBQUs4ZixpQ0FiUCx3REFoQ0YsOEZBaURFLDZGQUNtQjlmLEtBQVZrSixPQUNBRixJQUFJLGlDQUZiLFNBSTZDME4sRUFDdkNyTixLQUFLQyxVQUFVVixPQUFPaUIsZ0JBQWdCbkUsSUFMNUMsY0FJUSthLEVBSlIsZ0JBTXdEL0osRUFDbERyTixLQUFLQyxVQUFVVixPQUFPaUIsZ0JBQWdCZSxJQVA1QyxPQU1ROFYsRUFOUixPQVNNRCxJQUFpQ3pnQixLQUFLNGYsd0JBQ3hDNWYsS0FBSzZmLDBCQUEyQixFQUNoQzdmLEtBQUs0ZixzQkFBd0JhLEdBRTNCQyxJQUE0QzFnQixLQUFLOGYsbUNBQ25EOWYsS0FBSytmLHFDQUFzQyxFQUMzQy9mLEtBQUs4ZixpQ0FBbUNZLEdBZjVDLGlEQWpERix5RUFvRUUsV0FBK0IsSUFBaEI3TCxFQUFnQix1REFBTixLQUNoQm1MLEVBQVdoZ0IsS0FBWGdnQixRQUNEbEIsRUFBTyxNQUFJbFcsT0FBT2lCLGlCQUNsQjhXLEVBQUk5TCxJQUFvQnpZLE9BQU9tSCxLQUFLdWIsRUFBS3BaLEdBQUssSUFBSWxELE9BQVMscUJBQXVCLHlCQUl4RixPQUhBc2MsRUFBSzhCLEVBQUkzVCxLQUFLQyxNQUNkNFIsRUFBSzZCLEVBQUlBLEVBRUYsSUFBSUUsS0FBSyxDQUFDeFgsS0FBS0MsVUFBVXdWLElBQVFrQixLQTNFNUMsa0NBOEVFLFdBQ0UsSUFBT0EsRUFBMEVoZ0IsS0FBMUVnZ0IsUUFBU0gsRUFBaUU3ZixLQUFqRTZmLHlCQUEwQkUsRUFBdUMvZixLQUF2QytmLG9DQUMxQyxJQUFLRixJQUE2QkUsRUFBcUMsT0FBTyxFQUM5RSxJQUFNakIsRUFBTyxDQUNYOEIsRUFBRzNULEtBQUtDLE1BQ1J4SCxFQUFHbWEsRUFBMkJqWCxPQUFPaUIsZ0JBQWdCbkUsRUFBSSxHQUN6RGtGLEVBQUdtVixFQUFzQ25YLE9BQU9pQixnQkFBZ0JlLEVBQUksR0FDcEVrVyxJQUFLbFksT0FBT2lCLGdCQUFnQmlYLEtBRTlCLE9BQU8sSUFBSUQsS0FBSyxDQUFDeFgsS0FBS0MsVUFBVXdWLElBQVFrQixLQXZGNUMsMENBMEZFLFdBQStCLFdBQ3RCOVcsRUFBVWxKLEtBQVZrSixPQUNINlgsR0FBc0IsRUFDMUI3WCxFQUFPRixJQUFJLG9DQUNYSixPQUFPd1QsaUJBQ0gsZ0JBQ0EsV0FDRSxHQUFLLEVBQUs2RCxVQUlWLElBQUljLEVBQUosQ0FDQUEsR0FBc0IsRUFDdEI3WCxFQUFPRixJQUFJLHlCQUNYLElBQU1nWSxFQUFVLEVBQUtDLHVCQUNoQkQsRUFJTCxFQUFLUixVQUFVUSxHQUhiOVgsRUFBT0YsSUFBSSwyQkFSWCxFQUFLcVgsZ0JBQWdCLEVBQUtDLG9CQWE5QixDQUFDWSxTQUFTLElBRWR0WSxPQUFPd1QsaUJBQ0gsWUFDQSxXQUNFLEdBQUssRUFBSzZELFVBSVYsSUFBSWMsRUFBSixDQUNBQSxHQUFzQixFQUN0QjdYLEVBQU9GLElBQUkscUJBQ1gsSUFBTWdZLEVBQVUsRUFBS0MsdUJBQ2hCRCxFQUlMLEVBQUtSLFVBQVVRLEdBSGI5WCxFQUFPRixJQUFJLDJCQVJYLEVBQUtxWCxnQkFBZ0IsRUFBS0Msb0JBYTlCLENBQUNZLFNBQVMsTUFsSWxCLHVCQXNJRSxTQUFVRixHQUNSLElBQU85WCxFQUFVbEosS0FBVmtKLE9BRVAsR0FBS29SLEtBQUwsQ0FLQSxJQUFJNkcsRUFBU3hULFVBQVU0TSxXQUFXbFMsRUFBYTJZLEdBQ3pDSSxFQUFnQnZKLGFBQVksV0FDM0JzSixHQUVIckosY0FBY3NKLEdBQ2RsWSxFQUFPRixJQUFJLDZCQUhBbVksRUFBU3hULFVBQVU0TSxXQUFXbFMsRUFBYTJZLEtBS3ZELElBQ0hqSCxZQUFXLFdBQ1RqQyxjQUFjc0osR0FDVEQsR0FDSGpZLEVBQU9GLElBQUkscUJBRVosVUFqQkQ0TSxNQUFNdk4sRUFBYTJZLE9BMUl6QixLQStKQSxNQ2hLTTlYLEdBQVMsSUFBSVQsRUFBTyxnQ0FFcEI0WSxHQUFBQSxXQUNKLFdBQVl2QyxHQUFNLFVBQ2hCLElBQU93QyxFQUF5QnhDLEVBQXpCd0MsVUFBV3pMLEVBQWNpSixFQUFkakosV0FDbEI3VixLQUFLNlYsV0FBYUEsRUFDbEI3VixLQUFLc2hCLFVBQVlBLEUsb0RBb0NuQixXQUNFLElBQU1DLEVBQWN2aEIsS0FBS3doQixpQkFFbkJDLEVBQTJCemhCLEtBQUs2VixXQUFXNkwsUUFDN0MsU0FBQ2QsR0FBRCxPQUNFQSxFQUFFZSx1QkFBeUJKLEdBQ0QsTUFBNUJYLEVBQUVlLHlCQUdOLE9BREF6WSxHQUFPRixJQUFQLFVBQWN5WSxFQUF5QmpmLE9BQXZDLGdDQUNLaWYsRUFBeUJqZixPQUN2QmlmLEVBRHNDLEssNEJBSS9DLFdBQ0UsSUFBd0IsSUFBcEJ6aEIsS0FBS3NoQixVQUVQLE1BREFwWSxHQUFPRixJQUFJLDJCQUNMLElBQUl0SyxNQUFNLFlBQ1gsT0FBSXNCLEtBQUtzaEIsVUFBWSxHQUFXLElBQ2hDLE8sMkNBbkRULGlHQUNFcFksR0FBT0YsSUFBSSxzQkFDSjRZLEVWUUcsZ0JVUEpDLEVBQWdCeFksS0FBS3VELE1BQU1oRSxPQUFPNEUsZUFBZTFFLFFBQVE4WSxJQUMzRC9MLEVBQWFnTSxNQUFBQSxPQUpuQixFQUltQkEsRUFBZWhNLFdBQzFCaU0sRUFBWUQsTUFBQUEsT0FMcEIsRUFLb0JBLEVBQWVDLFVBQzVCak0sR0FBZWlNLEVBTnRCLHdCQU9JNVksR0FBT0YsSUFBSSx5Q0FQZixTQVF1QjJNLElBUnZCLGNBUUlFLEVBUkosT0FTVWtNLEVBQXlCLENBQzdCRCxVQUFXN1UsS0FBS0MsTUFDaEIySSxXQUFBQSxHQUVGak4sT0FBTzRFLGVBQWVrTSxRQUFRa0ksRUFBWXZZLEtBQUtDLFVBQVV5WSxJQWI3RCxrQkFjV2xNLEdBZFgsWUFnQk1pTSxFQWhCTix1QkFpQnlCN1UsS0FBS0MsTUFBUTRVLEdBQWQsTVZmUyxHVUZqQyx3QkFtQk01WSxHQUFPRixJQUFJLDBCQW5CakIsVUFvQnlCMk0sSUFwQnpCLGVBb0JNRSxFQXBCTixPQXFCWWtNLEVBQXlCLENBQzdCRCxVQUFXN1UsS0FBS0MsTUFDaEIySSxXQUFBQSxHQUVGak4sT0FBTzRFLGVBQWVrTSxRQUFRa0ksRUFBWXZZLEtBQUtDLFVBQVV5WSxJQXpCL0Qsa0JBMEJhbE0sR0ExQmIsZUE2QkUzTSxHQUFPRixJQUFJLDRDQTdCYixrQkE4QlM2TSxHQTlCVCw0QyxpREFQSXdMLEdBOEROLE1DaEVNblksR0FBUyxJQUFJVCxFQUFPLDJCQUVidVosR0FBbUIsU0FBQzVZLEdBQy9CRixHQUFPRixJQUFJLGdCQUFpQkssS0FBS0MsVUFBVUYsSUFDM0MsSUFBT0csRUFBOEJILEVBQTlCRyxTQUFVQyxFQUFvQkosRUFBcEJJLFVBQVdyTSxFQUFTaU0sRUFBVGpNLE1BQzVCLE9BQVFvTSxHQUNOLElBQUssV0FDSCxPQUFPMFksR0FBZ0J6WSxFQUFXck0sR0FDcEMsSUFBSyxnQkFDSCxPQUFPK2tCLEdBQXFCMVksRUFBV3JNLEdBQ3pDLFFBRUUsT0FEQStMLEdBQU9GLElBQUksbUJBQW9CTyxJQUN4QixJQUlQNFksR0FBYSxTQUFDQyxFQUFTN2lCLEdBQzNCLElBQ0UsT0FBUUEsR0FDTixJQUFLLFVBQ0gsT0FBT2lPLGVBQWUxRSxRQUFRc1osR0FDaEMsSUFBSyxRQUNILE9BQU92WixhQUFhQyxRQUFRc1osR0FDOUIsUUFFRSxPQURBbFosR0FBT0YsSUFBSSxlQUFnQnpKLEdBQ3BCLE1BRVgsTUFBTy9CLEdBRVAsT0FEQTBMLEdBQU9GLElBQVAsZ0NBQW9Db1osR0FBVzVrQixHQUN4QyxPQUlMeWtCLEdBQWtCLFNBQUN6WSxFQUFXck0sR0FDbEMsSUFBTWtsQixFQUFZbFIsU0FBU2dSLEdBQVc1WixFQUFpQyxZQUV2RSxPQURBVyxHQUFPRixJQUFJLDZCQUE4QnFaLEdBQ3ZCLE9BQWRBLEdBQ0ZuWixHQUFPRixJQUFJLG1EQUNKLEdBRUZXLEdBQWlCMFksRUFBVzdZLEVBQVcySCxTQUFTaFUsS0FHbkQra0IsR0FBdUIsU0FBQzFZLEVBQVdyTSxHQUN2QyxJQUFNbWxCLEVBQWdCblIsU0FDbEJnUixHQUFXM1osRUFBbUQsVUFFbEUsT0FEQVUsR0FBT0YsSUFBSSxpREFBa0RzWixHQUN2QyxPQUFsQkEsR0FDRnBaLEdBQU9GLElBQUksc0VBQ0osR0FFRlcsR0FBaUIyWSxFQUFlOVksRUFBVzJILFNBQVNoVSxLQ3BEdkQrTCxHQUFTLElBQUlULEVBQU8sMkJBRWI4WixHQUFtQixTQUFDblosR0FDL0JGLEdBQU9GLElBQUksZ0JBQWlCSyxLQUFLQyxVQUFVRixJQUMzQyxJQWtCSThPLEVBbEJHM08sRUFBOEVILEVBQTlFRyxTQUFVQyxFQUFvRUosRUFBcEVJLFVBQVdyTSxFQUF5RGlNLEVBQXpEak0sTUFBTzhkLEVBQWtEN1IsRUFBbEQ2UixTQUFVdUgsRUFBd0NwWixFQUF4Q29aLFlBQTdDLEVBQXFGcFosRUFBM0I4UixpQkFBQUEsT0FBMUQsTUFBNkUsS0FBN0UsRUFDSXVILEVBQWV4SCxFQUtuQixHQUpJd0gsSUFBaUJ4VyxTQUFTbUosY0FBY3FOLEtBQzFDQSxFQUFldkgsR0FBc0N1SCxHQUd0QyxPQUFibFosRUFDRixPQUFPSSxHQUFpQnNDLFNBQVNtSixjQUFjcU4sR0FBZWpaLEVBQVdyTSxHQUUzRSxHQUFJc2xCLElBQWlCeFcsU0FBU21KLGNBQWNxTixHQUUxQyxPQURBdlosR0FBT0YsSUFBSSwrQkFDSixFQUVULEdBQUl3WixJQUFnQnZXLFNBQVNnSSxpQkFBaUJ1TyxHQUU1QyxPQURBdFosR0FBT0YsSUFBSSwrQkFDSixFQU9ULE9BSEl5WixFQUFjdkssRUFBVWpNLFNBQVNtSixjQUFjcU4sR0FDMUNELElBQWF0SyxFQUFVOVIsTUFBTUksS0FBS3lGLFNBQVNnSSxpQkFBaUJ1TyxLQUU3RGpaLEdBQ04sSUFBSyxjQUNILElBQUltWixFQUVGQSxFQURFdGMsTUFBTU8sUUFBUXVSLEdBQ05BLEVBQVE5QixRQUFPLFNBQUN1TSxFQUFXQyxHQUVuQyxPQURBRCxFQUFheFIsU0FBU3lSLEVBQUt2VyxZQUFZN0IsUUFBUSxLQUFNLElBQUlBLFFBQVEsSUFBSyxPQUVyRSxHQUVPMkcsU0FBU2xGLFNBQVNtSixjQUFjcU4sR0FBY3BXLFlBQ25EN0IsUUFBUSxLQUFNLElBQUlBLFFBQVEsSUFBSyxLQUV0QyxJQUFNME8sRUFBZS9ILFNBQVN1UixHQUM5QixPQUFPL1ksR0FBaUJ1UCxFQUFjMVAsRUFBV3JNLEdBRW5ELElBQUssWUFDSCxPQUFPd00sR0FBaUJ2RCxNQUFNSSxLQUFLMFIsRUFBUXpDLFdBQVlqTSxFQUFXck0sR0FDcEUsSUFBSyxRQUNILElBQU0rYixFQUFlOVMsTUFBTU8sUUFBUXVSLEdBQVdBLEVBQVExVixPQUFTMFYsRUFBVSxFQUFJLEVBQzdFLE9BQU92TyxHQUFpQnVQLEVBQWMxUCxFQUFXck0sR0FFbkQsUUFFRSxPQURBK0wsR0FBT0YsSUFBSSx5QkFDSixJQ2pEUEUsR0FBUyxJQUFJVCxFQUFPLDRCQUVib2EsR0FBb0IsU0FBQ3paLEVBQU0wWixHQUN0QzVaLEdBQU9GLElBQUksZ0JBQWlCSyxLQUFLQyxVQUFVRixJQUMzQyxJQUFPdVIsRUFBZW1JLEVBQWZuSSxZQUNBcFIsRUFBd0NILEVBQXhDRyxTQUFVQyxFQUE4QkosRUFBOUJJLFVBQVdyTSxFQUFtQmlNLEVBQW5Cak0sTUFBTzRsQixFQUFZM1osRUFBWjJaLFNBQ25DLElBQUt4WixFQUVILE9BREFMLEdBQU9GLElBQUksOEJBQ0osRUFFVCxJQUFJOUssRUFBVSxHQUNFLGVBQVo2a0IsSUFDRjdrQixFQUFVLENBQ1J5YyxZQUFBQSxJQUdKLElBQ01sUixFQURlekUsU0FBU3VFLEdBQVVxUyxLQUFLMWQsRUFDeEI4a0IsR0FDckIsT0FBT3JaLEdBQWlCRixFQUFjRCxFQUFXck0sSUNqQjdDK0wsR0FBUyxJQUFJVCxFQUFPLDJCQUVid2EsR0FBbUIsU0FBQzdaLEdBQy9CRixHQUFPRixJQUFJLGdCQUFpQkssS0FBS0MsVUFBVUYsSUFDM0MsSUFBT0csRUFBOEJILEVBQTlCRyxTQUFVQyxFQUFvQkosRUFBcEJJLFVBQVdyTSxFQUFTaU0sRUFBVGpNLE1BQzVCLE9BQVFvTSxHQUNOLElBQUssV0FDSCxPQUFPMlosR0FBZ0IxWixFQUFXck0sR0FDcEMsSUFBSyxVQUNILE9BQU9nbUIsR0FBZTNaLEVBQVdyTSxHQUNuQyxRQUNFLE9BQU8sT0FhUCtsQixHQUFrQixTQUFDMVosRUFBV3JNLEdBQ2xDLElBQU1pbUIsR0FBWW5XLEtBQUtDLE1BVkcsV0FDMUIsSUFDRSxPQUFPLElBQUlELEtBQUtrRSxTQUFTdkksT0FBTzRFLGVBQWUxRSxRQUFRUCxLQUN2RCxNQUFPL0ssR0FFUCxPQURBMEwsR0FBT0YsSUFBSSxrQ0FBbUN4TCxHQUN2Q3lQLEtBQUtDLE9BS2lCbVcsSUFBeUIsSUFDeEQsT0FBTzFaLEdBQWlCeVosRUFBVTVaLEVBQVcySCxTQUFTaFUsS0FHbERnbUIsR0FBaUIsU0FBQzNaLEVBQVdyTSxHQUFVLE1BQ3JDbW1CLEVBQWMsVUFBRzFhLE9BQU80RSxlQUFlMUUsUUFBUVAsVUFBakMsYUFBRyxFQUFxRTJOLE1BQU0sS0FDbEcsT0FBT3ZNLEdBQWlCMlosRUFBZ0I5WixFQUFXck0sSUMvQi9DK0wsR0FBUyxJQUFJVCxFQUFPLHVCQUViOGEsR0FBZSxTQUFDbmEsR0FDM0JGLEdBQU9GLElBQUksZ0JBQWlCSyxLQUFLQyxVQUFVRixJQUMzQyxJQUFPRyxFQUE4QkgsRUFBOUJHLFNBQVVDLEVBQW9CSixFQUFwQkksVUFBV3JNLEVBQVNpTSxFQUFUak0sTUFFNUIsR0FDTyxnQkFEQ29NLEVBQ04sQ0FDRSxJQUFNaWEsRUFBVzVhLE9BQU80UyxXQUFXbFQsR0FBb0JtVCxRQUFVLFNBQVcsVUFDNUUsT0FBTzlSLEdBQWlCNlosRUFBVWhhLEVBQVdyTSxLQ1Y3QytMLEdBQVMsSUFBSVQsRUFBTyw2QkFFYmdiLEdBQXFCLDZCQUFHLFdBQU9yYSxHQUFQLG9GQUNuQ0YsR0FBT0YsSUFBSSxnQkFBaUJLLEtBQUtDLFVBQVVGLElBQ3BDSSxFQUEwQkosRUFBMUJJLFVBQVdyTSxFQUFlaU0sRUFBZmpNLE1BQU91bUIsRUFBUXRhLEVBQVJzYSxLQUZVLHVCQUlqQ3hhLEdBQU9GLElBQUksdUJBSnNCLG1CQUsxQixHQUwwQix1QkFPVjZRLEtBUFUsY0FPN0I1RCxFQVA2QixpQkFRWE0sRUFBYU4sRUFBYXlOLEdBUmYsZUFRN0JDLEVBUjZCLE9BUzdCbGEsRUFBZWthLEVBVGMsa0JBVTVCaGEsR0FBaUJGLEVBQWNELEVBQVdyTSxJQVZkLDRDQUFILHNELDJnQ0NLbEMsSUFBTStMLEdBQVMsSUFBSVQsRUFBTyx1QkFFTG1iLEdBQUFBLFdBQ25CLFdBQVk5RSxHQUFNLFVBQ2hCLElBQU8rRSxFQUE2RC9FLEVBQTdEK0UsWUFBYUMsRUFBZ0RoRixFQUFoRGdGLGtCQUFtQmYsRUFBNkJqRSxFQUE3QmlFLFNBQXZDLEVBQW9FakUsRUFBbkJpRixTQUFBQSxPQUFqRCxNQUE0RCxLQUE1RCxFQUNBL2pCLEtBQUs2akIsWUFBY0EsRUFDbkI3akIsS0FBSzhqQixrQkFBb0JBLEVBQ3pCOWpCLEtBQUsrakIsU0FBV0EsRUFDaEIvakIsS0FBSytpQixTQUFXQSxFLDZEQUdsQiw2RkFDcUIvaUIsS0FBSzZqQixhQUQxQixnRUFDYXphLEVBRGIsaUJBRWdDcEosS0FBS2drQixVQUFVNWEsR0FGL0MsNERBSWEsR0FKYix5S0FPUyxHQVBULGdFLDhGQVVBLDZGQUNxQnBKLEtBQUs4akIsbUJBRDFCLGdFQUNhMWEsRUFEYixpQkFFZ0NwSixLQUFLZ2tCLFVBQVU1YSxHQUYvQyw0REFJYUEsRUFBS3lQLGNBSmxCLHdLQU9TLE1BUFQsZ0UsbUZBVUEsV0FBZ0J6UCxHQUFoQiw2RUFDUzZhLEVBQWdDN2EsRUFBaEM2YSxNQUFPQyxFQUF5QjlhLEVBQXpCOGEsZ0JBQWlCM2tCLEVBQVE2SixFQUFSN0osS0FDM0I0a0IsRUFBZ0IsS0FGdEIsS0FJVTVrQixFQUpWLE9BS1MsWUFMVCxPQVFTLFlBUlQsT0FXUyxZQVhULE9BY1MsY0FkVCxRQWlCUyxRQWpCVCxRQW9CUyxhQXBCVCxRQXVCUyxnQkF2QlQsUUEwQlMsV0ExQlQsK0JBTU00a0IsRUFBZ0JsQixHQUFpQjdaLEdBTnZDLG1DQVNNK2EsRUFBZ0JuQyxHQUFpQjVZLEdBVHZDLG1DQVlNK2EsRUFBZ0I1QixHQUFpQm5aLEdBWnZDLG9DQWVNK2EsRUFBZ0JoYixFQUFtQkMsR0FmekMsb0NBa0JNK2EsRUFBZ0JuYSxFQUFhWixHQWxCbkMsb0NBcUJNK2EsRUFBZ0J0QixHQUFrQnpaLEVBQU1wSixLQUFLK2lCLFVBckJuRCxvQ0F3Qk1vQixFQUFnQlosR0FBYW5hLEdBeEJuQyw4Q0EyQjRCcWEsR0FBc0JyYSxHQTNCbEQsZUEyQk0rYSxFQTNCTiwyQ0E4Qk1qYixHQUFPRixJQUFQLDZCQUFpQ3pKLElBOUJ2QyxrQkErQmEsTUEvQmIsWUFrQ00wa0IsRUFsQ04sc0JBbUNZQyxFQW5DWixPQW9DVyxRQXBDWCxRQXVDVyxPQXZDWCxRQTBDVyxRQTFDWCxpQ0FxQ3dCQyxHQXJDeEIsdUNBcUMrQ25rQixLQUFLZ2tCLFVBQVVDLEdBckM5RCxtQ0FxQ1FFLEVBckNSLDBDQXdDd0JBLEVBeEN4Qix1Q0F3QytDbmtCLEtBQUtna0IsVUFBVUMsR0F4QzlELG1DQXdDUUUsRUF4Q1IsOENBMkN3QkEsRUEzQ3hCLFVBMkMrQ25rQixLQUFLZ2tCLFVBQVVDLEdBM0M5RCwyQkEyQ1FFLEVBM0NSLCtDQThDUWpiLEdBQU9GLElBQUksMkJBOUNuQixzREFrRFNtYixHQWxEVCxpRCxrREE3Qm1CUCxHQ1JmMWEsR0FBUyxJQUFJVCxFQUFPLGVBRWIyYixHQUFpQiw2QkFBRywyRkFDL0JsYixHQUFPRixJQUFJLGdDQUNMb1IsRUFBVUYsS0FGZSx1QkFJN0JoUixHQUFPRixJQUFJLGdCQUprQixrQkFLdEIsTUFMc0IsY0FPekJnWCxFQUFVLElBQUlxRSxTQUNaL0csT0FBTyxlQUFnQixvQkFSQSxtQkFXVDFILE1sQlJNLGtDa0JRZ0IsQ0FDeENyWCxPQUFRLE9BQ1J1Z0IsS0FBTXpWLEtBQUtDLFVBQVU4USxHQUNyQjRGLFFBQUFBLEVBQ0FzRSxLQUFNLFNBZnFCLFFBVzdCM0osRUFYNkIsZ0VBa0I3QnpSLEdBQU9ELEtBQUssK0JBbEJpQixrQkFtQnRCLE1BbkJzQixXQXFCMUIwUixFQUFZNEosR0FyQmMsd0JBc0I3QnJiLEdBQU9GLElBQUksOEJBdEJrQixrQkF1QnRCLE1BdkJzQix5QkF5QlgyUixFQUFZN0UsT0F6QkQsV0F5Qi9CNkUsRUF6QitCLCtCQTJCN0J6UixHQUFPRixJQUFJLGdEQTNCa0Isa0JBNEJ0QixNQTVCc0IsZUE4Qi9CRSxHQUFPRixJQUFJLGtDQTlCb0Isa0JBK0J4QjJSLEdBL0J3QiwwREFBSCxxRCwyZ0NDNEI5QixZQUFDLG1HQUNDOU4sRUFBV2xDLEVBQVlXLGNBQ25Ca1osRUFBVSxLQUNSdGIsRUFBUyxJQUFJVCxFQUNaZ2MsRW5CWFEsa0JtQllYQyxFQUFpQixFQUNyQnhiLEVBQU83SCxLQUFLLHdCQU5iLG9MQVFHeUssSUFDTTZZLEVBQXFCUCxLQUVyQlEsRUFBWXJMLEtBQ2xCaUwsRUFBVSxJQUFJN0UsR0FDZDlTLEVBQVdsQyxFQUFZWSxhQWIxQixTQWU0QnNPLEtBZjVCLGNBZVM1RCxFQWZULE9BZ0JHL00sRUFBT0YsSUFBSSw0QkFBNkJpTixHQWhCM0MsVUFpQjJCTSxFQUFhTixHQWpCeEMsV0FpQlNxTCxFQWpCVCxPQWtCUXNELEVBbEJSLHNCQW1CU3RELEVuQnpDaUIsSW1Cc0IxQixxQkFvQjBCLElBQWZBLEVBcEJYLHVCQXFCZSxJQUFJNWlCLE1BQU0sa0NBckJ6QixRQXVCT2lPLEVBQXFCLFFBQVEsR0F2QnBDLHdCQXdCWUEsRUFBcUIsUUFBUSxHQXhCekMsV0EwQktFLEVBQVdsQyxFQUFZYSxXQUVsQjhPLEtBNUJWLHVCQTZCYSxJQUFJNWIsTUFBTSwrQkE3QnZCLGNBZ0NLZ21CLEVBQWlCdlQsU0FBUzNELGVBQWUxRSxRQUFRMmIsS0FBbUIsR25CbERuQyxHbUJrQnRDLHVCQWtDTzVYLEVBQVdsQyxFQUFZa0IseUJBQ2pCLElBQUluTixNQUFNLHFDQW5DdkIsZ0NBcUNVd0ssRUFBTzdILEtBQUssNERBckN0QixXQXVDUTRLLFNBQVN1SixnQkFBZ0JDLFVBQVVvUCxTQUFTLGdCQXZDcEQsdUJBd0NLaFksRUFBV2xDLEVBQVljLGVBQ3ZCK0IsZUFBZWtNLFFBQVErSyxFQUFlQyxFQUFpQixHQUNqRCxJQUFJaG1CLE1BQU0sNEJBMUNyQixXQTRDR2tLLE9BQU9rQixVQUFZbEIsT0FBT2tCLFdBQWEsSUFDRixLQUFqQyxVQUFBbEIsT0FBT2lCLHVCQUFQLGVBQXdCaWIsTUFDMUJsYyxPQUFPa0IsVUFBVTdILEtBQUssQ0FBQ3liLE1BQU8sT0FBUXFILFFBQVMsVUFDTCxLQUFqQyxVQUFBbmMsT0FBT2lCLHVCQUFQLGVBQXdCaWIsT0FDakNsYyxPQUFPa0IsVUFBVTdILEtBQUssQ0FBQ3liLE1BQU8sT0FBUXFILFFBQVMsV0FFYixJQUFoQ25jLE9BQU9pQixnQkFBZ0JpYixLQWxEOUIsdUJBa0RvRCxJQUFJcG1CLE1BQU0sd0NBbEQ5RCxlQW1ERzhsQixFQUFRUSxXQUVGQyxFQUFlcmMsT0FBT3NCLFNBQVNLLE9BQy9CMmEsRUFBMEJOLEdBQVlLLEVBQWFsYixTQUFTLFdBQWFrYixFQUFhbmhCLE1BQ3hGbWhCLEVBQWF6WSxRQUFRLEtBQU8sRUFDNUJ5WSxFQUFhdlksWUFBWSxNQUMzQndKLE1BQU0sS0FBS3RFLEtBQUksU0FBQ3VULEdBQUQsT0FBVWhVLFNBQVNnVSxFQUFNLE9BQWEsS0FFdkQ5TSxVYndESytNLE9BQVl4SyxPQUFvQnlLLE9BQVlDLE9BQW1CQyxPQUVoRWxELE9BQ0FtRCxPQUNBalksT0FDQWtZLE9BQ0FDLEVBTkNOLEVBQWtGN2MsRUFBdEVxUyxFQUFzRXJTLEVBQWxEOGMsRUFBa0Q5YyxFQUF0QytjLEdBQXNDL2MsRUFBbkJnZCxHQUFtQmhkLEVBRW5GOFosR0FBWTdVLGVBQWUxRSxRQUFRc2MsR0FDbkNJLEdBQW1CaFksZUFBZTFFLFFBQVE4UixHQUMxQ3JOLEdBQVlDLGVBQWUxRSxRQUFRdWMsR0FDbkNJLEdBQW1CalksZUFBZTFFLFFBQVF3YyxJQUMxQ0ksR0FBaUJsWSxlQUFlMUUsUUFBUXljLElBRXpDbEQsR0FHSDdVLGVBQWVrTSxRQUFRMEwsRUFBWWpVLFNBQVNrUixJQUFhLEdBRnpEN1UsZUFBZWtNLFFBQVEwTCxFQUFZLEdBSVosT0FBckJJLElBQ0ZoWSxlQUFla00sUUFBUWtCLEVBQW9CLEdBRXhDck4sSUFDSEMsZUFBZWtNLFFBQVEyTCxFQUFZaFksT0FBT0MsY0FFdkNtWSxJQUNIalksZUFBZWtNLFFBQVE0TCxHQUFtQnJZLEtBQUtDLE9BRTVDd1ksR0FHSGxZLGVBQWVrTSxRQUFRNkwsR0FBaUIsQ0FBQzNjLE9BQU9zQixTQUFTTyxTQUFVaWIsS0FGbkVsWSxlQUFla00sUUFBUTZMLEdBQWlCLENBQUMzYyxPQUFPc0IsU0FBU08sV2E3RXpEc1AsWUFBVyxXQUNUeEUsTUFDQyxLQUNHb1EsRUFBb0J0RSxHQUFBQSxnQkFDcEJtQyxFQUFXNWEsT0FBTzRTLFdBQVdsVCxHQUFvQm1ULFFBQ2pEbUssRUFBa0IsQ0FBQ0MsU0FBUyxFQUFNQyxXQUFXLEVBQU1DLFlBQVksR0FFL0RDLEVBcEVULDZCQW9FMkIsV0FBT2xMLEdBQVAsa0hBRXBCL04sRUFRRStOLEVBUkYvTixHQUNBK0wsRUFPRWdDLEVBUEZoQyxRQUNBK0ssRUFNRS9JLEVBTkYrSSxZQUNBb0MsRUFLRW5MLEVBTEZtTCxPQUNBQyxFQUlFcEwsRUFKRm9MLHVCQUNBQyxFQUdFckwsRUFIRnFMLGNBQ0FyQyxFQUVFaEosRUFGRmdKLGtCQUNBc0MsRUFDRXRMLEVBREZzTCxRQUVFbEIsR0FBNEJBLEVBQXdCbmIsU0FBU2dELEdBWDNDLG9EQWNQLFdBQVhrWixHQUF3QnpDLEVBZE4sdUJBZXBCdGEsRUFBT0YsSUFBSSxzQ0FmUyw2QkFrQlAsWUFBWGlkLElBQXdCekMsRUFsQk4sdUJBbUJwQnRhLEVBQU9GLElBQUksdUNBbkJTLDBCQXNCdEIsR0FBSW1kLEVBQWUsQ0FDYkUsRUFBc0JGLEVBQ3JCL2YsTUFBTU8sUUFBUXdmLEtBQWdCRSxFQUFzQixDQUFDRixJQUMxRGpkLEVBQU9GLElBQVAseUJBQTZCbWQsRUFBN0Isa0NBQW9FcFosSUFIbkQsS0FJVXNaLEdBSlYsSUFJakIsMkJBQVdDLEVBQXFDLFNBQ3hDQyxFQUFnQkMsRUFBcUJGLEdBQ3ZDRSxFQUFxQkYsR0FBZ0IsSUFDdkJ2YyxTQUFTZ0QsR0FDekI3RCxFQUFPRixJQUFJLDZDQUNOd2QsRUFBcUJGLEdBQXJCLFlBQXlDQyxHQUF6QyxDQUF3RHhaLElBVGhELCtCQXRCRyxHQW1DaEIwWixFQUFhLElBQUk3QyxHQUFXLENBQUNDLFlBQUFBLEVBQWFDLGtCQUFBQSxFQUFtQmYsU0FEbEQsQ0FBQ3BJLFlBQUFBLEtBRWxCelIsRUFBT0YsSUFBSSwrQ0FBaUQrRCxHQXBDdEMsTUFxQ2pCOFcsRUFyQ2lCLHVDQXFDSTRDLEVBQVdDLGFBckNmLHlEQXNDaEJDLEVBQWdDLE1BQVhQLEVBQWlCLEVBQUssSUFBTUEsR25COUg5QixHbUIrSG5CRixJQUVJVSxFQUZvQixVQUVTQyxFQUFrQi9aLE1BQUssU0FBQzhULEdBQUQsT0FBT0EsRUFBRTdULEtBQU9tWixZQUZoRCxhQUVTLEVBQWdFRSxPQUNuR08sRUFBb0QsTUFBL0JDLEVBQXFDLEVBQUssSUFBTUEsR25CbEloRCxJbUJxSXZCMWQsRUFBT0YsSUFBSSx5QkFBMkIyZCxHQUVoQ0csRUFBd0JaLEdBQTBCblosRUFJckIsSUFBZDZYLEVBbkRELHNCQW1EbUIsSUFuRG5CLHlDQW1EK0JyTyxFQUFhTixFQUFhNlEsR0FuRHpELCtCQW1EZEMsRUFuRGMsS0FvRHBCN2QsRUFBT0YsSUFBSSxpQkFBbUIrZCxFQUFuQiwyQkFBc0RuQyxFQUFZLEtBQU8sUUFDaEYvTCxFQUFlLEtBQ2ZtTyxFQUFXbE8sR0FDWGdMLEVBdkRnQix3QkF3RGxCNWEsRUFBT0YsSUFBSSxzREFBd0QrRCxHQXhEakQsVUF5REcwWixFQUFXUSx1QkF6RGQsU0F5RGxCcE8sRUF6RGtCLFNBMkRoQjNQLEVBQU9GLElBQUksaUNBQWtDNlAsR0FDN0NtTyxFQUFXck8sR0FBZUcsRUFBU0QsSUFDOUIzUCxFQUFPRixJQUFJLDBDQTdEQSxhQStEaEIrZCxFQUFlSixHQS9EQyx3QkFnRWxCemQsRUFBT0YsSUFBUCxvQkFBd0IrRCxFQUF4QiwwQ2RqRnFDN1AsRWNrRk42UCxFZGxGVzVQLEVja0ZQLENBQUMrb0IsdUJBQXlCQSxHQUEwQixLQUFPck4sYUFBQUEsR2RqRnRHalEsT0FBT2lCLGdCQUFnQmUsRUFBRTFOLEdBQU9DLEVjZ0JOLDRDQW9FWnVpQixHQUFnQnNILEVBQVVyTSxHQXBFZCxlQXFFbEJ4TixFQUFvQkosRUFBSSxDQUFDOEwsYUFBQUEsSUFyRVAsMkJBeUV0QjNQLEVBQU9GLElBQUksb0NBQXFDK0QsR0F6RTFCLGtDZGpCa0IsSUFBQzdQLEVBQUtDLEljaUJ4QixPQXBFM0IsdURBa0pTK3BCLEVBQXVCLFdBQzNCLElBQU9DLEVBQWtDM2UsRUFDekMsR0FBSUksT0FBT3NCLFNBQVNDLEtBQUtKLFNBQVMseUJBQTBCLENBQzFELElBQU1xZCxFQUFnQmhoQixNQUFNSSxLQUFLeUYsU0FBU2dJLGlCQUFpQixXQUUzRCxHQURBbVQsRUFBY25sQixLQUFkLE1BQUFtbEIsRUFBYSxFQUFTaGhCLE1BQU1JLEtBQUt5RixTQUFTZ0ksaUJBQWlCLGtCQUN0RG1ULEVBQWM1a0IsT0FHakIsT0FGQTBHLEVBQU9GLElBQUksaUNBQ1hKLE9BQU9DLGFBQWE2USxRQUFReU4sRUFBZ0MsR0FHOURqZSxFQUFPRixJQUFJLG1CQUFvQm9lLEdBQy9CLElBQU1DLEVBQTZCRCxFQUFjaFIsUUFBTyxTQUFDdU0sRUFBV0MsR0FFbEUsT0FEQUQsRUFBYXhSLFNBQVN5UixFQUFLdlcsWUFBWTdCLFFBQVEsS0FBTSxJQUFJQSxRQUFRLElBQUssT0FFckUsR0FDSHRCLEVBQU9GLElBQUksa0NBQW1DcWUsR0FDMUNBLEdBQThCLEdBQ2hDemUsT0FBT0MsYUFBYTZRLFFBQ2hCeU4sRUFBZ0NFLFFBRTdCemUsT0FBT3NCLFNBQVNDLEtBQUtKLFNBQVMsd0JBSWpCLE9BREFuQixPQUFPQyxhQUFhQyxRQUFRcWUsS0FGbER2ZSxPQUFPQyxhQUFhNlEsUUFBUXlOLEVBQWdDLE9BVTVEdmUsT0FBT3NCLFNBQVNDLEtBQUtKLFNBQVMsMkJBQzFCdWQsRUFBVyxJQUFJQyxrQkFBaUIsV0FDcENyZSxFQUFPRixJQUFJLG1EQUNYa2UsUUFFSU0sRUFBcUJ2YixTQUFTbUosY0FBYyxtQkFDMUJrUyxFQUFTRyxRQUFRRCxFQUFvQjVCLElBdkxsRSxVQTJMMkN2aUIsUUFBUXFrQixJQUFJLENBQUMvQixFQUFtQmhCLElBM0wzRSw2QkEyTFU5TyxFQTNMVixLQTJMc0I4RSxFQTNMdEIsS0E2TEd6UixFQUFPRixJQUFJLHFCQUFzQjZNLEdBQ2pDM00sRUFBT0YsSUFBSSw0QkFBNkJzWSxHQUN4Q3BZLEVBQU9GLElBQUksZ0JuQnJOWSxJbUJzTnZCRSxFQUFPRixJQUFJLDBCQUEyQnNZLEVuQnROZixJbUJ1TnZCcFksRUFBTzdILEtBQVAsK0JuQnZOdUIsR21CdU52QixNQUVNc21CLEVBQXNCLElBQUl0RyxHQUFvQixDQUNsRHhMLFdBQUFBLEVBQ0F5TCxVQUFBQSxJQUVGelUsRUFBV2xDLEVBQVllLDZCQUNqQm1iLEVBQW9CYyxFQUFvQkMsd0JBQ3ZCcGxCLE9Bek0xQix3QkEwTUswRyxFQUFPRixJQUFJLDJEQUNYdU0sSUEzTUwsc0NBOE1TaVIsRUFBdUIsR0E5TWhDLEtBK00yQkssR0EvTTNCLGtFQStNYy9MLEVBL01kLDRCQWlOYWtMLEVBQWdCbEwsR0FqTjdCLDJEQW1OTzVSLEVBQU9GLElBQUksd0JBQVgsTUFuTlAsaUpBOE5HLElBUkF1TSxJQUNBMUksRUFBV2xDLEVBQVlnQixtQkFDdkJ6QyxFQUFPRixJQUFJLHVCQUF3QkosT0FBT2lCLGdCQUFnQm5FLEdBRTFEbVMsYUFBWSxXQUNWMk0sRUFBUXFELHdCQUNQLEtBNU5OLGFBOE5RLElBQU0zcUIsRUFBRyxLQUNONHFCLEVBQWV0QixFQUFxQnRwQixHQUNwQzZxQixFQUFvQmxCLEVBQWtCbkYsUUFBTyxTQUFDZCxHQUFELE9BQU9rSCxFQUFhL2QsU0FBUzZXLEVBQUU3VCxPQUNsRixPQUFRN1AsR0FDTixJQUFLLGtCQUNILElBQU1vcUIsRUFBVyxJQUFJVSxnQkFBZSxXQUFXLFdBQ3JCRCxHQURxQixJQUM3QywyQkFBMkMsS0FBaENqTixFQUFnQyxRQUN6QzVSLEVBQU9GLElBQVAsNkJBQWlDOFIsRUFBVS9OLEdBQTNDLDBCQUNBaVosRUFBZ0JsTCxJQUgyQixrQ0FNL0N3TSxFQUFTRyxRQUFReGIsU0FBU3VKLGlCQUUxQixNQUNGLElBQUssVUFDSHVFLFlBQVcsV0FBTSxXQUNTZ08sR0FEVCxJQUNmLDJCQUEyQyxLQUFoQ2pOLEVBQWdDLFFBQ3pDNVIsRUFBT0YsSUFBUCw2QkFBaUM4UixFQUFVL04sR0FBM0Msa0JBQ0FpWixFQUFnQmxMLElBSEgsaUNBS2QsS0FFSCxNQUNGLElBQUssaUJBQWtCLFdBQ0dpTixHQURILDJCQUNWak4sRUFEVSxhQUVTMVUsTUFBTU8sUUFBUW1VLEVBQVVtTixrQkFDcERuTixFQUFVbU4saUJBQW1CLENBQUNuTixFQUFVbU4sbUJBSHJCLElBSW5CLDJCQUE0QyxLQUFqQ2hOLEVBQWlDLFFBQ3BDL0MsRUFBVWpNLFNBQVNtSixjQUFjNkYsR0FDbkMvQyxHQUNlLElBQUlxUCxrQkFBaUIsV0FDcENyZSxFQUFPRixJQUFQLDZCQUFpQzhSLEVBQVUvTixHQUEzQyx5QkFDQWlaLEVBQWdCbEwsTUFFVDJNLFFBQVF2UCxFQUFTME4sSUFYWCxnQ0FDckIsMkJBQTJDLElBRHRCLDhCQWdCckIsTUFDRixJQUFLLFlBQ0hoZCxPQUFPbUksU0FBVyxXQUFXLFdBQ0hnWCxHQURHLElBQzNCLDJCQUEyQyxLQUFoQ2pOLEVBQWdDLFFBQ3pDNVIsRUFBT0YsSUFBUCw2QkFBaUM4UixFQUFVL04sR0FBM0Msb0JBQ0FpWixFQUFnQmxMLElBSFMsZ0NBTzdCLE1BQ0YsSUFBSyxzQkFDSCxJQUFJckIsRUFBYzdRLE9BQU9zQixTQUFTSyxPQUM1QitjLEVBQVcsSUFBSUMsa0JBQWlCLFdBQ3BDLEdBQUkzZSxPQUFPc0IsU0FBU0ssU0FBV2tQLEVBQWEsQ0FDMUNBLEVBQWM3USxPQUFPc0IsU0FBU0ssT0FEWSxXQUVsQndkLEdBRmtCLElBRTFDLDJCQUEyQyxLQUFoQ2pOLEVBQWdDLFFBQ3pDNVIsRUFBT0YsSUFBUCw2QkFBaUM4UixFQUFVL04sR0FBM0MsOEJBQ0FpWixFQUFnQmxMLElBSndCLG1DQVE5Q3dNLEVBQVNHLFFBQVF4YixTQUFVMlosR0FFM0IsTUFDRixRQUNFMWMsRUFBT0YsSUFBSSw0QkFBNkI5TCxLQWhFOUMsTUFBa0JkLE9BQU9tSCxLQUFLaWpCLEdBQTlCLGVBQXFELElBb0VyRDNaLEVBQVdsQyxFQUFZaUIsMkJBbFMxQixtQ2JrSHNDLElBQzlCd1osRUFBWXhLLEVBQW9CeUssRUFBWUMsR0FBbUJDLEdBRWhFbEQsR0FDQW1ELEdBQ0FqWSxHQUNBa1ksR0FDQUMsS2F6SFAscUxBb1NHblEsSUFDQXhNLFFBQVFFLEtBQUssWUFBYSxLQUFJNEwsU0FDOUIyUCxFQUFRUSxTQUFTLEtBQUluUSxTQUFTLEdBdFNqQyx5REFBRCxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlMaWtlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5TGltaXQuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL2xvZ2dlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlSdWxlRW5naW5lL2RhdGFMYXllckNoZWNrZXIuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9OZXh0ZGF5UnVsZUVuZ2luZS91cmxDaGVja2VyLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9CZWFnbGVJbmZvTGF5ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy91dGlscy5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL3N0cmluZ1V0aWxzLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvTmV4dGRheUFwcGx5VHJlYXRtZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlNb25pdG9yL2luZGV4LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvTmV4dGRheVRyZWF0bWVudFJlcG9zaXRvcnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9OZXh0ZGF5UnVsZUVuZ2luZS9jb3VudGVyQ2hlY2tlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlSdWxlRW5naW5lL2VsZW1lbnRDaGVja2VyLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvTmV4dGRheVJ1bGVFbmdpbmUvZnVuY3Rpb25DaGVja2VyLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvTmV4dGRheVJ1bGVFbmdpbmUvc2Vzc2lvbkNoZWNrZXIuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9OZXh0ZGF5UnVsZUVuZ2luZS9lbnZDaGVja2VyLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvTmV4dGRheVJ1bGVFbmdpbmUvcmFuZG9tTnVtYmVyQ2hlY2tlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlSdWxlRW5naW5lL2luZGV4LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvTmV4dGRheUFwaS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlDbGllbnRTREsvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBJRSA4IGhhcyBhIGJyb2tlbiBPYmplY3QuZGVmaW5lUHJvcGVydHkgdGhhdCBvbmx5IHdvcmtzIG9uIERPTSBvYmplY3RzLlxuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIGRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgZGVmaW5lKEdwLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgZGVmaW5lKEdwLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIGRlZmluZShHcCwgXCJ0b1N0cmluZ1wiLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgaW4gbW9kZXJuIGVuZ2luZXNcbiAgLy8gd2UgY2FuIGV4cGxpY2l0bHkgYWNjZXNzIGdsb2JhbFRoaXMuIEluIG9sZGVyIGVuZ2luZXMgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiKSB7XG4gICAgZ2xvYmFsVGhpcy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xuICB9IGVsc2Uge1xuICAgIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG4gIH1cbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gIH0sIF90eXBlb2Yob2JqKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn0iLCJpbXBvcnQgYXJyYXlXaXRoSG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRoSG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXlMaW1pdCBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVSZXN0IGZyb20gXCIuL25vbkl0ZXJhYmxlUmVzdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICB2YXIgX2kgPSBhcnIgPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07XG5cbiAgaWYgKF9pID09IG51bGwpIHJldHVybjtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG5cbiAgdmFyIF9zLCBfZTtcblxuICB0cnkge1xuICAgIGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiaW1wb3J0IGFycmF5V2l0aG91dEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aG91dEhvbGVzLmpzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVTcHJlYWQgZnJvbSBcIi4vbm9uSXRlcmFibGVTcHJlYWQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSIsIi8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbmltcG9ydCB7cmVwbGFjZUFsbH0gZnJvbSBcIi4vc3RyaW5nVXRpbHNcIjtcblxuZXhwb3J0IGNvbnN0IENPT0tJRV9OQU1FID0gXCJfZ2FcIjtcbi8vIFRPRE8gcmV2ZXJ0IHRoZSBmb2xsb3dpbmcgc3RhZ2luZyBlbnYgY2hlY2sgYWZ0ZXIgbW92aW5nIHRvIG5ldyBicmFuY2ggc3RydWN0dXJlXG5leHBvcnQgY29uc3QgVFJFQVRNRU5UU19MT0NBVElPTiA9IFwiaHR0cHM6Ly9ob3N0LWI5Ni5wYWdlcy5kZXYvdHJlYXRtZW50cy5qc29uXCI7XG5leHBvcnQgY29uc3QgU1RZTEVTSEVFVF9MT0NBVElPTiA9IFwiaHR0cHM6Ly9ob3N0LWI5Ni5wYWdlcy5kZXYvbmQtc3R5bGVzLmNzc1wiO1xuZXhwb3J0IGNvbnN0IExPR19BUElfVVJMID0gXCJodHRwczovL2V1cm9wZS13ZXN0My1uZXh0ZGF5LTM0ZWIzLmNsb3VkZnVuY3Rpb25zLm5ldC9hcGkvbG9nUmVzcG9uc2VcIjtcbmV4cG9ydCBjb25zdCBMT09LVVBfQVBJX1VSTCA9IFwiaHR0cHM6Ly9jYXRhbG9nLWFwaS5hZG9yYWFpLmNvbVwiO1xuZXhwb3J0IGNvbnN0IE1PQklMRV9NRURJQV9RVUVSWSA9IFwiKG1heC13aWR0aDogNDQwcHgpXCI7XG4vLyBDb250cm9sIGdyb3VwIHBlcmNlbnRhZ2VcbmV4cG9ydCBjb25zdCBTUExJVF9SQVRJTyA9IDUwO1xuLy8gU2tpcHBlZCB0cmVhdG1lbnQgcGVyY2VudGFnZVxuZXhwb3J0IGNvbnN0IFRSRUFUTUVOVF9SQVRJTyA9IDUwO1xuZXhwb3J0IGNvbnN0IFRSRUFUTUVOVFNfRFVSQVRJT04gPSAxO1xuZXhwb3J0IGNvbnN0IE1BWF9USU1FT1VUX1BFUl9TRVNTSU9OID0gMTtcblxuXG5leHBvcnQgY29uc3QgU0VTU0lPTl9TVE9SQUdFX0tFWVMgPSB7XG4gIFNFU1NJT05fSUQ6IFwiX19uZXh0ZGF5X3Nlc3Npb25faWRcIixcbiAgU0VTU0lPTl9USU1FU1RBTVA6IFwiTkRfU2Vzc2lvblRpbWVzdGFtcFwiLFxuICBTRVNTSU9OX0hJU1RPUlk6IFwiQk5fU2Vzc2lvbkhpc3RvcnlcIixcbiAgVFJFQVRNRU5UUzogXCJORF9UcmVhdG1lbnRzXCIsXG4gIFBBR0VfVklFV1M6IFwiTkRfUGFnZVZpZXdzXCIsXG4gIFBPUFVQX0RJU1BMQVlfRkxBRzogXCJORF9Qb3B1cERpc3BsYXlGbGFnXCIsXG4gIE5EX1NLVV9MSVNUOiBcIk5EX1NrdUxpc3RcIixcbiAgVElNRU9VVF9DT1VOVDogXCJORF9UaW1lb3V0Q291bnRcIixcbn07XG5leHBvcnQgY29uc3QgTE9DQUxfU1RPUkFHRV9LRVlTID0ge1xuICBDT1VQT05fQVBQTElDQUJMRV9CQVNLRVRfUFJJQ0U6IFwiTkRfQ0FCYXNrZXRQcmljZVwiLFxuICBORF9ERUJVR19NT0RFOiBcIk5EX0RlYnVnXCIsXG59O1xuIiwiaW1wb3J0IHtMT0NBTF9TVE9SQUdFX0tFWVN9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuY2xhc3MgTG9nZ2VyIHtcbiAgY29uc3RydWN0b3Iob3JpZ2luID0gXCJOZXh0ZGF5IENsaWVudCBTREtcIikge1xuICAgIHRoaXMub3JpZ2luID0gb3JpZ2luO1xuICAgIHRoaXMuREVCVUcgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oTE9DQUxfU1RPUkFHRV9LRVlTLk5EX0RFQlVHX01PREUpO1xuICB9XG5cbiAgaW5mbyguLi5hcmdzKSB7XG4gICAgY29uc3Qge29yaWdpbn0gPSB0aGlzO1xuICAgIGNvbnNvbGUuaW5mbyhgWyR7b3JpZ2lufV1gLCAuLi5hcmdzKTtcbiAgfVxuXG4gIGxvZyguLi5hcmdzKSB7XG4gICAgY29uc3Qge0RFQlVHLCBvcmlnaW59ID0gdGhpcztcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBbJHtvcmlnaW59XWAsIC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIHdhcm4oLi4uYXJncykge1xuICAgIGNvbnN0IHtvcmlnaW59ID0gdGhpcztcbiAgICBjb25zb2xlLndhcm4oYFske29yaWdpbn1dYCwgLi4uYXJncyk7XG4gIH1cblxuICBlcnJvciguLi5hcmdzKSB7XG4gICAgY29uc3Qge29yaWdpbn0gPSB0aGlzO1xuICAgIGNvbnNvbGUuZXJyb3IoYFske29yaWdpbn1dYCwgLi4uYXJncyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTG9nZ2VyO1xuIiwiaW1wb3J0IHtjb25kaXRpb25DaGVja2VyfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlclwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIk5leHRkYXkgRGF0YUxheWVyIENoZWNrZXJcIik7XG5cbmV4cG9ydCBjb25zdCBjaGVja0RhdGFMYXllclJ1bGUgPSAocnVsZSkgPT57XG4gIGxvZ2dlci5sb2coXCJDaGVja2luZyBydWxlXCIsIEpTT04uc3RyaW5naWZ5KHJ1bGUpKTtcbiAgY29uc3Qge29wZXJhdG9yLCBjb25kaXRpb24sIHZhbHVlfSA9IHJ1bGU7XG4gIGNvbnN0IHJ1bnRpbWVWYWx1ZSA9IGRhdGFMYXllckZpbmRlcihvcGVyYXRvcik7XG4gIHJldHVybiBjb25kaXRpb25DaGVja2VyKHJ1bnRpbWVWYWx1ZSwgY29uZGl0aW9uLCB2YWx1ZSk7XG59O1xuXG5leHBvcnQgY29uc3QgZGF0YUxheWVyRmluZGVyID0gKGtleSkgPT4ge1xuICBsb2dnZXIubG9nKFwiU2VhcmNoaW5nIGJlYWdsZUluZm9MYXllciBmb3Iga2V5IFwiLCBrZXkpO1xuICBjb25zdCByZXMgPSB3aW5kb3cuYmVhZ2xlSW5mb0xheWVyW2tleV07XG4gIGlmIChyZXMpIHtcbiAgICBsb2dnZXIubG9nKGBGb3VuZCBrZXkgJHtrZXl9IHdpdGggdmFsdWUgJHtyZXN9YCk7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICBsb2dnZXIubG9nKGBLZXkgJHtrZXl9IG5vdCBmb3VuZCBpbiBiZWFnbGVJbmZvTGF5ZXJgKTtcblxuICBsb2dnZXIubG9nKFwiU2VhcmNoaW5nIGRhdGFMYXllciBmb3Iga2V5IFwiLCBrZXkpO1xuICBmb3IgKGNvbnN0IG9iaiBvZiB3aW5kb3cuZGF0YUxheWVyKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgaWYgKGtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgbG9nZ2VyLmxvZyhgRm91bmQga2V5ICR7a2V5fSB3aXRoIHZhbHVlICR7b2JqW2tleV19YCk7XG4gICAgICByZXR1cm4gb2JqW2tleV07XG4gICAgfVxuICB9XG4gIGxvZ2dlci5sb2coYEtleSAke2tleX0gbm90IGZvdW5kIGluIGRhdGFMYXllcmApO1xuICByZXR1cm4gbnVsbDtcbn07XG4iLCJpbXBvcnQge2NvbmRpdGlvbkNoZWNrZXJ9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFwiTmV4dGRheSBVcmwgQ2hlY2tlclwiKTtcblxuZXhwb3J0IGNvbnN0IGNoZWNrVXJsUnVsZSA9IChydWxlKSA9PntcbiAgbG9nZ2VyLmxvZyhcIkNoZWNraW5nIHJ1bGVcIiwgSlNPTi5zdHJpbmdpZnkocnVsZSkpO1xuICBjb25zdCB7b3BlcmF0b3IsIGNvbmRpdGlvbiwgdmFsdWV9ID0gcnVsZTtcblxuICBzd2l0Y2ggKG9wZXJhdG9yKSB7XG4gICAgY2FzZSBcInBhdGhcIjoge1xuICAgICAgY29uc3QgcmVxdWVzdFVSTD0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgICBjb25zdCBpc0FqYXggPSByZXF1ZXN0VVJMLmluY2x1ZGVzKFwiYWpheC9tb2JpbGUtc2VhcmNoL2xvYWRPdGhlclBhZ2VzLnBocFwiKTtcbiAgICAgIGNvbnN0IHBhdGggPSAhaXNBamF4ID8gbmV3IFVSTChyZXF1ZXN0VVJMKS5wYXRobmFtZSA6XG4gICAgICBkZWNvZGVVUklDb21wb25lbnQoXG4gICAgICAgICAgbmV3IFVSTChyZXF1ZXN0VVJMKS5zZWFyY2gucmVwbGFjZShcIj9vcmlnaW5hbFBhdGg9XCIsIFwiXCIpLFxuICAgICAgKTtcbiAgICAgIGxvZ2dlci5sb2coYENoZWNraW5nIHBhdGggJHtwYXRofSBtYXRjaGVzIHJ1bGUgcGF0aCAke3ZhbHVlfWApO1xuICAgICAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIocGF0aCwgY29uZGl0aW9uLCB2YWx1ZSk7XG4gICAgfVxuICB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiaW1wb3J0IHtleHRyYWN0Q29va2llSWRlbnRpZmllcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQge1NFU1NJT05fU1RPUkFHRV9LRVlTLCBTUExJVF9SQVRJT30gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyXCI7XG5cbndpbmRvdy5iZWFnbGVJbmZvTGF5ZXIgPSB3aW5kb3cuYmVhZ2xlSW5mb0xheWVyIHx8IHtjaGVja3BvaW50czogW10sXG4gIGE6IHt9LCBlOiB7fX07XG5cbmNvbnN0IHBhcnNpbmdSZWdleCA9IHtcbiAgUGFnZVR5cGU6IC8oPzpQYWdlVHlwZSdbIF0qOlsgXSonKSguKikoPzonKS8sXG4gIGNvbnRlbnRfbmFtZTogLyg/OmNvbnRlbnRfbmFtZVsgXSo6WyBdKlwiKSguKikoPzpcIikvLFxuICBjb250ZW50X25hbWVfYWx0OiAvKD86Y29udGVudF9uYW1lJ1sgXSo6WyBdKicpKC4qKSg/OicpLyxcbiAgdnZzU2NyR0FQYWdlVHlwZTogLyg/OlBhZ2VUeXBlJ1sgXSo6WyBdKicpKC4qKSg/OicpLyxcbiAgdnZzU2NyR0FPcmRlcklkOiAvKD86cHVyY2hhc2VbXFxzXFxTXSphY3Rpb25GaWVsZFtcXHNcXFNdKidpZCdbIF0qOlsgXSonKSguKikoPzonKS8sXG4gIHZ2c1NjckdBT3JkZXJSZXY6IC8oPzpwdXJjaGFzZVtcXHNcXFNdKmFjdGlvbkZpZWxkW1xcc1xcU10qJ3JldmVudWUnWyBdKjpbIF0qJykoLiopKD86JykvLFxuICB2dnNTY3JHQU9yZGVyVHlwZTogLyg/OnB1cmNoYXNlW1xcc1xcU10qYWN0aW9uRmllbGRbXFxzXFxTXSonZGltZW5zaW9uMTUnWyBdKjpbIF0qJykoLiopKD86JykvLFxuICB2dnNTY3JHQUlzQWRtaW46IC8oPzpkYXRhTGF5ZXJbXFxzXFxTXSonaXNBZG1pbidbIF0qOlsgXSpcIikoLiopKD86XCIpLyxcbn07XG5cbmV4cG9ydCBjb25zdCBjaGVja3BvaW50cyA9IHtcbiAgQmVhZ2xlTG9hZGVkOiAxLFxuICBJbml0aWFsaXplZDogMixcbiAgVXNlck9uT2ZmOiAzLFxuICBTY3JpcHRUaW1lT3V0OiA3LFxuICBUcmVhdG1lbnRSZXBvc2l0b3J5Q3JlYXRlZDogNCxcbiAgVHJlYXRtZW50c0FwcGxpZWQ6IDUsXG4gIFJlYXBwbHlUcmVhdG1lbnRMaXN0ZW5lcnM6IDYsXG4gIFRpbWVvdXRUaHJlc2hvbGRSZWFjaGVkOiA4LFxufTtcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIkJlYWdsZUluZm9MYXllclwiKTtcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVCZWFnbGVJbmZvTGF5ZXIgPSAoKSA9PiB7XG4gIGxvZ2dlci5sb2coXCJJbml0aWFsaXppbmcgYmVhZ2xlSW5mb0xheWVyXCIpO1xuICBwcmVwYXJlRGF0YSgpO1xuXG4gIGNvbnN0IHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcbiAgaWYgKCFzY3JpcHRzIHx8ICFzY3JpcHRzLmxlbmd0aCkge1xuICAgIGxvZ2dlci53YXJuKFwiQ291bGQgbm90IHBhcnNlIGJvZHlcIik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBmb3VuZFNjcmlwdENvdW50ID0gMDtcbiAgZm9yIChsZXQgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTsgaSA+IC0xOyBpLS0pIHtcbiAgICBjb25zdCBzY3JpcHRUZXh0Q29udGVudCA9IHNjcmlwdHNbaV0udGV4dENvbnRlbnQ7XG4gICAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKHBhcnNpbmdSZWdleCkpIHtcbiAgICAgIGxldCBmb3VuZFZhbCA9IHBhcnNpbmdSZWdleFtrZXldLmV4ZWMoc2NyaXB0VGV4dENvbnRlbnQpO1xuICAgICAgZm91bmRWYWwgPSBmb3VuZFZhbCA/IGZvdW5kVmFsWzFdIDogbnVsbDtcbiAgICAgIGlmIChmb3VuZFZhbCkge1xuICAgICAgICBpZiAoa2V5LmluZGV4T2YoXCJfYWx0XCIpID4gMCkga2V5ID0ga2V5LnN1YnN0cmluZygwLCBrZXkubGFzdEluZGV4T2YoXCJfYWx0XCIpKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhZGRUb0JlYWdsZUluZm9MYXllcihrZXksIGRlY29kZVVSSUNvbXBvbmVudChKU09OLnBhcnNlKFwiXFxcIlwiICsgZm91bmRWYWwgKyBcIlxcXCJcIikpKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgbG9nZ2VyLndhcm4oYENvdWxkIG5vdCBkZWNvZGUgZm91bmRWYWwgJHtmb3VuZFZhbH1gKTtcbiAgICAgICAgICBhZGRUb0JlYWdsZUluZm9MYXllcihrZXksIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGZvdW5kU2NyaXB0Q291bnQgKz0gMTtcbiAgICAgICAgaWYgKGZvdW5kU2NyaXB0Q291bnQgPT09IE9iamVjdC5rZXlzKHBhcnNpbmdSZWdleCkubGVuZ3RoKSByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgY29uc3QgY2hlY2twb2ludCA9IChjaGVja3BvaW50KSA9PntcbiAgdHJ5IHtcbiAgICBsb2dnZXIubG9nKGBDaGVja3BvaW50OiAnJHtjaGVja3BvaW50fScgUmVhY2hlZCFgKTtcbiAgICB3aW5kb3cuYmVhZ2xlSW5mb0xheWVyLmNoZWNrcG9pbnRzLnB1c2goe1xuICAgICAgY2hlY2twb2ludDogT2JqZWN0LmtleXMoY2hlY2twb2ludHMpLmZpbmQoKGtleSkgPT4gY2hlY2twb2ludHNba2V5XSA9PT0gY2hlY2twb2ludCksXG4gICAgICBpZDogY2hlY2twb2ludCxcbiAgICAgIHRpbWU6IERhdGUubm93KCksXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2dnZXIud2FybihlKTtcbiAgfVxuICByZXR1cm47XG59O1xuXG5leHBvcnQgY29uc3QgYWRkVG9CZWFnbGVJbmZvTGF5ZXIgPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICBpZiAoa2V5ID09PSBudWxsIHx8IGtleSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgd2luZG93LmJlYWdsZUluZm9MYXllcltrZXldID0gdmFsdWU7XG59O1xuXG5leHBvcnQgY29uc3QgYWRkQXBwbGllZFRyZWF0bWVudCA9IChrZXksIHZhbHVlKSA9PiB7XG4gIHdpbmRvdy5iZWFnbGVJbmZvTGF5ZXIuYVtrZXldID0gdmFsdWU7XG59O1xuXG5leHBvcnQgY29uc3QgYWRkRWxpZ2libGVOb3RBcHBsaWVkVHJlYXRtZW50ID0gKGtleSwgdmFsdWUpID0+IHtcbiAgd2luZG93LmJlYWdsZUluZm9MYXllci5lW2tleV0gPSB2YWx1ZTtcbn07XG5cbmNvbnN0IHByZXBhcmVEYXRhID0gKCkgPT4ge1xuICBjb25zdCB2aWV3SWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpO1xuICBjb25zdCBzZXNzaW9uSWQgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFNFU1NJT05fU1RPUkFHRV9LRVlTLlNFU1NJT05fSUQpO1xuICBjb25zdCBjdXJyZW50VVJMID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gIGNvbnN0IHBsYXRmb3JtID0gd2luZG93Lm5hdmlnYXRvcj8udXNlckFnZW50RGF0YT8ucGxhdGZvcm0gfHwgd2luZG93Lm5hdmlnYXRvcj8ucGxhdGZvcm0gfHxcbiAgd2luZG93Lm5hdmlnYXRvcj8udXNlckFnZW50O1xuXG4gIGxldCBnYU9iamVjdHMgPSB7fTtcblxuICBmb3IgKGNvbnN0IGdhRExFbGVtZW50IG9mIHdpbmRvdy5kYXRhTGF5ZXIpIHtcbiAgICBnYU9iamVjdHMgPSB7Li4uZ2FPYmplY3RzLCAuLi5nYURMRWxlbWVudH07XG4gIH1cblxuICBjb25zdCB2aXNpbGFic2NrID0gSlNPTi5wYXJzZShleHRyYWN0Q29va2llSWRlbnRpZmllcihkb2N1bWVudC5jb29raWUsIFwiVkxfQ01fMFwiKSk7XG5cbiAgY29uc3QgdmxPYmplY3RzID0ge307XG5cbiAgaWYgKHZpc2lsYWJzY2sgJiYgdmlzaWxhYnNjay5JdGVtcykge1xuICAgIGZvciAoY29uc3QgdmxFbGVtZW50IG9mIHZpc2lsYWJzY2suSXRlbXMpIHtcbiAgICAgIHZsT2JqZWN0c1t2bEVsZW1lbnQuS10gPSBkZWNvZGVVUklDb21wb25lbnQodmxFbGVtZW50LlYpO1xuICAgIH1cbiAgfVxuXG5cbiAgLyogVklTSUxBQlMgKi9cblxuICBhZGRUb0JlYWdsZUluZm9MYXllcihcImNvb2tpZVZMUFZpblZpc2l0XCIsIHZsT2JqZWN0cy5WTF9QVkNvdW50SW5WaXNpdCk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiY29va2llVkxWaXNpdER1cmF0aW9uXCIsIHZsT2JqZWN0cy5WTF9Ub3RhbER1cmF0aW9uKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJjb29raWVWTFRvdGFsUFZcIiwgdmxPYmplY3RzLlZMX1RvdGFsUFYpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcImNvb2tpZVZMVG90YWxWaXNpdFwiLCB2bE9iamVjdHMuVkxfVG90YWxWaXNpdCk7XG5cbiAgLyogR0EgKi9cblxuICBhZGRUb0JlYWdsZUluZm9MYXllcihcImdhUGFnZVR5cGVcIiwgZ2FPYmplY3RzLlBhZ2VUeXBlKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJnYVByb2R1Y3ROYW1lXCIsIGdhT2JqZWN0cy5jb250ZW50X25hbWUpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcImdhVmlld1R5cGVcIiwgZ2FPYmplY3RzLmNvbnRlbnRfdHlwZSk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiZ2FQcm9kdWN0Q2F0ZWdvcnlcIiwgZ2FPYmplY3RzLmNvbnRlbnRfY2F0ZWdvcnkpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcImdhUHJvZHVjdElEXCIsIGdhT2JqZWN0cy5jb250ZW50X2lkcyk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwidnZzUHJvZHVjdENhdGVnb3J5XCIsIGdhT2JqZWN0cy52aXZlbnNlX2NhdGVnb3J5KTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJnYUxpc3RpbmdOYW1lXCIsIGdhT2JqZWN0cy5lY29tbWVyY2U/LmRldGFpbD8uYWN0aW9uRmllbGQ/Lmxpc3QpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcInZ2c0lzU2hvd3Jvb21cIiwgKHdpbmRvdy5pc0FkbWluPT09dW5kZWZpbmVkKSA/IGdhT2JqZWN0cy5pc0FkbWluIDogd2luZG93LmlzQWRtaW4pO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcInZ2c1Byb2R1Y3RHcm91cFwiLCBnYU9iamVjdHMucHJvZHVjdEdyb3VwKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJ2dnNVc2VySWRcIiwgZ2FPYmplY3RzLnVzZXJJZCk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwidnZzQ2F0ZWdvcnlcIiwgZ2FPYmplY3RzLnZpdmVuc2VfY2F0ZWdvcnkpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcImdhQ2F0ZWdvcnlQcm9kdWN0Q29udFwiLCBnYU9iamVjdHMuY2F0ZWdvcnlfcHJvZHVjdF9jb3VudCk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiZ2FDYXJ0UHJvZHVjdHNcIiwgZ2FPYmplY3RzLmVjb21tZXJjZT8uY2hlY2tvdXQ/LnByb2R1Y3RzIHx8XG4gICAgZ2FPYmplY3RzLmVjb21tZXJjZT8ucHVyY2hhc2U/LnByb2R1Y3RzKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJ2dnNQRFBQcm9kdWN0XCIsIGdhT2JqZWN0cy52aXZlbnNlUHJvZHVjdHM/LnBvcCgpKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJnYVB1cmNoYXNlSWRcIiwgZ2FPYmplY3RzLmVjb21tZXJjZT8ucHVyY2hhc2U/LmFjdGlvbkZpZWxkPy5pZCk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiZ2FQdXJjaGFzZVJldmVudWVcIiwgZ2FPYmplY3RzLmVjb21tZXJjZT8ucHVyY2hhc2U/LmFjdGlvbkZpZWxkPy5yZXZlbnVlKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJnYVB1cmNoYXNlUGF5VHlwZVwiLCBnYU9iamVjdHMuZWNvbW1lcmNlPy5wdXJjaGFzZT8uYWN0aW9uRmllbGQ/LmRpbWVuc2lvbjE1KTtcblxuICAvKiB3aW5kb3cgdmlldyBhcmVhICovXG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwid2luZG93UGFyYW1zXCIsIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcIndpbmRvd1BSYXRpb1wiLCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwid2luZG93SW5uZXJcIiwgd2luZG93LmlubmVyV2lkdGgpO1xuXG4gIGNvbnN0IHdpbmRvd1NjcmVlbiA9IHt9O1xuICB3aW5kb3dTY3JlZW4uYXZhaWxIZWlnaHQgPSB3aW5kb3cuc2NyZWVuPy5hdmFpbEhlaWdodDtcbiAgd2luZG93U2NyZWVuLmF2YWlsSGVpZ2h0ID0gd2luZG93LnNjcmVlbj8uYXZhaWxIZWlnaHQ7XG4gIHdpbmRvd1NjcmVlbi5hdmFpbExlZnQgPSB3aW5kb3cuc2NyZWVuPy5hdmFpbExlZnQ7XG4gIHdpbmRvd1NjcmVlbi5hdmFpbFRvcCA9IHdpbmRvdy5zY3JlZW4/LmF2YWlsVG9wO1xuICB3aW5kb3dTY3JlZW4uYXZhaWxXaWR0aCA9IHdpbmRvdy5zY3JlZW4/LmF2YWlsV2lkdGg7XG4gIHdpbmRvd1NjcmVlbi5jb2xvckRlcHRoID0gd2luZG93LnNjcmVlbj8uY29sb3JEZXB0aDtcbiAgd2luZG93U2NyZWVuLmhlaWdodCA9IHdpbmRvdy5zY3JlZW4/LmhlaWdodDtcbiAgd2luZG93U2NyZWVuLnBpeGVsRGVwdGggPSB3aW5kb3cuc2NyZWVuPy5waXhlbERlcHRoO1xuICB3aW5kb3dTY3JlZW4ud2lkdGggPSB3aW5kb3cuc2NyZWVuPy53aWR0aDtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJ3aW5kb3dTY3JlZW5cIiwgd2luZG93U2NyZWVuKTtcblxuICBjb25zdCB3aW5kb3dWUG9ydCA9IHt9O1xuICB3aW5kb3dWUG9ydC5oZWlnaHQgPSB3aW5kb3cudmlzdWFsVmlld3BvcnQ/LmhlaWdodDtcbiAgd2luZG93VlBvcnQub2Zmc2V0TGVmdCA9IHdpbmRvdy52aXN1YWxWaWV3cG9ydD8ub2Zmc2V0TGVmdDtcbiAgd2luZG93VlBvcnQub2Zmc2V0VG9wID0gd2luZG93LnZpc3VhbFZpZXdwb3J0Py5vZmZzZXRUb3A7XG4gIHdpbmRvd1ZQb3J0Lm9ucmVzaXplID0gd2luZG93LnZpc3VhbFZpZXdwb3J0Py5vbnJlc2l6ZTtcbiAgd2luZG93VlBvcnQub25zY3JvbGwgPSB3aW5kb3cudmlzdWFsVmlld3BvcnQ/Lm9uc2Nyb2xsO1xuICB3aW5kb3dWUG9ydC5wYWdlTGVmdCA9IHdpbmRvdy52aXN1YWxWaWV3cG9ydD8ucGFnZUxlZnQ7XG4gIHdpbmRvd1ZQb3J0LnBhZ2VUb3AgPSB3aW5kb3cudmlzdWFsVmlld3BvcnQ/LnBhZ2VUb3A7XG4gIHdpbmRvd1ZQb3J0LnNjYWxlID0gd2luZG93LnZpc3VhbFZpZXdwb3J0Py5zY2FsZTtcbiAgd2luZG93VlBvcnQud2lkdGggPSB3aW5kb3cudmlzdWFsVmlld3BvcnQ/LndpZHRoO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcIndpbmRvd1ZQb3J0XCIsIHdpbmRvd1ZQb3J0KTtcblxuICBpZiAoc2NyZWVuLndpZHRoKSB7XG4gICAgbGV0IHdpZHRoID0gcGFyc2VJbnQoc2NyZWVuLndpZHRoKTtcbiAgICBsZXQgaGVpZ2h0ID0gKHNjcmVlbi5oZWlnaHQpID8gcGFyc2VJbnQoc2NyZWVuLmhlaWdodCkgOiAwO1xuICAgIGlmICh3aWR0aCAhPT0gMCAmJiBoZWlnaHQgIT09IDApIHtcbiAgICAgIGNvbnN0IGlPUyA9IC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KHBsYXRmb3JtKTtcbiAgICAgIGlmIChpT1MgJiYgd2luZG93LmRldmljZVBpeGVsUmF0aW8pIHtcbiAgICAgICAgLy8gaW9zIHByb3ZpZGVzIERQSXMsIG5lZWQgdG8gbXVsdGlwbHlcbiAgICAgICAgd2lkdGggPSBNYXRoLnJvdW5kKHdpZHRoICogd2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICBoZWlnaHQgPSBNYXRoLnJvdW5kKGhlaWdodCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChNYXRoLmFicyh3aW5kb3cub3JpZW50YXRpb24pID09PSA5MCkge1xuICAgICAgICAgIC8vIHdlIGhhdmUgbGFuZHNjYXBlIG9yaWVudGF0aW9uXG4gICAgICAgICAgLy8gc3dpdGNoIHZhbHVlcyBmb3IgYWxsIGV4Y2VwdCBpb3NcbiAgICAgICAgICBjb25zdCB0ZW1wID0gd2lkdGg7XG4gICAgICAgICAgd2lkdGggPSBoZWlnaHQ7XG4gICAgICAgICAgaGVpZ2h0ID0gdGVtcDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJ3aW5kb3dcIiwgd2lkdGggKyBcInhcIiArIGhlaWdodCk7XG4gICAgfVxuICB9XG5cbiAgLyogbmF2aWdhdG9yICovXG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwibmF2SGlzdFNpemVcIiwgd2luZG93Lmhpc3Rvcnk/Lmxlbmd0aCk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwibmF2QWdlbnRcIiwgbmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIC8vIGNoZWNrIGlmIHVzZXJBZ2VudERhdGEgaXMgc3VwcG9ydGVkIGFuZCB1c2VyQWdlbnQgaXMgbm90IGF2YWlsYWJsZSwgdXNlIGl0XG4gIGlmICghd2luZG93LmJlYWdsZUluZm9MYXllci5uYXZBZ2VudCkge1xuICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50RGF0YSkge1xuICAgICAgLy8gdHVybiBicmFuZHMgYXJyYXkgaW50byBzdHJpbmdcbiAgICAgIGxldCBuYXZBZ2VudCA9IG5hdmlnYXRvcj8udXNlckFnZW50RGF0YT8uYnJhbmRzPy5tYXAoZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gZS5icmFuZCArIFwiOlwiICsgZS52ZXJzaW9uO1xuICAgICAgfSkuam9pbigpO1xuICAgICAgLy8gYWRkIG1vYmlsZSBpbmZvXG4gICAgICBuYXZBZ2VudCArPSAobmF2aWdhdG9yPy51c2VyQWdlbnREYXRhPy5tb2JpbGUgPyBcIm1vYmlcIiA6IFwiIFwiKTtcbiAgICAgIC8vIGFkZCBwbGF0Zm9ybSBpbmZvXG4gICAgICBuYXZBZ2VudCArPSBwbGF0Zm9ybTtcbiAgICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwibmF2QWdlbnRcIiwgbmF2QWdlbnQpO1xuICAgIH1cbiAgfVxuICBhZGRUb0JlYWdsZUluZm9MYXllcihcIm5hdkhXQ29yZXNcIiwgbmF2aWdhdG9yLmhhcmR3YXJlQ29uY3VycmVuY3kpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcIm5hdkxhbmd1YWdlXCIsIG5hdmlnYXRvci5sYW5ndWFnZSB8fCBuYXZpZ2F0b3IuYnJvd3Nlckxhbmd1YWdlIHx8XG4gICBuYXZpZ2F0b3Iuc3lzdGVtTGFuZ3VhZ2UgfHwgbmF2aWdhdG9yLnVzZXJMYW5ndWFnZSk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwibmF2VG91Y2hcIiwgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJuYXZQbGF0Zm9ybVwiLCBwbGF0Zm9ybSk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwibmF2VmVuZG9yXCIsIG5hdmlnYXRvci52ZW5kb3IpO1xuXG4gIC8qIGNvb2tpZXMgKi9cbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJjb29raWVHYUlkXCIsIGV4dHJhY3RDb29raWVJZGVudGlmaWVyKGRvY3VtZW50LmNvb2tpZSwgXCJfZ2FcIikpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcImNvb2tpZUxhc3RCcmVhZENydW1iXCIsIGV4dHJhY3RDb29raWVJZGVudGlmaWVyKGRvY3VtZW50LmNvb2tpZSwgXCJsYXN0YnJlYWRjcnVtYlwiKSk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiY29va2llTGFzdENhdGVnb3J5XCIsIGV4dHJhY3RDb29raWVJZGVudGlmaWVyKGRvY3VtZW50LmNvb2tpZSwgXCJsYXN0Y2F0ZWdvcnlcIikpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcImNvb2tpZUZpcnN0RW50cnlcIiwgZGVjb2RlVVJJQ29tcG9uZW50KFxuICAgICAgZXh0cmFjdENvb2tpZUlkZW50aWZpZXIoZG9jdW1lbnQuY29va2llLCBcInZpdmVuc2VmaXJzdFwiKSkpO1xuXG4gIC8qIHBlcmZvcm1hbmNlIG1ldHJpY3MgKi9cbiAgY29uc3QgcGVyZk1ldHJpY3MgPSB7fTtcbiAgaWYgKHdpbmRvdy5wZXJmb3JtYW5jZSAmJiB3aW5kb3cucGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5VHlwZShcIm5hdmlnYXRpb25cIilbMF0pIHtcbiAgICBjb25zdCBwZXJmTmF2aWdhdGlvbk1ldHJpY3MgPSB3aW5kb3cucGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5VHlwZShcIm5hdmlnYXRpb25cIilbMF07XG4gICAgcGVyZk1ldHJpY3MucGxkID0gTWF0aC5yb3VuZChwZXJmTmF2aWdhdGlvbk1ldHJpY3MuZG9tQ29udGVudExvYWRlZEV2ZW50RW5kIC0gcGVyZk5hdmlnYXRpb25NZXRyaWNzLmNvbm5lY3RTdGFydCk7XG4gICAgcGVyZk1ldHJpY3MubmV0ID0gTWF0aC5yb3VuZChwZXJmTmF2aWdhdGlvbk1ldHJpY3MuY29ubmVjdEVuZCAtIHBlcmZOYXZpZ2F0aW9uTWV0cmljcy5mZXRjaFN0YXJ0KTtcbiAgICBwZXJmTWV0cmljcy5zcnYgPSBNYXRoLnJvdW5kKHBlcmZOYXZpZ2F0aW9uTWV0cmljcy5yZXNwb25zZVN0YXJ0IC0gcGVyZk5hdmlnYXRpb25NZXRyaWNzLnJlcXVlc3RTdGFydCk7XG4gICAgcGVyZk1ldHJpY3MudGZyID0gTWF0aC5yb3VuZChwZXJmTmF2aWdhdGlvbk1ldHJpY3MucmVzcG9uc2VFbmQgLSBwZXJmTmF2aWdhdGlvbk1ldHJpY3MucmVzcG9uc2VTdGFydCk7XG4gICAgcGVyZk1ldHJpY3MuZG1pID0gTWF0aC5yb3VuZChwZXJmTmF2aWdhdGlvbk1ldHJpY3MuZG9tSW50ZXJhY3RpdmUgLSBwZXJmTmF2aWdhdGlvbk1ldHJpY3MucmVzcG9uc2VFbmQpO1xuICAgIHBlcmZNZXRyaWNzLmRjcCA9IE1hdGgucm91bmQocGVyZk5hdmlnYXRpb25NZXRyaWNzLmRvbUNvbXBsZXRlIC0gcGVyZk5hdmlnYXRpb25NZXRyaWNzLmRvbUludGVyYWN0aXZlKTtcbiAgICBwZXJmTWV0cmljcy5vbmwgPSBNYXRoLnJvdW5kKHBlcmZOYXZpZ2F0aW9uTWV0cmljcy5sb2FkRXZlbnRFbmQgLSBwZXJmTmF2aWdhdGlvbk1ldHJpY3MubG9hZEV2ZW50U3RhcnQpO1xuICB9XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwicGVyZk1ldHJpY3NcIiwgcGVyZk1ldHJpY3MpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcImludGVybmV0U3BlZWRcIiwgd2luZG93Lm5hdmlnYXRvcj8uY29ubmVjdGlvbj8uZG93bmxpbmspO1xuXG4gIC8qIHNjaGVtYS5vcmcgZWxlbWVudHMgKi9cbiAgY29uc3Qgc2NoZW1hT3JnRWx0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbdHlwZT1cXFwiYXBwbGljYXRpb24vbGQranNvblxcXCJdXCIpO1xuXG4gIGZvciAoY29uc3Qgc1RhZyBvZiBzY2hlbWFPcmdFbHRzKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNudG50ID0gc1RhZy50ZXh0Q29udGVudDtcbiAgICAgIGNvbnN0IGpzb25jb250ZW50ID0gSlNPTi5wYXJzZShjbnRudCk7XG4gICAgICBsZXQgYmNydW1iX3N0cmluZyA9IFwiQFwiO1xuICAgICAgc3dpdGNoIChqc29uY29udGVudFtcIkB0eXBlXCJdKSB7XG4gICAgICAgIC8vIEhPTUVQQUdFXG4gICAgICAgIGNhc2UgXCJPcmdhbml6YXRpb25cIjpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIldlYlNpdGVcIjpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgICAvLyBQTFBcbiAgICAgICAgY2FzZSBcIkNvbGxlY3Rpb25QYWdlXCI6IHtcbiAgICAgICAgICBmb3IgKGNvbnN0IGJjcnVtaXRlbSBvZiBqc29uY29udGVudFtcImJyZWFkY3J1bWJcIl1bXCJpdGVtTGlzdEVsZW1lbnRcIl0pIHtcbiAgICAgICAgICAgIGJjcnVtYl9zdHJpbmcgKz0gXCIgfCBcIiArIGJjcnVtaXRlbVtcIml0ZW1cIl1bXCJuYW1lXCJdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcInNvcmdCcmVhZGNydW1iXCIsIGJjcnVtYl9zdHJpbmcpO1xuICAgICAgICAgIGNvbnN0IHNvcmdMaXN0aW5nID0ge307XG4gICAgICAgICAgc29yZ0xpc3RpbmcubmFtZSA9IGpzb25jb250ZW50W1wibWFpbkVudGl0eVwiXVtcIm5hbWVcIl07XG4gICAgICAgICAgc29yZ0xpc3RpbmcuY291bnRJdGVtcyA9IGpzb25jb250ZW50W1wibWFpbkVudGl0eVwiXVtcIm51bWJlck9mSXRlbXNcIl07XG4gICAgICAgICAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJzb3JnTGlzdGluZ1wiLCBzb3JnTGlzdGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgICAvLyBQRFBcbiAgICAgICAgY2FzZSBcIkJyZWFkY3J1bWJMaXN0XCI6XG4gICAgICAgICAgZm9yIChjb25zdCBiY3J1bWl0ZW0gb2YganNvbmNvbnRlbnRbXCJpdGVtTGlzdEVsZW1lbnRcIl0pIHtcbiAgICAgICAgICAgIGJjcnVtYl9zdHJpbmcgKz0gXCIgfCBcIiArIGJjcnVtaXRlbVtcIm5hbWVcIl07XG4gICAgICAgICAgfVxuICAgICAgICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwic29yZ0JyZWFkY3J1bWJcIiwgYmNydW1iX3N0cmluZyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJQcm9kdWN0XCI6IHtcbiAgICAgICAgICBjb25zdCBzb3JnUHJvZHVjdCA9IHt9O1xuICAgICAgICAgIHNvcmdQcm9kdWN0LnNrdSA9IGpzb25jb250ZW50W1wic2t1XCJdO1xuICAgICAgICAgIHNvcmdQcm9kdWN0Lm5hbWUgPSBqc29uY29udGVudFtcIm5hbWVcIl07XG4gICAgICAgICAgaWYgKGpzb25jb250ZW50W1wib2ZmZXJzXCJdKSB7XG4gICAgICAgICAgICBzb3JnUHJvZHVjdC5wcmljZSA9IGpzb25jb250ZW50W1wib2ZmZXJzXCJdW1wicHJpY2VcIl07XG4gICAgICAgICAgICBzb3JnUHJvZHVjdC5wcmljZUN1cnJlbmN5ID0ganNvbmNvbnRlbnRbXCJvZmZlcnNcIl1bXCJwcmljZUN1cnJlbmN5XCJdO1xuICAgICAgICAgICAgc29yZ1Byb2R1Y3QucHJpY2VWYWxpZFVudGlsID0ganNvbmNvbnRlbnRbXCJvZmZlcnNcIl1bXCJwcmljZVZhbGlkVW50aWxcIl07XG4gICAgICAgICAgfVxuICAgICAgICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwic29yZ1Byb2R1Y3RcIiwgc29yZ1Byb2R1Y3QpO1xuICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29uc29sZS5sb2coanNvbmNvbnRlbnQpO1xuICAgICAgfSAvLyBzd2l0Y2hcbiAgICB9IGNhdGNoIChlcnIpIHsgLy8gdHJ5XG4gICAgICBsb2dnZXIud2FybihlcnIubWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgLyogTmV4dGRheSBkYXRhICovXG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwidlwiLCBcIjAuMC4yNlwiKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJuXCIsIGBuZXh0ZGF5LXNlc3Npb25faWQtJHtzZXNzaW9uSWR9YCk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwic3JcIiwgU1BMSVRfUkFUSU8pO1xuXG4gIC8qIG1pc2NlbGxhbmVvdXMgKi9cbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJkb250dHJhY2tcIiwgbmF2aWdhdG9yLmRvTm90VHJhY2sgfHwgd2luZG93LmRvTm90VHJhY2sgfHwgbmF2aWdhdG9yLm1zRG9Ob3RUcmFjayk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwidVwiLCBjdXJyZW50VVJMLmhyZWYpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcImRcIiwgY3VycmVudFVSTC5ob3N0bmFtZSk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiclwiLCBkb2N1bWVudC5yZWZlcnJlcik7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwidklkXCIsIHZpZXdJZCk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiaXNPblwiLCBudWxsKTtcblxuICAvKiBWaXZlbnNlIHNwZWNpZmljICovXG4gIHRyeSB7XG4gICAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJ2dnNDbnRGYXZQcm9kc1wiLCB3aW5kb3cuZmF2b3JpdGVQcm9kdWN0cyA/IEpTT04ucGFyc2Uod2luZG93LmZhdm9yaXRlUHJvZHVjdHMpLmxlbmd0aCA6IG51bGwpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcInZ2c0NudEZhdlByb2RzXCIsIG51bGwpO1xuICAgIGxvZ2dlci53YXJuKGVyci5tZXNzYWdlKTtcbiAgfVxuICBhZGRUb0JlYWdsZUluZm9MYXllcihcInZ2c0hhc1NldEVtYWlsXCIsIHdpbmRvdy51c2VyRW1haWwubGVuZ3RoID4gMCk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwidnZzTG9naW5UeXBlXCIsIHdpbmRvdy51c2VySWQgPiAwID8gXCJtZW1iZXJcIiA6IFwiZ3Vlc3RcIik7XG5cbiAgbGV0IHNlbGVjdGVkRWxlbWVudDtcblxuICBzZWxlY3RlZEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiW2NsYXNzKj1cXFwiYmFza2V0X3N1bW1hcnlfdG90YWxcXFwiXSwgW2NsYXNzKj1cXFwidG90YWxfcm93XFxcIl1cIik7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwidnZzUHVyY1ByaWNlRWx0XCIsIChzZWxlY3RlZEVsZW1lbnQpID8gc2VsZWN0ZWRFbGVtZW50LmlubmVyVGV4dCA6IG51bGwpO1xuXG4gIHNlbGVjdGVkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbY2xhc3MqPVxcXCJvcmRlcl9mb2xsb3dfbnVtYlxcXCJdLCBbY2xhc3MqPVxcXCJjYXJ0LXRpdGxlLWJvdHRvbVxcXCJdXCIpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcInZ2c1B1cmNoYXNlT3JkZXJJRFwiLCAoc2VsZWN0ZWRFbGVtZW50KSA/IHNlbGVjdGVkRWxlbWVudC5pbm5lclRleHQgOiBudWxsKTtcblxuICBzZWxlY3RlZEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiW2NsYXNzKj1cXFwicGF5bWVudF90eXBlX3RpdGxlXFxcIl0sIFtjbGFzcyo9XFxcImNhcnQtdGl0bGUtaW5mb1xcXCJdXCIpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcInZ2c1B1cmNUeXBlRWx0XCIsIChzZWxlY3RlZEVsZW1lbnQpID8gc2VsZWN0ZWRFbGVtZW50LmlubmVyVGV4dCA6IG51bGwpO1xuXG4gIHNlbGVjdGVkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbaWQqPVxcXCJicmVhZGNydW1iLW9sXFxcIl0sIFtjbGFzcyo9XFxcImxvbmctYnJlYWRjcnVtYlxcXCJdXCIpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcInZ2c1ZpZXdDcnVtYlwiLCAoc2VsZWN0ZWRFbGVtZW50KSA/IHNlbGVjdGVkRWxlbWVudC5pbm5lclRleHQgOiBudWxsKTtcblxuICBzZWxlY3RlZEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiW2NsYXNzKj1cXFwib3JkZXItZmluYWwtbnVtYmVyXFxcIl1cIik7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwidnZzQ2FydFRvdGFsXCIsIChzZWxlY3RlZEVsZW1lbnQpID8gc2VsZWN0ZWRFbGVtZW50LmlubmVyVGV4dCA6IG51bGwpO1xuXG4gIHNlbGVjdGVkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbY2xhc3MqPVxcXCJiYXNrZXRfdG90YWxfcHJpY2VcXFwiXVwiKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJ2dnNWaWV3QmFza2V0VG90YWxcIiwgKHNlbGVjdGVkRWxlbWVudCkgPyBzZWxlY3RlZEVsZW1lbnQuaW5uZXJUZXh0IDogbnVsbCk7XG5cbiAgc2VsZWN0ZWRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIltpZCo9XFxcImNhcnRfcXVhbnRpdHlcXFwiXSwgW2NsYXNzKj1cXFwiYmFza2V0X2xlbmd0aFxcXCJdXCIpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcInZ2c1ZpZXdCYXNrZXRDb3VudFwiLCAoc2VsZWN0ZWRFbGVtZW50KSA/IHNlbGVjdGVkRWxlbWVudC5pbm5lclRleHQgOiBudWxsKTtcblxuICBzZWxlY3RlZEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiW2NsYXNzKj1cXFwid2VsY29tZV91c2VybmFtZVxcXCJdXCIpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcInZ2c1ZpZXdMb2dnZWRpblwiLCAoc2VsZWN0ZWRFbGVtZW50KSA/IHNlbGVjdGVkRWxlbWVudC5pbm5lclRleHQubGVuZ3RoID4gMCA6IGZhbHNlKTtcblxuICBzZWxlY3RlZEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2NsYXNzKj1cXFwidml2ZW5zZS1zaG93cm9vbXNcXFwiXSA+ICpcIik7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwidnZzUERQU2hvd3Jvb21Db3VudFwiLCAoc2VsZWN0ZWRFbGVtZW50KSA/IHNlbGVjdGVkRWxlbWVudC5sZW5ndGggOiBudWxsKTtcblxuICBzZWxlY3RlZEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiW2NsYXNzKj1cXFwiZGVsaXZlcnktZGF0ZVxcXCJdXCIpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcInZ2c1BEUERlbGl2ZXJ5RGF0ZVwiLCAoc2VsZWN0ZWRFbGVtZW50KSA/IHNlbGVjdGVkRWxlbWVudC5pbm5lclRleHQgOiBudWxsKTtcblxuICBzZWxlY3RlZEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiW2NsYXNzKj1cXFwicHJvZHVjdC10aXRsZVxcXCJdLCBbY2xhc3MqPVxcXCJoZWFkZXItYm90dG9tXFxcIl1cIik7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwidnZzUERQVGl0bGVcIiwgKHNlbGVjdGVkRWxlbWVudCkgPyBzZWxlY3RlZEVsZW1lbnQuaW5uZXJUZXh0IDogbnVsbCk7XG5cbiAgc2VsZWN0ZWRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIltjbGFzcyo9XFxcImNvdW50LW9mLXByb2R1Y3RcXFwiXVwiKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJ2dnNQTFBJdGVtQ291bnRcIiwgKHNlbGVjdGVkRWxlbWVudCkgPyBzZWxlY3RlZEVsZW1lbnQuaW5uZXJUZXh0IDogbnVsbCk7XG5cbiAgc2VsZWN0ZWRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIltjbGFzcyo9XFxcInN1YmNhdGVnb3JpZXMtdGl0bGVcXFwiXVwiKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJ2dnNQTFBOYW1lXCIsIChzZWxlY3RlZEVsZW1lbnQpID8gc2VsZWN0ZWRFbGVtZW50LmlubmVyVGV4dCA6IG51bGwpO1xufTtcbiIsImltcG9ydCB7Y2hlY2tEYXRhTGF5ZXJSdWxlfSBmcm9tIFwiLi9OZXh0ZGF5UnVsZUVuZ2luZS9kYXRhTGF5ZXJDaGVja2VyXCI7XG5pbXBvcnQge2NoZWNrVXJsUnVsZX0gZnJvbSBcIi4vTmV4dGRheVJ1bGVFbmdpbmUvdXJsQ2hlY2tlclwiO1xuaW1wb3J0IHthZGRUb0JlYWdsZUluZm9MYXllcn0gZnJvbSBcIi4vQmVhZ2xlSW5mb0xheWVyXCI7XG5pbXBvcnQge1xuICBDT09LSUVfTkFNRSxcbiAgTE9DQUxfU1RPUkFHRV9LRVlTLFxuICBTRVNTSU9OX1NUT1JBR0VfS0VZUyxcbiAgU1RZTEVTSEVFVF9MT0NBVElPTixcbiAgVFJFQVRNRU5UU19MT0NBVElPTixcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuL2xvZ2dlclwiO1xuXG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFwiTmV4dGRheSBVdGlsc1wiKTtcblxuaWYgKCEoXCJyYW5kb21VVUlEXCIgaW4gY3J5cHRvKSkge1xuICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjExNzUyMy8yODAwMjE4XG4gIC8vIExJQ0VOU0U6IGh0dHBzOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS1zYS80LjAvbGVnYWxjb2RlXG4gIHtcbiAgICByYW5kb21VVUlERmFsbGJhY2soKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgcmVtb3ZlRG9jdW1lbnRIaWRlID0gKCkgPT4ge1xuICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIm5leHREYXktaGlkZVwiKTtcbn07XG5cbmV4cG9ydCBjb25zdCBmZXRjaFRyZWF0bWVudHMgPSBhc3luYyAoKSA9PiB7XG4gIGxvZ2dlci5sb2coXCJGZXRjaGluZyB0cmVhdG1lbnRzXCIpO1xuICBjb25zdCB0cmVhdG1lbnRzID0gYXdhaXQgZmV0Y2goVFJFQVRNRU5UU19MT0NBVElPTik7XG4gIHJldHVybiBhd2FpdCB0cmVhdG1lbnRzLmpzb24oKTtcbn07XG5cbmV4cG9ydCBjb25zdCBleHRyYWN0Q29va2llSWRlbnRpZmllciA9IChjb29raWVTdHJpbmcsIGNvb2tpZU5hbWUpID0+IHtcbiAgaWYgKCFjb29raWVTdHJpbmcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IHBhcnNlZCA9IGNvb2tpZVN0cmluZ1xuICAgICAgLnNwbGl0KFwiO1wiKVxuICAgICAgLm1hcCgodikgPT4gdi5zcGxpdChcIj1cIikpXG4gICAgICAucmVkdWNlKChhY2MsIHYpID0+IHtcbiAgICAgICAgaWYgKHZbMF0gJiYgdlsxXSkge1xuICAgICAgICAgIGFjY1tkZWNvZGVVUklDb21wb25lbnQodlswXS50cmltKCkpXSA9IGRlY29kZVVSSUNvbXBvbmVudCh2WzFdLnRyaW0oKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIHt9KTtcblxuICBsZXQgaWRlbnRpZmllciA9IHBhcnNlZFtjb29raWVOYW1lXTtcbiAgaWYgKCFpZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKGNvb2tpZU5hbWUgPT09IFwiX2dhXCIpIHtcbiAgICAvLyBleHRyYWN0IHVuaXF1ZSBpZGVudGlmaWVyIGZyb20gR0EgY29va2llXG4gICAgY29uc3QgaWRlbnRpZmllckluZGV4ID0gMjtcbiAgICBpZGVudGlmaWVyID0gaWRlbnRpZmllci5zcGxpdChcIi5cIilbaWRlbnRpZmllckluZGV4XTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcjtcbn07XG5cbmV4cG9ydCBjb25zdCBkZXRlcm1pbmVQY3QgPSBhc3luYyAoaWRlbnRpZmllcikgPT4ge1xuICBjb25zdCBzdWJzdHJpbmdTdGFydFBvc2l0aW9uID0gOTtcbiAgY29uc3Qgc3Vic3RyaW5nTGVuZ3RoID0gODtcbiAgY29uc3Qgc3Vic3RyaW5nRW5kUG9zaXRpb24gPSBzdWJzdHJpbmdTdGFydFBvc2l0aW9uICsgc3Vic3RyaW5nTGVuZ3RoO1xuICBpZiAoIWlkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgY29uc3QgaGFzaFN0cmluZyA9IGF3YWl0IGNyZWF0ZUhhc2hTdHJpbmcoaWRlbnRpZmllcik7XG4gIC8vIE1hcCB0aGUgY29va2llIGhhc2ggdG8gYSBudW1iZXIgYmV0d2VlbiAwIC0+IDk5LFxuICAvLyB0aGlzIG51bWJlciBpcyB0aGUgb25SYXRpb25cbiAgY29uc3QgaGFzaE51bWJlciA9IHBhcnNlSW50KGhhc2hTdHJpbmcuc3Vic3RyaW5nKHN1YnN0cmluZ1N0YXJ0UG9zaXRpb24sIHN1YnN0cmluZ0VuZFBvc2l0aW9uKSwgMTYpO1xuXG4gIHJldHVybiBoYXNoTnVtYmVyICUgMTAwO1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUhhc2hTdHJpbmcgPSBhc3luYyAoc3RyaW5nVG9IYXNoKSA9PiB7XG4gIC8vIGVuY29kZSBzdHJpbmcgdG8gYW4gYXJyYXkgb2YgOC1iaXQgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXNcbiAgY29uc3QgZW5jb2RlZCA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzdHJpbmdUb0hhc2gpO1xuXG4gIC8vIGhhc2ggdGhlIGVuY29kZWQgY29va2llIGludG8gYSBidWZmZXJcbiAgY29uc3QgaGFzaEJ1ZmZlciA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuZGlnZXN0KFwiU0hBLTFcIiwgZW5jb2RlZCk7XG5cbiAgLy8gY29udmVydCBidWZmZXIgdG8gYnl0ZSBhcnJheVxuICBjb25zdCBoYXNoQXJyYXkgPSBBcnJheS5mcm9tKG5ldyBVaW50OEFycmF5KGhhc2hCdWZmZXIpKTtcblxuICAvLyBjb252ZXJ0IGJ5dGVzIHRvIGhleCBzdHJpbmcgYW5kIHJldHVyblxuICByZXR1cm4gaGFzaEFycmF5Lm1hcCgoYikgPT4gYi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpKS5qb2luKFwiXCIpO1xufTtcblxuZXhwb3J0IGNvbnN0IGV4aXRTY3JvbGxMaXN0ZW5lciA9IChjYWxsQmFjaykgPT4ge1xuICBjb25zdCBsb29wID0gKCkgPT4ge1xuICAgIGNvbnN0IHNjcm9sbFRvcCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XG4gICAgaWYgKGxhc3RTY3JvbGxUb3AgLSA0MDAgPiBzY3JvbGxUb3ApIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoZXhpdFNjcm9sbEludGVydmFsKTtcbiAgICAgIGNhbGxCYWNrKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3RTY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9O1xuXG4gIGxldCBsYXN0U2Nyb2xsVG9wID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcbiAgY29uc3QgZXhpdFNjcm9sbEludGVydmFsID0gc2V0SW50ZXJ2YWwobG9vcCwgNTAwKTtcbn07XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBhcHBseSB0cmVhdG1lbnRzIHRvIHRoZSBwYWdlIG9uIHNwZWNpZmljIG1lZGlhIHR5cGUuXG4gKiBAcGFyYW0ge01lZGlhUXVlcnlMaXN0fSBtZWRpYVF1ZXJ5Q29uZGl0aW9uIHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1heC13aWR0aDogNTAwcHgpXCIpXG4gKiBAcGFyYW0ge0RPTU5vZGVMaXN0IH0gZWxlbWVudHMgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImRpdi5wcm9kdWN0X2luZm9cIilcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZUNoYW5nZXNNYXAgeyBcIm1hcmdpbi10b3BcIiA6IFwiMTByZW1cIn1cbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBjb25zdCBzdHlsZUFwcGxpY2F0b3IgPSAoZWxlbWVudHMsIHN0eWxlQ2hhbmdlc01hcCkgPT4ge1xuICBsb2dnZXIubG9nKFwiQXBwbHlpbmcgc3R5bGUgY2hhbmdlc1wiLCBzdHlsZUNoYW5nZXNNYXAsIFwidG8gZWxlbWVudHNcIiwgZWxlbWVudHMpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHN0eWxlQ2hhbmdlc01hcCkpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGluamVjdFN0eWxlU2hlZXQgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHN0eWxlU2hlZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiAgc3R5bGVTaGVldC5yZWwgPSBcInN0eWxlc2hlZXRcIjtcbiAgc3R5bGVTaGVldC50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuICBzdHlsZVNoZWV0LmhyZWYgPSBTVFlMRVNIRUVUX0xPQ0FUSU9OO1xuICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlU2hlZXQpO1xufTtcblxuZXhwb3J0IGNvbnN0IHByZXBhcmVBY3Rpb25zID0gKGFjdGlvbnNUb1ByZXBhcmUsIHN1YlZhcmlhbnRJZCkgPT4ge1xuICBjb25zdCBhY3Rpb25zID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhY3Rpb25zVG9QcmVwYXJlKSk7XG4gIGZvciAoY29uc3QgYWN0aW9uIG9mIGFjdGlvbnMpIHtcbiAgICBjb25zdCB7c3ViVmFyaWFudHN9ID0gYWN0aW9uO1xuICAgIGlmICghc3ViVmFyaWFudHMpIGNvbnRpbnVlO1xuICAgIGZvciAoY29uc3Qgc3ViVmFyaWFudCBvZiBzdWJWYXJpYW50cykge1xuICAgICAgaWYgKHN1YlZhcmlhbnQuaWQgPT09IHN1YlZhcmlhbnRJZCkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzdWJWYXJpYW50KSB7XG4gICAgICAgICAgaWYgKGtleSAhPT0gXCJpZFwiKSB7XG4gICAgICAgICAgICBhY3Rpb25ba2V5XSA9IHN1YlZhcmlhbnRba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFjdGlvbnM7XG59O1xuXG5leHBvcnQgY29uc3QgaW5pdGlhdGVTZXNzaW9uU3RvcmFnZXMgPSAoKSA9PiB7XG4gIGNvbnN0IHtQQUdFX1ZJRVdTLCBQT1BVUF9ESVNQTEFZX0ZMQUcsIFNFU1NJT05fSUQsIFNFU1NJT05fVElNRVNUQU1QLCBTRVNTSU9OX0hJU1RPUll9ID0gU0VTU0lPTl9TVE9SQUdFX0tFWVM7XG5cbiAgY29uc3QgcGFnZVZpZXdzID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQQUdFX1ZJRVdTKTtcbiAgY29uc3QgcG9wdXBEaXNwbGF5RmxhZyA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oUE9QVVBfRElTUExBWV9GTEFHKTtcbiAgY29uc3Qgc2Vzc2lvbklkID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShTRVNTSU9OX0lEKTtcbiAgY29uc3Qgc2Vzc2lvblRpbWVzdGFtcCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oU0VTU0lPTl9USU1FU1RBTVApO1xuICBjb25zdCBzZXNzaW9uSGlzdG9yeSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oU0VTU0lPTl9ISVNUT1JZKTtcblxuICBpZiAoIXBhZ2VWaWV3cykge1xuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oUEFHRV9WSUVXUywgMSk7XG4gIH0gZWxzZSB7XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQQUdFX1ZJRVdTLCBwYXJzZUludChwYWdlVmlld3MpICsgMSk7XG4gIH1cbiAgaWYgKHBvcHVwRGlzcGxheUZsYWcgPT09IG51bGwpIHtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBPUFVQX0RJU1BMQVlfRkxBRywgMCk7XG4gIH1cbiAgaWYgKCFzZXNzaW9uSWQpIHtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFNFU1NJT05fSUQsIGNyeXB0by5yYW5kb21VVUlEKCkpO1xuICB9XG4gIGlmICghc2Vzc2lvblRpbWVzdGFtcCkge1xuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oU0VTU0lPTl9USU1FU1RBTVAsIERhdGUubm93KCkpO1xuICB9XG4gIGlmICghc2Vzc2lvbkhpc3RvcnkpIHtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFNFU1NJT05fSElTVE9SWSwgW3dpbmRvdy5sb2NhdGlvbi5wYXRobmFtZV0pO1xuICB9IGVsc2Uge1xuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oU0VTU0lPTl9ISVNUT1JZLCBbd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLCBzZXNzaW9uSGlzdG9yeV0pO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgY29uZGl0aW9uQ2hlY2tlciA9IChydW5UaW1lVmFsdWUsIGNvbmRpdGlvbiwgdmFsdWUpID0+IHtcbiAgaWYgKGNvbmRpdGlvbiA9PT0gXCJub3RFeGlzdFwiKSB7XG4gICAgaWYgKCFydW5UaW1lVmFsdWUpIHtcbiAgICAgIGxvZ2dlci5sb2coXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgZG9lcyBub3QgZXhpc3RcIik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbG9nZ2VyLmxvZyhcImNvbmRpdGlvbkNoZWNrZXI6IC1ub3Qgc2F0aXNmaWVkLSB0YXJnZXQgZG9lcyBleGlzdFwiKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHJ1blRpbWVWYWx1ZSA9PT0gbnVsbCB8fFxuICAgIHJ1blRpbWVWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgY29uZGl0aW9uID09PSBudWxsIHx8XG4gICAgY29uZGl0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICBsb2dnZXIubG9nKFwiY29uZGl0aW9uQ2hlY2tlcjogcnVuVGltZVZhbHVlIG9yIGNvbmRpdGlvbiBpcyBub3QgZGVmaW5lZFwiKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3dpdGNoIChjb25kaXRpb24pIHtcbiAgICBjYXNlIFwiZXhpc3RcIjpcbiAgICAgIGlmIChydW5UaW1lVmFsdWUpIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhcImNvbmRpdGlvbkNoZWNrZXI6IC1zYXRpc2ZpZWQtIHRhcmdldCBkb2VzIGV4aXN0XCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5sb2coXCJjb25kaXRpb25DaGVja2VyOiAtbm90IHNhdGlzZmllZC0gdGFyZ2V0IGRvZXMgbm90IGV4aXN0XCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhc2UgXCJjb250YWluc1wiOlxuICAgICAgaWYgKHJ1blRpbWVWYWx1ZS5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhcImNvbmRpdGlvbkNoZWNrZXI6IC1zYXRpc2ZpZWQtIHRhcmdldCBjb250YWlucyB2YWx1ZVwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBsb2dnZXIubG9nKFwiY29uZGl0aW9uQ2hlY2tlcjogLW5vdCBzYXRpc2ZpZWQtIHRhcmdldCBkb2VzIG5vdCBjb250YWluIHZhbHVlXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhc2UgXCJub3RDb250YWluc1wiOlxuICAgICAgaWYgKCFydW5UaW1lVmFsdWUuaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgZG9lcyBub3QgY29udGFpbiB2YWx1ZVwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBsb2dnZXIubG9nKFwiY29uZGl0aW9uQ2hlY2tlcjogLW5vdCBzYXRpc2ZpZWQtIHRhcmdldCBjb250YWlucyB2YWx1ZVwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjYXNlIFwiZXF1YWxcIjpcbiAgICAgIGlmIChydW5UaW1lVmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgZXF1YWxzIHZhbHVlXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5sb2coXCJjb25kaXRpb25DaGVja2VyOiAtbm90IHNhdGlzZmllZC0gdGFyZ2V0IGRvZXMgbm90IGVxdWFsIHZhbHVlXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhc2UgXCJub3RFcXVhbFwiOlxuICAgICAgaWYgKHJ1blRpbWVWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhcImNvbmRpdGlvbkNoZWNrZXI6IC1zYXRpc2ZpZWQtIHRhcmdldCBkb2VzIG5vdCBlcXVhbCB2YWx1ZVwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBsb2dnZXIubG9nKFwiY29uZGl0aW9uQ2hlY2tlcjogLW5vdCBzYXRpc2ZpZWQtIHRhcmdldCBlcXVhbHMgdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImdyZWF0ZXJUaGFuXCI6XG4gICAgICBpZiAocnVuVGltZVZhbHVlID4gdmFsdWUpIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhcImNvbmRpdGlvbkNoZWNrZXI6IC1zYXRpc2ZpZWQtIHRhcmdldCBpcyBncmVhdGVyIHRoYW4gdmFsdWVcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmxvZyhcImNvbmRpdGlvbkNoZWNrZXI6IC1ub3Qgc2F0aXNmaWVkLSB0YXJnZXQgaXMgbm90IGdyZWF0ZXIgdGhhbiB2YWx1ZVwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjYXNlIFwibGVzc1RoYW5cIjpcbiAgICAgIGlmIChydW5UaW1lVmFsdWUgPCB2YWx1ZSkge1xuICAgICAgICBsb2dnZXIubG9nKFwiY29uZGl0aW9uQ2hlY2tlcjogLXNhdGlzZmllZC0gdGFyZ2V0IGlzIGxlc3MgdGhhbiB2YWx1ZVwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBsb2dnZXIubG9nKFwiY29uZGl0aW9uQ2hlY2tlcjogLW5vdCBzYXRpc2ZpZWQtIHRhcmdldCBpcyBub3QgbGVzcyB0aGFuIHZhbHVlXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhc2UgXCJncmVhdGVyRXF1YWxzXCI6XG4gICAgICBpZiAocnVuVGltZVZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgaXMgZ3JlYXRlciBvciBlcXVhbCB0aGFuIHZhbHVlXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5sb2coXCJjb25kaXRpb25DaGVja2VyOiAtbm90IHNhdGlzZmllZC0gdGFyZ2V0IGlzIG5vdCBncmVhdGVyIG9yIGVxdWFsIHRoYW4gdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImxlc3NFcXVhbHNcIjpcbiAgICAgIGlmIChydW5UaW1lVmFsdWUgPD0gdmFsdWUpIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhcImNvbmRpdGlvbkNoZWNrZXI6IC1zYXRpc2ZpZWQtIHRhcmdldCBpcyBsZXNzIG9yIGVxdWFsIHRoYW4gdmFsdWVcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmxvZyhcImNvbmRpdGlvbkNoZWNrZXI6IC1ub3Qgc2F0aXNmaWVkLSB0YXJnZXQgaXMgbm90IGxlc3Mgb3IgZXF1YWwgdGhhbiB2YWx1ZVwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjYXNlIFwiYmV0d2VlblwiOiB7XG4gICAgICBsZXQgW21pbiwgbWF4XSA9IHZhbHVlLnNwbGl0KFwiLFwiKTtcbiAgICAgIG1pbiA9IHBhcnNlSW50KG1pbik7XG4gICAgICBtYXggPSBwYXJzZUludChtYXgpO1xuICAgICAgaWYgKHJ1blRpbWVWYWx1ZSA+PSBtaW4gJiYgcnVuVGltZVZhbHVlIDw9IG1heCkge1xuICAgICAgICBsb2dnZXIubG9nKFwiY29uZGl0aW9uQ2hlY2tlcjogLXNhdGlzZmllZC0gdGFyZ2V0IGlzIGJldHdlZW4gbWluIGFuZCBtYXhcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmxvZyhcImNvbmRpdGlvbkNoZWNrZXI6IC1ub3Qgc2F0aXNmaWVkLSB0YXJnZXQgaXMgbm90IGJldHdlZW4gbWluIGFuZCBtYXhcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICBsb2dnZXIubG9nKFwiY29uZGl0aW9uQ2hlY2tlcjogY29uZGl0aW9uIGlzIG5vdCBkZWZpbmVkIFwiLCBjb25kaXRpb24pO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcmFuZG9tVVVJREZhbGxiYWNrID0gKCkgPT4ge1xuICBjcnlwdG8ucmFuZG9tVVVJRCA9IGZ1bmN0aW9uIHJhbmRvbVVVSUQoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIFsxZTddICsgLTFlMyArIC00ZTMgKyAtOGUzICsgLTFlMTEpLnJlcGxhY2UoL1swMThdL2csXG4gICAgICAgIChjKSA9PiAoYyBeIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoMSkpWzBdICYgMTUgPj4gYyAvIDQpLnRvU3RyaW5nKDE2KSxcbiAgICApO1xuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldERlYnVnTW9kZSA9ICgpID0+IHtcbiAgY29uc3Qge05EX0RFQlVHX01PREV9ID0gTE9DQUxfU1RPUkFHRV9LRVlTO1xuICBjb25zdCBxdWVyeVN0cmluZyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XG4gIGlmIChxdWVyeVN0cmluZy5pbmNsdWRlcyhcIm5kX2RlYnVnPTFcIikpIHtcbiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oTkRfREVCVUdfTU9ERSwgMSk7XG4gICAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJkYm1cIiwgXCJvblwiKTtcbiAgICByZXR1cm4gMTtcbiAgfVxuICBpZiAocXVlcnlTdHJpbmcuaW5jbHVkZXMoXCJuZF9kZWJ1Zz0yXCIpKSB7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKE5EX0RFQlVHX01PREUsIDIpO1xuICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiZGJtXCIsIFwib25cIik7XG4gICAgcmV0dXJuIDI7XG4gIH1cbiAgaWYgKHF1ZXJ5U3RyaW5nLmluY2x1ZGVzKFwibmRfZGVidWc9MFwiKSkge1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShORF9ERUJVR19NT0RFKTtcbiAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcImRibVwiLCBcIm9mZlwiKTtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCBjdXJyZW50ID0gcGFyc2VJbnQod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKE5EX0RFQlVHX01PREUpKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJkYm1cIiwgKGN1cnJlbnQgPyBcIm9uXCIgOiBcIm9mZlwiKSk7XG4gIHJldHVybiAoY3VycmVudCB8fCAwKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRJZGVudGlmaWVyID0gYXN5bmMgKGNvb2tpZU5hbWUgPSBDT09LSUVfTkFNRSkgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGxldCBpZCA9IGV4dHJhY3RDb29raWVJZGVudGlmaWVyKGRvY3VtZW50LmNvb2tpZSwgY29va2llTmFtZSk7XG4gICAgaWYgKGlkKSB7XG4gICAgICByZXNvbHZlKGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZXh0cmFjdElkZW50aWZpZXJJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgaWQgPSBleHRyYWN0Q29va2llSWRlbnRpZmllcihkb2N1bWVudC5jb29raWUsIGNvb2tpZU5hbWUpO1xuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICBjbGVhckludGVydmFsKGV4dHJhY3RJZGVudGlmaWVySW50ZXJ2YWwpO1xuICAgICAgICAgIHJlc29sdmUoaWQpO1xuICAgICAgICB9XG4gICAgICB9LCAxMCk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChleHRyYWN0SWRlbnRpZmllckludGVydmFsKTtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkNvdWxkIG5vdCBleHRyYWN0IGNvb2tpZSBpZGVudGlmaWVyXCIpKTtcbiAgICAgIH0sIDEwMDApO1xuICAgIH1cbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgZGVsYXkgPSAobXMpID0+IG5ldyBQcm9taXNlKChyZXMpID0+IHNldFRpbWVvdXQocmVzLCBtcykpO1xuXG4vLyBDb2xsZWN0IHByb2R1Y3QgU0tVcyBmcm9tIHBhZ2VcbmV4cG9ydCBjb25zdCBza3VDb2xsZWN0b3IgPSAoKSA9PiB7XG4gIGNvbnN0IHtORF9TS1VfTElTVH0gPSBTRVNTSU9OX1NUT1JBR0VfS0VZUztcbiAgY29uc3Qgc2t1TGlzdCA9IFtdO1xuXG4gIC8vIENoZWNrIGlmIHBhZ2UgaXMgaG9tZSBwYWdlXG4gIGNvbnN0IHJ1bGUgPSB7XG4gICAgb3BlcmF0b3I6IFwiUGFnZVR5cGVcIixcbiAgICBjb25kaXRpb246IFwiZXF1YWxcIixcbiAgICB2YWx1ZTogXCJIb21lcGFnZVwiLFxuICB9O1xuICBpZiAoY2hlY2tEYXRhTGF5ZXJSdWxlKHJ1bGUpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBDaGVjayBpZiBwYWdlIGlzIGxpc3RpbmcgcGFnZVxuICBydWxlLnZhbHVlID0gXCJMaXN0aW5ncGFnZVwiO1xuICBpZiAoY2hlY2tEYXRhTGF5ZXJSdWxlKHJ1bGUpKSB7XG4gICAgY29uc3QgZWxlbWVudHMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucHJvZHVjdC1jYXJkXCIpKTtcbiAgICBlbGVtZW50cy5mb3JFYWNoKChlKSA9PiB7XG4gICAgICBza3VMaXN0LnB1c2goZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXByb2R1Y3Qtc2t1XCIpKTtcbiAgICB9KTtcbiAgICBpZiAoIXNrdUxpc3QubGVuZ3RoKSB7XG4gICAgICBsb2dnZXIubG9nKFwiUHJvZHVjdCBTS1VzIG5vdCBmb3VuZCBvbiBMaXN0aW5ncGFnZVwiKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKE5EX1NLVV9MSVNULCBKU09OLnN0cmluZ2lmeShza3VMaXN0KSk7XG5cbiAgICByZXR1cm4gc2t1TGlzdDtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHBhZ2UgaXMgcHJvZHVjdCBwYWdlXG4gIHJ1bGUudmFsdWUgPSBcIlByb2R1Y3RwYWdlXCI7XG4gIGlmIChjaGVja0RhdGFMYXllclJ1bGUocnVsZSkpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9kdWN0LXNrdVwiKTtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIGxvZ2dlci5sb2coXCJQcm9kdWN0IFNLVSBub3QgZm91bmQgb24gUHJvZHVjdHBhZ2VcIik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc2t1TGlzdC5wdXNoKGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1za3VcIikpO1xuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oTkRfU0tVX0xJU1QsIEpTT04uc3RyaW5naWZ5KHNrdUxpc3QpKTtcblxuICAgIHJldHVybiBza3VMaXN0O1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgcGFnZSBpcyBiYXNrZXQgcGFnZVxuICBydWxlLm9wZXJhdG9yID0gXCJwYXRoXCI7XG4gIHJ1bGUudmFsdWUgPSBcIi9zaXBhcmlzLWxpc3Rlc2kuaHRtbFwiO1xuICBpZiAoY2hlY2tVcmxSdWxlKHJ1bGUpKSB7XG4gICAgY29uc3QgZWxlbWVudHMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2FydC1pbnNpZGVcIikpO1xuICAgIGVsZW1lbnRzLmZvckVhY2goKGUpID0+IHtcbiAgICAgIHNrdUxpc3QucHVzaChlLmdldEF0dHJpYnV0ZShcImRhdGEtc2t1XCIpKTtcbiAgICB9KTtcbiAgICBpZiAoIXNrdUxpc3QubGVuZ3RoKSB7XG4gICAgICBsb2dnZXIubG9nKFwiUHJvZHVjdCBTS1VzIG5vdCBmb3VuZCBvbiBiYXNrZXQgcGFnZVwiKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKE5EX1NLVV9MSVNULCBKU09OLnN0cmluZ2lmeShza3VMaXN0KSk7XG5cbiAgICByZXR1cm4gc2t1TGlzdDtcbiAgfVxuXG4gIGxvZ2dlci5sb2coXCJVbmlkZW50aWZpZWQgcGFnZSB0eXBlXCIpO1xuICByZXR1cm4gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1NlbmRCZWFjb25TdXBwb3J0ZWQgPSAoKSA9PiBuYXZpZ2F0b3Iuc2VuZEJlYWNvbiAmJiB0eXBlb2YgbmF2aWdhdG9yLnNlbmRCZWFjb24gPT09IFwiZnVuY3Rpb25cIjtcbiIsImV4cG9ydCBjb25zdCByZXBsYWNlQWxsID0gKHN0ciwgZmluZCwgcmVwbGFjZSA9IFwiXCIpID0+IHtcbiAgaWYgKCFzdHIpIHJldHVybiBcIlwiO1xuXG4gIGNvbnN0IGluZGV4ID0gc3RyLmluZGV4T2YoZmluZCk7XG4gIGlmIChpbmRleCA8IDApIHJldHVybiBzdHI7XG5cbiAgd2hpbGUgKHN0ci5pbmRleE9mKGZpbmQpID49IDApIHtcbiAgICBjb25zdCBpbmRleCA9IHN0ci5pbmRleE9mKGZpbmQpO1xuICAgIHN0ciA9IChpbmRleCA+IDAgPyBzdHIuc3Vic3RyaW5nKDAsIGluZGV4KSA6IFwiXCIpICsgcmVwbGFjZSArIHN0ci5zdWJzdHJpbmcoaW5kZXggKyBmaW5kLmxlbmd0aCk7XG4gIH1cblxuICByZXR1cm4gc3RyO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbmltcG9ydCB7ZXhpdFNjcm9sbExpc3RlbmVyLCBzdHlsZUFwcGxpY2F0b3IsIGRlbGF5fSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7cmVwbGFjZUFsbH0gZnJvbSBcIi4uL3N0cmluZ1V0aWxzXCI7XG5pbXBvcnQge01PQklMRV9NRURJQV9RVUVSWSwgU0VTU0lPTl9TVE9SQUdFX0tFWVN9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7ZGF0YUxheWVyRmluZGVyfSBmcm9tIFwiLi4vTmV4dGRheVJ1bGVFbmdpbmUvZGF0YUxheWVyQ2hlY2tlclwiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIGFwcGx5VHJlYXRtZW50cyh0cmVhdG1lbnRzLCBwcm9kdWN0SW5mbykge1xuICBjb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFwiTmV4dGRheSBBcHBseSBUcmVhdG1lbnRzXCIpO1xuICBjb25zdCB7UE9QVVBfRElTUExBWV9GTEFHfSA9IFNFU1NJT05fU1RPUkFHRV9LRVlTO1xuXG4gIGNvbnN0IHRyYW5zZm9ybWVyID0gZnVuY3Rpb24gdHJhbnNmb3JtZXIodHJlYXRtZW50KSB7XG4gICAgbG9nZ2VyLmxvZyhcIkFwcGx5aW5nIHRyZWF0bWVudDogXCIsIEpTT04uc3RyaW5naWZ5KHRyZWF0bWVudCkpO1xuICAgIGNvbnN0IHtcbiAgICAgIG9wZXJhdG9yLFxuICAgICAgdHlwZSxcbiAgICAgIGFwcGx5RXZlbnQsXG4gICAgICBjb250ZW50U2VsZWN0b3IsXG4gICAgICBzZWxlY3RvcixcbiAgICAgIHNlbGVjdG9yRmFsbGJhY2ssXG4gICAgICBtZENvbmRpdGlvbixcbiAgICAgIG1vdmVfc2VsZWN0b3JfMSxcbiAgICAgIG1vdmVfc2VsZWN0b3JfMixcbiAgICAgIHJlcGxhY2VGbixcbiAgICB9ID0gdHJlYXRtZW50O1xuICAgIGxldCB7dmFsdWV9ID0gdHJlYXRtZW50O1xuICAgIGxldCBlbGVtZW50ID0gJChzZWxlY3Rvcik7XG5cbiAgICBjb25zdCBtYyA9IG1kQ29uZGl0aW9uID8gd2luZG93Lm1hdGNoTWVkaWEobWRDb25kaXRpb24pLm1hdGNoZXMgOiB0cnVlO1xuICAgIGlmICghbWMpIHtcbiAgICAgIGxvZ2dlci5sb2coXCJNZWRpYSBjb25kaXRpb24gbWlzbWF0Y2g6IFwiLCBtZENvbmRpdGlvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChcbiAgICAgIChtb3ZlX3NlbGVjdG9yXzEgJiYgIW1vdmVfc2VsZWN0b3JfMikgfHxcbiAgICAgIChtb3ZlX3NlbGVjdG9yXzIgJiYgIW1vdmVfc2VsZWN0b3JfMSlcbiAgICApIHtcbiAgICAgIGxvZ2dlci5sb2coXCJCb3RoIG1vdmUgc2VsZWN0b3JzIGFyZSByZXF1aXJlZFwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG1vdmVfc2VsZWN0b3JfMSAmJiBtb3ZlX3NlbGVjdG9yXzIpIHtcbiAgICAgIGlmICghJChtb3ZlX3NlbGVjdG9yXzEpLmxlbmd0aCkge1xuICAgICAgICBsb2dnZXIubG9nKFwiTW92ZSBzZWxlY3RvciAxIG5vdCBmb3VuZDogXCIsIG1vdmVfc2VsZWN0b3JfMSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghJChtb3ZlX3NlbGVjdG9yXzIpLmxlbmd0aCkge1xuICAgICAgICBsb2dnZXIubG9nKFwiTW92ZSBzZWxlY3RvciAyIG5vdCBmb3VuZDogXCIsIG1vdmVfc2VsZWN0b3JfMik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgbG9nZ2VyLmxvZyhcIlNlbGVjdG9yIG5vdCBzcGVjaWZpZWRcIik7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghZWxlbWVudC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHNlbGVjdG9yICE9PSBcIm5vLXNlbGVjdG9yXCIpIHtcbiAgICAgICAgICBsb2dnZXIubG9nKFwiU2VsZWN0b3Igbm90IGZvdW5kOiBcIiwgc2VsZWN0b3IpO1xuICAgICAgICAgIGxvZ2dlci5sb2coXCJUcnlpbmcgZmFsbGJhY2sgc2VsZWN0b3I6IFwiLCBzZWxlY3RvckZhbGxiYWNrKTtcbiAgICAgICAgICBpZiAoc2VsZWN0b3JGYWxsYmFjaykgZWxlbWVudCA9ICQoc2VsZWN0b3JGYWxsYmFjayk7XG4gICAgICAgICAgaWYgKCFlbGVtZW50Lmxlbmd0aCkge1xuICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIkZhbGxiYWNrIHNlbGVjdG9yIG5vdCBmb3VuZFwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZXBsYWNlRm5FeGVjdXRvciA9IChyZXBsYWNlRm4sIHZhbHVlKSA9PiB7XG4gICAgICBpZiAocmVwbGFjZUZuICYmIHZhbHVlLmluY2x1ZGVzKFwie3tSRVBMQUNFfX1cIikpIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIkV4ZWN1dGluZyByZXBsYWNlIGZ1bmN0aW9uOiBcIiwgcmVwbGFjZUZuKTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgICAgICBkYXRhTGF5ZXJGaW5kZXIsXG4gICAgICAgICAgcHJvZHVjdEluZm8sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlcGxhY2VGdW5jdGlvbiA9IEZ1bmN0aW9uKHJlcGxhY2VGbikuYmluZChjb250ZXh0KTtcbiAgICAgICAgdmFsdWUgPSByZXBsYWNlQWxsKHZhbHVlLCBcInt7UkVQTEFDRX19XCIsIHJlcGxhY2VGdW5jdGlvbigpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICB2YWx1ZS5mb3JFYWNoKCh2YWwsIGkpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFJlcGxhY2VGbiA9IHJlcGxhY2VGbiA/IHJlcGxhY2VGbltpXSB8fCByZXBsYWNlRm4gOiBcIlwiO1xuICAgICAgICB2YWx1ZVtpXSA9IHJlcGxhY2VGbkV4ZWN1dG9yKGN1cnJlbnRSZXBsYWNlRm4sIHZhbCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgPSByZXBsYWNlRm5FeGVjdXRvcihyZXBsYWNlRm4sIHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAob3BlcmF0b3IgPT09IFwicmVtb3ZlXCIpIHtcbiAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJSZW1vdmluZzogXCIsIHNlbGVjdG9yKTtcbiAgICAgICAgZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5sb2coXCJDYW5ub3QgZm91bmQgZWxlbWVudCB3aXRoIHNlbGVjdG9yOiBcIiwgc2VsZWN0b3IpO1xuICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgPT09IFwiaW5zZXJ0XCIpIHtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwiYmVmb3JlXCI6XG4gICAgICAgICAgbG9nZ2VyLmxvZyhcIkluc2VydGluZyBiZWZvcmU6IFwiLCB2YWx1ZSk7XG4gICAgICAgICAgaWYgKFN0cmluZyh2YWx1ZSkuaW5jbHVkZXMoXCJuZC1hZGQtdG8td2luXCIpKSB7XG4gICAgICAgICAgICAkKFwiLm5kLWFkZC10by13aW5cIikucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsZW1lbnQuYmVmb3JlKHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImFmdGVyXCI6XG4gICAgICAgICAgbG9nZ2VyLmxvZyhcIkluc2VydGluZyBhZnRlcjogXCIsIHZhbHVlKTtcbiAgICAgICAgICBlbGVtZW50LmFmdGVyKHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInBvcHVwXCI6XG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKHBhcnNlSW50KHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oUE9QVVBfRElTUExBWV9GTEFHKSkgIT09IDApIHtcbiAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIlBvcHVwIGFscmVhZHkgZGlzcGxheWVkIGluIHNlc3Npb25cIik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIkNyZWF0aW5nIFBvcHVwOiBcIiwgdmFsdWUpO1xuICAgICAgICAgICAgY3JlYXRlUG9wdXAodmFsdWUsIGNvbnRlbnRTZWxlY3Rvcik7XG5cbiAgICAgICAgICAgIGlmIChhcHBseUV2ZW50KSB7XG4gICAgICAgICAgICAgIGNvbnN0IG1vYmlsZSA9IHdpbmRvdy5tYXRjaE1lZGlhKE1PQklMRV9NRURJQV9RVUVSWSkubWF0Y2hlcztcbiAgICAgICAgICAgICAgZm9yIChjb25zdCBldmVudCBvZiBhcHBseUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSBcImV4aXRJbnRlbnRcIjpcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIkFkZGluZyBleGl0IGludGVudCBsaXN0ZW5lclwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vYmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGV4aXRTY3JvbGxMaXN0ZW5lcihkaXNwbGF5UG9wdXApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1vdXNlbGVhdmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheVBvcHVwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7b25jZTogdHJ1ZX0sXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJjb3B5SW50ZW50XCI6XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coXCJBZGRpbmcgY29weSBpbnRlbnQgbGlzdGVuZXJcIik7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb3B5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5UG9wdXAsXG4gICAgICAgICAgICAgICAgICAgICAgICB7b25jZTogdHJ1ZX0sXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gYXBwZW5kIHBvcHVwIHRvIGJvZHkgYWZ0ZXIgdGltZW91dCBleHBpcmVzXG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRpc3BsYXlQb3B1cCgpO1xuICAgICAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gXCJlZGl0XCIpIHtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwidGV4dFwiOlxuICAgICAgICAgIGxvZ2dlci5sb2coXCJFZGl0aW5nIHRleHQ6IFwiLCB2YWx1ZSk7XG4gICAgICAgICAgZWxlbWVudC50ZXh0KHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImh0bWxcIjpcbiAgICAgICAgICBsb2dnZXIubG9nKFwiRWRpdGluZyBodG1sOiBcIiwgdmFsdWUpO1xuICAgICAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzdHlsZUFwcGxpY2F0b3JcIjpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKFwiQXBwbHlpbmcgc3R5bGU6IFwiLCB2YWx1ZSk7XG4gICAgICAgICAgICBjb25zdCBzdHlsZUNoYW5nZXNNYXAgPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coXCJTdHlsZSBDaGFuZ2VzIE1hcDogXCIsIHN0eWxlQ2hhbmdlc01hcCk7XG4gICAgICAgICAgICBzdHlsZUFwcGxpY2F0b3IoZWxlbWVudCwgc3R5bGVDaGFuZ2VzTWFwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJhZGRDbGFzc1wiOlxuICAgICAgICAgIGxvZ2dlci5sb2coYGFkZGRpbmcgY2xhc3MgdG8gJHtlbGVtZW50fSBuYW1lZCAke3ZhbHVlfWApO1xuICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3ModmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicmVtb3ZlQ2xhc3NcIjpcbiAgICAgICAgICBsb2dnZXIubG9nKGByZW1vdmUgY2xhc3MgZnJvbSAke2VsZW1lbnR9IG5hbWVkICR7dmFsdWV9YCk7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyh2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJkb2N1bWVudFRpdGxlXCI6XG4gICAgICAgICAgbG9nZ2VyLmxvZyhgY2hhbmdpbmcgZG9jdW1lbnQgdGl0bGUgZnJvbSAke2VsZW1lbnR9IHRvICR7dmFsdWV9YCk7XG4gICAgICAgICAgaWYgKGFwcGx5RXZlbnQpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZXZlbnQgb2YgYXBwbHlFdmVudCkge1xuICAgICAgICAgICAgICBpZiAoZXZlbnQgPT0gXCJ0YWJDaGFuZ2VcIikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coXCJjYXRjaGluZyBldmVudCB0YWJjaGFuZ2UuLlwiKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvcmlnaW5hbFRpdGxlID0gZG9jdW1lbnQudGl0bGU7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgKGUpID0+XG4gICAgICAgICAgICAgICAgICBoYW5kbGVEb2N1bWVudFRpdGxlVGFiQ2hhbmdlKGUsIHZhbHVlLCBvcmlnaW5hbFRpdGxlKSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiYWRkQmFubmVyXCI6XG4gICAgICAgICAge1xuICAgICAgICAgICAgY29uc3Qge05EX1NLVV9MSVNUfSA9IFNFU1NJT05fU1RPUkFHRV9LRVlTO1xuICAgICAgICAgICAgaWYgKCFwcm9kdWN0SW5mbykge1xuICAgICAgICAgICAgICBsb2dnZXIubG9nKFwiUHJvZHVjdCBpbmZvIHVuYXZhaWxhYmxlXCIpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZ2dlci5sb2coXCJBZGRpbmcgYmFubmVyOiBcIiwgdmFsdWUpO1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudFNrdSA9IEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShORF9TS1VfTElTVCkpWzBdO1xuICAgICAgICAgICAgaWYgKCFlbGVtZW50U2t1KSB7XG4gICAgICAgICAgICAgIGxvZ2dlci5sb2coXCJDb3VsZCBub3QgZmluZCBwcm9kdWN0IHNrdVwiKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIE9iamVjdC5rZXlzKHByb2R1Y3RJbmZvKS5pbmNsdWRlcyhlbGVtZW50U2t1KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQuYmVmb3JlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgbG9nZ2VyLmxvZyhcIlVua25vd24gZWRpdCB0eXBlOiBcIiwgdHlwZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gXCJzZXRhdHRyaWJ1dGVcIikge1xuICAgICAgbG9nZ2VyLmxvZyhcIlNldHRpbmcgYXR0cmlidXRlOiBcIiwgYXR0cmlidXRlLCB2YWx1ZSk7XG4gICAgICBzd2l0Y2ggKGF0dHJpYnV0ZSkge1xuICAgICAgICBjYXNlIFwic3JjXCI6XG4gICAgICAgICAgZWxlbWVudC5jc3MoXCJjb250ZW50XCIsIGB1cmwoJHt2YWx1ZS50cmltKCl9KWApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY2FzZS1kZWNsYXJhdGlvbnNcbiAgICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IHZhbHVlLnNwbGl0KFwiOlwiKVswXS50cmltKCk7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNhc2UtZGVjbGFyYXRpb25zXG4gICAgICAgICAgY29uc3QgcHJvcGVydHlWYWx1ZSA9IHZhbHVlLnNwbGl0KFwiOlwiKVsxXS50cmltKCk7XG5cbiAgICAgICAgICBlbGVtZW50LmNzcyhwcm9wZXJ0eSwgcHJvcGVydHlWYWx1ZSwgXCIhaW1wb3J0YW50XCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgPT09IFwicmVwbGFjZVwiKSB7XG4gICAgICBsb2dnZXIubG9nKFwiUmVwbGFjaW5nOiBcIiwgdmFsdWUpO1xuICAgICAgZWxlbWVudC5yZXBsYWNlQWxsKHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcInN3YXBcIikge1xuICAgICAgbG9nZ2VyLmxvZyhcIlN3YXBwaW5nOiBcIiwgbW92ZV9zZWxlY3Rvcl8xLCBtb3ZlX3NlbGVjdG9yXzIpO1xuICAgICAgY29uc3QgbjEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG1vdmVfc2VsZWN0b3JfMSk7XG4gICAgICBjb25zdCBuMiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobW92ZV9zZWxlY3Rvcl8yKTtcbiAgICAgIHN3YXBOb2RlcyhuMSwgbjIpO1xuICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgPT09IFwiaW5qZWN0c2NyaXB0XCIpIHtcbiAgICAgIGxvZ2dlci5sb2coXCJJbmplY3Rpbmcgc2NyaXB0OiBcIiwgdmFsdWUpO1xuICAgICAgZWxlbWVudC5hcHBlbmQoYDxzY3JpcHQ+JHt2YWx1ZX08L3NjcmlwdD5gKTtcbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcIm1vdmVcIikge1xuICAgICAgbG9nZ2VyLmxvZyhgTW92aW5nICR7bW92ZV9zZWxlY3Rvcl8xfSB0byAke21vdmVfc2VsZWN0b3JfMn1gKTtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobW92ZV9zZWxlY3Rvcl8xKTtcbiAgICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihtb3ZlX3NlbGVjdG9yXzIpO1xuICAgICAgc291cmNlLnJlbW92ZSgpO1xuICAgICAgZGVzdGluYXRpb24ucHJlcGVuZChzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgPT09IFwibm9vcFwiKSB7XG4gICAgICBsb2dnZXIubG9nKFwiTm9vcCBPcGVyYXRvcjogTm8gb3BlcmF0aW9uIGlzIGFwcGxpZWQgb24gdGFyZ2V0IFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nZ2VyLmxvZyhcIk5vIHN1Y2ggb3BlcmF0b3IgZXhpc3RzIHlldFwiLCBvcGVyYXRvcik7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZURvY3VtZW50VGl0bGVUYWJDaGFuZ2UgPSBhc3luYyAoZXZlbnQsIHRpdGxlcywgb3JpZ2luYWxUaXRsZSkgPT4ge1xuICAgIGNvbnN0IHBhcnNlZFRpdGxlcyA9ICFBcnJheS5pc0FycmF5KHRpdGxlcykgPyBbdGl0bGVzXSA6IHRpdGxlcztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnNlZFRpdGxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGRvY3VtZW50LmhpZGRlbikge1xuICAgICAgICBkb2N1bWVudC50aXRsZSA9IHBhcnNlZFRpdGxlc1tpXTtcbiAgICAgICAgYXdhaXQgZGVsYXkoMzAwMCk7XG4gICAgICAgIGRvY3VtZW50LnRpdGxlID0gb3JpZ2luYWxUaXRsZTtcbiAgICAgICAgYXdhaXQgZGVsYXkoMzAwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2N1bWVudC50aXRsZSA9IG9yaWdpbmFsVGl0bGU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghZG9jdW1lbnQuaGlkZGVuKSB7XG4gICAgICBkb2N1bWVudC50aXRsZSA9IG9yaWdpbmFsVGl0bGU7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhbmRsZURvY3VtZW50VGl0bGVUYWJDaGFuZ2UoZXZlbnQsIHRpdGxlcywgb3JpZ2luYWxUaXRsZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVBvcHVwQ2xpY2sgPSAoZXZlbnQpID0+IHtcbiAgICBjb25zdCBpZCA9IGV2ZW50LnRhcmdldC5pZDtcbiAgICBpZiAoaWQgJiYgaWQgPT09IFwibmQtcG9wdXBfX3dyYXBwZXJcIikge1xuICAgICAgJChcIiNuZC1wb3B1cF9fd3JhcHBlclwiKS5yZW1vdmUoKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlUG9wdXBDbGljaywgdHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGRpc3BsYXlQb3B1cCA9ICgpID0+IHtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBPUFVQX0RJU1BMQVlfRkxBRywgMSk7XG4gICAgY29uc3QgcVBvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNncnQtc2hhZG93LWhvc3RcIik7XG4gICAgaWYgKHFQb3B1cCkgcVBvcHVwLnN0eWxlW1wiZGlzcGxheVwiXSA9IFwibm9uZVwiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmQtcG9wdXBfX3dyYXBwZXJcIikuc3R5bGVbXCJkaXNwbGF5XCJdID0gXCJibG9ja1wiO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlUG9wdXBDbGljaywgdHJ1ZSk7XG5cbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgZGlzcGxheVBvcHVwLCB7XG4gICAgICBvbmNlOiB0cnVlLFxuICAgIH0pO1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY29weVwiLCBkaXNwbGF5UG9wdXAsIHtcbiAgICAgIG9uY2U6IHRydWUsXG4gICAgfSk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICQoXCIjbmQtcG9wdXBfX3dyYXBwZXJcIikucmVtb3ZlKCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZVBvcHVwQ2xpY2ssIHRydWUpO1xuICAgIH0sIDE1MDAwKTtcbiAgfTtcblxuICBjb25zdCBjcmVhdGVQb3B1cCA9ICh2YWx1ZSwgY29udGVudFNlbGVjdG9yKSA9PiB7XG4gICAgLy8gQ3JlYXRlIHBvcHVwIHdyYXBwZXJcbiAgICBjb25zdCBwb3B1cFdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgcG9wdXBXcmFwcGVyLmNsYXNzTGlzdC5hZGQoXCJuZC1wb3B1cF9fd3JhcHBlclwiKTtcbiAgICBwb3B1cFdyYXBwZXIuaWQgPSBcIm5kLXBvcHVwX193cmFwcGVyXCI7XG5cbiAgICAvLyBDcmVhdGUgcG9wdXAgY2xvc2UgYnV0dG9uXG4gICAgY29uc3QgcG9wdXBDbG9zZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgcG9wdXBDbG9zZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwibmQtcG9wdXBfX2J1dHRvbi1jbG9zZVwiKTtcbiAgICBwb3B1cENsb3NlQnV0dG9uLmlubmVyVGV4dCA9IFwiWFwiO1xuICAgIHBvcHVwQ2xvc2VCdXR0b24ub25jbGljayA9ICgpID0+IHtcbiAgICAgICQoXCIjbmQtcG9wdXBfX3dyYXBwZXJcIikucmVtb3ZlKCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZVBvcHVwQ2xpY2ssIHRydWUpO1xuICAgIH07XG5cbiAgICBpZiAoY29udGVudFNlbGVjdG9yKSB7XG4gICAgICBjb25zdCBjb250ZW50cyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChjb250ZW50U2VsZWN0b3IpKTtcbiAgICAgIHdoaWxlICh2YWx1ZS5pbmNsdWRlcyhcInt7UkVQTEFDRX19XCIpICYmIGNvbnRlbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKFwie3tSRVBMQUNFfX1cIiwgY29udGVudHMuc2hpZnQoKS5zcmMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENyZWF0ZSBwb3B1cCBmcm9tIHRyZWF0bWVudCBhbmQgYXBwZW5kIGNsb3NlIGJ1dHRvblxuICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO1xuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IHZhbHVlLnRyaW0oKTtcbiAgICBjb25zdCBwb3B1cCA9IHRlbXBsYXRlLmNvbnRlbnQuZmlyc3RDaGlsZDtcbiAgICBwb3B1cC5hcHBlbmRDaGlsZChwb3B1cENsb3NlQnV0dG9uKTtcbiAgICBwb3B1cFdyYXBwZXIuYXBwZW5kQ2hpbGQocG9wdXApO1xuXG4gICAgLy8gUmVtb3ZlIG9sZCBwb3B1cCBpZiBleGlzdHMgYmVmb3JlIGFwcGVuZGluZyBuZXcgb25lXG4gICAgJChcIiNuZC1wb3B1cF9fd3JhcHBlclwiKS5yZW1vdmUoKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHBvcHVwV3JhcHBlcik7XG4gIH07XG5cbiAgY29uc3Qgc3dhcE5vZGVzID0gZnVuY3Rpb24gc3dhcE5vZGVzKG4xLCBuMikge1xuICAgIGNvbnN0IHAxID0gbjEucGFyZW50Tm9kZTtcbiAgICBjb25zdCBwMiA9IG4yLnBhcmVudE5vZGU7XG4gICAgbGV0IGkxO1xuICAgIGxldCBpMjtcblxuICAgIGlmICghcDEgfHwgIXAyIHx8IHAxLmlzRXF1YWxOb2RlKG4yKSB8fCBwMi5pc0VxdWFsTm9kZShuMSkpIHJldHVybjtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcDEuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwMS5jaGlsZHJlbltpXS5pc0VxdWFsTm9kZShuMSkpIHtcbiAgICAgICAgaTEgPSBpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHAyLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocDIuY2hpbGRyZW5baV0uaXNFcXVhbE5vZGUobjIpKSB7XG4gICAgICAgIGkyID0gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocDEuaXNFcXVhbE5vZGUocDIpICYmIGkxIDwgaTIpIHtcbiAgICAgIGkyKys7XG4gICAgfVxuICAgIHAxLmluc2VydEJlZm9yZShuMiwgcDEuY2hpbGRyZW5baTFdKTtcbiAgICBwMi5pbnNlcnRCZWZvcmUobjEsIHAyLmNoaWxkcmVuW2kyXSk7XG4gIH07XG5cbiAgY29uc3QgdHJlYXRtZW50QXBwbGljYXRvciA9ICh0cmVhdG1lbnRMaXN0KSA9PiB7XG4gICAgaWYgKCF3aW5kb3cualF1ZXJ5KSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICB0cmVhdG1lbnRBcHBsaWNhdG9yKHRyZWF0bWVudExpc3QpO1xuICAgICAgfSwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGNvbnN0IHRyZWF0bWVudCBvZiB0cmVhdG1lbnRMaXN0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdHJhbnNmb3JtZXIodHJlYXRtZW50KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgbG9nZ2VyLmxvZyhcbiAgICAgICAgICAgICAgYENvdWxkbid0IGFwcGx5IHRyZWF0bWVudCAke3RyZWF0bWVudC5pZH0gd2l0aCBlcnJvciAke2Vyci5tZXNzYWdlfWAsXG4gICAgICAgICAgKTtcbiAgICAgICAgICAvLyBTZXQgaWQgb2YgZmFpbGVkIHRyZWF0bWVudCB0byAtMSxcbiAgICAgICAgICAvLyBzbyB3ZSBrbm93IG5vdCB0byBsaXN0IGluIHRoZSBjdXN0b20gR0EgZXZlbnRcbiAgICAgICAgICAvLyB0cmVhdG1lbnRMaXN0W3RyZWF0bWVudF0uaWQgPSAtMTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBBcHBseSB0cmVhdG1lbnRzXG4gIHRyZWF0bWVudEFwcGxpY2F0b3IodHJlYXRtZW50cyk7XG59XG5leHBvcnQgZGVmYXVsdCBhcHBseVRyZWF0bWVudHM7XG4iLCJpbXBvcnQge0xPR19BUElfVVJMfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQge2NyZWF0ZUhhc2hTdHJpbmcsIGlzU2VuZEJlYWNvblN1cHBvcnRlZH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcblxuZXhwb3J0IGNsYXNzIE1vbml0b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IE1vbml0b3JcIik7XG4gICAgdGhpcy5sb2dnZXIubG9nKFwiSW5pdGlhbGl6aW5nIG1vbml0b3JcIik7XG5cbiAgICB0aGlzLmFwcGxpZWRUcmVhdG1lbnRzSGFzaCA9IG51bGw7XG4gICAgdGhpcy5hcHBsaWVkVHJlYXRtZW50c0NoYW5nZXMgPSBmYWxzZTtcbiAgICB0aGlzLmVsaWdpYmxlTm90QXBwbGllZFRyZWF0bWVudHNIYXNoID0gbnVsbDtcbiAgICB0aGlzLmVsaWdpYmxlTm90QXBwbGllZFRyZWF0bWVudHNDaGFuZ2VzID0gZmFsc2U7XG4gICAgdGhpcy5oZWFkZXJzID0ge1xuICAgICAgdHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICB0aGlzLmlzTG9nZ2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLmluaXRpYWxpemVFeGl0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIGFzeW5jIHNlbmRMb2dzKG1lc3NhZ2UgPSBudWxsLCBpc0Vycm9yID0gZmFsc2UpIHtcbiAgICBjb25zdCB7bG9nZ2VyfSA9IHRoaXM7XG4gICAgbG9nZ2VyLmxvZyhcIlNlbmRpbmcgbG9nc1wiKTtcblxuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgIGxvZ2dlci5sb2coXCJEb2N1bWVudCByZWFkeSBzdGF0ZSBpcyBub3QgY29tcGxldGVcIik7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKCkgPT4ge1xuICAgICAgICBsb2dnZXIubG9nKFwiSW4gb25sb2FkIGV2ZW50XCIpO1xuICAgICAgICB0aGlzLmhhbmRsZVF1ZXVlTG9ncyh0aGlzLnBhY2thZ2VMb2dEYXRhKG1lc3NhZ2UpLCBpc0Vycm9yKTtcbiAgICAgIH0sIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhhbmRsZVF1ZXVlTG9ncyh0aGlzLnBhY2thZ2VMb2dEYXRhKG1lc3NhZ2UpLCBpc0Vycm9yKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBoYW5kbGVRdWV1ZUxvZ3MocmVxdWVzdEJsb2IsIGlzRXJyb3IgPSBmYWxzZSkge1xuICAgIGlmICghaXNFcnJvciAmJiB0aGlzLmlzTG9nZ2VkKSByZXR1cm47XG4gICAgY29uc3Qge2xvZ2dlcn0gPSB0aGlzO1xuXG4gICAgaWYgKCFyZXF1ZXN0QmxvYikge1xuICAgICAgbG9nZ2VyLmxvZyhcIkNvdWxkIG5vdCBjcmVhdGUgcmVxdWVzdCBibG9iXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsb2dnZXIubG9nKFwiUmVxdWVzdCBibG9iIHRvIHNlbmQ6IFwiLCByZXF1ZXN0QmxvYik7XG4gICAgdGhpcy5xdWV1ZUxvZ3MocmVxdWVzdEJsb2IpO1xuXG4gICAgdGhpcy5pc0xvZ2dlZCA9IHRydWU7XG4gICAgdGhpcy5hcHBsaWVkVHJlYXRtZW50c0hhc2ggPSBhd2FpdCBjcmVhdGVIYXNoU3RyaW5nKEpTT04uc3RyaW5naWZ5KHdpbmRvdy5iZWFnbGVJbmZvTGF5ZXIuYSkpO1xuICAgIHRoaXMuZWxpZ2libGVOb3RBcHBsaWVkVHJlYXRtZW50c0hhc2ggPSBhd2FpdCBjcmVhdGVIYXNoU3RyaW5nKFxuICAgICAgICBKU09OLnN0cmluZ2lmeSh3aW5kb3cuYmVhZ2xlSW5mb0xheWVyLmUpKTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUxhdGVzdENoYW5nZXMoKSB7XG4gICAgY29uc3Qge2xvZ2dlcn0gPSB0aGlzO1xuICAgIGxvZ2dlci5sb2coXCJDaGVja2luZyBpZiB0aGVyZSBhcmUgY2hhbmdlc1wiKTtcblxuICAgIGNvbnN0IGFwcGxpZWRUcmVhdG1lbnRzQ3VycmVudEhhc2ggPSBhd2FpdCBjcmVhdGVIYXNoU3RyaW5nKFxuICAgICAgICBKU09OLnN0cmluZ2lmeSh3aW5kb3cuYmVhZ2xlSW5mb0xheWVyLmEpKTtcbiAgICBjb25zdCBlbGlnaWJsZU5vdEFwcGxpZWRUcmVhdG1lbnRzQ3VycmVudEhhc2ggPSBhd2FpdCBjcmVhdGVIYXNoU3RyaW5nKFxuICAgICAgICBKU09OLnN0cmluZ2lmeSh3aW5kb3cuYmVhZ2xlSW5mb0xheWVyLmUpKTtcblxuICAgIGlmIChhcHBsaWVkVHJlYXRtZW50c0N1cnJlbnRIYXNoICE9PSB0aGlzLmFwcGxpZWRUcmVhdG1lbnRzSGFzaCkge1xuICAgICAgdGhpcy5hcHBsaWVkVHJlYXRtZW50c0NoYW5nZXMgPSB0cnVlO1xuICAgICAgdGhpcy5hcHBsaWVkVHJlYXRtZW50c0hhc2ggPSBhcHBsaWVkVHJlYXRtZW50c0N1cnJlbnRIYXNoO1xuICAgIH1cbiAgICBpZiAoZWxpZ2libGVOb3RBcHBsaWVkVHJlYXRtZW50c0N1cnJlbnRIYXNoICE9PSB0aGlzLmVsaWdpYmxlTm90QXBwbGllZFRyZWF0bWVudHNIYXNoKSB7XG4gICAgICB0aGlzLmVsaWdpYmxlTm90QXBwbGllZFRyZWF0bWVudHNDaGFuZ2VzID0gdHJ1ZTtcbiAgICAgIHRoaXMuZWxpZ2libGVOb3RBcHBsaWVkVHJlYXRtZW50c0hhc2ggPSBlbGlnaWJsZU5vdEFwcGxpZWRUcmVhdG1lbnRzQ3VycmVudEhhc2g7XG4gICAgfVxuICB9XG5cbiAgcGFja2FnZUxvZ0RhdGEobWVzc2FnZSA9IG51bGwpIHtcbiAgICBjb25zdCB7aGVhZGVyc30gPSB0aGlzO1xuICAgIGNvbnN0IGJvZHkgPSB7Li4ud2luZG93LmJlYWdsZUluZm9MYXllcn07XG4gICAgY29uc3QgbSA9IG1lc3NhZ2UgPyBtZXNzYWdlIDogT2JqZWN0LmtleXMoYm9keS5hIHx8IHt9KS5sZW5ndGggPyBcIlRyZWF0bWVudHMgYXBwbGllZFwiIDogXCJObyB0cmVhdG1lbnRzIGFwcGxpZWRcIjtcbiAgICBib2R5LnQgPSBEYXRlLm5vdygpO1xuICAgIGJvZHkubSA9IG07XG5cbiAgICByZXR1cm4gbmV3IEJsb2IoW0pTT04uc3RyaW5naWZ5KGJvZHkpXSwgaGVhZGVycyk7XG4gIH1cblxuICBwYWNrYWdlVXBkYXRlTG9nRGF0YSgpIHtcbiAgICBjb25zdCB7aGVhZGVycywgYXBwbGllZFRyZWF0bWVudHNDaGFuZ2VzLCBlbGlnaWJsZU5vdEFwcGxpZWRUcmVhdG1lbnRzQ2hhbmdlc30gPSB0aGlzO1xuICAgIGlmICghYXBwbGllZFRyZWF0bWVudHNDaGFuZ2VzICYmICFlbGlnaWJsZU5vdEFwcGxpZWRUcmVhdG1lbnRzQ2hhbmdlcykgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICB0OiBEYXRlLm5vdygpLFxuICAgICAgYTogYXBwbGllZFRyZWF0bWVudHNDaGFuZ2VzID8gd2luZG93LmJlYWdsZUluZm9MYXllci5hIDoge30sXG4gICAgICBlOiBlbGlnaWJsZU5vdEFwcGxpZWRUcmVhdG1lbnRzQ2hhbmdlcyA/IHdpbmRvdy5iZWFnbGVJbmZvTGF5ZXIuZSA6IHt9LFxuICAgICAgdklkOiB3aW5kb3cuYmVhZ2xlSW5mb0xheWVyLnZJZCxcbiAgICB9O1xuICAgIHJldHVybiBuZXcgQmxvYihbSlNPTi5zdHJpbmdpZnkoYm9keSldLCBoZWFkZXJzKTtcbiAgfVxuXG4gIGluaXRpYWxpemVFeGl0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgY29uc3Qge2xvZ2dlcn0gPSB0aGlzO1xuICAgIGxldCBpc0V4aXRFdmVudENhcHR1cmVkID0gZmFsc2U7XG4gICAgbG9nZ2VyLmxvZyhcIkluaXRpYWxpemluZyBleGl0IGV2ZW50IGxpc3RlbmVyXCIpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICBcImJlZm9yZXVubG9hZFwiLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgaWYgKCF0aGlzLmlzTG9nZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVF1ZXVlTG9ncyh0aGlzLnBhY2thZ2VMb2dEYXRhKCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNFeGl0RXZlbnRDYXB0dXJlZCkgcmV0dXJuO1xuICAgICAgICAgIGlzRXhpdEV2ZW50Q2FwdHVyZWQgPSB0cnVlO1xuICAgICAgICAgIGxvZ2dlci5sb2coXCJJbiBiZWZvcmV1bmxvYWQgZXZlbnRcIik7XG4gICAgICAgICAgY29uc3QgbG9nRGF0YSA9IHRoaXMucGFja2FnZVVwZGF0ZUxvZ0RhdGEoKTtcbiAgICAgICAgICBpZiAoIWxvZ0RhdGEpIHtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coXCJObyBjaGFuZ2VzIHRvIGxvZ1wiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5xdWV1ZUxvZ3MobG9nRGF0YSk7XG4gICAgICAgIH0sXG4gICAgICAgIHtjYXB0dXJlOiB0cnVlfSxcbiAgICApO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICBcInBhZ2VoaWRlXCIsXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICBpZiAoIXRoaXMuaXNMb2dnZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlUXVldWVMb2dzKHRoaXMucGFja2FnZUxvZ0RhdGEoKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc0V4aXRFdmVudENhcHR1cmVkKSByZXR1cm47XG4gICAgICAgICAgaXNFeGl0RXZlbnRDYXB0dXJlZCA9IHRydWU7XG4gICAgICAgICAgbG9nZ2VyLmxvZyhcIkluIHBhZ2VoaWRlIGV2ZW50XCIpO1xuICAgICAgICAgIGNvbnN0IGxvZ0RhdGEgPSB0aGlzLnBhY2thZ2VVcGRhdGVMb2dEYXRhKCk7XG4gICAgICAgICAgaWYgKCFsb2dEYXRhKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKFwiTm8gY2hhbmdlcyB0byBsb2dcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucXVldWVMb2dzKGxvZ0RhdGEpO1xuICAgICAgICB9LFxuICAgICAgICB7Y2FwdHVyZTogdHJ1ZX0sXG4gICAgKTtcbiAgfVxuXG4gIHF1ZXVlTG9ncyhsb2dEYXRhKSB7XG4gICAgY29uc3Qge2xvZ2dlcn0gPSB0aGlzO1xuXG4gICAgaWYgKCFpc1NlbmRCZWFjb25TdXBwb3J0ZWQoKSkge1xuICAgICAgZmV0Y2goTE9HX0FQSV9VUkwsIGxvZ0RhdGEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBxdWV1ZWQgPSBuYXZpZ2F0b3Iuc2VuZEJlYWNvbihMT0dfQVBJX1VSTCwgbG9nRGF0YSk7XG4gICAgY29uc3QgcXVldWVJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGlmICghcXVldWVkKSBxdWV1ZWQgPSBuYXZpZ2F0b3Iuc2VuZEJlYWNvbihMT0dfQVBJX1VSTCwgbG9nRGF0YSk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChxdWV1ZUludGVydmFsKTtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIkxvZ3MgcXVldWVkIHN1Y2Nlc3NmdWxseVwiKTtcbiAgICAgIH1cbiAgICB9LCAxMCk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjbGVhckludGVydmFsKHF1ZXVlSW50ZXJ2YWwpO1xuICAgICAgaWYgKCFxdWV1ZWQpIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIkxvZ3Mgbm90IHF1ZXVlZFwiKTtcbiAgICAgIH1cbiAgICB9LCAxMDAwKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNb25pdG9yO1xuIiwiaW1wb3J0IHtTRVNTSU9OX1NUT1JBR0VfS0VZUywgVFJFQVRNRU5UU19EVVJBVElPTn0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHtmZXRjaFRyZWF0bWVudHN9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFwiTmV4dGRheSBUcmVhdG1lbnQgUmVwb3NpdG9yeVwiKTtcblxuY2xhc3MgVHJlYXRtZW50UmVwb3NpdG9yeSB7XG4gIGNvbnN0cnVjdG9yKGJvZHkpIHtcbiAgICBjb25zdCB7Y29va2llUGN0LCB0cmVhdG1lbnRzfSA9IGJvZHk7XG4gICAgdGhpcy50cmVhdG1lbnRzID0gdHJlYXRtZW50cztcbiAgICB0aGlzLmNvb2tpZVBjdCA9IGNvb2tpZVBjdDtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBnZXRUcmVhdG1lbnRzKCkge1xuICAgIGxvZ2dlci5sb2coXCJMb2FkaW5nIHRyZWF0bWVudHNcIik7XG4gICAgY29uc3Qge1RSRUFUTUVOVFN9ID0gU0VTU0lPTl9TVE9SQUdFX0tFWVM7XG4gICAgY29uc3QgdHJlYXRtZW50c09iaiA9IEpTT04ucGFyc2Uod2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oVFJFQVRNRU5UUykpO1xuICAgIGxldCB0cmVhdG1lbnRzID0gdHJlYXRtZW50c09iaj8udHJlYXRtZW50cztcbiAgICBjb25zdCB0aW1lc3RhbXAgPSB0cmVhdG1lbnRzT2JqPy50aW1lc3RhbXA7XG4gICAgaWYgKCF0cmVhdG1lbnRzIHx8ICF0aW1lc3RhbXApIHtcbiAgICAgIGxvZ2dlci5sb2coXCJUcmVhdG1lbnRzIG5vdCBmb3VuZCBpbiBsb2NhbCBzdG9yYWdlXCIpO1xuICAgICAgdHJlYXRtZW50cyA9IGF3YWl0IGZldGNoVHJlYXRtZW50cygpO1xuICAgICAgY29uc3QgdHJlYXRtZW50V2l0aFRpbWVzdGFtcCA9IHtcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICB0cmVhdG1lbnRzLFxuICAgICAgfTtcbiAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFRSRUFUTUVOVFMsIEpTT04uc3RyaW5naWZ5KHRyZWF0bWVudFdpdGhUaW1lc3RhbXApKTtcbiAgICAgIHJldHVybiB0cmVhdG1lbnRzO1xuICAgIH1cbiAgICBpZiAodGltZXN0YW1wKSB7XG4gICAgICBjb25zdCBlbGFwc2VkRGF5cyA9IChEYXRlLm5vdygpIC0gdGltZXN0YW1wKSAvICgxMDAwICogMzYwMCAqIDI0KTtcbiAgICAgIGlmIChlbGFwc2VkRGF5cyA+IFRSRUFUTUVOVFNfRFVSQVRJT04pIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIlRyZWF0bWVudHMgYXJlIGV4cGlyZWRcIik7XG4gICAgICAgIHRyZWF0bWVudHMgPSBhd2FpdCBmZXRjaFRyZWF0bWVudHMoKTtcbiAgICAgICAgY29uc3QgdHJlYXRtZW50V2l0aFRpbWVzdGFtcCA9IHtcbiAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgdHJlYXRtZW50cyxcbiAgICAgICAgfTtcbiAgICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oVFJFQVRNRU5UUywgSlNPTi5zdHJpbmdpZnkodHJlYXRtZW50V2l0aFRpbWVzdGFtcCkpO1xuICAgICAgICByZXR1cm4gdHJlYXRtZW50cztcbiAgICAgIH1cbiAgICB9XG4gICAgbG9nZ2VyLmxvZyhcIlRyZWF0bWVudHMgYXJlIGxvYWRlZCBmcm9tIGxvY2FsIHN0b3JhZ2VcIik7XG4gICAgcmV0dXJuIHRyZWF0bWVudHM7XG4gIH1cblxuICBnZXRNYXRjaGVkVHJlYXRtZW50cygpIHtcbiAgICBjb25zdCB1c2VyU2VnbWVudCA9IHRoaXMuZ2V0VXNlclNlZ21lbnQoKTtcblxuICAgIGNvbnN0IHNlZ21lbnRNYXRjaGVkVHJlYXRtZW50cyA9IHRoaXMudHJlYXRtZW50cy5maWx0ZXIoXG4gICAgICAgICh0KSA9PlxuICAgICAgICAgIHQuYXBwbHlfb25fdXNlcl9zZWdtZW50ID09IHVzZXJTZWdtZW50IHx8XG4gICAgICAgIHQuYXBwbHlfb25fdXNlcl9zZWdtZW50ID09PSBcIipcIixcbiAgICApO1xuICAgIGxvZ2dlci5sb2coYCR7c2VnbWVudE1hdGNoZWRUcmVhdG1lbnRzLmxlbmd0aH0gdHJlYXRtZW50cyBzZWdtZW50IG1hdGNoZWRgKTtcbiAgICBpZiAoIXNlZ21lbnRNYXRjaGVkVHJlYXRtZW50cy5sZW5ndGgpIHJldHVybiBbXTtcbiAgICByZXR1cm4gc2VnbWVudE1hdGNoZWRUcmVhdG1lbnRzO1xuICB9XG5cbiAgZ2V0VXNlclNlZ21lbnQoKSB7XG4gICAgaWYgKHRoaXMuY29va2llUGN0ID09PSAtMSkge1xuICAgICAgbG9nZ2VyLmxvZyhcIk5ldyB1c2VyIGhhcyBubyBzZWdtZW50XCIpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTmV3IFVzZXJcIik7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvb2tpZVBjdCA8IDUwKSByZXR1cm4gXCJBXCI7XG4gICAgcmV0dXJuIFwiQlwiO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRyZWF0bWVudFJlcG9zaXRvcnk7XG4iLCJpbXBvcnQge1NFU1NJT05fU1RPUkFHRV9LRVlTLCBMT0NBTF9TVE9SQUdFX0tFWVN9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7Y29uZGl0aW9uQ2hlY2tlcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IENvdW50ZXIgQ2hlY2tlclwiKTtcblxuZXhwb3J0IGNvbnN0IGNoZWNrQ291bnRlclJ1bGUgPSAocnVsZSkgPT57XG4gIGxvZ2dlci5sb2coXCJDaGVja2luZyBydWxlXCIsIEpTT04uc3RyaW5naWZ5KHJ1bGUpKTtcbiAgY29uc3Qge29wZXJhdG9yLCBjb25kaXRpb24sIHZhbHVlfSA9IHJ1bGU7XG4gIHN3aXRjaCAob3BlcmF0b3IpIHtcbiAgICBjYXNlIFwicGFnZVZpZXdcIjpcbiAgICAgIHJldHVybiBwYWdlVmlld0hhbmRsZXIoY29uZGl0aW9uLCB2YWx1ZSk7XG4gICAgY2FzZSBcIkNBQmFza2V0UHJpY2VcIjpcbiAgICAgIHJldHVybiBjYUJhc2tldFByaWNlSGFuZGxlcihjb25kaXRpb24sIHZhbHVlKTtcbiAgICBkZWZhdWx0OlxuICAgICAgbG9nZ2VyLmxvZyhcIk5vIHN1Y2ggb3BlcmF0b3JcIiwgb3BlcmF0b3IpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5jb25zdCBnZXRDb3VudGVyID0gKGNvdW50ZXIsIHR5cGUpID0+IHtcbiAgdHJ5IHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJzZXNzaW9uXCI6XG4gICAgICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGNvdW50ZXIpO1xuICAgICAgY2FzZSBcImxvY2FsXCI6XG4gICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShjb3VudGVyKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxvZ2dlci5sb2coXCJObyBzdWNoIHR5cGVcIiwgdHlwZSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nZ2VyLmxvZyhgQ291bGQgbm90IGdldCBjb3VudGVyICR7Y291bnRlcn1gLCBlcnIpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG5jb25zdCBwYWdlVmlld0hhbmRsZXIgPSAoY29uZGl0aW9uLCB2YWx1ZSkgPT4ge1xuICBjb25zdCBwYWdlVmlld3MgPSBwYXJzZUludChnZXRDb3VudGVyKFNFU1NJT05fU1RPUkFHRV9LRVlTLlBBR0VfVklFV1MsIFwic2Vzc2lvblwiKSk7XG4gIGxvZ2dlci5sb2coXCJQYWdlIHZpZXdzIGNvdW50ZXIgdmFsdWU6IFwiLCBwYWdlVmlld3MpO1xuICBpZiAocGFnZVZpZXdzID09PSBudWxsKSB7XG4gICAgbG9nZ2VyLmxvZyhcIlBhZ2V2aWV3cyBjb3VudGVyIG5vdCBmb3VuZCBpbiBzZXNzaW9uIHN0b3JhZ2VcIik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBjb25kaXRpb25DaGVja2VyKHBhZ2VWaWV3cywgY29uZGl0aW9uLCBwYXJzZUludCh2YWx1ZSkpO1xufTtcblxuY29uc3QgY2FCYXNrZXRQcmljZUhhbmRsZXIgPSAoY29uZGl0aW9uLCB2YWx1ZSkgPT4ge1xuICBjb25zdCBjYUJhc2tldFByaWNlID0gcGFyc2VJbnQoXG4gICAgICBnZXRDb3VudGVyKExPQ0FMX1NUT1JBR0VfS0VZUy5DT1VQT05fQVBQTElDQUJMRV9CQVNLRVRfUFJJQ0UsIFwibG9jYWxcIikpO1xuICBsb2dnZXIubG9nKFwiQ291cG9uIGFwcGxpY2FibGUgYmFza2V0IHByaWNlIGNvdW50ZXIgdmFsdWU6IFwiLCBjYUJhc2tldFByaWNlKTtcbiAgaWYgKGNhQmFza2V0UHJpY2UgPT09IG51bGwpIHtcbiAgICBsb2dnZXIubG9nKFwiQ291cG9uIGFwcGxpY2FibGUgYmFza2V0IHByaWNlIGNvdW50ZXIgbm90IGZvdW5kIGluIGxvY2FsIHN0b3JhZ2VcIik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBjb25kaXRpb25DaGVja2VyKGNhQmFza2V0UHJpY2UsIGNvbmRpdGlvbiwgcGFyc2VJbnQodmFsdWUpKTtcbn07XG5cbiIsImltcG9ydCB7Y29uZGl0aW9uQ2hlY2tlcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IEVsZW1lbnQgQ2hlY2tlclwiKTtcblxuZXhwb3J0IGNvbnN0IGNoZWNrRWxlbWVudFJ1bGUgPSAocnVsZSkgPT57XG4gIGxvZ2dlci5sb2coXCJDaGVja2luZyBydWxlXCIsIEpTT04uc3RyaW5naWZ5KHJ1bGUpKTtcbiAgY29uc3Qge29wZXJhdG9yLCBjb25kaXRpb24sIHZhbHVlLCBzZWxlY3Rvciwgc2VsZWN0b3JBbGwsIHNlbGVjdG9yRmFsbGJhY2sgPSBudWxsfSA9IHJ1bGU7XG4gIGxldCBtYWluU2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgaWYgKG1haW5TZWxlY3RvciAmJiAhZG9jdW1lbnQucXVlcnlTZWxlY3RvcihtYWluU2VsZWN0b3IpKSB7XG4gICAgbWFpblNlbGVjdG9yID0gc2VsZWN0b3JGYWxsYmFjayA/IHNlbGVjdG9yRmFsbGJhY2sgOiBtYWluU2VsZWN0b3I7XG4gIH1cblxuICBpZiAob3BlcmF0b3IgPT09IG51bGwpIHtcbiAgICByZXR1cm4gY29uZGl0aW9uQ2hlY2tlcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG1haW5TZWxlY3RvciksIGNvbmRpdGlvbiwgdmFsdWUpO1xuICB9XG4gIGlmIChtYWluU2VsZWN0b3IgJiYgIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobWFpblNlbGVjdG9yKSkge1xuICAgIGxvZ2dlci5sb2coXCJTZWxlY3RvciBub3QgZm91bmQgb24gcGFnZVwiKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHNlbGVjdG9yQWxsICYmICFkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yQWxsKSkge1xuICAgIGxvZ2dlci5sb2coXCJTZWxlY3RvciBub3QgZm91bmQgb24gcGFnZVwiKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBsZXQgZWxlbWVudDtcbiAgaWYgKG1haW5TZWxlY3RvcikgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobWFpblNlbGVjdG9yKTtcbiAgZWxzZSBpZiAoc2VsZWN0b3JBbGwpIGVsZW1lbnQgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3JBbGwpKTtcblxuICBzd2l0Y2ggKG9wZXJhdG9yKSB7XG4gICAgY2FzZSBcInRleHQtbnVtYmVyXCI6IHtcbiAgICAgIGxldCB0ZW1wVmFsO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZWxlbWVudCkpIHtcbiAgICAgICAgdGVtcFZhbCA9IGVsZW1lbnQucmVkdWNlKChyZXR1cm5WYWwsIGVsZW0pID0+IHtcbiAgICAgICAgICByZXR1cm5WYWwgKz0gcGFyc2VJbnQoZWxlbS50ZXh0Q29udGVudC5yZXBsYWNlKFwiVExcIiwgXCJcIikucmVwbGFjZShcIi5cIiwgXCJcIikpO1xuICAgICAgICAgIHJldHVybiByZXR1cm5WYWw7XG4gICAgICAgIH0sIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGVtcFZhbCA9IHBhcnNlSW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobWFpblNlbGVjdG9yKS50ZXh0Q29udGVudFxuICAgICAgICAgICAgLnJlcGxhY2UoXCJUTFwiLCBcIlwiKS5yZXBsYWNlKFwiLlwiLCBcIlwiKSk7XG4gICAgICB9XG4gICAgICBjb25zdCBydW5UaW1lVmFsdWUgPSBwYXJzZUludCh0ZW1wVmFsKTtcbiAgICAgIHJldHVybiBjb25kaXRpb25DaGVja2VyKHJ1blRpbWVWYWx1ZSwgY29uZGl0aW9uLCB2YWx1ZSk7XG4gICAgfVxuICAgIGNhc2UgXCJjbGFzc0xpc3RcIjpcbiAgICAgIHJldHVybiBjb25kaXRpb25DaGVja2VyKEFycmF5LmZyb20oZWxlbWVudC5jbGFzc0xpc3QpLCBjb25kaXRpb24sIHZhbHVlKTtcbiAgICBjYXNlIFwiY291bnRcIjoge1xuICAgICAgY29uc3QgcnVuVGltZVZhbHVlID0gQXJyYXkuaXNBcnJheShlbGVtZW50KSA/IGVsZW1lbnQubGVuZ3RoIDogZWxlbWVudCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIocnVuVGltZVZhbHVlLCBjb25kaXRpb24sIHZhbHVlKTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIGxvZ2dlci5sb2coXCJPcGVyYXRvciBub3QgZGVmaW5lZFwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcbiIsImltcG9ydCB7Y29uZGl0aW9uQ2hlY2tlcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IEZ1bmN0aW9uIENoZWNrZXJcIik7XG5cbmV4cG9ydCBjb25zdCBjaGVja0Z1bmN0aW9uUnVsZSA9IChydWxlLCBvcHRzKSA9PntcbiAgbG9nZ2VyLmxvZyhcIkNoZWNraW5nIHJ1bGVcIiwgSlNPTi5zdHJpbmdpZnkocnVsZSkpO1xuICBjb25zdCB7cHJvZHVjdEluZm99ID0gb3B0cztcbiAgY29uc3Qge29wZXJhdG9yLCBjb25kaXRpb24sIHZhbHVlLCBiaW5kaW5nc30gPSBydWxlO1xuICBpZiAoIW9wZXJhdG9yKSB7XG4gICAgbG9nZ2VyLmxvZyhcIlJ1bGUgZnVuY3Rpb24gbm90IGRlZmluZWRcIik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGxldCBjb250ZXh0ID0ge307XG4gIGlmIChiaW5kaW5ncyA9PSBcInByb2R1Y3RJbmZvXCIpIHtcbiAgICBjb250ZXh0ID0ge1xuICAgICAgcHJvZHVjdEluZm8sXG4gICAgfTtcbiAgfVxuICBjb25zdCBydWxlRnVuY3Rpb24gPSBGdW5jdGlvbihvcGVyYXRvcikuYmluZChjb250ZXh0KTtcbiAgY29uc3QgcnVudGltZVZhbHVlID0gcnVsZUZ1bmN0aW9uKCk7XG4gIHJldHVybiBjb25kaXRpb25DaGVja2VyKHJ1bnRpbWVWYWx1ZSwgY29uZGl0aW9uLCB2YWx1ZSk7XG59O1xuIiwiaW1wb3J0IHtTRVNTSU9OX1NUT1JBR0VfS0VZU30gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHtjb25kaXRpb25DaGVja2VyfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlclwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIk5leHRkYXkgU2Vzc2lvbiBDaGVja2VyXCIpO1xuXG5leHBvcnQgY29uc3QgY2hlY2tTZXNzaW9uUnVsZSA9IChydWxlKSA9PntcbiAgbG9nZ2VyLmxvZyhcIkNoZWNraW5nIHJ1bGVcIiwgSlNPTi5zdHJpbmdpZnkocnVsZSkpO1xuICBjb25zdCB7b3BlcmF0b3IsIGNvbmRpdGlvbiwgdmFsdWV9ID0gcnVsZTtcbiAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgIGNhc2UgXCJkdXJhdGlvblwiOlxuICAgICAgcmV0dXJuIGR1cmF0aW9uSGFuZGxlcihjb25kaXRpb24sIHZhbHVlKTtcbiAgICBjYXNlIFwiaGlzdG9yeVwiOlxuICAgICAgcmV0dXJuIGhpc3RvcnlIYW5kbGVyKGNvbmRpdGlvbiwgdmFsdWUpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuY29uc3QgZ2V0U2Vzc2lvblRpbWVzdGFtcCA9ICgpID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IERhdGUocGFyc2VJbnQod2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oU0VTU0lPTl9TVE9SQUdFX0tFWVMuU0VTU0lPTl9USU1FU1RBTVApKSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZ2dlci5sb2coXCJDb3VsZCBub3QgZ2V0IHNlc3Npb24gdGltZXN0YW1wXCIsIGVycik7XG4gICAgcmV0dXJuIERhdGUubm93KCk7XG4gIH1cbn07XG5cbmNvbnN0IGR1cmF0aW9uSGFuZGxlciA9IChjb25kaXRpb24sIHZhbHVlKSA9PiB7XG4gIGNvbnN0IGR1cmF0aW9uID0gKERhdGUubm93KCkgLSBnZXRTZXNzaW9uVGltZXN0YW1wKCkpIC8gMTAwMDtcbiAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIoZHVyYXRpb24sIGNvbmRpdGlvbiwgcGFyc2VJbnQodmFsdWUpKTtcbn07XG5cbmNvbnN0IGhpc3RvcnlIYW5kbGVyID0gKGNvbmRpdGlvbiwgdmFsdWUpID0+IHtcbiAgY29uc3QgY3VycmVudEhpc3RvcnkgPSB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShTRVNTSU9OX1NUT1JBR0VfS0VZUy5TRVNTSU9OX0hJU1RPUlkpPy5zcGxpdChcIixcIik7XG4gIHJldHVybiBjb25kaXRpb25DaGVja2VyKGN1cnJlbnRIaXN0b3J5LCBjb25kaXRpb24sIHZhbHVlKTtcbn07XG4iLCJpbXBvcnQge2NvbmRpdGlvbkNoZWNrZXJ9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHtNT0JJTEVfTUVESUFfUVVFUll9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlclwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIk5leHRkYXkgRW52IENoZWNrZXJcIik7XG5cbmV4cG9ydCBjb25zdCBjaGVja0VudlJ1bGUgPSAocnVsZSkgPT57XG4gIGxvZ2dlci5sb2coXCJDaGVja2luZyBydWxlXCIsIEpTT04uc3RyaW5naWZ5KHJ1bGUpKTtcbiAgY29uc3Qge29wZXJhdG9yLCBjb25kaXRpb24sIHZhbHVlfSA9IHJ1bGU7XG5cbiAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgIGNhc2UgXCJkZXZpY2VfdHlwZVwiOiB7XG4gICAgICBjb25zdCBpc01vYmlsZSA9IHdpbmRvdy5tYXRjaE1lZGlhKE1PQklMRV9NRURJQV9RVUVSWSkubWF0Y2hlcyA/IFwibW9iaWxlXCIgOiBcImRlc2t0b3BcIjtcbiAgICAgIHJldHVybiBjb25kaXRpb25DaGVja2VyKGlzTW9iaWxlLCBjb25kaXRpb24sIHZhbHVlKTtcbiAgICB9XG4gIH1cbn07XG4iLCJpbXBvcnQge2NvbmRpdGlvbkNoZWNrZXIsIGRldGVybWluZVBjdCwgZ2V0SWRlbnRpZmllcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IFJhbmRvbVBjdCBDaGVja2VyXCIpO1xuXG5leHBvcnQgY29uc3QgY2hlY2tSYW5kb21OdW1iZXJSdWxlID0gYXN5bmMgKHJ1bGUpID0+e1xuICBsb2dnZXIubG9nKFwiQ2hlY2tpbmcgcnVsZVwiLCBKU09OLnN0cmluZ2lmeShydWxlKSk7XG4gIGNvbnN0IHtjb25kaXRpb24sIHZhbHVlLCBzYWx0fSA9IHJ1bGU7XG4gIGlmICghc2FsdCkge1xuICAgIGxvZ2dlci5sb2coXCJTYWx0IGlzIG5vdCBkZWZpbmVkXCIpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBpZGVudGlmaWVyID0gYXdhaXQgZ2V0SWRlbnRpZmllcigpO1xuICBjb25zdCByYW5kb21QY3QgPSBhd2FpdCBkZXRlcm1pbmVQY3QoaWRlbnRpZmllciArIHNhbHQpO1xuICBjb25zdCBydW50aW1lVmFsdWUgPSByYW5kb21QY3Q7XG4gIHJldHVybiBjb25kaXRpb25DaGVja2VyKHJ1bnRpbWVWYWx1ZSwgY29uZGl0aW9uLCB2YWx1ZSk7XG59O1xuIiwiaW1wb3J0IHtjaGVja0NvdW50ZXJSdWxlfSBmcm9tIFwiLi9jb3VudGVyQ2hlY2tlclwiO1xuaW1wb3J0IHtjaGVja0RhdGFMYXllclJ1bGV9IGZyb20gXCIuL2RhdGFMYXllckNoZWNrZXJcIjtcbmltcG9ydCB7Y2hlY2tFbGVtZW50UnVsZX0gZnJvbSBcIi4vZWxlbWVudENoZWNrZXJcIjtcbmltcG9ydCB7Y2hlY2tGdW5jdGlvblJ1bGV9IGZyb20gXCIuL2Z1bmN0aW9uQ2hlY2tlclwiO1xuaW1wb3J0IHtjaGVja1Nlc3Npb25SdWxlfSBmcm9tIFwiLi9zZXNzaW9uQ2hlY2tlclwiO1xuaW1wb3J0IHtjaGVja1VybFJ1bGV9IGZyb20gXCIuL3VybENoZWNrZXJcIjtcbmltcG9ydCB7Y2hlY2tFbnZSdWxlfSBmcm9tIFwiLi9lbnZDaGVja2VyXCI7XG5pbXBvcnQge2NoZWNrUmFuZG9tTnVtYmVyUnVsZX0gZnJvbSBcIi4vcmFuZG9tTnVtYmVyQ2hlY2tlclwiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFwiTmV4dGRheSBSdWxlIEVuZ2luZVwiKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUnVsZUVuZ2luZSB7XG4gIGNvbnN0cnVjdG9yKGJvZHkpIHtcbiAgICBjb25zdCB7YmFzZVJ1bGVTZXQsIHN1YlZhcmlhbnRSdWxlU2V0LCBiaW5kaW5ncywgY2FsbGJhY2sgPSBudWxsfSA9IGJvZHk7XG4gICAgdGhpcy5iYXNlUnVsZVNldCA9IGJhc2VSdWxlU2V0O1xuICAgIHRoaXMuc3ViVmFyaWFudFJ1bGVTZXQgPSBzdWJWYXJpYW50UnVsZVNldDtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5iaW5kaW5ncyA9IGJpbmRpbmdzO1xuICB9XG5cbiAgYXN5bmMgY2hlY2tSdWxlcygpIHtcbiAgICBmb3IgKGNvbnN0IHJ1bGUgb2YgdGhpcy5iYXNlUnVsZVNldCkge1xuICAgICAgY29uc3QgcnVsZVNhdGlzZmllZCA9IGF3YWl0IHRoaXMuY2hlY2tSdWxlKHJ1bGUpO1xuICAgICAgaWYgKCFydWxlU2F0aXNmaWVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBhc3luYyBjaGVja1N1YlZhcmlhbnRSdWxlcygpIHtcbiAgICBmb3IgKGNvbnN0IHJ1bGUgb2YgdGhpcy5zdWJWYXJpYW50UnVsZVNldCkge1xuICAgICAgY29uc3QgcnVsZVNhdGlzZmllZCA9IGF3YWl0IHRoaXMuY2hlY2tSdWxlKHJ1bGUpO1xuICAgICAgaWYgKHJ1bGVTYXRpc2ZpZWQpIHtcbiAgICAgICAgcmV0dXJuIHJ1bGUuc3ViVmFyaWFudElkO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGFzeW5jIGNoZWNrUnVsZShydWxlKSB7XG4gICAgY29uc3Qge2NoYWluLCBjaGFpbl9jb25kaXRpb24sIHR5cGV9ID0gcnVsZTtcbiAgICBsZXQgcnVsZVNhdGlzZmllZCA9IG51bGw7XG4gICAgLy8gY2hlY2sgcnVsZVxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcInNlc3Npb25cIjpcbiAgICAgICAgcnVsZVNhdGlzZmllZCA9IGNoZWNrU2Vzc2lvblJ1bGUocnVsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImNvdW50ZXJcIjpcbiAgICAgICAgcnVsZVNhdGlzZmllZCA9IGNoZWNrQ291bnRlclJ1bGUocnVsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImVsZW1lbnRcIjpcbiAgICAgICAgcnVsZVNhdGlzZmllZCA9IGNoZWNrRWxlbWVudFJ1bGUocnVsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImRhdGFMYXllclwiOlxuICAgICAgICBydWxlU2F0aXNmaWVkID0gY2hlY2tEYXRhTGF5ZXJSdWxlKHJ1bGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJ1cmxcIjpcbiAgICAgICAgcnVsZVNhdGlzZmllZCA9IGNoZWNrVXJsUnVsZShydWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgcnVsZVNhdGlzZmllZCA9IGNoZWNrRnVuY3Rpb25SdWxlKHJ1bGUsIHRoaXMuYmluZGluZ3MpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJlbnZpcm9ubWVudFwiOlxuICAgICAgICBydWxlU2F0aXNmaWVkID0gY2hlY2tFbnZSdWxlKHJ1bGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJyYW5kb21cIjpcbiAgICAgICAgcnVsZVNhdGlzZmllZCA9IGF3YWl0IGNoZWNrUmFuZG9tTnVtYmVyUnVsZShydWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsb2dnZXIubG9nKGBObyBzdWNoIHJ1bGUgdHlwZTogJHt0eXBlfWApO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoY2hhaW4pIHtcbiAgICAgIHN3aXRjaCAoY2hhaW5fY29uZGl0aW9uKSB7XG4gICAgICAgIGNhc2UgXCJhbmRcIjpcbiAgICAgICAgICBydWxlU2F0aXNmaWVkID0gcnVsZVNhdGlzZmllZCAmJiBhd2FpdCB0aGlzLmNoZWNrUnVsZShjaGFpbik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJvclwiOlxuICAgICAgICAgIHJ1bGVTYXRpc2ZpZWQgPSBydWxlU2F0aXNmaWVkIHx8IGF3YWl0IHRoaXMuY2hlY2tSdWxlKGNoYWluKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInhvclwiOlxuICAgICAgICAgIHJ1bGVTYXRpc2ZpZWQgPSBydWxlU2F0aXNmaWVkICE9IGF3YWl0IHRoaXMuY2hlY2tSdWxlKGNoYWluKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBsb2dnZXIubG9nKFwiTm8gc3VjaCBjaGFpbiBjb25kaXRpb25cIik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBydWxlU2F0aXNmaWVkO1xuICB9XG59XG4iLCJpbXBvcnQge3NrdUNvbGxlY3Rvcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQge0xPT0tVUF9BUElfVVJMfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IEFwaVwiKTtcblxuZXhwb3J0IGNvbnN0IHByb2R1Y3RJbmZvTG9va3VwID0gYXN5bmMgKCkgPT4ge1xuICBsb2dnZXIubG9nKFwiU3RhcnRpbmcgcHJvZHVjdCBpbmZvIGxvb2t1cFwiKTtcbiAgY29uc3Qgc2t1TGlzdCA9IHNrdUNvbGxlY3RvcigpO1xuICBpZiAoIXNrdUxpc3QpIHtcbiAgICBsb2dnZXIubG9nKFwiTm8gc2t1IGZvdW5kXCIpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycygpO1xuICBoZWFkZXJzLmFwcGVuZChcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gIGxldCBwcm9kdWN0SW5mbztcbiAgdHJ5IHtcbiAgICBwcm9kdWN0SW5mbyA9IGF3YWl0IGZldGNoKExPT0tVUF9BUElfVVJMLCB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoc2t1TGlzdCksXG4gICAgICBoZWFkZXJzLFxuICAgICAgbW9kZTogXCJjb3JzXCIsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2dnZXIud2FybihcIkZldGNoIHRvIGNhdGFsb2cgYXBpIGZhaWxlZFwiKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoIXByb2R1Y3RJbmZvLm9rKSB7XG4gICAgbG9nZ2VyLmxvZyhcIlByb2R1Y3QgaW5mbyBsb29rdXAgZmFpbGVkXCIpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHByb2R1Y3RJbmZvID0gYXdhaXQgcHJvZHVjdEluZm8uanNvbigpO1xuICBpZiAoIXByb2R1Y3RJbmZvKSB7XG4gICAgbG9nZ2VyLmxvZyhcIlByb2R1Y3QgaW5mbyBleHRyYWN0aW9uIGZyb20gcmVzcG9uc2UgZmFpbGVkXCIpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGxvZ2dlci5sb2coXCJQcm9kdWN0IGluZm8gbG9va3VwIHN1Y2Nlc3NmdWxcIik7XG4gIHJldHVybiBwcm9kdWN0SW5mbztcbn07XG4iLCJpbXBvcnQgYXBwbHlUcmVhdG1lbnRzIGZyb20gXCIuLi9OZXh0ZGF5QXBwbHlUcmVhdG1lbnRzL2luZGV4XCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmltcG9ydCBNb25pdG9yIGZyb20gXCIuLi9OZXh0ZGF5TW9uaXRvci9pbmRleFwiO1xuaW1wb3J0IFRyZWF0bWVudFJlcG9zaXRvcnkgZnJvbSBcIi4uL05leHRkYXlUcmVhdG1lbnRSZXBvc2l0b3J5L2luZGV4XCI7XG5pbXBvcnQgUnVsZUVuZ2luZSBmcm9tIFwiLi4vTmV4dGRheVJ1bGVFbmdpbmVcIjtcbmltcG9ydCB7cHJvZHVjdEluZm9Mb29rdXB9IGZyb20gXCIuLi9OZXh0ZGF5QXBpXCI7XG5pbXBvcnQge1xuICBjaGVja3BvaW50LFxuICBjaGVja3BvaW50cyxcbiAgYWRkQXBwbGllZFRyZWF0bWVudCxcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIsXG4gIGFkZEVsaWdpYmxlTm90QXBwbGllZFRyZWF0bWVudCxcbiAgaW5pdGlhbGl6ZUJlYWdsZUluZm9MYXllcixcbn0gZnJvbSBcIi4uL0JlYWdsZUluZm9MYXllclwiO1xuaW1wb3J0IHtcbiAgTU9CSUxFX01FRElBX1FVRVJZLFxuICBTUExJVF9SQVRJTyxcbiAgTE9DQUxfU1RPUkFHRV9LRVlTLFxuICBUUkVBVE1FTlRfUkFUSU8sXG4gIFNFU1NJT05fU1RPUkFHRV9LRVlTLFxuICBNQVhfVElNRU9VVF9QRVJfU0VTU0lPTixcbn0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHtcbiAgZ2V0SWRlbnRpZmllcixcbiAgaW5pdGlhdGVTZXNzaW9uU3RvcmFnZXMsXG4gIGluamVjdFN0eWxlU2hlZXQsXG4gIHJlbW92ZURvY3VtZW50SGlkZSxcbiAgZGV0ZXJtaW5lUGN0LFxuICBwcmVwYXJlQWN0aW9ucyxcbiAgZ2V0RGVidWdNb2RlLFxuICBpc1NlbmRCZWFjb25TdXBwb3J0ZWQsXG59IGZyb20gXCIuLi91dGlsc1wiO1xuXG4oYXN5bmMgZnVuY3Rpb24oKSB7XG4gIGNoZWNrcG9pbnQoY2hlY2twb2ludHMuQmVhZ2xlTG9hZGVkKTtcbiAgbGV0IG1vbml0b3IgPSBudWxsO1xuICBjb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG4gIGNvbnN0IHtUSU1FT1VUX0NPVU5UfSA9IFNFU1NJT05fU1RPUkFHRV9LRVlTO1xuICBsZXQgdGltZW91dENvdW50ZXIgPSAwO1xuICBsb2dnZXIuaW5mbyhcIk5leHRkYXkgaW5pdGlhbGl6aW5nXCIpO1xuICB0cnkge1xuICAgIGluaXRpYWxpemVCZWFnbGVJbmZvTGF5ZXIoKTtcbiAgICBjb25zdCBwcm9kdWN0SW5mb1Byb21pc2UgPSBwcm9kdWN0SW5mb0xvb2t1cCgpO1xuICAgIC8vIGNoZWNrIGlmIGRlYnVnIG1vZGUgaXMgb24sIGFsc28gYWRkcyBkYm0gdG8gYmVhZ2xlSW5mb0xheWVyXG4gICAgY29uc3QgZGVidWdNb2RlID0gZ2V0RGVidWdNb2RlKCk7XG4gICAgbW9uaXRvciA9IG5ldyBNb25pdG9yKCk7XG4gICAgY2hlY2twb2ludChjaGVja3BvaW50cy5Jbml0aWFsaXplZCk7XG5cbiAgICBjb25zdCBpZGVudGlmaWVyID0gYXdhaXQgZ2V0SWRlbnRpZmllcigpO1xuICAgIGxvZ2dlci5sb2coXCJGb3VuZCBjb29raWUgaWRlbnRpZmllcjogXCIsIGlkZW50aWZpZXIpO1xuICAgIGNvbnN0IGNvb2tpZVBjdCA9IGF3YWl0IGRldGVybWluZVBjdChpZGVudGlmaWVyKTtcbiAgICBpZiAoIWRlYnVnTW9kZSkge1xuICAgICAgaWYgKGNvb2tpZVBjdCA8IFNQTElUX1JBVElPKSB7XG4gICAgICAgIGlmIChjb29raWVQY3QgPT09IC0xKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGRldGVybWluZSBjb29raWUgcGN0XCIpO1xuICAgICAgICB9XG4gICAgICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiaXNPblwiLCBmYWxzZSk7XG4gICAgICB9IGVsc2UgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJpc09uXCIsIHRydWUpO1xuXG4gICAgICBjaGVja3BvaW50KGNoZWNrcG9pbnRzLlVzZXJPbk9mZik7XG5cbiAgICAgIGlmICghaXNTZW5kQmVhY29uU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2VuZEJlYWNvbiBpcyBub3Qgc3VwcG9ydGVkXCIpO1xuICAgICAgfVxuXG4gICAgICB0aW1lb3V0Q291bnRlciA9IHBhcnNlSW50KHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oVElNRU9VVF9DT1VOVCkpIHx8IDA7XG4gICAgICBpZiAodGltZW91dENvdW50ZXIgPiBNQVhfVElNRU9VVF9QRVJfU0VTU0lPTikge1xuICAgICAgICBjaGVja3BvaW50KGNoZWNrcG9pbnRzLlRpbWVvdXRUaHJlc2hvbGRSZWFjaGVkKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTmV4dGRheSB0aW1lb3V0IHRocmVzaG9sZCByZWFjaGVkXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBsb2dnZXIuaW5mbyhcIkRlYnVnIG1vZGUgb246IGFsbCBhcHBsaWNhYmxlIHRyZWF0bWVudHMgd2lsbCBiZSBhcHBsaWVkXCIpO1xuXG4gICAgaWYgKCFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibmV4dERheS1oaWRlXCIpKSB7XG4gICAgICBjaGVja3BvaW50KGNoZWNrcG9pbnRzLlNjcmlwdFRpbWVPdXQpO1xuICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShUSU1FT1VUX0NPVU5ULCB0aW1lb3V0Q291bnRlciArIDEpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTmV4dGRheSBzY3JpcHQgdGltZWQgb3V0XCIpO1xuICAgIH1cbiAgICB3aW5kb3cuZGF0YUxheWVyID0gd2luZG93LmRhdGFMYXllciB8fCBbXTtcbiAgICBpZiAod2luZG93LmJlYWdsZUluZm9MYXllcj8uaXNPbiA9PT0gdHJ1ZSkge1xuICAgICAgd2luZG93LmRhdGFMYXllci5wdXNoKHtldmVudDogXCJHTE9WXCIsIEdMT1ZfT046IFwidHJ1ZVwifSk7XG4gICAgfSBlbHNlIGlmICh3aW5kb3cuYmVhZ2xlSW5mb0xheWVyPy5pc09uID09PSBmYWxzZSkge1xuICAgICAgd2luZG93LmRhdGFMYXllci5wdXNoKHtldmVudDogXCJHTE9WXCIsIEdMT1ZfT046IFwiZmFsc2VcIn0pO1xuICAgIH1cbiAgICBpZiAod2luZG93LmJlYWdsZUluZm9MYXllci5pc09uID09PSBmYWxzZSkgdGhyb3cgbmV3IEVycm9yKFwiQ29udHJvbCBncm91cDogbm8gdHJlYXRtZW50cyBhcHBsaWVkXCIpO1xuICAgIG1vbml0b3Iuc2VuZExvZ3MoKTtcblxuICAgIGNvbnN0IHNlYXJjaFBhcmFtcyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XG4gICAgY29uc3QgZGVidWdGaWx0ZXJlZFRyZWF0bWVudHMgPSBkZWJ1Z01vZGUgPyBzZWFyY2hQYXJhbXMuaW5jbHVkZXMoXCJmaWx0ZXI9XCIpID8gc2VhcmNoUGFyYW1zLnNsaWNlKFxuICAgICAgICBzZWFyY2hQYXJhbXMuaW5kZXhPZihcIltcIikgKyAxLFxuICAgICAgICBzZWFyY2hQYXJhbXMubGFzdEluZGV4T2YoXCJdXCIpLFxuICAgICkuc3BsaXQoXCIsXCIpLm1hcCgoaXRlbSkgPT4gcGFyc2VJbnQoaXRlbSwgMTApKTogbnVsbCA6IG51bGw7XG5cbiAgICBpbmplY3RTdHlsZVNoZWV0KCk7XG4gICAgaW5pdGlhdGVTZXNzaW9uU3RvcmFnZXMoKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHJlbW92ZURvY3VtZW50SGlkZSgpO1xuICAgIH0sIDIwMDApO1xuICAgIGNvbnN0IHRyZWF0bWVudHNQcm9taXNlID0gVHJlYXRtZW50UmVwb3NpdG9yeS5nZXRUcmVhdG1lbnRzKCk7XG4gICAgY29uc3QgaXNNb2JpbGUgPSB3aW5kb3cubWF0Y2hNZWRpYShNT0JJTEVfTUVESUFfUVVFUlkpLm1hdGNoZXM7XG4gICAgY29uc3QgT0JTRVJWRVJfQ09ORklHID0ge3N1YnRyZWU6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgYXR0cmlidXRlczogdHJ1ZX07XG5cbiAgICBjb25zdCBlbmdhZ2VUcmVhdG1lbnQgPSBhc3luYyAodHJlYXRtZW50KSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGlkLFxuICAgICAgICBhY3Rpb25zLFxuICAgICAgICBiYXNlUnVsZVNldCxcbiAgICAgICAgZGV2aWNlLFxuICAgICAgICBkZXBlbmRhbnRfb25fdHJlYXRtZW50LFxuICAgICAgICByZWFwcGx5X2V2ZW50LFxuICAgICAgICBzdWJWYXJpYW50UnVsZVNldCxcbiAgICAgICAgd2VpZ2h0LFxuICAgICAgfSA9IHRyZWF0bWVudDtcbiAgICAgIGlmIChkZWJ1Z0ZpbHRlcmVkVHJlYXRtZW50cyAmJiAhZGVidWdGaWx0ZXJlZFRyZWF0bWVudHMuaW5jbHVkZXMoaWQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChkZXZpY2UgPT09IFwibW9iaWxlXCIgJiYgIWlzTW9iaWxlKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJUcmVhdG1lbnQgZGV2aWNlICdtb2JpbGUnIG1pc21hdGNoXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZGV2aWNlID09PSBcImRlc2t0b3BcIiAmJiBpc01vYmlsZSkge1xuICAgICAgICBsb2dnZXIubG9nKFwiVHJlYXRtZW50IGRldmljZSAnZGVza3RvcCcgbWlzbWF0Y2hcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChyZWFwcGx5X2V2ZW50KSB7XG4gICAgICAgIGxldCByZWFwcGx5X2V2ZW50X2FycmF5ID0gcmVhcHBseV9ldmVudDtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlYXBwbHlfZXZlbnQpKSByZWFwcGx5X2V2ZW50X2FycmF5ID0gW3JlYXBwbHlfZXZlbnRdO1xuICAgICAgICBsb2dnZXIubG9nKGBSZWFwcGx5IGV2ZW50ICcke3JlYXBwbHlfZXZlbnR9JyBmb3VuZCBmb3IgdHJlYXRtZW50OiAke2lkfWApO1xuICAgICAgICBmb3IgKGNvbnN0IHJlYXBwbHlFdmVudCBvZiByZWFwcGx5X2V2ZW50X2FycmF5KSB7XG4gICAgICAgICAgY29uc3QgcHJldmlvdXNWYWx1ZSA9IHJlQXBwbHlUcmVhdG1lbnRzTWFwW3JlYXBwbHlFdmVudF0gP1xuICAgICAgICAgICAgICByZUFwcGx5VHJlYXRtZW50c01hcFtyZWFwcGx5RXZlbnRdIDogW107XG4gICAgICAgICAgaWYgKHByZXZpb3VzVmFsdWUuaW5jbHVkZXMoaWQpKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKFwiVHJlYXRtZW50IGFscmVhZHkgYWRkZWQgZm9yIHJlYXBwbHkgZXZlbnRcIik7XG4gICAgICAgICAgfSBlbHNlIHJlQXBwbHlUcmVhdG1lbnRzTWFwW3JlYXBwbHlFdmVudF0gPSBbLi4ucHJldmlvdXNWYWx1ZSwgaWRdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBiaW5kaW5ncyA9IHtwcm9kdWN0SW5mb307XG4gICAgICBjb25zdCBydWxlRW5naW5lID0gbmV3IFJ1bGVFbmdpbmUoe2Jhc2VSdWxlU2V0LCBzdWJWYXJpYW50UnVsZVNldCwgYmluZGluZ3N9KTtcbiAgICAgIGxvZ2dlci5sb2coXCJTdGFydGluZyBiYXNlIHJ1bGUgc2V0IGNoZWNrIGZvciB0cmVhdG1lbnQ6IFwiICsgaWQpO1xuICAgICAgaWYgKCFiYXNlUnVsZVNldCB8fCBhd2FpdCBydWxlRW5naW5lLmNoZWNrUnVsZXMoKSkge1xuICAgICAgICBsZXQgdHJlYXRtZW50U2tpcFJhdGlvID0gd2VpZ2h0ID09PSAxMDAgPyAwIDogKDEwMCAtIHdlaWdodCB8fCBUUkVBVE1FTlRfUkFUSU8pO1xuICAgICAgICBpZiAoZGVwZW5kYW50X29uX3RyZWF0bWVudCkge1xuICAgICAgICAgIC8vIElmIGRlcGVuZGFudCBvbiB0cmVhdG1lbnQgaXMgZm91bmQgYW5kIGhhcyB3ZWlnaHQ7IHVzZSBpdHMgc2tpcCByYXRpb1xuICAgICAgICAgIGNvbnN0IGRlcGVuZGFudE9uVHJlYXRtZW50V2VpZ2h0ID0gbWF0Y2hlZFRyZWF0bWVudHMuZmluZCgodCkgPT4gdC5pZCA9PT0gZGVwZW5kYW50X29uX3RyZWF0bWVudCk/LndlaWdodDtcbiAgICAgICAgICB0cmVhdG1lbnRTa2lwUmF0aW8gPSBkZXBlbmRhbnRPblRyZWF0bWVudFdlaWdodCA9PT0gMTAwID8gMCA6ICgxMDAgLSBkZXBlbmRhbnRPblRyZWF0bWVudFdlaWdodHx8XG4gICAgICAgICAgICBUUkVBVE1FTlRfUkFUSU8pO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlci5sb2coXCJUcmVhdG1lbnQgc2tpcCByYXRpbzogXCIgKyB0cmVhdG1lbnRTa2lwUmF0aW8pO1xuICAgICAgICAvLyBEZXRlcm1pbmluZyBpZGVudGlmaWVyIGZvciBjYWxjdWxhdGluZyB0cmVhdG1lbnQgcGVyY2VudGFnZSAodHJlYXRtZW50UGN0KVxuICAgICAgICBjb25zdCBkZXRlcm1pbmluZ0lkZW50aWZpZXIgPSBkZXBlbmRhbnRfb25fdHJlYXRtZW50IHx8IGlkO1xuXG4gICAgICAgIC8vIHRyZWF0bWVudFBjdCBpcyB0aGUgcGVyY2VudGFnZSB2YWx1ZSBmb3IgdGhlIHRyZWF0bWVudCB1c2VkIHRvIGRldGVybWluZSBpZiBpdCBzaG91bGQgYmUgc2tpcHBlZCBvciBub3RcbiAgICAgICAgLy8gdHJlYXRtZW50UGN0IGlzIDEwMCB3aGVuIGRlYnVnIG1vZGUgaXMgMSwgZW5zdXJpbmcgbm8gdHJlYXRtZW50cyBhcmUgc2tpcHBlZFxuICAgICAgICBjb25zdCB0cmVhdG1lbnRQY3QgPSBkZWJ1Z01vZGUgPT09IDEgPyAxMDAgOiBhd2FpdCBkZXRlcm1pbmVQY3QoaWRlbnRpZmllciArIGRldGVybWluaW5nSWRlbnRpZmllcik7XG4gICAgICAgIGxvZ2dlci5sb2coXCJUcmVhdG1lbnRQY3Q6IFwiICsgdHJlYXRtZW50UGN0ICsgYCB3aXRoIGRlYnVnIG1vZGUgJHtkZWJ1Z01vZGUgPyBcIm9uXCIgOiBcIm9mZlwifWApO1xuICAgICAgICBsZXQgc3ViVmFyaWFudElkID0gbnVsbDtcbiAgICAgICAgbGV0IHByZXBhcmVkID0gYWN0aW9ucztcbiAgICAgICAgaWYgKHN1YlZhcmlhbnRSdWxlU2V0KSB7XG4gICAgICAgICAgbG9nZ2VyLmxvZyhcIlN0YXJ0aW5nIHN1YiB2YXJpYW50IHJ1bGUgc2V0IGNoZWNrIGZvciB0cmVhdG1lbnQ6IFwiICsgaWQpO1xuICAgICAgICAgIHN1YlZhcmlhbnRJZCA9IGF3YWl0IHJ1bGVFbmdpbmUuY2hlY2tTdWJWYXJpYW50UnVsZXMoKTtcbiAgICAgICAgICBpZiAoc3ViVmFyaWFudElkKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKFwiQXBwbHlpbmcgc3ViIHZhcmlhbnQgd2l0aCBpZDogXCIsIHN1YlZhcmlhbnRJZCk7XG4gICAgICAgICAgICBwcmVwYXJlZCA9IHByZXBhcmVBY3Rpb25zKGFjdGlvbnMsIHN1YlZhcmlhbnRJZCk7XG4gICAgICAgICAgfSBlbHNlIGxvZ2dlci5sb2coXCJBcHBseWluZyB0cmVhdG1lbnQgd2l0aCBkZWZhdWx0IHZhbHVlc1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJlYXRtZW50UGN0IDwgdHJlYXRtZW50U2tpcFJhdGlvKSB7XG4gICAgICAgICAgbG9nZ2VyLmxvZyhgVHJlYXRtZW50ICR7aWR9IHNraXBwZWQgZHVlIHRvIHRyZWF0bWVudCBzcGxpdCByYXRpb2ApO1xuICAgICAgICAgIGFkZEVsaWdpYmxlTm90QXBwbGllZFRyZWF0bWVudChpZCwge2RlcGVuZGFudF9vbl90cmVhdG1lbnQ6IChkZXBlbmRhbnRfb25fdHJlYXRtZW50IHx8IG51bGwpLCBzdWJWYXJpYW50SWR9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXdhaXQgYXBwbHlUcmVhdG1lbnRzKHByZXBhcmVkLCBwcm9kdWN0SW5mbyk7XG4gICAgICAgICAgYWRkQXBwbGllZFRyZWF0bWVudChpZCwge3N1YlZhcmlhbnRJZH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbG9nZ2VyLmxvZyhcIlJ1bGUgY2hlY2sgZmFpbGVkIGZvciB0cmVhdG1lbnQ6IFwiLCBpZCk7XG4gICAgfTtcblxuICAgIC8vIFRlbXBvcmFyeSBjb2RlIGJsb2NrIHRvIHRyYWNrIGNvdXBvbiBhcHBsaWNhYmxlIGJhc2tldCB0b3RhbCBwcmljZVxuICAgIC8vIFRPRE86IFJlbW92ZSBvbmNlIHRoZSBpbmZvIGNhbiBiZSBvYnRhaW5lZCB2aWEgTG9va3VwIEFQSVxuICAgIGNvbnN0IGNvbGxlY3RDQUJhc2tldFByaWNlID0gKCkgPT4ge1xuICAgICAgY29uc3Qge0NPVVBPTl9BUFBMSUNBQkxFX0JBU0tFVF9QUklDRX0gPSBMT0NBTF9TVE9SQUdFX0tFWVM7XG4gICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMoXCIvc2lwYXJpcy1saXN0ZXNpLmh0bWxcIikpIHtcbiAgICAgICAgY29uc3QgcHJpY2VFbGVtZW50cyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wcmljZVwiKSk7XG4gICAgICAgIHByaWNlRWxlbWVudHMucHVzaCguLi5BcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubmV3LXByaWNlXCIpKSk7XG4gICAgICAgIGlmICghcHJpY2VFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICBsb2dnZXIubG9nKFwiUHJpY2UgZWxlbWVudHMgbm90IGZvdW5kXCIpO1xuICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShDT1VQT05fQVBQTElDQUJMRV9CQVNLRVRfUFJJQ0UsIDApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIubG9nKFwiUHJpY2UgZWxlbWVudHM6IFwiLCBwcmljZUVsZW1lbnRzKTtcbiAgICAgICAgY29uc3QgY291cG9uQXBwbGljYWJsZVRvdGFsUHJpY2UgPSBwcmljZUVsZW1lbnRzLnJlZHVjZSgocmV0dXJuVmFsLCBlbGVtKSA9PiB7XG4gICAgICAgICAgcmV0dXJuVmFsICs9IHBhcnNlSW50KGVsZW0udGV4dENvbnRlbnQucmVwbGFjZShcIlRMXCIsIFwiXCIpLnJlcGxhY2UoXCIuXCIsIFwiXCIpKTtcbiAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsO1xuICAgICAgICB9LCAwKTtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIkNvdXBvbiBhcHBsaWNhYmxlIHRvdGFsIHByaWNlOiBcIiwgY291cG9uQXBwbGljYWJsZVRvdGFsUHJpY2UpO1xuICAgICAgICBpZiAoY291cG9uQXBwbGljYWJsZVRvdGFsUHJpY2UgPj0gMCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcbiAgICAgICAgICAgICAgQ09VUE9OX0FQUExJQ0FCTEVfQkFTS0VUX1BSSUNFLCBjb3Vwb25BcHBsaWNhYmxlVG90YWxQcmljZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMoXCIvc2lwYXJpcy1vemV0aS5odG1sXCIpKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShDT1VQT05fQVBQTElDQUJMRV9CQVNLRVRfUFJJQ0UsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY2FCYXNrZXRQcmljZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShDT1VQT05fQVBQTElDQUJMRV9CQVNLRVRfUFJJQ0UpO1xuICAgICAgICBpZiAoY2FCYXNrZXRQcmljZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShDT1VQT05fQVBQTElDQUJMRV9CQVNLRVRfUFJJQ0UsIDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbGxlY3RDQUJhc2tldFByaWNlKCk7XG4gICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluY2x1ZGVzKFwiL3NpcGFyaXMtbGlzdGVzaS5odG1sXCIpKSB7XG4gICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICBsb2dnZXIubG9nKFwiTXV0YXRpb24gb2JzZXJ2ZWQsIGNhbGxpbmcgY29sbGVjdENBQmFza2V0UHJpY2VcIik7XG4gICAgICAgIGNvbGxlY3RDQUJhc2tldFByaWNlKCk7XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGJhc2tldENoZWNrb3V0Rm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY2hlY2tvdXRGb3JtXCIpO1xuICAgICAgaWYgKGJhc2tldENoZWNrb3V0Rm9ybSkgb2JzZXJ2ZXIub2JzZXJ2ZShiYXNrZXRDaGVja291dEZvcm0sIE9CU0VSVkVSX0NPTkZJRyk7XG4gICAgfVxuICAgIC8vIEVuZCBvZiB0ZW1wb3JhcnkgY29kZSBibG9ja1xuXG4gICAgY29uc3QgW3RyZWF0bWVudHMsIHByb2R1Y3RJbmZvXSA9IGF3YWl0IFByb21pc2UuYWxsKFt0cmVhdG1lbnRzUHJvbWlzZSwgcHJvZHVjdEluZm9Qcm9taXNlXSk7XG5cbiAgICBsb2dnZXIubG9nKFwiRm91bmQgdHJlYXRtZW50czogXCIsIHRyZWF0bWVudHMpO1xuICAgIGxvZ2dlci5sb2coXCJGb3VuZCBjb29raWUgcGVyY2VudGFnZTogXCIsIGNvb2tpZVBjdCk7XG4gICAgbG9nZ2VyLmxvZyhcIlNwbGl0X3JhdGlvOiBcIiwgU1BMSVRfUkFUSU8pO1xuICAgIGxvZ2dlci5sb2coXCJjb29raWVQY3QgPCBTUExJVF9SQVRJT1wiLCBjb29raWVQY3QgPCBTUExJVF9SQVRJTyk7XG4gICAgbG9nZ2VyLmluZm8oYENvbnRyb2wgZ3JvdXAgcmF0aW86ICR7U1BMSVRfUkFUSU99JWApO1xuXG4gICAgY29uc3QgdHJlYXRtZW50UmVwb3NpdG9yeSA9IG5ldyBUcmVhdG1lbnRSZXBvc2l0b3J5KHtcbiAgICAgIHRyZWF0bWVudHMsXG4gICAgICBjb29raWVQY3QsXG4gICAgfSk7XG4gICAgY2hlY2twb2ludChjaGVja3BvaW50cy5UcmVhdG1lbnRSZXBvc2l0b3J5Q3JlYXRlZCk7XG4gICAgY29uc3QgbWF0Y2hlZFRyZWF0bWVudHMgPSB0cmVhdG1lbnRSZXBvc2l0b3J5LmdldE1hdGNoZWRUcmVhdG1lbnRzKCk7XG4gICAgaWYgKCFtYXRjaGVkVHJlYXRtZW50cy5sZW5ndGgpIHtcbiAgICAgIGxvZ2dlci5sb2coXCJObyB0cmVhdG1lbnRzIG1hdGNoZWQsIHJldHVybmluZyB3aXRob3V0IGZ1cnRoZXIgYWN0aW9uXCIpO1xuICAgICAgcmVtb3ZlRG9jdW1lbnRIaWRlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlQXBwbHlUcmVhdG1lbnRzTWFwID0ge307XG4gICAgZm9yIChjb25zdCB0cmVhdG1lbnQgb2YgbWF0Y2hlZFRyZWF0bWVudHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGVuZ2FnZVRyZWF0bWVudCh0cmVhdG1lbnQpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJFcnJvciBleGVjdXRpbmcgcnVsZXNcIiwgZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlRG9jdW1lbnRIaWRlKCk7XG4gICAgY2hlY2twb2ludChjaGVja3BvaW50cy5UcmVhdG1lbnRzQXBwbGllZCk7XG4gICAgbG9nZ2VyLmxvZyhcIkFwcGxpZWQgdHJlYXRtZW50czogXCIsIHdpbmRvdy5iZWFnbGVJbmZvTGF5ZXIuYSk7XG5cbiAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBtb25pdG9yLnVwZGF0ZUxhdGVzdENoYW5nZXMoKTtcbiAgICB9LCAxMDAwKTtcblxuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHJlQXBwbHlUcmVhdG1lbnRzTWFwKSkge1xuICAgICAgY29uc3QgdHJlYXRtZW50SWRzID0gcmVBcHBseVRyZWF0bWVudHNNYXBba2V5XTtcbiAgICAgIGNvbnN0IHJlQXBwbHlUcmVhdG1lbnRzID0gbWF0Y2hlZFRyZWF0bWVudHMuZmlsdGVyKCh0KSA9PiB0cmVhdG1lbnRJZHMuaW5jbHVkZXModC5pZCkpO1xuICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSBcImluZmluaXRlX3Njcm9sbFwiOiB7XG4gICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRyZWF0bWVudCBvZiByZUFwcGx5VHJlYXRtZW50cykge1xuICAgICAgICAgICAgICBsb2dnZXIubG9nKGBSZXRyeWluZyB0cmVhdG1lbnQgJHt0cmVhdG1lbnQuaWR9IGZyb20gaW5maW5pdGVfc2Nyb2xsYCk7XG4gICAgICAgICAgICAgIGVuZ2FnZVRyZWF0bWVudCh0cmVhdG1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidGltZW91dFwiOiB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRyZWF0bWVudCBvZiByZUFwcGx5VHJlYXRtZW50cykge1xuICAgICAgICAgICAgICBsb2dnZXIubG9nKGBSZXRyeWluZyB0cmVhdG1lbnQgJHt0cmVhdG1lbnQuaWR9IGZyb20gdGltZW91dGApO1xuICAgICAgICAgICAgICBlbmdhZ2VUcmVhdG1lbnQodHJlYXRtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCA1MDApO1xuICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJlbGVtZW50X2NoYW5nZVwiOiB7XG4gICAgICAgICAgZm9yIChjb25zdCB0cmVhdG1lbnQgb2YgcmVBcHBseVRyZWF0bWVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlYXBwbHlTZWxlY3Rvckxpc3QgPSBBcnJheS5pc0FycmF5KHRyZWF0bWVudC5yZWFwcGx5X3NlbGVjdG9yKSA/XG4gICAgICAgICAgICB0cmVhdG1lbnQucmVhcHBseV9zZWxlY3RvciA6IFt0cmVhdG1lbnQucmVhcHBseV9zZWxlY3Rvcl07XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNlbGVjdG9yIG9mIHJlYXBwbHlTZWxlY3Rvckxpc3QpIHtcbiAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBsb2dnZXIubG9nKGBSZXRyeWluZyB0cmVhdG1lbnQgJHt0cmVhdG1lbnQuaWR9IGZyb20gZWxlbWVudF9jaGFuZ2VgKTtcbiAgICAgICAgICAgICAgICAgIGVuZ2FnZVRyZWF0bWVudCh0cmVhdG1lbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUoZWxlbWVudCwgT0JTRVJWRVJfQ09ORklHKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwib25fc2Nyb2xsXCI6IHtcbiAgICAgICAgICB3aW5kb3cub25zY3JvbGwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdHJlYXRtZW50IG9mIHJlQXBwbHlUcmVhdG1lbnRzKSB7XG4gICAgICAgICAgICAgIGxvZ2dlci5sb2coYFJldHJ5aW5nIHRyZWF0bWVudCAke3RyZWF0bWVudC5pZH0gZnJvbSBvbl9zY3JvbGxgKTtcbiAgICAgICAgICAgICAgZW5nYWdlVHJlYXRtZW50KHRyZWF0bWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicXVlcnlfc2VhcmNoX2NoYW5nZVwiOiB7XG4gICAgICAgICAgbGV0IHF1ZXJ5U3RyaW5nID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaDtcbiAgICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggIT09IHF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgICAgICAgIHF1ZXJ5U3RyaW5nID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaDtcbiAgICAgICAgICAgICAgZm9yIChjb25zdCB0cmVhdG1lbnQgb2YgcmVBcHBseVRyZWF0bWVudHMpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIubG9nKGBSZXRyeWluZyB0cmVhdG1lbnQgJHt0cmVhdG1lbnQuaWR9IGZyb20gcXVlcnlfc2VhcmNoX2NoYW5nZWApO1xuICAgICAgICAgICAgICAgIGVuZ2FnZVRyZWF0bWVudCh0cmVhdG1lbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwgT0JTRVJWRVJfQ09ORklHKTtcbiAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGxvZ2dlci5sb2coXCJSZWFwcGx5IGV2ZW50IG5vdCBmb3VuZDogXCIsIGtleSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGNoZWNrcG9pbnQoY2hlY2twb2ludHMuUmVhcHBseVRyZWF0bWVudExpc3RlbmVycyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJlbW92ZURvY3VtZW50SGlkZSgpO1xuICAgIGNvbnNvbGUud2FybihcIk5leHRkYXk6IFwiLCBlcnIubWVzc2FnZSk7XG4gICAgbW9uaXRvci5zZW5kTG9ncyhlcnIubWVzc2FnZSwgdHJ1ZSk7XG4gIH1cbn0pKCk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJ1bnRpbWUiLCJ1bmRlZmluZWQiLCJPcCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093biIsImhhc093blByb3BlcnR5IiwiJFN5bWJvbCIsIlN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiaXRlcmF0b3IiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZXJyIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwic2VsZiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJjcmVhdGUiLCJjb250ZXh0IiwiQ29udGV4dCIsIl9pbnZva2UiLCJzdGF0ZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJtZXRob2QiLCJhcmciLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkVycm9yIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsInR5cGUiLCJkb25lIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJmbiIsImNhbGwiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJ0aGlzIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlc3VsdCIsIl9fYXdhaXQiLCJ0aGVuIiwidW53cmFwcGVkIiwiZXJyb3IiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIlR5cGVFcnJvciIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc05hTiIsImxlbmd0aCIsImkiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJpdGVyIiwia2V5cyIsIm9iamVjdCIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJvIiwiZ2V0IiwicHJvcCIsIl90eXBlb2YiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImxlbiIsImFycjIiLCJBcnJheSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIm1pbkxlbiIsInRvU3RyaW5nIiwiZnJvbSIsInRlc3QiLCJfc2xpY2VkVG9BcnJheSIsImlzQXJyYXkiLCJfaSIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJfZCIsIl90b0NvbnN1bWFibGVBcnJheSIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsIl9uZXh0IiwiX3Rocm93IiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJMT0dfQVBJX1VSTCIsIk1PQklMRV9NRURJQV9RVUVSWSIsIlNFU1NJT05fU1RPUkFHRV9LRVlTIiwiTE9DQUxfU1RPUkFHRV9LRVlTIiwiTG9nZ2VyIiwib3JpZ2luIiwiREVCVUciLCJ3aW5kb3ciLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiY29uc29sZSIsImxvZyIsIndhcm4iLCJsb2dnZXIiLCJjaGVja0RhdGFMYXllclJ1bGUiLCJydWxlIiwiSlNPTiIsInN0cmluZ2lmeSIsIm9wZXJhdG9yIiwiY29uZGl0aW9uIiwicnVudGltZVZhbHVlIiwiZGF0YUxheWVyRmluZGVyIiwiY29uZGl0aW9uQ2hlY2tlciIsInJlcyIsImJlYWdsZUluZm9MYXllciIsImRhdGFMYXllciIsImluY2x1ZGVzIiwiY2hlY2tVcmxSdWxlIiwicmVxdWVzdFVSTCIsImxvY2F0aW9uIiwiaHJlZiIsInBhdGgiLCJkZWNvZGVVUklDb21wb25lbnQiLCJVUkwiLCJzZWFyY2giLCJyZXBsYWNlIiwicGF0aG5hbWUiLCJfZGVmaW5lUHJvcGVydHkiLCJjaGVja3BvaW50cyIsImUiLCJwYXJzaW5nUmVnZXgiLCJQYWdlVHlwZSIsImNvbnRlbnRfbmFtZSIsImNvbnRlbnRfbmFtZV9hbHQiLCJ2dnNTY3JHQVBhZ2VUeXBlIiwidnZzU2NyR0FPcmRlcklkIiwidnZzU2NyR0FPcmRlclJldiIsInZ2c1NjckdBT3JkZXJUeXBlIiwidnZzU2NyR0FJc0FkbWluIiwiQmVhZ2xlTG9hZGVkIiwiSW5pdGlhbGl6ZWQiLCJVc2VyT25PZmYiLCJTY3JpcHRUaW1lT3V0IiwiVHJlYXRtZW50UmVwb3NpdG9yeUNyZWF0ZWQiLCJUcmVhdG1lbnRzQXBwbGllZCIsIlJlYXBwbHlUcmVhdG1lbnRMaXN0ZW5lcnMiLCJUaW1lb3V0VGhyZXNob2xkUmVhY2hlZCIsImluaXRpYWxpemVCZWFnbGVJbmZvTGF5ZXIiLCJwcmVwYXJlRGF0YSIsInNjcmlwdHMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZm91bmRTY3JpcHRDb3VudCIsInNjcmlwdFRleHRDb250ZW50IiwidGV4dENvbnRlbnQiLCJmb3VuZFZhbCIsImV4ZWMiLCJpbmRleE9mIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJhZGRUb0JlYWdsZUluZm9MYXllciIsInBhcnNlIiwiY2hlY2twb2ludCIsImZpbmQiLCJpZCIsInRpbWUiLCJEYXRlIiwibm93IiwiYWRkQXBwbGllZFRyZWF0bWVudCIsInZpZXdJZCIsImNyeXB0byIsInJhbmRvbVVVSUQiLCJzZXNzaW9uSWQiLCJzZXNzaW9uU3RvcmFnZSIsImN1cnJlbnRVUkwiLCJwbGF0Zm9ybSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudERhdGEiLCJ1c2VyQWdlbnQiLCJnYU9iamVjdHMiLCJnYURMRWxlbWVudCIsInZpc2lsYWJzY2siLCJleHRyYWN0Q29va2llSWRlbnRpZmllciIsImNvb2tpZSIsInZsT2JqZWN0cyIsIkl0ZW1zIiwidmxFbGVtZW50IiwiSyIsIlYiLCJWTF9QVkNvdW50SW5WaXNpdCIsIlZMX1RvdGFsRHVyYXRpb24iLCJWTF9Ub3RhbFBWIiwiVkxfVG90YWxWaXNpdCIsImNvbnRlbnRfdHlwZSIsImNvbnRlbnRfY2F0ZWdvcnkiLCJjb250ZW50X2lkcyIsInZpdmVuc2VfY2F0ZWdvcnkiLCJlY29tbWVyY2UiLCJkZXRhaWwiLCJhY3Rpb25GaWVsZCIsImxpc3QiLCJpc0FkbWluIiwicHJvZHVjdEdyb3VwIiwidXNlcklkIiwiY2F0ZWdvcnlfcHJvZHVjdF9jb3VudCIsImNoZWNrb3V0IiwicHJvZHVjdHMiLCJwdXJjaGFzZSIsInZpdmVuc2VQcm9kdWN0cyIsInJldmVudWUiLCJkaW1lbnNpb24xNSIsImRldmljZVBpeGVsUmF0aW8iLCJpbm5lcldpZHRoIiwid2luZG93U2NyZWVuIiwiYXZhaWxIZWlnaHQiLCJzY3JlZW4iLCJhdmFpbExlZnQiLCJhdmFpbFRvcCIsImF2YWlsV2lkdGgiLCJjb2xvckRlcHRoIiwiaGVpZ2h0IiwicGl4ZWxEZXB0aCIsIndpZHRoIiwid2luZG93VlBvcnQiLCJ2aXN1YWxWaWV3cG9ydCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJvbnJlc2l6ZSIsIm9uc2Nyb2xsIiwicGFnZUxlZnQiLCJwYWdlVG9wIiwic2NhbGUiLCJwYXJzZUludCIsIk1hdGgiLCJyb3VuZCIsImFicyIsIm9yaWVudGF0aW9uIiwidGVtcCIsImhpc3RvcnkiLCJuYXZBZ2VudCIsImJyYW5kcyIsIm1hcCIsImJyYW5kIiwidmVyc2lvbiIsImpvaW4iLCJtb2JpbGUiLCJoYXJkd2FyZUNvbmN1cnJlbmN5IiwibGFuZ3VhZ2UiLCJicm93c2VyTGFuZ3VhZ2UiLCJzeXN0ZW1MYW5ndWFnZSIsInVzZXJMYW5ndWFnZSIsIm1heFRvdWNoUG9pbnRzIiwidmVuZG9yIiwicGVyZk1ldHJpY3MiLCJwZXJmb3JtYW5jZSIsImdldEVudHJpZXNCeVR5cGUiLCJwZXJmTmF2aWdhdGlvbk1ldHJpY3MiLCJwbGQiLCJkb21Db250ZW50TG9hZGVkRXZlbnRFbmQiLCJjb25uZWN0U3RhcnQiLCJuZXQiLCJjb25uZWN0RW5kIiwiZmV0Y2hTdGFydCIsInNydiIsInJlc3BvbnNlU3RhcnQiLCJyZXF1ZXN0U3RhcnQiLCJ0ZnIiLCJyZXNwb25zZUVuZCIsImRtaSIsImRvbUludGVyYWN0aXZlIiwiZGNwIiwiZG9tQ29tcGxldGUiLCJvbmwiLCJsb2FkRXZlbnRFbmQiLCJsb2FkRXZlbnRTdGFydCIsImNvbm5lY3Rpb24iLCJkb3dubGluayIsInNlbGVjdGVkRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzVGFnIiwiY250bnQiLCJqc29uY29udGVudCIsImJjcnVtYl9zdHJpbmciLCJzb3JnTGlzdGluZyIsImNvdW50SXRlbXMiLCJzb3JnUHJvZHVjdCIsInNrdSIsInByaWNlIiwicHJpY2VDdXJyZW5jeSIsInByaWNlVmFsaWRVbnRpbCIsIm1lc3NhZ2UiLCJkb05vdFRyYWNrIiwibXNEb05vdFRyYWNrIiwiaG9zdG5hbWUiLCJyZWZlcnJlciIsImZhdm9yaXRlUHJvZHVjdHMiLCJ1c2VyRW1haWwiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJUZXh0IiwicmFuZG9tVVVJREZhbGxiYWNrIiwicmVtb3ZlRG9jdW1lbnRIaWRlIiwiZG9jdW1lbnRFbGVtZW50IiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiZmV0Y2hUcmVhdG1lbnRzIiwiZmV0Y2giLCJ0cmVhdG1lbnRzIiwianNvbiIsImNvb2tpZVN0cmluZyIsImNvb2tpZU5hbWUiLCJpZGVudGlmaWVyIiwic3BsaXQiLCJ2IiwicmVkdWNlIiwiYWNjIiwidHJpbSIsImRldGVybWluZVBjdCIsInN1YnN0cmluZ0VuZFBvc2l0aW9uIiwic3Vic3RyaW5nU3RhcnRQb3NpdGlvbiIsImNyZWF0ZUhhc2hTdHJpbmciLCJoYXNoU3RyaW5nIiwiaGFzaE51bWJlciIsInN0cmluZ1RvSGFzaCIsImVuY29kZWQiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsInN1YnRsZSIsImRpZ2VzdCIsImhhc2hCdWZmZXIiLCJoYXNoQXJyYXkiLCJVaW50OEFycmF5IiwiYiIsInBhZFN0YXJ0IiwiZXhpdFNjcm9sbExpc3RlbmVyIiwiY2FsbEJhY2siLCJsYXN0U2Nyb2xsVG9wIiwic2Nyb2xsVG9wIiwiZXhpdFNjcm9sbEludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwic3R5bGVBcHBsaWNhdG9yIiwiZWxlbWVudHMiLCJzdHlsZUNoYW5nZXNNYXAiLCJlbGVtZW50IiwiZW50cmllcyIsInN0eWxlIiwiaW5qZWN0U3R5bGVTaGVldCIsInN0eWxlU2hlZXQiLCJjcmVhdGVFbGVtZW50IiwicmVsIiwiaGVhZCIsImFwcGVuZENoaWxkIiwicHJlcGFyZUFjdGlvbnMiLCJhY3Rpb25zVG9QcmVwYXJlIiwic3ViVmFyaWFudElkIiwiYWN0aW9ucyIsImFjdGlvbiIsInN1YlZhcmlhbnRzIiwic3ViVmFyaWFudCIsInJ1blRpbWVWYWx1ZSIsIm1pbiIsIm1heCIsImMiLCJnZXRSYW5kb21WYWx1ZXMiLCJnZXREZWJ1Z01vZGUiLCJORF9ERUJVR19NT0RFIiwicXVlcnlTdHJpbmciLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImN1cnJlbnQiLCJnZXRJZGVudGlmaWVyIiwiZXh0cmFjdElkZW50aWZpZXJJbnRlcnZhbCIsInNldFRpbWVvdXQiLCJkZWxheSIsIm1zIiwic2t1Q29sbGVjdG9yIiwiTkRfU0tVX0xJU1QiLCJza3VMaXN0IiwiZ2V0QXR0cmlidXRlIiwiaXNTZW5kQmVhY29uU3VwcG9ydGVkIiwic2VuZEJlYWNvbiIsInJlcGxhY2VBbGwiLCJzdHIiLCJpbmRleCIsInByb2R1Y3RJbmZvIiwiUE9QVVBfRElTUExBWV9GTEFHIiwidHJhbnNmb3JtZXIiLCJ0cmVhdG1lbnQiLCJhcHBseUV2ZW50IiwiY29udGVudFNlbGVjdG9yIiwic2VsZWN0b3IiLCJzZWxlY3RvckZhbGxiYWNrIiwibWRDb25kaXRpb24iLCJtb3ZlX3NlbGVjdG9yXzEiLCJtb3ZlX3NlbGVjdG9yXzIiLCJyZXBsYWNlRm4iLCIkIiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJyZXBsYWNlRm5FeGVjdXRvciIsInJlcGxhY2VGdW5jdGlvbiIsImJpbmQiLCJ2YWwiLCJjdXJyZW50UmVwbGFjZUZuIiwiU3RyaW5nIiwiYmVmb3JlIiwiYWZ0ZXIiLCJjcmVhdGVQb3B1cCIsImRpc3BsYXlQb3B1cCIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmNlIiwidGltZW91dCIsInRleHQiLCJodG1sIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsIm9yaWdpbmFsVGl0bGUiLCJ0aXRsZSIsImhhbmRsZURvY3VtZW50VGl0bGVUYWJDaGFuZ2UiLCJlbGVtZW50U2t1IiwiYXR0cmlidXRlIiwiY3NzIiwicHJvcGVydHkiLCJwcm9wZXJ0eVZhbHVlIiwibjEiLCJuMiIsInN3YXBOb2RlcyIsImFwcGVuZCIsInNvdXJjZSIsImRlc3RpbmF0aW9uIiwicHJlcGVuZCIsImV2ZW50IiwidGl0bGVzIiwicGFyc2VkVGl0bGVzIiwiaGlkZGVuIiwiaGFuZGxlUG9wdXBDbGljayIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJxUG9wdXAiLCJnZXRFbGVtZW50QnlJZCIsInBvcHVwV3JhcHBlciIsImFkZCIsInBvcHVwQ2xvc2VCdXR0b24iLCJvbmNsaWNrIiwiY29udGVudHMiLCJzaGlmdCIsInNyYyIsInRlbXBsYXRlIiwiaW5uZXJIVE1MIiwicG9wdXAiLCJjb250ZW50IiwiZmlyc3RDaGlsZCIsImJvZHkiLCJpMSIsImkyIiwicDEiLCJwYXJlbnROb2RlIiwicDIiLCJpc0VxdWFsTm9kZSIsImNoaWxkcmVuIiwiaW5zZXJ0QmVmb3JlIiwidHJlYXRtZW50QXBwbGljYXRvciIsInRyZWF0bWVudExpc3QiLCJqUXVlcnkiLCJhcHBseVRyZWF0bWVudHMiLCJNb25pdG9yIiwiYXBwbGllZFRyZWF0bWVudHNIYXNoIiwiYXBwbGllZFRyZWF0bWVudHNDaGFuZ2VzIiwiZWxpZ2libGVOb3RBcHBsaWVkVHJlYXRtZW50c0hhc2giLCJlbGlnaWJsZU5vdEFwcGxpZWRUcmVhdG1lbnRzQ2hhbmdlcyIsImhlYWRlcnMiLCJpc0xvZ2dlZCIsImluaXRpYWxpemVFeGl0RXZlbnRMaXN0ZW5lcnMiLCJpc0Vycm9yIiwicmVhZHlTdGF0ZSIsImhhbmRsZVF1ZXVlTG9ncyIsInBhY2thZ2VMb2dEYXRhIiwicmVxdWVzdEJsb2IiLCJxdWV1ZUxvZ3MiLCJhcHBsaWVkVHJlYXRtZW50c0N1cnJlbnRIYXNoIiwiZWxpZ2libGVOb3RBcHBsaWVkVHJlYXRtZW50c0N1cnJlbnRIYXNoIiwibSIsInQiLCJCbG9iIiwidklkIiwiaXNFeGl0RXZlbnRDYXB0dXJlZCIsImxvZ0RhdGEiLCJwYWNrYWdlVXBkYXRlTG9nRGF0YSIsImNhcHR1cmUiLCJxdWV1ZWQiLCJxdWV1ZUludGVydmFsIiwiVHJlYXRtZW50UmVwb3NpdG9yeSIsImNvb2tpZVBjdCIsInVzZXJTZWdtZW50IiwiZ2V0VXNlclNlZ21lbnQiLCJzZWdtZW50TWF0Y2hlZFRyZWF0bWVudHMiLCJmaWx0ZXIiLCJhcHBseV9vbl91c2VyX3NlZ21lbnQiLCJUUkVBVE1FTlRTIiwidHJlYXRtZW50c09iaiIsInRpbWVzdGFtcCIsInRyZWF0bWVudFdpdGhUaW1lc3RhbXAiLCJjaGVja0NvdW50ZXJSdWxlIiwicGFnZVZpZXdIYW5kbGVyIiwiY2FCYXNrZXRQcmljZUhhbmRsZXIiLCJnZXRDb3VudGVyIiwiY291bnRlciIsInBhZ2VWaWV3cyIsImNhQmFza2V0UHJpY2UiLCJjaGVja0VsZW1lbnRSdWxlIiwic2VsZWN0b3JBbGwiLCJtYWluU2VsZWN0b3IiLCJ0ZW1wVmFsIiwicmV0dXJuVmFsIiwiZWxlbSIsImNoZWNrRnVuY3Rpb25SdWxlIiwib3B0cyIsImJpbmRpbmdzIiwicnVsZUZ1bmN0aW9uIiwiY2hlY2tTZXNzaW9uUnVsZSIsImR1cmF0aW9uSGFuZGxlciIsImhpc3RvcnlIYW5kbGVyIiwiZHVyYXRpb24iLCJnZXRTZXNzaW9uVGltZXN0YW1wIiwiY3VycmVudEhpc3RvcnkiLCJjaGVja0VudlJ1bGUiLCJpc01vYmlsZSIsImNoZWNrUmFuZG9tTnVtYmVyUnVsZSIsInNhbHQiLCJyYW5kb21QY3QiLCJSdWxlRW5naW5lIiwiYmFzZVJ1bGVTZXQiLCJzdWJWYXJpYW50UnVsZVNldCIsImNhbGxiYWNrIiwiY2hlY2tSdWxlIiwiY2hhaW4iLCJjaGFpbl9jb25kaXRpb24iLCJydWxlU2F0aXNmaWVkIiwicHJvZHVjdEluZm9Mb29rdXAiLCJIZWFkZXJzIiwibW9kZSIsIm9rIiwibW9uaXRvciIsIlRJTUVPVVRfQ09VTlQiLCJ0aW1lb3V0Q291bnRlciIsInByb2R1Y3RJbmZvUHJvbWlzZSIsImRlYnVnTW9kZSIsImNvbnRhaW5zIiwiaXNPbiIsIkdMT1ZfT04iLCJzZW5kTG9ncyIsInNlYXJjaFBhcmFtcyIsImRlYnVnRmlsdGVyZWRUcmVhdG1lbnRzIiwiaXRlbSIsIlBBR0VfVklFV1MiLCJTRVNTSU9OX0lEIiwiU0VTU0lPTl9USU1FU1RBTVAiLCJTRVNTSU9OX0hJU1RPUlkiLCJwb3B1cERpc3BsYXlGbGFnIiwic2Vzc2lvblRpbWVzdGFtcCIsInNlc3Npb25IaXN0b3J5IiwidHJlYXRtZW50c1Byb21pc2UiLCJPQlNFUlZFUl9DT05GSUciLCJzdWJ0cmVlIiwiY2hpbGRMaXN0IiwiYXR0cmlidXRlcyIsImVuZ2FnZVRyZWF0bWVudCIsImRldmljZSIsImRlcGVuZGFudF9vbl90cmVhdG1lbnQiLCJyZWFwcGx5X2V2ZW50Iiwid2VpZ2h0IiwicmVhcHBseV9ldmVudF9hcnJheSIsInJlYXBwbHlFdmVudCIsInByZXZpb3VzVmFsdWUiLCJyZUFwcGx5VHJlYXRtZW50c01hcCIsInJ1bGVFbmdpbmUiLCJjaGVja1J1bGVzIiwidHJlYXRtZW50U2tpcFJhdGlvIiwiZGVwZW5kYW50T25UcmVhdG1lbnRXZWlnaHQiLCJtYXRjaGVkVHJlYXRtZW50cyIsImRldGVybWluaW5nSWRlbnRpZmllciIsInRyZWF0bWVudFBjdCIsInByZXBhcmVkIiwiY2hlY2tTdWJWYXJpYW50UnVsZXMiLCJjb2xsZWN0Q0FCYXNrZXRQcmljZSIsIkNPVVBPTl9BUFBMSUNBQkxFX0JBU0tFVF9QUklDRSIsInByaWNlRWxlbWVudHMiLCJjb3Vwb25BcHBsaWNhYmxlVG90YWxQcmljZSIsIm9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsImJhc2tldENoZWNrb3V0Rm9ybSIsIm9ic2VydmUiLCJhbGwiLCJ0cmVhdG1lbnRSZXBvc2l0b3J5IiwiZ2V0TWF0Y2hlZFRyZWF0bWVudHMiLCJ1cGRhdGVMYXRlc3RDaGFuZ2VzIiwidHJlYXRtZW50SWRzIiwicmVBcHBseVRyZWF0bWVudHMiLCJSZXNpemVPYnNlcnZlciIsInJlYXBwbHlfc2VsZWN0b3IiXSwic291cmNlUm9vdCI6IiJ9
