!function(){var e={757:function(e,t,n){e.exports=n(666)},666:function(e){var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,a=Object.create(o.prototype),i=new C(r||[]);return a._invoke=function(e,t,n){var r=d;return function(o,a){if(r===p)throw new Error("Generator is already running");if(r===v){if("throw"===o)throw a;return E()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var c=L(i,n);if(c){if(c===h)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=v,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var s=l(e,t,n);if("normal"===s.type){if(r=n.done?v:f,s.arg===h)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=v,n.method="throw",n.arg=s.arg)}}}(e,n,i),a}function l(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d="suspendedStart",f="suspendedYield",p="executing",v="completed",h={};function g(){}function m(){}function y(){}var w={};s(w,a,(function(){return this}));var b=Object.getPrototypeOf,k=b&&b(b(T([])));k&&k!==n&&r.call(k,a)&&(w=k);var x=y.prototype=g.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function I(e,t){function n(o,a,i,c){var s=l(e[o],e,a);if("throw"!==s.type){var u=s.arg,d=u.value;return d&&"object"==typeof d&&r.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,i,c)}),(function(e){n("throw",e,i,c)})):t.resolve(d).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,c)}))}c(s.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function L(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,L(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=l(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function A(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function C(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function T(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:E}}function E(){return{value:t,done:!0}}return m.prototype=y,s(x,"constructor",y),s(y,"constructor",m),m.displayName=s(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,s(e,c,"GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},S(I.prototype),s(I.prototype,i,(function(){return this})),e.AsyncIterator=I,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new I(u(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(x),s(x,c,"Generator"),s(x,a,(function(){return this})),s(x,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=T,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(A),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return c.type="throw",c.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],c=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var s=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(s&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),A(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;A(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:T(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){"use strict";function e(e,t,n,r,o,a,i){try{var c=e[a](i),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(r,o)}function t(t){return function(){var n=this,r=arguments;return new Promise((function(o,a){var i=t.apply(n,r);function c(t){e(i,o,a,c,s,"next",t)}function s(t){e(i,o,a,c,s,"throw",t)}c(void 0)}))}}var r=n(757),o=n.n(r);function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t&&c(e.prototype,t),n&&c(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var u=window.location.href.includes("staging.vivense")?"https://ndvivense.glov.ai/weights_staging.json":"https://ndvivense.glov.ai/weights.json",l="https://europe-west3-nextday-34eb3.cloudfunctions.net/api/logResponse",d="(max-width: 440px)",f="__nextday_session_id",p="ND_SessionTimestamp",v="BN_SessionHistory",h="ND_PageViews",g="ND_PopupDisplayFlag",m="ND_SkuList",y="ND_CABasketPrice",w="ND_Debug",b="ND_OutOfScope",k="ND_UserId",x=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Nextday Client SDK";i(this,e),this.origin=t,this.DEBUG=window.localStorage.getItem(w)}return s(e,[{key:"info",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).info.apply(e,["[".concat(t,"]")].concat(r))}},{key:"log",value:function(){var e=this.DEBUG,t=this.origin;if(e){for(var n,r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];(n=console).log.apply(n,["[".concat(t,"]")].concat(o))}}},{key:"failed",value:function(){for(var e,t=this.DEBUG,n=this.origin,r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];o.forEach((function(e){return"object"==a(e)||"function"==typeof e?"[31m%s[0m"+JSON.stringify(e):"[31m%s[0m"+e.toString()})),t&&(e=console).log.apply(e,["[31m%s[0m [".concat(n,"]")].concat(o))}},{key:"success",value:function(){for(var e,t=this.DEBUG,n=this.origin,r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];o.forEach((function(e){return"object"==a(e)||"function"==typeof e?"[31m%s[0m"+JSON.stringify(e):"[31m%s[0m"+e.toString()})),t&&(e=console).log.apply(e,["[32m%s[0m[".concat(n,"]")].concat(o))}},{key:"warn",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).warn.apply(e,["[".concat(t,"]")].concat(r))}},{key:"error",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).error.apply(e,["[".concat(t,"]")].concat(r))}}]),e}(),S=x;function I(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function L(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function O(e,t){if(e){if("string"==typeof e)return L(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?L(e,t):void 0}}function A(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}}(e,t)||O(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function C(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var T=new S("Nextday DataLayer Checker"),E=function(e){T.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value,o=P(t);return ce(o,n,r)},P=function(e){T.log("Searching beagleInfoLayer for key ",e);var t=window.beagleInfoLayer[e];if(e.includes("."))try{var n=e.split(".");t=window.beagleInfoLayer[n[0]];for(var r=1;r<n.length;r++)t=t[n[r]]}catch(n){T.failed("Couldn't extract key ".concat(e," from beagleInfoLayer")),t=null}if(t)return T.success("Found key ".concat(e," with value ").concat(t)),t;T.failed("Key ".concat(e," not found in beagleInfoLayer")),T.log("Searching dataLayer for key ",e);var o,a=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return C(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?C(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}(window.dataLayer);try{for(a.s();!(o=a.n()).done;){var i=o.value;if(Object.keys(i).includes(e))return T.success("Found key ".concat(e," with value ").concat(i[e])),i[e]}}catch(e){a.e(e)}finally{a.f()}return T.failed("Key ".concat(e," not found in dataLayer")),null},_=new S("Nextday Url Checker"),N=function(e){_.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("path"===t){var o=window.location.href,a=o.includes("ajax/mobile-search/loadOtherPages.php")?decodeURIComponent(new URL(o).search.replace("?originalPath=","")):new URL(o).pathname;return _.log("Checking path ".concat(a," matches rule path ").concat(r)),ce(a,n,r)}};function j(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function D(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?j(Object(n),!0).forEach((function(t){I(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):j(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function R(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return q(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?q(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function q(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}window.beagleInfoLayer=window.beagleInfoLayer||{checkpoints:[],a:{},e:{},f:{}};var M={PageType:/(?:PageType'[ ]*:[ ]*')(.*)(?:')/,content_name:/(?:content_name[ ]*:[ ]*")(.*)(?:")/,content_name_alt:/(?:content_name'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAPageType:/(?:PageType'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAOrderId:/(?:purchase[\s\S]*actionField[\s\S]*'id'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAOrderRev:/(?:purchase[\s\S]*actionField[\s\S]*'revenue'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAOrderType:/(?:purchase[\s\S]*actionField[\s\S]*'dimension15'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAIsAdmin:/(?:dataLayer[\s\S]*'isAdmin'[ ]*:[ ]*")(.*)(?:")/},U={BeagleLoaded:1,Initialized:2,UserOnOff:3,ScriptTimeOut:7,TreatmentRepositoryCreated:4,TreatmentsApplied:5,ReapplyTreatmentListeners:6,TimeoutThresholdReached:8},V=new S("BeagleInfoLayer"),F=function(){var e=t(o().mark((function e(){var t,n,r,a,i,c,s,u,l;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:V.log("Initializing beagleInfoLayer"),t=document.scripts,n=t.length;try{H()}catch(e){console.warn("Could not prepare log data: ",e.message)}if(t&&n){e.next=7;break}return V.warn("Could not parse body"),e.abrupt("return");case 7:r=0,a=t.length-1;case 9:if(!(a>-1)){e.next=35;break}i=t[a].textContent,c=0,s=Object.keys(M);case 12:if(!(c<s.length)){e.next=32;break}if(u=s[c],!(l=(l=M[u].exec(i))?l[1]:null)){e.next=29;break}u.indexOf("_alt")>0&&(u=u.substring(0,u.lastIndexOf("_alt"))),e.prev=18,J(u,decodeURIComponent(JSON.parse('"'+l+'"'))),e.next=26;break;case 22:return e.prev=22,e.t0=e.catch(18),V.warn("Could not decode foundVal ".concat(l)),e.abrupt("continue",29);case 26:if((r+=1)!==Object.keys(M).length){e.next=29;break}return e.abrupt("return");case 29:c++,e.next=12;break;case 32:a--,e.next=9;break;case 35:return e.next=37,le(10);case 37:if(n===t.length){e.next=41;break}return V.log("New scripts detected, re-initializing beagleInfoLayer"),e.next=41,F();case 41:case"end":return e.stop()}}),e,null,[[18,22]])})));return function(){return e.apply(this,arguments)}}(),B=function(e){try{V.log("Checkpoint: '".concat(e,"' Reached!")),window.beagleInfoLayer.checkpoints.push({checkpoint:Object.keys(U).find((function(t){return U[t]===e})),id:e,time:Date.now()})}catch(e){V.warn(e)}},J=function(e,t){null!=e&&null!=t&&(window.beagleInfoLayer[e]=t)},G=function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,a={businessRuleId:t,variant:n};switch(r){case"applied":window.beagleInfoLayer.a[e]=a;break;case"skipped":a.dependant_on_treatment=o,window.beagleInfoLayer.e[e]=a;break;case"failed":window.beagleInfoLayer.f[e]=a}},H=function(){var e,t,n,r,o,a,i,c,s,u,l,d,p,v,h,g,m,y,w,b,k,x,S,I,L,O,A,C,T,E,P,_,N,j,q,M,U,F,B,G,H,$,z,W,K=crypto.randomUUID(),Q=sessionStorage.getItem(f),Y=new URL(window.location.href),X=(null===(e=window.navigator)||void 0===e||null===(t=e.userAgentData)||void 0===t?void 0:t.platform)||(null===(n=window.navigator)||void 0===n?void 0:n.platform)||(null===(r=window.navigator)||void 0===r?void 0:r.userAgent),Z={},te=R(window.dataLayer);try{for(te.s();!(W=te.n()).done;){var ne=W.value;Z=D(D({},Z),ne)}}catch(e){te.e(e)}finally{te.f()}var re=JSON.parse(ee(document.cookie,"VL_CM_0")),oe={};if(re&&re.Items){var ae,ie=R(re.Items);try{for(ie.s();!(ae=ie.n()).done;){var ce=ae.value;oe[ce.K]=decodeURIComponent(ce.V)}}catch(e){ie.e(e)}finally{ie.f()}}J("cookieVLPVinVisit",oe.VL_PVCountInVisit),J("cookieVLVisitDuration",oe.VL_TotalDuration),J("cookieVLTotalPV",oe.VL_TotalPV),J("cookieVLTotalVisit",oe.VL_TotalVisit),J("gaPageType",Z.PageType),J("gaProductName",Z.content_name),J("gaViewType",Z.content_type),J("gaProductCategory",Z.content_category),J("gaProductID",Z.content_ids),J("vvsProductCategory",Z.vivense_category),J("gaListingName",null===(o=Z.ecommerce)||void 0===o||null===(a=o.detail)||void 0===a||null===(i=a.actionField)||void 0===i?void 0:i.list),J("vvsIsShowroom",void 0===window.isAdmin?Z.isAdmin:window.isAdmin),J("vvsProductGroup",Z.productGroup),J("vvsUserId",Z.userId),J("vvsCategory",Z.vivense_category),J("gaCategoryProductCont",Z.category_product_count),J("gaCartProducts",(null===(c=Z.ecommerce)||void 0===c||null===(s=c.checkout)||void 0===s?void 0:s.products)||(null===(u=Z.ecommerce)||void 0===u||null===(l=u.purchase)||void 0===l?void 0:l.products)),J("vvsPDPProduct",null===(d=Z.vivenseProducts)||void 0===d?void 0:d.pop()),J("gaPurchaseId",null===(p=Z.ecommerce)||void 0===p||null===(v=p.purchase)||void 0===v||null===(h=v.actionField)||void 0===h?void 0:h.id),J("gaPurchaseRevenue",null===(g=Z.ecommerce)||void 0===g||null===(m=g.purchase)||void 0===m||null===(y=m.actionField)||void 0===y?void 0:y.revenue),J("gaPurchasePayType",null===(w=Z.ecommerce)||void 0===w||null===(b=w.purchase)||void 0===b||null===(k=b.actionField)||void 0===k?void 0:k.dimension15),J("windowParams",window.location.search),J("windowPRatio",window.devicePixelRatio),J("windowInner",window.innerWidth);var se={};se.availHeight=null===(x=window.screen)||void 0===x?void 0:x.availHeight,se.availHeight=null===(S=window.screen)||void 0===S?void 0:S.availHeight,se.availLeft=null===(I=window.screen)||void 0===I?void 0:I.availLeft,se.availTop=null===(L=window.screen)||void 0===L?void 0:L.availTop,se.availWidth=null===(O=window.screen)||void 0===O?void 0:O.availWidth,se.colorDepth=null===(A=window.screen)||void 0===A?void 0:A.colorDepth,se.height=null===(C=window.screen)||void 0===C?void 0:C.height,se.pixelDepth=null===(T=window.screen)||void 0===T?void 0:T.pixelDepth,se.width=null===(E=window.screen)||void 0===E?void 0:E.width,J("windowScreen",se);var ue={};if(ue.height=null===(P=window.visualViewport)||void 0===P?void 0:P.height,ue.offsetLeft=null===(_=window.visualViewport)||void 0===_?void 0:_.offsetLeft,ue.offsetTop=null===(N=window.visualViewport)||void 0===N?void 0:N.offsetTop,ue.onresize=null===(j=window.visualViewport)||void 0===j?void 0:j.onresize,ue.onscroll=null===(q=window.visualViewport)||void 0===q?void 0:q.onscroll,ue.pageLeft=null===(M=window.visualViewport)||void 0===M?void 0:M.pageLeft,ue.pageTop=null===(U=window.visualViewport)||void 0===U?void 0:U.pageTop,ue.scale=null===(F=window.visualViewport)||void 0===F?void 0:F.scale,ue.width=null===(B=window.visualViewport)||void 0===B?void 0:B.width,J("windowVPort",ue),screen.width){var le=parseInt(screen.width),de=screen.height?parseInt(screen.height):0;if(0!==le&&0!==de){if(/iPad|iPhone|iPod/.test(X)&&window.devicePixelRatio)le=Math.round(le*window.devicePixelRatio),de=Math.round(de*window.devicePixelRatio);else if(90===Math.abs(window.orientation)){var fe=le;le=de,de=fe}J("window",le+"x"+de)}}if(J("navHistSize",null===(G=window.history)||void 0===G?void 0:G.length),J("navAgent",navigator.userAgent),!window.beagleInfoLayer.navAgent&&navigator.userAgentData){var ve,he,ge,me,ye,we=null===(ve=navigator)||void 0===ve||null===(he=ve.userAgentData)||void 0===he||null===(ge=he.brands)||void 0===ge?void 0:ge.map((function(e){return e.brand+":"+e.version})).join();we+=null!==(me=navigator)&&void 0!==me&&null!==(ye=me.userAgentData)&&void 0!==ye&&ye.mobile?"mobi":" ",J("navAgent",we+=X)}J("navHWCores",navigator.hardwareConcurrency),J("navLanguage",navigator.language||navigator.browserLanguage||navigator.systemLanguage||navigator.userLanguage),J("navTouch",navigator.maxTouchPoints),J("navPlatform",X),J("navVendor",navigator.vendor),J("cookieGaId",ee(document.cookie,"_ga")),J("cookieLastBreadCrumb",ee(document.cookie,"lastbreadcrumb")),J("cookieLastCategory",ee(document.cookie,"lastcategory")),J("cookieFirstEntry",decodeURIComponent(ee(document.cookie,"vivensefirst")));var be={};if(window.performance&&window.performance.getEntriesByType("navigation")[0]){var ke=window.performance.getEntriesByType("navigation")[0];be.pld=Math.round(ke.domContentLoadedEventEnd-ke.connectStart),be.net=Math.round(ke.connectEnd-ke.fetchStart),be.srv=Math.round(ke.responseStart-ke.requestStart),be.tfr=Math.round(ke.responseEnd-ke.responseStart),be.dmi=Math.round(ke.domInteractive-ke.responseEnd),be.dcp=Math.round(ke.domComplete-ke.domInteractive),be.onl=Math.round(ke.loadEventEnd-ke.loadEventStart)}J("perfMetrics",be),J("internetSpeed",null===(H=window.navigator)||void 0===H||null===($=H.connection)||void 0===$?void 0:$.downlink);var xe,Se,Ie=R(document.querySelectorAll('[type="application/ld+json"]'));try{for(Ie.s();!(xe=Ie.n()).done;){var Le=xe.value;try{var Oe=Le.textContent,Ae=JSON.parse(Oe),Ce="@";switch(Ae["@type"]){case"Organization":case"WebSite":break;case"CollectionPage":var Te,Ee=R(Ae.breadcrumb.itemListElement);try{for(Ee.s();!(Te=Ee.n()).done;)Ce+=" | "+Te.value.item.name}catch(e){Ee.e(e)}finally{Ee.f()}J("sorgBreadcrumb",Ce);var Pe={};Pe.name=Ae.mainEntity.name,Pe.countItems=Ae.mainEntity.numberOfItems,J("sorgListing",Pe);break;case"BreadcrumbList":var _e,Ne=R(Ae.itemListElement);try{for(Ne.s();!(_e=Ne.n()).done;)Ce+=" | "+_e.value.name}catch(e){Ne.e(e)}finally{Ne.f()}J("sorgBreadcrumb",Ce);break;case"Product":var je={};je.sku=Ae.sku,je.name=Ae.name,Ae.offers&&(je.price=Ae.offers.price,je.priceCurrency=Ae.offers.priceCurrency,je.priceValidUntil=Ae.offers.priceValidUntil),J("sorgProduct",je);break;default:console.log(Ae)}}catch(e){V.warn(e.message)}}}catch(e){Ie.e(e)}finally{Ie.f()}J("v","0.0.27"),J("n","nextday-session_id-".concat(Q)),J("sr",50),J("donttrack",navigator.doNotTrack||window.doNotTrack||navigator.msDoNotTrack),J("u",Y.href),J("d",Y.hostname),J("r",document.referrer),J("vId",K),J("isOn",null);try{J("vvsCntFavProds",window.favoriteProducts?JSON.parse(window.favoriteProducts).length:null)}catch(e){J("vvsCntFavProds",null),V.warn(e.message)}J("vvsHasSetEmail",window.userEmail.length>0),J("vvsLoginType",window.userId>0?"member":"guest"),Se=document.querySelector('[class*="basket_summary_total"], [class*="total_row"]'),J("vvsPurcPriceElt",Se?Se.innerText:null),Se=document.querySelector('[class*="order_follow_numb"], [class*="cart-title-bottom"]'),J("vvsPurchaseOrderID",Se?Se.innerText:null),Se=document.querySelector('[class*="payment_type_title"], [class*="cart-title-info"]'),J("vvsPurcTypeElt",Se?Se.innerText:null),Se=document.querySelector('[id*="breadcrumb-ol"], [class*="long-breadcrumb"]'),J("vvsViewCrumb",Se?Se.innerText:null),Se=document.querySelector('[class*="order-final-number"]'),J("vvsCartTotal",Se?Se.innerText:null),Se=document.querySelector('[class*="basket_total_price"]'),J("vvsViewBasketTotal",Se?Se.innerText:null),Se=document.querySelector('[id*="cart_quantity"], [class*="basket_length"]'),J("vvsViewBasketCount",Se?Se.innerText:null),Se=document.querySelector('[class*="welcome_username"]'),J("vvsViewLoggedin",!!Se&&Se.innerText.length>0),Se=document.querySelectorAll('[class*="vivense-showrooms"] > *'),J("vvsPDPShowroomCount",Se?Se.length:null),Se=document.querySelector('[class*="delivery-date"]'),J("vvsPDPDeliveryDate",Se?Se.innerText:null),J("vvsPDPDeliveryDateFormatted",pe(null===(z=Se)||void 0===z?void 0:z.innerText)),Se=document.querySelector('[class*="product-title"], [class*="header-bottom"]'),J("vvsPDPTitle",Se?Se.innerText:null),Se=document.querySelector('[class*="count-of-product"]'),J("vvsPLPItemCount",Se?Se.innerText:null),Se=document.querySelector('[class*="subcategories-title"]'),J("vvsPLPName",Se?Se.innerText:null)};function z(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return W(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?W(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function W(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var K=new S("Nextday Utils"),Q={ocak:0,"şubat":1,mart:2,nisan:3,"mayıs":4,haziran:5,temmuz:6,"ağustos":7,"eylül":8,ekim:9,"kasım":10,"aralık":11};"randomUUID"in crypto||(crypto.randomUUID=function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(e){return(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)}))});var Y=function(){document.documentElement.classList.remove("nextDay-hide")},X=function(){var e=t(o().mark((function e(){var t;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return K.log("Fetching treatments"),e.next=3,fetch("https://host-b96.pages.dev/treatments.json");case 3:return t=e.sent,e.next=6,t.json();case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),Z=function(){var e=t(o().mark((function e(){var t;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return K.log("Fetching treatment weights"),e.next=3,fetch(u);case 3:return t=e.sent,e.next=6,t.json();case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),ee=function(e,t){if(!e)return null;var n=e.split(";").map((function(e){return e.split("=")})).reduce((function(e,t){return t[0]&&t[1]&&(e[decodeURIComponent(t[0].trim())]=decodeURIComponent(t[1].trim())),e}),{})[t];return n?("_ga"===t&&(n=n.split(".")[2]),n):null},te=function(){var e=t(o().mark((function e(t){var n,r,a,i;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=8+(n=9),t){e.next=5;break}return e.abrupt("return",-1);case 5:return e.next=7,ne(t);case 7:return a=e.sent,i=parseInt(a.substring(n,r),16),e.abrupt("return",i%100);case 10:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),ne=function(){var e=t(o().mark((function e(t){var n,r,a;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=(new TextEncoder).encode(t),e.next=3,crypto.subtle.digest("SHA-1",n);case 3:return r=e.sent,a=Array.from(new Uint8Array(r)),e.abrupt("return",a.map((function(e){return e.toString(16).padStart(2,"0")})).join(""));case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),re=function(e){var t=document.documentElement.scrollTop,n=setInterval((function(){var r=document.documentElement.scrollTop;t-400>r?(clearInterval(n),e()):t=r}),500)},oe=function(e,t){K.log("Applying style changes",t,"to elements",e);for(var n=0;n<e.length;n++)for(var r=e[n],o=0,a=Object.entries(t);o<a.length;o++){var i=A(a[o],2),c=i[0],s=i[1];r.style[c]=s}},ae=function(){var e=t(o().mark((function e(){var t;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(t=document.createElement("link")).rel="stylesheet",t.type="text/css",t.href="https://host-b96.pages.dev/nd-styles.css",document.head.appendChild(t);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),ie=function(){var e=t(o().mark((function e(t,n,r){var a,i,c,s,u,l,d,f,p,v,h,g,m,y,w,b,k,x,S,I,L;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:a=JSON.parse(JSON.stringify(n)),i=null,c=z(a),e.prev=3,c.s();case 5:if((s=c.n()).done){e.next=55;break}if(u=s.value,l=u.businessRuleTransformations,d=u.variants,l||d){e.next=10;break}return e.abrupt("continue",53);case 10:if(r&&l){f=z(l);try{for(f.s();!(p=f.n()).done;)if((v=p.value).id===r)for(h in v)"id"!==h&&(u[h]=v[h])}catch(e){f.e(e)}finally{f.f()}}if(!d){e.next=53;break}g=0,m=Object.keys(d);case 13:if(!(g<m.length)){e.next=53;break}return y=m[g],e.next=17,te(t+y);case 17:if(!(e.sent<u.variants[y].weight)){e.next=50;break}if(i=y,!r||!d[y].businessRuleTransformations){e.next=48;break}w=z(d[y].businessRuleTransformations),e.prev=22,w.s();case 24:if((b=w.n()).done){e.next=38;break}if((k=b.value).id!=r){e.next=36;break}x=0,S=Object.keys(k);case 28:if(!(x<S.length)){e.next=36;break}if("id"!==(I=S[x])){e.next=32;break}return e.abrupt("continue",33);case 32:u[I]=k[I];case 33:x++,e.next=28;break;case 36:e.next=24;break;case 38:e.next=43;break;case 40:e.prev=40,e.t0=e.catch(22),w.e(e.t0);case 43:return e.prev=43,w.f(),e.finish(43);case 46:e.next=49;break;case 48:for(L in d[y])"weight"!==L&&"businessRuleTransformations"!==L&&(u[L]=d[y][L]);case 49:return e.abrupt("break",53);case 50:g++,e.next=13;break;case 53:e.next=5;break;case 55:e.next=60;break;case 57:e.prev=57,e.t1=e.catch(3),c.e(e.t1);case 60:return e.prev=60,c.f(),e.finish(60);case 63:return e.abrupt("return",[a,i]);case 64:case"end":return e.stop()}}),e,null,[[3,57,60,63],[22,40,43,46]])})));return function(t,n,r){return e.apply(this,arguments)}}(),ce=function(e,t,n){if("notExist"===t)return e?(K.failed("conditionChecker: -not satisfied- target does exist"),!1):(K.success("conditionChecker: -satisfied- target does not exist"),!0);if(null==e||null==t)return K.failed("conditionChecker: runTimeValue or condition is not defined"),!1;switch(t){case"exist":return e?(K.success("conditionChecker: -satisfied- target does exist"),!0):(K.failed("conditionChecker: -not satisfied- target does not exist"),!1);case"contains":return e.includes(n)?(K.success("conditionChecker: -satisfied- target contains value"),!0):(K.failed("conditionChecker: -not satisfied- target does not contain value"),!1);case"notContains":return e.includes(n)?(K.failed("conditionChecker: -not satisfied- target contains value"),!1):(K.success("conditionChecker: -satisfied- target does not contain value"),!0);case"equal":return e===n?(K.success("conditionChecker: -satisfied- target equals value"),!0):(K.failed("conditionChecker: -not satisfied- target does not equal value"),!1);case"notEqual":return e!==n?(K.success("conditionChecker: -satisfied- target does not equal value"),!0):(K.failed("conditionChecker: -not satisfied- target equals value"),!1);case"greaterThan":return e>n?(K.success("conditionChecker: -satisfied- target is greater than value"),!0):(K.failed("conditionChecker: -not satisfied- target is not greater than value"),!1);case"lessThan":return e<n?(K.success("conditionChecker: -satisfied- target is less than value"),!0):(K.failed("conditionChecker: -not satisfied- target is not less than value"),!1);case"greaterEquals":return e>=n?(K.success("conditionChecker: -satisfied- target is greater or equal than value"),!0):(K.failed("conditionChecker: -not satisfied- target is not greater or equal than value"),!1);case"lessEquals":return e<=n?(K.success("conditionChecker: -satisfied- target is less or equal than value"),!0):(K.failed("conditionChecker: -not satisfied- target is not less or equal than value"),!1);case"between":var r=A(n.split(","),2),o=r[0],a=r[1];return o=parseInt(o),a=parseInt(a),e>=o&&e<=a?(K.success("conditionChecker: -satisfied- target is between min and max"),!0):(K.failed("conditionChecker: -not satisfied- target is not between min and max"),!1);default:return K.failed("conditionChecker: condition is not defined ",t),!1}},se=function(){var e=w,t=b,n=window.location.search;if(n.includes("nd_debug=1"))return window.localStorage.setItem(e,1),window.localStorage.setItem(t,!0),J("dbm","on"),1;if(n.includes("nd_debug=2"))return window.localStorage.setItem(e,2),window.localStorage.setItem(t,!0),J("dbm","on"),2;if(n.includes("nd_debug=0"))return window.localStorage.removeItem(e),window.localStorage.setItem(t,!0),J("dbm","off"),0;var r=parseInt(window.localStorage.getItem(e));return J("dbm",r?"on":"off"),r||0},ue=function(){var e=t(o().mark((function e(){var t,n=arguments;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.length>0&&void 0!==n[0]?n[0]:"_ga",e.abrupt("return",new Promise((function(e,n){var r=window.localStorage.getItem(k);if(r&&e(r),r=ee(document.cookie,t))window.localStorage.setItem(k,r),e(r);else{var o=setInterval((function(){(r=ee(document.cookie,t))&&(clearInterval(o),window.localStorage.setItem(k,r),e(r))}),10);setTimeout((function(){clearInterval(o),n(new Error("Could not extract cookie identifier"))}),1e3)}})));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),le=function(e){return new Promise((function(t){return setTimeout(t,e)}))},de=function(){var e=m,t=[],n={operator:"PageType",condition:"equal",value:"Homepage"};if(E(n))return null;if(n.value="Listingpage",E(n))return Array.from(document.querySelectorAll(".product-card")).forEach((function(e){t.push(e.getAttribute("data-product-sku"))})),t.length?(sessionStorage.setItem(e,JSON.stringify(t)),t):(K.failed("Product SKUs not found on Listingpage"),null);if(n.value="Productpage",E(n)){var r,o,a,i=document.querySelector(".product-sku");return i?(t.push(i.getAttribute("data-sku")||(null===(r=i.textContent)||void 0===r||null===(o=r.trim())||void 0===o||null===(a=o.replace(/\)/g,""))||void 0===a?void 0:a.replace(/\(/g,""))),sessionStorage.setItem(e,JSON.stringify(t)),t):(K.failed("Product SKU not found on Productpage"),null)}return n.operator="path",n.value="/siparis-listesi.html",N(n)?(Array.from(document.querySelectorAll(".cart-inside")).forEach((function(e){t.push(e.getAttribute("data-sku"))})),t.length?(sessionStorage.setItem(e,JSON.stringify(t)),t):(K.failed("Product SKUs not found on basket page"),null)):(K.failed("Unidentified page type"),null)},fe=function(){return navigator.sendBeacon&&"function"==typeof navigator.sendBeacon},pe=function(e){if(!e||"string"!=typeof e)return e;var t={startMonthIndex:void 0,endMonthIndex:void 0,startDay:void 0,endDay:void 0},n=e.match("([\\d]+)-([\\d]+)\\s?([\\wıüğşöçİÖÇĞÜ]+)");if(n&&4===n.length)t.startDay=parseInt(n[1]),t.endDay=parseInt(n[2]),t.startMonthIndex=Q[n[3].toLowerCase()],t.endMonthIndex=t.startMonthIndex;else{if(!(n=e.match("([\\d]+)\\s+([\\wıüğşöçİÖÇĞÜ]+)-([\\d]+)\\s+([\\wıüğşöçİÖÇĞÜ]+)"))||5!==n.length)return e;t.startDay=parseInt(n[1]),t.startMonthIndex=Q[n[2].toLowerCase()],t.endDay=parseInt(n[3]),t.endMonthIndex=Q[n[4].toLowerCase()]}try{var r=new Date;if(!t.startMonthIndex||!t.endMonthIndex)return e;var o=t.startMonthIndex>=r.getMonth()?r.getFullYear():r.getFullYear()+1,a=t.endMonthIndex>=r.getMonth()?r.getFullYear():r.getFullYear()+1,i=new Date(o,t.startMonthIndex,t.startDay),c=new Date(a,t.endMonthIndex,t.endDay),s=Math.ceil(Math.abs(i-r)/864e5),u=Math.ceil(Math.abs(c-r)/864e5),l=s<7?0:Math.ceil(s/7),d=u<7?0:Math.ceil(u/7);return 0===l&&0===d?"".concat(s," - ").concat(u," Gün"):0===l&&d>=1?"".concat(s," Gün - ").concat(d," Hafta"):l===d?"".concat(l," Hafta"):"".concat(l," - ").concat(d," Hafta")}catch(t){return e}};function ve(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function he(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ve(Object(n),!0).forEach((function(t){I(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ve(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ge=function(){function e(){i(this,e),this.logger=new S("Nextday Monitor"),this.logger.log("Initializing monitor"),this.appliedTreatmentsHash=null,this.appliedTreatmentsChanges=!1,this.eligibleNotAppliedTreatmentsHash=null,this.eligibleNotAppliedTreatmentsChanges=!1,this.headers={type:"application/json"},this.isLogged=!1,this.initializeExitEventListeners()}var n,r,a;return s(e,[{key:"sendLogs",value:(a=t(o().mark((function e(){var t,n,r,a=this,i=arguments;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=i.length>0&&void 0!==i[0]?i[0]:null,n=i.length>1&&void 0!==i[1]&&i[1],(r=this.logger).log("Sending logs"),"complete"!==document.readyState?(r.log("Document ready state is not complete"),window.addEventListener("load",(function(){r.log("In onload event"),a.handleQueueLogs(a.packageLogData(t),n)}),!0)):this.handleQueueLogs(this.packageLogData(t),n);case 5:case"end":return e.stop()}}),e,this)}))),function(){return a.apply(this,arguments)})},{key:"handleQueueLogs",value:(r=t(o().mark((function e(t){var n,r=arguments;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r.length>1&&void 0!==r[1]&&r[1]||!this.isLogged){e.next=3;break}return e.abrupt("return");case 3:if(n=this.logger,t){e.next=7;break}return n.failed("Could not create request blob"),e.abrupt("return");case 7:return n.log("Request blob to send: ",t),this.queueLogs(t),this.isLogged=!0,e.next=12,ne(JSON.stringify(window.beagleInfoLayer.a));case 12:return this.appliedTreatmentsHash=e.sent,e.next=15,ne(JSON.stringify(window.beagleInfoLayer.e));case 15:this.eligibleNotAppliedTreatmentsHash=e.sent;case 16:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"updateLatestChanges",value:(n=t(o().mark((function e(){var t,n;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this.logger.log("Checking if there are changes"),e.next=4,ne(JSON.stringify(window.beagleInfoLayer.a));case 4:return t=e.sent,e.next=7,ne(JSON.stringify(window.beagleInfoLayer.e));case 7:n=e.sent,t!==this.appliedTreatmentsHash&&(this.appliedTreatmentsChanges=!0,this.appliedTreatmentsHash=t),n!==this.eligibleNotAppliedTreatmentsHash&&(this.eligibleNotAppliedTreatmentsChanges=!0,this.eligibleNotAppliedTreatmentsHash=n);case 10:case"end":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:"packageLogData",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=this.headers,n=he({},window.beagleInfoLayer),r=e||(Object.keys(n.a||{}).length?"Treatments applied":"No treatments applied");return n.t=Date.now(),n.m=r,new Blob([JSON.stringify(n)],t)}},{key:"packageUpdateLogData",value:function(){var e=this.headers,t=this.appliedTreatmentsChanges,n=this.eligibleNotAppliedTreatmentsChanges;if(!t&&!n)return!1;var r={t:Date.now(),a:t?window.beagleInfoLayer.a:{},e:n?window.beagleInfoLayer.e:{},vId:window.beagleInfoLayer.vId};return new Blob([JSON.stringify(r)],e)}},{key:"initializeExitEventListeners",value:function(){var e=this,t=this.logger,n=!1;t.log("Initializing exit event listener"),window.addEventListener("beforeunload",(function(){if(e.isLogged){if(!n){n=!0,t.log("In beforeunload event");var r=e.packageUpdateLogData();r?e.queueLogs(r):t.log("No changes to log")}}else e.handleQueueLogs(e.packageLogData())}),{capture:!0}),window.addEventListener("pagehide",(function(){if(e.isLogged){if(!n){n=!0,t.log("In pagehide event");var r=e.packageUpdateLogData();r?e.queueLogs(r):t.log("No changes to log")}}else e.handleQueueLogs(e.packageLogData())}),{capture:!0})}},{key:"queueLogs",value:function(e){var t=this.logger;if(fe()){var n=navigator.sendBeacon(l,e),r=setInterval((function(){n?(clearInterval(r),t.log("Logs queued successfully")):n=navigator.sendBeacon(l,e)}),10);setTimeout((function(){clearInterval(r),n||t.log("Logs not queued")}),1e3)}else fetch(l,e)}}]),e}(),me=ge,ye=new S("Nextday Api"),we=function(){var e=t(o().mark((function e(){var t,n,r;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(ye.log("Starting product info lookup"),t=de()){e.next=5;break}return ye.failed("No sku found"),e.abrupt("return",null);case 5:return(n=new Headers).append("Content-Type","application/json"),e.prev=7,e.next=10,fetch("https://catalog-api.adoraai.com",{method:"POST",body:JSON.stringify(t),headers:n,mode:"cors"});case 10:r=e.sent,e.next=17;break;case 13:return e.prev=13,e.t0=e.catch(7),ye.warn("Fetch to catalog api failed"),e.abrupt("return",null);case 17:if(r.ok){e.next=20;break}return ye.failed("Product info lookup failed"),e.abrupt("return",null);case 20:return e.next=22,r.json();case 22:if(r=e.sent){e.next=26;break}return ye.failed("Product info extraction from response failed"),e.abrupt("return",null);case 26:return ye.success("Product info lookup successful"),e.abrupt("return",r);case 28:case"end":return e.stop()}}),e,null,[[7,13]])})));return function(){return e.apply(this,arguments)}}();function be(e){return function(e){if(Array.isArray(e))return L(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||O(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var ke=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";if(!e)return"";var r=e.indexOf(t);if(r<0)return e;for(;e.indexOf(t)>=0;){var o=e.indexOf(t);e=(o>0?e.substring(0,o):"")+n+e.substring(o+t.length)}return e};function xe(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Se(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Se(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function Se(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ie(){return Ie=t(o().mark((function e(n,r){var a,i,c,s,u,l,f,p,v;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=new S("Nextday Apply Actions"),i=g,c=function(e){a.log("Applying action: ",JSON.stringify(e));var t=e.operator,n=e.type,o=e.applyEvent,c=e.contentSelector,u=e.selector,v=e.selectorFallback,h=e.mdCondition,g=e.move_selector_1,m=e.move_selector_2,y=e.replaceFn;if("noop"!==t){var w=e.value,b=$(u);if(h&&!window.matchMedia(h).matches)return a.failed("Media condition mismatch: ",h),!1;if(g&&!m||m&&!g)return a.failed("Both move selectors are required"),!1;if(g&&m){if(!$(g).length)return a.failed("Move selector 1 not found: ",g),!1;if(!$(m).length)return a.failed("Move selector 2 not found: ",m),!1}else{if(!u)return a.failed("Selector not specified"),!1;if(!b.length){if(!$(v).length&&"remove"===t)return;if("no-selector"!==u&&(a.failed("Selector not found: ",u),a.log("Trying fallback selector: ",v),v&&(b=$(v)),!b.length))return a.failed("Fallback selector not found"),!1}}var k=function(e,t){if(e&&t.includes("{{REPLACE}}")){a.log("Executing replace function: ",e);var n={dataLayerFinder:P,productInfo:r},o=Function(e).bind(n);t=ke(t,"{{REPLACE}}",o())}return t};if(Array.isArray(w)?w.forEach((function(e,t){var n=y?y[t]||y:"";w[t]=k(n,e)})):w=k(y,w),"remove"===t)b&&(a.log("Removing: ",u),b.remove()),a.log("Cannot found element with selector: ",u);else if("insert"===t)switch(n){case"before":a.log("Inserting before: ",w),String(w).includes("nd-add-to-win")&&$(".nd-add-to-win").remove(),b.before(w);break;case"after":a.log("Inserting after: ",w),b.after(w);break;case"popup":if(0!==parseInt(sessionStorage.getItem(i))){a.log("Popup already displayed in session");break}if(a.log("Creating Popup: ",w),f(w,c),o){var x,S=window.matchMedia(d).matches,I=xe(o);try{for(I.s();!(x=I.n()).done;)switch(x.value){case"exitIntent":a.log("Adding exit intent listener"),S?re(l):document.documentElement.addEventListener("mouseleave",l,{once:!0});break;case"copyIntent":a.log("Adding copy intent listener"),document.documentElement.addEventListener("copy",l,{once:!0})}}catch(e){I.e(e)}finally{I.f()}}else setTimeout((function(){l()}),timeout)}else if("edit"===t)switch(n){case"text":a.log("Editing text: ",w),b.text(w);break;case"html":a.log("Editing html: ",w),b.html(w);break;case"styleApplicator":a.log("Applying style: ",w);var L=JSON.parse(w);a.log("Style Changes Map: ",L),oe(b,L);break;case"addClass":a.log("addding class to ".concat(b," named ").concat(w)),b.addClass(w);break;case"removeClass":a.log("remove class from ".concat(b," named ").concat(w)),b.removeClass(w);break;case"documentTitle":if(a.log("changing document title from ".concat(b," to ").concat(w)),o){var O,A=xe(o);try{for(A.s();!(O=A.n()).done;)"tabChange"==O.value&&function(){a.log("catching event tabchange..");var e=document.title;document.addEventListener("visibilitychange",(function(t){return s(t,w,e)}))}()}catch(e){A.e(e)}finally{A.f()}}break;case"addBanner":if(!r){a.failed("Product info unavailable");break}a.log("Adding banner: ",w);var C=JSON.parse(sessionStorage.getItem("ND_SkuList"))[0];if(!C){a.failed("Could not find product sku");break}Object.keys(r).includes(C)&&b.before(w);break;default:a.log("Unknown edit type: ",n)}else if("setattribute"===t)switch(a.log("Setting attribute: ",attribute,w),attribute){case"src":b.css("content","url(".concat(w.trim(),")"));break;case"style":var T=w.split(":")[0].trim(),E=w.split(":")[1].trim();b.css(T,E,"!important")}else if("replace"===t)a.log("Replacing: ",w),b.replaceAll(w);else if("swap"===t){a.log("Swapping: ",g,m);var _=document.querySelector(g),N=document.querySelector(m);p(_,N)}else if("injectscript"===t)a.log("Injecting script: ",w),b.append("<script>".concat(w,"<\/script>"));else if("move"===t){a.log("Moving ".concat(g," to ").concat(m));var j=document.querySelector(g),D=document.querySelector(m);j.remove(),D.prepend(j)}else a.failed("No such operator exists yet",t)}else a.failed("Noop Operator: No operation is applied on target ")},s=function(){var e=t(o().mark((function e(t,n,r){var a,i;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:a=Array.isArray(n)?n:[n],i=0;case 2:if(!(i<a.length)){e.next=16;break}if(!document.hidden){e.next=12;break}return document.title=a[i],e.next=7,le(3e3);case 7:return document.title=r,e.next=10,le(3e3);case 10:e.next=13;break;case 12:document.title=r;case 13:i++,e.next=2;break;case 16:if(document.hidden){e.next=21;break}return document.title=r,e.abrupt("return");case 21:s(t,n,r);case 22:case"end":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}(),u=function e(t){var n=t.target.id;n&&"nd-popup__wrapper"===n&&($("#nd-popup__wrapper").remove(),window.removeEventListener("click",e,!0))},l=function e(){sessionStorage.setItem(i,1);var t=document.querySelector("#grt-shadow-host");t&&(t.style.display="none"),document.getElementById("nd-popup__wrapper").style.display="block",window.addEventListener("click",u,!0),document.documentElement.removeEventListener("mouseleave",e,{once:!0}),document.documentElement.removeEventListener("copy",e,{once:!0}),setTimeout((function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",u,!0)}),15e3)},f=function(e,t){var n=document.createElement("div");n.classList.add("nd-popup__wrapper"),n.id="nd-popup__wrapper";var r=document.createElement("button");if(r.classList.add("nd-popup__button-close"),r.innerText="X",r.onclick=function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",u,!0)},t)for(var o=Array.from(document.querySelectorAll(t));e.includes("{{REPLACE}}")&&o.length>0;)e=e.replace("{{REPLACE}}",o.shift().src);var a=document.createElement("template");a.innerHTML=e.trim();var i=a.content.firstChild;i.appendChild(r),n.appendChild(i),$("#nd-popup__wrapper").remove(),document.body.appendChild(n)},p=function(e,t){var n,r,o=e.parentNode,a=t.parentNode;if(o&&a&&!o.isEqualNode(t)&&!a.isEqualNode(e)){for(var i=0;i<o.children.length;i++)o.children[i].isEqualNode(e)&&(n=i);for(var c=0;c<a.children.length;c++)a.children[c].isEqualNode(t)&&(r=c);o.isEqualNode(a)&&n<r&&r++,o.insertBefore(t,o.children[n]),a.insertBefore(e,a.children[r])}},v=function e(t){if(window.jQuery){var n,r=xe(t);try{for(r.s();!(n=r.n()).done;){var o=n.value;try{if(!1===c(o))return!1}catch(e){return a.failed("Couldn't apply action ".concat(o," with error ").concat(e.message)),e}}}catch(e){r.e(e)}finally{r.f()}}else setTimeout((function(){e(t)}),10)},e.abrupt("return",v(n));case 10:case"end":return e.stop()}}),e)}))),Ie.apply(this,arguments)}var Le=function(e,t){return Ie.apply(this,arguments)};function Oe(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Ae(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ae(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function Ae(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Ce=new S("Nextday Treatment Repository"),Te=function(){function e(t){i(this,e);var n=t.treatments,r=t.treatmentWeights;this.treatments=n,this.treatmentWeights=r}var n,r;return s(e,[{key:"getMatchedTreatments",value:function(){var e=this.treatmentWeights,t=this.getUserGroup(),n=this.treatments;if(e){var r,o=t&&e[t]?e[t]:e.default,a=Oe(n);try{for(a.s();!(r=a.n()).done;){var i=r.value;if(o[i.id]&&(i.weight=o[i.id].weight,i.actions.find((function(e){return e.variants})))){var c,s=Oe(i.actions);try{for(s.s();!(c=s.n()).done;){var u=c.value;if(u.variants)for(var l=0,d=Object.keys(u.variants);l<d.length;l++){var f,p,v,h=d[l];null!==(f=o[i.id])&&void 0!==f&&f.variants&&null!==(p=o[i.id])&&void 0!==p&&p.variants[h]&&(u.variants[h].weight=null===(v=o[i.id])||void 0===v?void 0:v.variants[h])}}}catch(e){s.e(e)}finally{s.f()}}}}catch(e){a.e(e)}finally{a.f()}}return Ce.log("".concat(n.length," treatments user group matched")),n.length?n:[]}},{key:"getUserGroup",value:function(){return window.matchMedia(d).matches?"UGB":"UGA"}}],[{key:"getTreatments",value:(r=t(o().mark((function e(){var t,n,r,a,i,c;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Ce.log("Loading treatments"),t="ND_Treatments",n=JSON.parse(window.sessionStorage.getItem(t)),r=null==n?void 0:n.treatments,a=null==n?void 0:n.timestamp,r&&a){e.next=13;break}return Ce.failed("Treatments not found in local storage"),e.next=9,X();case 9:return r=e.sent,i={timestamp:Date.now(),treatments:r},window.sessionStorage.setItem(t,JSON.stringify(i)),e.abrupt("return",r);case 13:if(!a){e.next=23;break}if(!((Date.now()-a)/864e5>1)){e.next=23;break}return Ce.failed("Treatments are expired"),e.next=19,X();case 19:return r=e.sent,c={timestamp:Date.now(),treatments:r},window.sessionStorage.setItem(t,JSON.stringify(c)),e.abrupt("return",r);case 23:return Ce.success("Treatments are loaded from local storage"),e.abrupt("return",r);case 25:case"end":return e.stop()}}),e)}))),function(){return r.apply(this,arguments)})},{key:"getTreatmentWeights",value:(n=t(o().mark((function e(){return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,Z();case 3:return e.abrupt("return",e.sent);case 6:e.prev=6,e.t0=e.catch(0),Ce.warn(e.t0.message),this.treatmentWeights=null;case 10:case"end":return e.stop()}}),e,this,[[0,6]])}))),function(){return n.apply(this,arguments)})}]),e}(),Ee=Te,Pe=new S("Nextday Counter Checker"),_e=function(e){Pe.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"pageView":return je(n,r);case"CABasketPrice":return De(n,r);default:return Pe.failed("No such operator",t),!1}},Ne=function(e,t){try{switch(t){case"session":return sessionStorage.getItem(e);case"local":return localStorage.getItem(e);default:return Pe.failed("No such type",t),null}}catch(t){return Pe.failed("Could not get counter ".concat(e),t),null}},je=function(e,t){var n=parseInt(Ne(h,"session"));return Pe.log("Page views counter value: ",n),null===n?(Pe.failed("Pageviews counter not found in session storage"),!1):ce(n,e,parseInt(t))},De=function(e,t){var n=parseInt(Ne(y,"local"));return Pe.log("Coupon applicable basket price counter value: ",n),null===n?(Pe.failed("Coupon applicable basket price counter not found in local storage"),!1):ce(n,e,parseInt(t))},Re=new S("Nextday Element Checker"),qe=function(e){Re.log("Checking rule",JSON.stringify(e));var t,n=e.operator,r=e.condition,o=e.value,a=e.selector,i=e.selectorAll,c=e.selectorFallback,s=void 0===c?null:c,u=a;if(u&&!document.querySelector(u)&&(u=s||u),null===n)return ce(document.querySelector(u),r,o);if(u&&!document.querySelector(u))return Re.failed("Selector not found on page"),!1;if(i&&!document.querySelectorAll(i))return Re.failed("Selector not found on page"),!1;switch(u?t=document.querySelector(u):i&&(t=Array.from(document.querySelectorAll(i))),n){case"text-number":var l;l=Array.isArray(t)?t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0):parseInt(document.querySelector(u).textContent.replace("TL","").replace(".",""));var d=parseInt(l);return ce(d,r,o);case"classList":return ce(Array.from(t.classList),r,o);case"count":var f=Array.isArray(t)?t.length:t?1:0;return ce(f,r,o);case"style":var p=getComputedStyle(t),v=o.split(":")[0].trim(),h=o.split(":")[1].trim(),g=p[v];return ce(g,r,h);default:return Re.failed("Operator not defined"),!1}},Me=new S("Nextday Function Checker"),Ue=function(e,t){Me.log("Checking rule",JSON.stringify(e));var n=t.productInfo,r=e.operator,o=e.condition,a=e.value,i=e.bindings;if(!r)return Me.failed("Rule function not defined"),!1;var c={};"productInfo"==i&&(c={productInfo:n});var s=Function(r).bind(c)();return ce(s,o,a)},Ve=new S("Nextday Session Checker"),Fe=function(e){Ve.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"duration":return Be(n,r);case"history":return Je(n,r);default:return null}},Be=function(e,t){var n=(Date.now()-function(){try{return new Date(parseInt(window.sessionStorage.getItem(p)))}catch(e){return Ve.failed("Could not get session timestamp",e),Date.now()}}())/1e3;return ce(n,e,parseInt(t))},Je=function(e,t){var n,r=null===(n=window.sessionStorage.getItem(v))||void 0===n?void 0:n.split(",");return ce(r,e,t)},Ge=new S("Nextday Env Checker"),He=function(e){Ge.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("device_type"===t){var o=window.matchMedia(d).matches?"mobile":"desktop";return ce(o,n,r)}},$e=new S("Nextday RandomPct Checker"),ze=function(){var e=t(o().mark((function e(t){var n,r,a,i,c,s;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if($e.log("Checking rule",JSON.stringify(t)),n=t.condition,r=t.value,a=t.salt){e.next=5;break}return $e.failed("Salt is not defined"),e.abrupt("return",!1);case 5:return e.next=7,ue();case 7:return i=e.sent,e.next=10,te(i+a);case 10:return c=e.sent,s=c,e.abrupt("return",ce(s,n,r));case 13:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();function We(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Ke(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ke(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function Ke(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Qe=new S("Nextday Rule Engine"),Ye=function(){function e(t){i(this,e);var n=t.baseRuleSet,r=t.businessRuleSet,o=t.bindings,a=t.callback,c=void 0===a?null:a;this.baseRuleSet=n,this.businessRuleSet=r,this.callback=c,this.bindings=o}var n,r,a;return s(e,[{key:"checkRules",value:(a=t(o().mark((function e(){var t,n,r;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=We(this.baseRuleSet),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=12;break}return r=n.value,e.next=7,this.checkRule(r);case 7:if(e.sent){e.next=10;break}return e.abrupt("return",!1);case 10:e.next=3;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(1),t.e(e.t0);case 17:return e.prev=17,t.f(),e.finish(17);case 20:return e.abrupt("return",!0);case 21:case"end":return e.stop()}}),e,this,[[1,14,17,20]])}))),function(){return a.apply(this,arguments)})},{key:"checkBusinessRules",value:(r=t(o().mark((function e(){var t,n,r;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=We(this.businessRuleSet),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=12;break}return r=n.value,e.next=7,this.checkRule(r);case 7:if(!e.sent){e.next=10;break}return e.abrupt("return",r.businessRuleId);case 10:e.next=3;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(1),t.e(e.t0);case 17:return e.prev=17,t.f(),e.finish(17);case 20:return e.abrupt("return",null);case 21:case"end":return e.stop()}}),e,this,[[1,14,17,20]])}))),function(){return r.apply(this,arguments)})},{key:"checkRule",value:(n=t(o().mark((function e(t){var n,r,a,i;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=t.chain,r=t.chain_condition,a=t.type,i=null,e.t0=a,e.next="session"===e.t0?5:"counter"===e.t0?7:"element"===e.t0?9:"dataLayer"===e.t0?11:"url"===e.t0?13:"function"===e.t0?15:"environment"===e.t0?17:"random"===e.t0?19:23;break;case 5:return i=Fe(t),e.abrupt("break",25);case 7:return i=_e(t),e.abrupt("break",25);case 9:return i=qe(t),e.abrupt("break",25);case 11:return i=E(t),e.abrupt("break",25);case 13:return i=N(t),e.abrupt("break",25);case 15:return i=Ue(t,this.bindings),e.abrupt("break",25);case 17:return i=He(t),e.abrupt("break",25);case 19:return e.next=21,ze(t);case 21:return i=e.sent,e.abrupt("break",25);case 23:return Qe.failed("No such rule type: ".concat(a)),e.abrupt("return",null);case 25:if(!n){e.next=51;break}e.t1=r,e.next="and"===e.t1?29:"or"===e.t1?36:"xor"===e.t1?43:49;break;case 29:if(e.t2=i,!e.t2){e.next=34;break}return e.next=33,this.checkRule(n);case 33:e.t2=e.sent;case 34:return i=e.t2,e.abrupt("break",51);case 36:if(e.t3=i,e.t3){e.next=41;break}return e.next=40,this.checkRule(n);case 40:e.t3=e.sent;case 41:return i=e.t3,e.abrupt("break",51);case 43:return e.t4=i,e.next=46,this.checkRule(n);case 46:return e.t5=e.sent,i=e.t4!=e.t5,e.abrupt("break",51);case 49:return Qe.failed("No such chain condition"),e.abrupt("break",51);case 51:return e.abrupt("return",i);case 52:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})}]),e}();function Xe(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Ze(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ze(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function Ze(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var et=new S("BeagleOnComponent"),tt=function(){var e=t(o().mark((function e(n,r,a,i){var c,s,u,l,m,w,b,k,x,S,I,L,O,C,T,E,P,_,N,j,D,R,q,M,V;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return V=function(){var e=y;if(window.location.href.includes("/siparis-listesi.html")){var t=Array.from(document.querySelectorAll(".price"));if(t.push.apply(t,be(Array.from(document.querySelectorAll(".new-price")))),!t.length)return et.failed("Price elements not found"),void window.localStorage.setItem(e,0);et.log("Price elements: ",t);var n=t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0);et.log("Coupon applicable total price: ",n),n>=0&&window.localStorage.setItem(e,n)}else(window.location.href.includes("/siparis-ozeti.html")||null===window.localStorage.getItem(e))&&window.localStorage.setItem(e,0)},M=function(){return M=t(o().mark((function e(t){var r,a,c,u,l,d,f,p,v,h,g,y,w,b,k,x,S,I,L,C,P,_,N,j,D;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.id,a=t.actions,c=t.baseRuleSet,u=t.device,l=t.dependant_on_treatment,d=t.reapply_event,f=t.businessRuleSet,p=t.weight,v=t.delay,!s||s.includes(r)){e.next=3;break}return e.abrupt("return");case 3:if("mobile"!==u||m){e.next=6;break}return et.failed("Treatment device 'mobile' mismatch"),e.abrupt("return");case 6:if("desktop"!==u||!m){e.next=9;break}return et.failed("Treatment device 'desktop' mismatch"),e.abrupt("return");case 9:if(d){h=d,Array.isArray(d)||(h=[d]),et.log("Reapply event '".concat(d,"' found for treatment: ").concat(r)),g=Xe(h);try{for(g.s();!(y=g.n()).done;)w=y.value,(b=E[w]?E[w]:[]).includes(r)?et.log("Treatment already added for reapply event"):E[w]=[].concat(be(b),[r])}catch(e){g.e(e)}finally{g.f()}}if(k=new Ye({baseRuleSet:c,businessRuleSet:f,bindings:{productInfo:O}}),et.log("Starting base rule set check for treatment: "+r),e.t0=!c,e.t0){e.next=18;break}return e.next=17,k.checkRules();case 17:e.t0=e.sent;case 18:if(!e.t0){e.next=60;break}if(x=100===p?0:100-p||50,l&&(I=null===(S=T.find((function(e){return e.id===l})))||void 0===S?void 0:S.weight,x=100===I?0:100-I||50),et.log("Treatment skip ratio: "+x),L=l||r,1!==i){e.next=27;break}e.t1=100,e.next=30;break;case 27:return e.next=29,te(n+L);case 29:e.t1=e.sent;case 30:if(C=e.t1,et.log("TreatmentPct: "+C+" with debug mode ".concat(i?"on":"off")),P=null,!f){e.next=39;break}return et.log("Starting sub variant rule set check for treatment: "+r),e.next=37,k.checkBusinessRules();case 37:(P=e.sent)?et.log("Applying business rule transformation with id: ",P):et.log("Applying treatment with default values");case 39:if(!(C<x)){e.next=43;break}return et.log("Treatment ".concat(r," skipped due to treatment split ratio")),G(r,P,D,"skipped",l),e.abrupt("return");case 43:return e.next=45,ie(n,a,P);case 45:if(_=e.sent,N=A(_,2),j=N[0],D=N[1],!v){e.next=52;break}return e.next=52,v(v);case 52:return e.next=54,Le(j,O);case 54:if(!1!==e.sent){e.next=58;break}return G(r,P,D,"failed"),e.abrupt("return");case 58:return G(r,P,D,"applied"),e.abrupt("return");case 60:et.failed("Rule check failed for treatment: ",r);case 61:case"end":return e.stop()}}),e)}))),M.apply(this,arguments)},q=function(e){return M.apply(this,arguments)},r.sendLogs(),c=window.location.search,s=i&&c.includes("filter=")?c.slice(c.indexOf("[")+1,c.lastIndexOf("]")).split(",").map((function(e){return parseInt(e,10)})):null,ae(),void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,F=h,J=g,H=f,$=p,z=v,W=sessionStorage.getItem(F),K=sessionStorage.getItem(J),Q=sessionStorage.getItem(H),X=sessionStorage.getItem($),Z=sessionStorage.getItem(z),W?sessionStorage.setItem(F,parseInt(W)+1):sessionStorage.setItem(F,1),null===K&&sessionStorage.setItem(J,0),Q||sessionStorage.setItem(H,crypto.randomUUID()),X||sessionStorage.setItem($,Date.now()),Z?sessionStorage.setItem(z,[window.location.pathname,Z]):sessionStorage.setItem(z,[window.location.pathname]),setTimeout((function(){Y()}),2e3),u=Ee.getTreatments(),l=Ee.getTreatmentWeights(),m=window.matchMedia(d).matches,w={subtree:!0,childList:!0,attributes:!0},V(),window.location.href.includes("/siparis-listesi.html")&&(b=new MutationObserver((function(){et.log("Mutation observed, calling collectCABasketPrice"),V()})),(k=document.querySelector("#checkoutForm"))&&b.observe(k,w)),e.next=17,Promise.all([u,l,a]);case 17:if(x=e.sent,S=A(x,3),I=S[0],L=S[1],O=S[2],et.success("Found treatments: ",I),C=new Ee({treatments:I,treatmentWeights:L}),B(U.TreatmentRepositoryCreated),(T=C.getMatchedTreatments()).length){e.next=30;break}return et.log("No treatments matched, returning without further action"),Y(),e.abrupt("return");case 30:E={},P=Xe(T),e.prev=32,P.s();case 34:if((_=P.n()).done){e.next=46;break}return N=_.value,e.prev=36,e.next=39,q(N);case 39:e.next=44;break;case 41:e.prev=41,e.t0=e.catch(36),et.failed("Error executing rules",e.t0);case 44:e.next=34;break;case 46:e.next=51;break;case 48:e.prev=48,e.t1=e.catch(32),P.e(e.t1);case 51:return e.prev=51,P.f(),e.finish(51);case 54:for(Y(),B(U.TreatmentsApplied),et.success("Applied treatments: ",window.beagleInfoLayer.a),setInterval((function(){r.updateLatestChanges()}),1e3),j=function(){var e=R[D],t=E[e],n=T.filter((function(e){return t.includes(e.id)}));switch(e){case"infinite_scroll":var r=new ResizeObserver((function(){var e,t=Xe(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;et.log("Retrying treatment ".concat(r.id," from infinite_scroll")),q(r)}}catch(e){t.e(e)}finally{t.f()}}));r.observe(document.documentElement);break;case"timeout":setTimeout((function(){var e,t=Xe(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;et.log("Retrying treatment ".concat(r.id," from timeout")),q(r)}}catch(e){t.e(e)}finally{t.f()}}),500);break;case"element_change":var o,a=Xe(n);try{var i=function(){var e,t=o.value,n=Xe(Array.isArray(t.reapply_selector)?t.reapply_selector:[t.reapply_selector]);try{for(n.s();!(e=n.n()).done;){var r=e.value,a=document.querySelector(r);a&&new MutationObserver((function(){et.log("Retrying treatment ".concat(t.id," from element_change")),q(t)})).observe(a,w)}}catch(e){n.e(e)}finally{n.f()}};for(a.s();!(o=a.n()).done;)i()}catch(e){a.e(e)}finally{a.f()}break;case"on_scroll":window.onscroll=function(){var e,t=Xe(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;et.log("Retrying treatment ".concat(r.id," from on_scroll")),q(r)}}catch(e){t.e(e)}finally{t.f()}};break;case"query_search_change":var c=window.location.search,s=new MutationObserver((function(){if(window.location.search!==c){c=window.location.search;var e,t=Xe(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;et.log("Retrying treatment ".concat(r.id," from query_search_change")),q(r)}}catch(e){t.e(e)}finally{t.f()}}}));s.observe(document,w);break;default:et.failed("Reapply event not found: ",e)}},D=0,R=Object.keys(E);D<R.length;D++)j();B(U.ReapplyTreatmentListeners);case 61:case"end":return e.stop()}var F,J,H,$,z,W,K,Q,X,Z}),e,null,[[32,48,51,54],[36,41]])})));return function(t,n,r,o){return e.apply(this,arguments)}}(),nt=tt;t(o().mark((function e(){var t,n,r,a,i,c,s,u,l,d,f,p;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return B(U.BeagleLoaded),t=null,n=null,r=new S,a="ND_TimeoutCount",i=0,r.info("Nextday initializing"),e.prev=7,e.next=10,F();case 10:return s=we(),u=se(),t=new me,B(U.Initialized),e.next=16,ue();case 16:return l=e.sent,r.log("Found cookie identifier: ",l),e.next=20,te(l);case 20:if(d=e.sent,u){e.next=40;break}if(!(d<50)){e.next=29;break}if(-1!==d){e.next=25;break}throw new Error("Could not determine cookie pct");case 25:J("isOn",n=!1),e.next=31;break;case 29:J("isOn",n=!0);case 31:if(B(U.UserOnOff),fe()){e.next=34;break}throw new Error("sendBeacon is not supported");case 34:if(!((i=parseInt(sessionStorage.getItem(a))||0)>1)){e.next=38;break}throw B(U.TimeoutThresholdReached),new Error("Nextday timeout threshold reached");case 38:e.next=42;break;case 40:r.info("Debug mode on: all applicable treatments will be applied"),window.localStorage.setItem(b,!0);case 42:if(document.documentElement.classList.contains("nextDay-hide")){e.next=46;break}throw B(U.ScriptTimeOut),sessionStorage.setItem(a,i+1),new Error("Nextday script timed out");case 46:if(null!==(c=window.beagleInfoLayer)&&void 0!==c&&c.vvsIsShowroom&&window.localStorage.setItem(b,!0),"true"===window.localStorage.getItem(b)?(r.warn("User is out of scope"),null!="isOn"&&delete window.beagleInfoLayer.isOn):(window.dataLayer=window.dataLayer||[],!0===(null===(f=window.beagleInfoLayer)||void 0===f?void 0:f.isOn)?window.dataLayer.push({event:"GLOV",GLOV_ON:"true"}):!1===(null===(p=window.beagleInfoLayer)||void 0===p?void 0:p.isOn)&&window.dataLayer.push({event:"GLOV",GLOV_ON:"false"})),!1!==n){e.next=51;break}throw new Error("Control group: no treatments applied");case 51:r.log("Found cookie percentage: ",d),r.log("Split_ratio: ",50),r.log("cookiePct < SPLIT_RATIO",d<50),r.info("Control group ratio: ".concat(50,"%")),nt(l,t,s,u),e.next=63;break;case 58:e.prev=58,e.t0=e.catch(7),Y(),console.warn("Nextday: ",e.t0.message),t.sendLogs(e.t0.message,!0);case 63:case"end":return e.stop()}}),e,null,[[7,58]])})))()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
