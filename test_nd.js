!function(){var e={757:function(e,t,n){e.exports=n(666)},666:function(e){var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",i=a.asyncIterator||"@@asyncIterator",s=a.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,o=Object.create(a.prototype),i=new A(r||[]);return o._invoke=function(e,t,n){var r=d;return function(a,o){if(r===f)throw new Error("Generator is already running");if(r===h){if("throw"===a)throw o;return P()}for(n.method=a,n.arg=o;;){var i=n.delegate;if(i){var s=T(i,n);if(s){if(s===g)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=f;var c=l(e,t,n);if("normal"===c.type){if(r=n.done?h:p,c.arg===g)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=h,n.method="throw",n.arg=c.arg)}}}(e,n,i),o}function l(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d="suspendedStart",p="suspendedYield",f="executing",h="completed",g={};function v(){}function m(){}function y(){}var b={};c(b,o,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(D([])));k&&k!==n&&r.call(k,o)&&(b=k);var x=y.prototype=v.prototype=Object.create(b);function S(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function I(e,t){function n(a,o,i,s){var c=l(e[a],e,o);if("throw"!==c.type){var u=c.arg,d=u.value;return d&&"object"==typeof d&&r.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,i,s)}),(function(e){n("throw",e,i,s)})):t.resolve(d).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,s)}))}s(c.arg)}var a;this._invoke=function(e,r){function o(){return new t((function(t,a){n(e,r,t,a)}))}return a=a?a.then(o,o):o()}}function T(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,T(e,n),"throw"===n.method))return g;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var a=l(r,e.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,g;var o=a.arg;return o?o.done?(n[e.resultName]=o.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,g):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function _(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function A(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function D(e){if(e){var n=e[o];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var a=-1,i=function n(){for(;++a<e.length;)if(r.call(e,a))return n.value=e[a],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:P}}function P(){return{value:t,done:!0}}return m.prototype=y,c(x,"constructor",y),c(y,"constructor",m),m.displayName=c(y,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,c(e,s,"GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},S(I.prototype),c(I.prototype,i,(function(){return this})),e.AsyncIterator=I,e.async=function(t,n,r,a,o){void 0===o&&(o=Promise);var i=new I(u(t,n,r,a),o);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(x),c(x,s,"Generator"),c(x,o,(function(){return this})),c(x,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=D,A.prototype={constructor:A,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(_),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function a(r,a){return s.type="throw",s.arg=e,n.next=r,a&&(n.method="next",n.arg=t),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],s=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),_(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;_(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:D(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),g}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){"use strict";function e(e,t,n,r,a,o,i){try{var s=e[o](i),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,a)}function t(t){return function(){var n=this,r=arguments;return new Promise((function(a,o){var i=t.apply(n,r);function s(t){e(i,a,o,s,c,"next",t)}function c(t){e(i,a,o,s,c,"throw",t)}s(void 0)}))}}var r=n(757),a=n.n(r);function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t,n){return t&&s(e.prototype,t),n&&s(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var u=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";if(!e)return"";var r=e.indexOf(t);if(r<0)return e;for(;e.indexOf(t)>=0;){var a=e.indexOf(t);e=(a>0?e.substring(0,a):"")+n+e.substring(a+t.length)}return e},l=window.location.href.includes("staging.vivense")?"https://ndvivense.glov.ai/weights_staging.json":"https://ndvivense.glov.ai/weights.json",d=window.location.href.includes("staging.vivense")?"https://ndvivense.glov.ai/nd-styles_staging.css":"https://ndvivense.glov.ai/nd-styles.css?id=".concat(u((new Date).toISOString().substring(0,13).replace("T",""),"-","")),p="https://europe-west3-nextday-34eb3.cloudfunctions.net/api/log",f="(max-width: 440px)",h=50,g=15e3,v="__beagle_session_id",m="BG_SessionTimestamp",y="BG_SessionHistory",b="BG_PageViews",w="BG_PopupDisplayFlag",k="BG_ProductInfoBasket",x="BG_TimeoutCount",S="BG_SessionReferrer",I="BG_CABasketPrice",T="BG_Debug",L="BG_OutOfScope",_="BG_LabelSent",A="BG_UserId",D="BG_CollectionDataSize",P=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Beagle Client SDK";i(this,e),this.origin=t,this.DEBUG=window.localStorage.getItem(T)}return c(e,[{key:"info",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];(e=console).info.apply(e,["[".concat(t,"]")].concat(r))}},{key:"log",value:function(){var e=this.DEBUG,t=this.origin;if(e){for(var n,r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];(n=console).log.apply(n,["[".concat(t,"]")].concat(a))}}},{key:"failed",value:function(){var e,t=this.DEBUG,n=this.origin;if(t){for(var r="%c%s   ",a=arguments.length,i=new Array(a),s=0;s<a;s++)i[s]=arguments[s];i.forEach((function(e){switch(o(e)){case"bigint":case"number":case"boolean":r+="%d   ";break;case"string":r+="%s   ";break;default:r+="%o   "}})),(e=console).log.apply(e,[r,"color: red","[".concat(n,"]")].concat(i))}}},{key:"success",value:function(){var e,t=this.DEBUG,n=this.origin;if(t){for(var r="%c%s   ",a=arguments.length,i=new Array(a),s=0;s<a;s++)i[s]=arguments[s];i.forEach((function(e){switch(o(e)){case"bigint":case"number":case"boolean":r+="%d   ";break;case"string":r+="%s   ";break;default:r+="%o   "}})),(e=console).log.apply(e,[r,"color: green","[".concat(n,"]")].concat(i))}}},{key:"warn",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];(e=console).warn.apply(e,["[".concat(t,"]")].concat(r))}},{key:"error",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];(e=console).error.apply(e,["[".concat(t,"]")].concat(r))}}]),e}(),C=P;function O(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function E(e,t){if(e){if("string"==typeof e)return O(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?O(e,t):void 0}}function N(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],i=!0,s=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(e){s=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(s)throw a}}return o}}(e,t)||E(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function j(e){return function(e){if(Array.isArray(e))return O(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||E(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var R="beagle",G=1,B=1e3,M={name:"data",indexes:[{name:"ix_dataName",fields:["data_name"]},{name:"ix_dataName_session",fields:["data_name","session_id"]},{name:"ix_dataName_dataValue",fields:["data_name","data_value"]},{name:"ix_dataName_dataValue_session",fields:["data_name","data_value","session_id"]}],options:{keyPath:"id",autoIncrement:!0}};function q(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Q(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Q(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function Q(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var U="alltime",V="session",F=function(){function e(){var t=this;i(this,e),this.initialized=!1;var n=Math.floor(this.getCollectionDataSize()/B);this.idb=e.getIndexedDb().open(R,G+n),this.init().then((function(){t.initialized=!0})).catch(console.error)}var n,r,o,s,u;return c(e,[{key:"getCollectionDataSize",value:function(){return parseInt(localStorage.getItem(D))||0}},{key:"init",value:function(){var t=this;if(!e.isSupported())throw new Error("indexeddb is not supported");return new Promise((function(e){t.idb.onupgradeneeded=function(){var e;try{t.idb.result.deleteObjectStore(M.name)}catch(e){}var n=t.idb.result.createObjectStore(M.name,M.options);if((null===(e=M.indexes)||void 0===e?void 0:e.length)>0){var r,a=q(M.indexes);try{for(a.s();!(r=a.n()).done;){var o=r.value;n.createIndex(o.name,o.fields)}}catch(e){a.e(e)}finally{a.f()}}},t.idb.onsuccess=function(t){e()}}))}},{key:"saveAll",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(t){var n,r=q(t);try{for(r.s();!(n=r.n()).done;){var a=n.value;this.save(e,a)}}catch(e){r.e(e)}finally{r.f()}}}},{key:"save",value:(u=t(a().mark((function e(t,n){var r,o,i,s,c;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.initTransaction();case 2:r=e.sent,o=r.store,i=this.getCurrentSessionId(),s=Math.round(Date.now()/1e3),c={data_name:t,data_value:n,session_id:i,time:s},o.put(c),localStorage.setItem(D,this.getCollectionDataSize()+1);case 9:case"end":return e.stop()}}),e,this)}))),function(e,t){return u.apply(this,arguments)})},{key:"getConnection",value:function(){var e=this;return new Promise((function(t,n){var r=setInterval((function(){e.initialized&&(t(e.idb.result),clearInterval(r))}),10);setTimeout((function(){clearInterval(r),n(new Error("Could not set ready collectionApi"))}),1e3)}))}},{key:"find",value:function(e,t){var n=this;return new Promise((function(e,t){n.initTransaction().then((function(t){var n=t.store.get(id);n.onsuccess=function(){e(n.result)}})).catch((function(e){return t(e)}))}))}},{key:"initTransaction",value:(s=t(a().mark((function e(){var t,n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getConnection();case 2:return t=this.idb.result.transaction(M.name,"readwrite"),n=t.objectStore(M.name),e.abrupt("return",{tx:t,store:n});case 5:case"end":return e.stop()}}),e,this)}))),function(){return s.apply(this,arguments)})},{key:"minmax",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:U;return new Promise((function(a){n.initTransaction().then((function(o){var i=o.store,s=void 0;n.getCursor(i,e,r).onsuccess=function(n){var r=n.target.result;if(r){var o=r.value;"data_value"in o?(void 0===s||"min"===t&&o.data_value<s||"max"===t&&o.data_value>s)&&(s=o.data_value):console.warn("key not found in cursor values "+e),r.continue()}else a(s)}}))}))}},{key:"min",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:U;return this.minmax(e,"min",t)}},{key:"max",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:U;return this.minmax(e,"max",t)}},{key:"groupBy",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:U;return new Promise((function(r){t.initTransaction().then((function(a){var o=a.store,i=new Map;t.getCursor(o,e,n).onsuccess=function(t){var n=t.target.result;if(n){var a=n.value;"data_value"in a?(i.has(a.data_value)||i.set(a.data_value,0),i.set(a.data_value,i.get(a.data_value)+1)):console.warn("key not found in cursor values "+e),n.continue()}else r(i)}}))}))}},{key:"mode",value:(o=t(a().mark((function e(t){var n,r,o,i,s,c,u,l,d=arguments;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=d.length>1&&void 0!==d[1]?d[1]:U,e.next=3,this.groupBy(t,n);case 3:if(0!==(r=e.sent).keys().length){e.next=6;break}return e.abrupt("return",null);case 6:o={name:void 0,value:-1},i=q(r);try{for(i.s();!(s=i.n()).done;)c=N(s.value,2),u=c[0],l=c[1],o.value<l&&(o.name=u,o.value=l)}catch(e){i.e(e)}finally{i.f()}return e.abrupt("return",o);case 10:case"end":return e.stop()}}),e,this)}))),function(e){return o.apply(this,arguments)})},{key:"count",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:U;return new Promise((function(r){t.initTransaction().then((function(a){var o=a.store,i=0;t.getCursor(o,e,n).onsuccess=function(e){var t=e.target.result;t?(i++,t.continue()):r(i)}}))}))}},{key:"sum",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"alltime";return new Promise((function(r){t.initTransaction().then((function(a){var o=a.store,i=0;t.getCursor(o,e,n).onsuccess=function(t){var n=t.target.result;if(n){var a=n.value;"data_value"in a?i+=parseFloat(a.data_value):console.warn("key not found in cursor values "+e),n.continue()}else r(i.toFixed(2))}}))}))}},{key:"getCursor",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:U,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0;return r?n===V?e.index("ix_dataName_dataValue_session").openCursor(IDBKeyRange.only([t,r,this.getCurrentSessionId().toString()])):e.index("ix_dataName_dataValue").openCursor(IDBKeyRange.only([t,r])):n===V?e.index("ix_dataName_session").openCursor(IDBKeyRange.only([t,this.getCurrentSessionId().toString()])):e.index("ix_dataName").openCursor(IDBKeyRange.only([t]))}},{key:"avg",value:(r=t(a().mark((function e(t){var n,r,o,i=arguments;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=i.length>1&&void 0!==i[1]?i[1]:U,e.next=3,this.sum(t,n);case 3:return r=e.sent,e.next=6,this.count(t,n);case 6:if(o=e.sent,r&&o){e.next=9;break}return e.abrupt("return",0);case 9:return e.abrupt("return",(r/o).toFixed(2));case 10:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"last",value:(n=t(a().mark((function e(t){var n,r,o=this,i=arguments;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=i.length>1&&void 0!==i[1]?i[1]:1,r=i.length>2&&void 0!==i[2]?i[2]:U,e.abrupt("return",new Promise((function(e){o.initTransaction().then((function(a){var i=a.store,s=i.index("ix_dataName").openCursor([t],"prev");r===V&&(s=i.index("ix_dataName_session").openCursor([t,o.getCurrentSessionId()],"prev"));var c=0,u=[];s.onsuccess=function(t){var r=t.target.result;r&&c<n?(c++,u.push(r.value),r.continue()):e(u)}}))})));case 3:case"end":return e.stop()}}),e)}))),function(e){return n.apply(this,arguments)})},{key:"getCurrentSessionId",value:function(){var e=new Date;return e.setHours(e.getHours()-2),e.getFullYear()+"-"+(e.getMonth()+1).toString().padStart(2,"0")+"-"+e.getDate().toString().padStart(2,"0")}}],[{key:"isSupported",value:function(){return!!this.getIndexedDb()}},{key:"getIndexedDb",value:function(){if(window.indexedDB)return window.indexedDB}}]),e}();function H(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return W(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?W(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function W(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var J=new C("BeagleDataCollection"),z=new F,K=function(){var e=t(a().mark((function e(t,n,r){var o,i,s,c,u,l,d,p,f,h,g,v;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(J.log("queryInCollector",t,n,r),"min"!==n){e.next=8;break}return e.next=4,z.min(t,r);case 4:return o=e.sent,e.abrupt("return",o);case 8:if("max"!==n){e.next=15;break}return e.next=11,z.max(t,r);case 11:return i=e.sent,e.abrupt("return",i);case 15:if("avg"!==n){e.next=22;break}return e.next=18,z.avg(t,r);case 18:return s=e.sent,e.abrupt("return",s);case 22:if("cd"!==n){e.next=28;break}return e.next=25,z.groupBy(t,r);case 25:return e.abrupt("return",e.sent.size);case 28:if("cv"!==n){e.next=36;break}return e.next=31,z.count(t,r);case 31:c=e.sent,u=0,l=H(c);try{for(l.s();!(d=l.n()).done;)p=N(d.value,2),f=p[1],u+=f}catch(e){l.e(e)}finally{l.f()}return e.abrupt("return",u);case 36:if("mode"!==n){e.next=43;break}return e.next=39,z.mode(t,r);case 39:if(h=e.sent){e.next=42;break}return e.abrupt("return",null);case 42:return e.abrupt("return",h.name);case 43:if(!(n.indexOf("last")>=0)){e.next=51;break}if((g=n.match("last\\(([\\d]+)\\)"))&&2!==!g.length&&!(parseInt(g[1])<1)){e.next=47;break}return e.abrupt("return",null);case 47:return e.next=49,z.last(t,g[1],r);case 49:return v=e.sent,e.abrupt("return",v);case 51:return J.failed("unknown queryMethod=".concat(n," in BeagleDataCollection")),e.abrupt("return",null);case 53:case"end":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}(),Y=function(){var e=t(a().mark((function e(t,n,r){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return J.log("updateInCollector",t,n,r),e.next=3,z.save(t,n);case 3:case"end":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}();function X(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Z(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Z(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function Z(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}window.beagleInfoLayer=window.beagleInfoLayer||{a:{},e:{},f:{}};var ee=new C("BeagleInfoLayer"),te=function(e,t){var n=window.top.beagleInfoLayer;if(null!=e&&null!=t){var r="string"==typeof t?t.toString().trim():t;if(e.indexOf(".")>-1){var a=e.split("."),o=a.pop(),i=n;a.forEach((function(e){i[e]||(i[e]={}),i=i[e]})),i[o]=r}else n[e]=r;de(e,r)}},ne=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1e4;return re([e],t,n,r)},re=function(e){var t,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1e4,o=window.top.beagleInfoLayer;if(!e||!Array.isArray(e)||!e.length)return null;var i,s=X(e);try{for(s.s();!(i=s.n()).done;){var c=i.value;if(t=ye(o,c))return Promise.resolve(t)}}catch(e){s.e(e)}finally{s.f()}return n?new Promise((function(n){var i=setInterval((function(){var r,a=X(e);try{for(a.s();!(r=a.n()).done;){var s=r.value;if(t=ye(o,s)){clearInterval(i),n(t);break}}}catch(e){a.e(e)}finally{a.f()}}),r);setTimeout((function(){clearInterval(i),n(null)}),a)})):Promise.resolve(null)},ae=function(e,t,n,r){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,o={};switch(t&&(o.businessRuleId=t),n&&(o.variant=n),r){case"applied":window.beagleInfoLayer.a[e]=o;break;case"skipped":o.dependant_on_treatment=a,window.beagleInfoLayer.e[e]=o;break;case"failed":window.beagleInfoLayer.f[e]=o}},oe=10,ie=0,se=function(){var e=t(a().mark((function e(){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:te("view_epoch",Date.now()),be(),me(),he("pageChanged"),we();case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),ce={view_epoch:[{updateMethod:"min"}],PageType:[{updateMethod:"count_values"}],"cart.couponApplicable":[{updateMethod:"last"}],"pdp.category":[{updateMethod:"count_values"}]},ue={view_epoch:[{queryMethod:"min",window:"session",featureName:"history.view_epoch_min"}],PageType:[{queryMethod:"sum_of_counts",window:"session",featureName:"history.PageType_count_session"},{queryMethod:"sum_of_counts",window:"alltime",featureName:"history.PageType_count_alltime"}],"cart.couponApplicable":[{queryMethod:"last",window:"session",featureName:"history.cart_couponApplicable_last_session"}],"pdp.category":[{queryMethod:"mode",window:"session",featureName:"history.pdp_category_mode_session"},{queryMethod:"last",window:"session",featureName:"history.pdp_category_last_session"}]},le=function(){var e=t(a().mark((function e(){var t,n,r,o,i,s,c,u;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=Object.keys(ue),n=0,r=t;case 2:if(!(n<r.length)){e.next=30;break}o=r[n],i=X(ue[o]),e.prev=6,i.s();case 8:if((s=i.n()).done){e.next=19;break}if(!(c=s.value).isUpdated){e.next=12;break}return e.abrupt("continue",17);case 12:return ee.log("queryInCollector",o,c.queryMethod,c.window),e.next=15,K(o,c.queryMethod,c.window);case 15:(u=e.sent)&&(te(c.featureName,u),c.isUpdated=!0);case 17:e.next=8;break;case 19:e.next=24;break;case 21:e.prev=21,e.t0=e.catch(6),i.e(e.t0);case 24:return e.prev=24,i.f(),e.finish(24);case 27:n++,e.next=2;break;case 30:case"end":return e.stop()}}),e,null,[[6,21,24,27]])})));return function(){return e.apply(this,arguments)}}(),de=function(){var e=t(a().mark((function e(t,n){var r,o,i,s;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if((r=ce[t])&&Array.isArray(r)&&r.length>0){o=X(r);try{for(o.s();!(i=o.n()).done;)s=i.value,pe(t,n,s)}catch(e){o.e(e)}finally{o.f()}}case 2:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),pe=function(){var e=t(a().mark((function e(t,n,r){var o,i,s,c;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return ee.log("updateInCollector",t,n,r.updateMethod),e.next=3,Y(t,n,r.updateMethod);case 3:o=X(ue[t]),e.prev=5,o.s();case 7:if((i=o.n()).done){e.next=16;break}return s=i.value,ee.log("queryInCollector",t,s.queryMethod,s.window),e.next=12,K(t,s.queryMethod,s.window);case 12:(c=e.sent)&&(te(s.featureName,c),s.isUpdated=!0);case 14:e.next=7;break;case 16:e.next=21;break;case 18:e.prev=18,e.t0=e.catch(5),o.e(e.t0);case 21:return e.prev=21,o.f(),e.finish(21);case 24:case"end":return e.stop()}}),e,null,[[5,18,21,24]])})));return function(t,n,r){return e.apply(this,arguments)}}(),fe=[{PageTypeDepend:"*",method:"GADataLayer",selector:"PageType",name:"PageType"},{PageTypeDepend:"*",method:"GADataLayer",selector:"isAdmin",name:"vvsIsShowroom"},{PageTypeDepend:"*",method:"GADataLayer",selector:"userId",name:"vvsUserId"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"content_name",name:"pdp.name"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"productgroup",name:"pdp.group"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivense_category",name:"pdp.class"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"content_ids",name:"pdp.sku",formatter:"upperCaseTR",trigger:"updateActiveSKUList"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"ProductID",name:"pdp.sku",trigger:"updateActiveSKUList"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"content_category",name:"pdp.category"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"ecommerce.detail.actionField.list",name:"pdp.listalias"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivenseProducts.*.sku",name:"pdp.sku",trigger:"updateActiveSKUList",formatter:"dearray"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivenseProducts.*.category",name:"pdp.category",formatter:"dearray"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivenseProducts.*.discountRate",name:"pdp.discountRate",formatter:"dearray"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivenseProducts.*.fastDelivery",name:"pdp.fastDelivery",formatter:"dearray"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivenseProducts.*.isInShowroom",name:"pdp.isInShowroom",formatter:"dearray"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivenseProducts.*.price",name:"pdp.price",formatter:"dearray"},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"content_ids",name:"plp.id"},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"category_product_count",name:"plp.approximateCount"},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"content_name",name:"plp.name"},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"productgroup",name:"plp.group"},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"vivense_category",name:"plp.class"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.products.*.id",name:"purchase.skus"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.products.*.price",name:"purchase.prices"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.products.*.quantity",name:"purchase.quantities"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.products.*.category",name:"purchase.categories"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.actionField.id",name:"purchase.orderId"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.actionField.revenue",name:"purchase.revenue"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.actionField.dimension15",name:"purchase.paymentType"},{PageTypeDepend:"*",method:"DocQuery",selector:'[class*="page_preview_wrapper_production"]',name:"PageType",operand:"docQueryValueIfHasInnerText",value:"Homepage"},{PageTypeDepend:"*",method:"DocQuery",selector:'[class*="category_page_wrapper"]',name:"PageType",operand:"docQueryValueIfHasInnerText",value:"Listingpage"},{PageTypeDepend:"*",method:"DocQuery",selector:'[class*="product-main-details"]',name:"PageType",operand:"docQueryValueIfHasInnerText",value:"Productpage"},{PageTypeDepend:"*",method:"DocQuery",selector:'[class*="product"]',name:"PageType",operand:"docQueryValueIfHasInnerText",value:"Productpage"},{PageTypeDepend:"Homepage|Productpage|Listingpage",method:"DocQuery",selector:'[class*="welcome_username"]',name:"view.isLoggedIn",operand:"docQueryHasInnerText"},{PageTypeDepend:"Homepage|Productpage|Listingpage",method:"DocQuery",selector:'[class*="empty_basket_text"]',name:"view.isEmptyBasket",operand:"docQueryHasInnerText",exclusive:["view.basketTotal","view.basketCount"]},{PageTypeDepend:"Homepage|Productpage|Listingpage",method:"DocQuery",selector:'[class*="basket_total_price"]',name:"view.basketTotal",operand:"docQueryInnerText",exclusive:["view.isEmptyBasket"],formatter:"numericOnly"},{PageTypeDepend:"Homepage|Productpage|Listingpage",method:"DocQuery",selector:'[id*="cart_quantity"], [class*="basket_length"]',name:"view.basketCount",operand:"docQueryInnerText",exclusive:["view.isEmptyBasket"]},{PageTypeDepend:"Productpage",method:"DocQuery",selector:'[class*="delivery-date"]',name:"pdp.deliveryDate",operand:"docQueryInnerText"},{PageTypeDepend:"Productpage",method:"DocQuery",selector:'[class*="delivery-date"]',name:"pdp.deliveryDateFormatted",operand:"docQueryInnerText",formatter:"formatDeliveryDate"},{PageTypeDepend:"Productpage",method:"DocQuery",selector:'[class*="product-title"], [class*="header-bottom"]',name:"pdp.name",operand:"docQueryInnerText"},{PageTypeDepend:"Productpage",method:"DocQuery",selector:'[class*="vivense-showrooms"] > *',name:"pdp.showroomcount",operand:"docQueryCountElts",exclusive:["pdp.hasNoShowrooms"]},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"#vivense-showroom-tab p:not(.vivense-showrooms)",name:"pdp.hasNoShowrooms",operand:"docQueryHasInnerText",exclusive:["pdp.showroomcount"]},{PageTypeDepend:"Listingpage",method:"DocQuery",selector:'[class*="count-of-product"]',name:"plp.itemCount",operand:"docQueryInnerText",formatter:"numericOnly"},{PageTypeDepend:"Listingpage",method:"DocQuery",selector:'[class*="subcategories-title"]',name:"plp.name",operand:"docQueryInnerText"},{PageTypeDepend:"Listingpage",method:"DocQuery",selector:".product-card[data-product-sku]",name:"plp.skus",operand:"docQueryAttribValueList",value:"data-product-sku",trigger:"updateActiveSKUList"},{PageTypeDepend:"Listingpage",method:"DocQuery",selector:".product-list",observer:"listingItemBlock",name:"__listingItemBlockObserver",children:["plp.skus"],operand:"docQueryObserve"},{PageTypeDepend:"basket",method:"DocQuery",selector:'[class*="empty-cart-container"]',name:"cart.isempty",operand:"docQueryHasInnerText",trigger:"updateActiveSKUList",exclusive:["cart.totalPrice","cart.couponApplicable","cart.skus","cart.prices","cart.quantities","cart.categories","__checkoutFormObserver"]},{PageTypeDepend:"basket",method:"DocQuery",selector:".cartItemQuantity",name:"cart.quantities",operand:"docQueryAttribValueList",value:"data-previous",trigger:"updateActiveSKUList",exclusive:["cart.isempty"]},{PageTypeDepend:"basket",method:"DocQuery",selector:'[class*="order-final-number"]',name:"cart.totalPrice",operand:"docQueryInnerText",exclusive:["cart.isempty"],formatter:"numericOnly"},{PageTypeDepend:"basket",method:"DocQuery",selector:'[class*="cart-price"] > span.price, span.super, span.new-price, span.span-price',name:"cart.couponApplicable",operand:"docQuerySumNumInnerText",trigger:"updateCouponApplicableAmount",exclusive:["cart.isempty"]},{PageTypeDepend:"basket",method:"DocQuery",selector:".cart-inside",name:"cart.skus",operand:"docQueryAttribValueList",value:"data-sku",trigger:"updateActiveSKUList",exclusive:["cart.isempty","cart.couponApplicable"]},{PageTypeDepend:"basket",method:"DocQuery",selector:".cart-inside",name:"cart.categories",operand:"docQueryAttribValueList",value:"data-last-breadcrumb",trigger:"updateActiveSKUList",exclusive:["cart.isempty","cart.couponApplicable"]},{PageTypeDepend:"basket",method:"DocQuery",selector:".cart-inside",name:"cart.prices",operand:"docQueryAttribValueList",value:"data-price",trigger:"updateActiveSKUList",exclusive:["cart.isempty","cart.couponApplicable"]},{PageTypeDepend:"basket",method:"DocQuery",selector:"#checkoutForm",observer:"checkoutForm",name:"__checkoutFormObserver",children:["cart.totalPrice","cart.couponApplicable","cart.skus","cart.prices","cart.quantities","cart.categories","cart.isempty"],operand:"docQueryObserve"},{PageTypeDepend:"purchase",method:"DocQuery",selector:'[class*="basket_summary_total"], [class*="total_row"]',name:"purchase.revenue",operand:"docQueryInnerText",formatter:"numericOnly"},{PageTypeDepend:"purchase",method:"DocQuery",selector:'[class*="order_follow_numb"], [class*="cart-title-bottom"]',name:"purchase.vvsTxnId",operand:"docQueryInnerText"},{PageTypeDepend:"purchase",method:"DocQuery",selector:".payment_type_title, .cart-title-info",name:"purchase.paymentType",operand:"docQueryInnerText",formatter:"lowerCaseTRFirstWord"},{PageTypeDepend:"purchase",method:"DocQuery",selector:'[class*="product_sku_code"]',name:"purchase.skus",operand:"docQueryArrayInnerText"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"sku",name:"pdp.sku",trigger:"updateActiveSKUList"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"mpn",name:"pdp.mpn"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"name",name:"pdp.name",operand:"JSONFilterOther",value:"@type=Product"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"offers.price",name:"pdp.price"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"offers.priceValidUntil",name:"pdp.priceValidUntil"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"itemListElement.*.name",name:"view.breadcrumb"},{PageTypeDepend:"Listingpage",method:"DocSorg",selector:"mainEntity.name",name:"plp.name"},{PageTypeDepend:"Listingpage",method:"DocSorg",selector:"mainEntity.numberOfItems",name:"plp.itemCount"},{PageTypeDepend:"Listingpage",method:"DocSorg",selector:"breadcrumb.itemListElement.*.item.name",name:"view.breadcrumb"},{PageTypeDepend:"*",method:"SingleWT",selector:"favoriteProducts",name:"view.favoritedMPNs"},{PageTypeDepend:"*",method:"SingleWT",selector:"isAdmin",name:"vvsIsShowroom",formatter:"toString"},{PageTypeDepend:"*",method:"SingleWT",selector:"userId",name:"vvsUserId"}],he=function(){var e=t(a().mark((function e(t){var n,r,o,i,s,c,u,l,d,p;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!t){e.next=54;break}e.t0=t,e.next="pageChanged"===e.t0?4:"updateCouponApplicableAmount"===e.t0?9:"updateActiveSKUList"===e.t0?17:53;break;case 4:return e.next=6,ne("PageType",!0,50,1e4);case 6:return(n=e.sent)&&(null!==window.localStorage.getItem(I)&&"purchase"!==n||window.localStorage.setItem(I,0),"purchase"===n?sessionStorage.setItem(k,"{}"):"basket"!==n&&(r=JSON.parse(sessionStorage.getItem(k)))&&te("__SKUsonLastBasketLookup",r)),e.abrupt("break",54);case 9:return e.next=11,ne("cart.couponApplicable",!0,50,500);case 11:if(o=e.sent){e.next=15;break}return window.localStorage.setItem(I,0),e.abrupt("return");case 15:return o>=0&&window.localStorage.setItem(I,o),e.abrupt("break",54);case 17:return e.next=19,ne("PageType",!0,50,1e3);case 19:if("Listingpage"!==(s=e.sent)){e.next=27;break}return e.next=23,ne("plp.skus",!0,50,1e3);case 23:(c=e.sent).length&&(i=c),e.next=39;break;case 27:if("Productpage"!==s){e.next=34;break}return e.next=30,ne("pdp.sku",!0,50,1e3);case 30:(u=e.sent)&&(i=[u]),e.next=39;break;case 34:if("basket"!==s){e.next=39;break}return e.next=37,ne("cart.skus",!0,50,1e3);case 37:(l=e.sent).length&&(i=l);case 39:return i=i.sort(),e.next=42,ne("__SKUsonPage");case 42:if(!(d=e.sent)||!i||d.length!==i.length||d.join("||")!==i.join("||")){e.next=46;break}e.next=52;break;case 46:if(!i){e.next=52;break}return te("__SKUsonPage",i),e.next=50,Se(i);case 50:(p=e.sent)&&(te("__SKUsonPageLookup",p),"basket"===s&&sessionStorage.setItem(k,JSON.stringify(p)));case 52:case 53:return e.abrupt("break",54);case 54:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),ge=function(){var e=t(a().mark((function e(){var t,n,r,o,i,s,c,u,l,d,p,f,h,g,v,m,y,b,w,k,x;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=document.readyState,ee.log("parseSearchPaths initialized with dom status:  "+t),n=window.top,r=n.dataLayer,o=n.document,s=new Set,c=new Set,u=new Set,e.next=10,ne("PageType");case 10:(l=e.sent)&&c.add("PageType"),d=X(fe);try{for(d.s();!(p=d.n()).done;)(f=p.value).isFound&&c.add(f.name)}catch(e){d.e(e)}finally{d.f()}h=X(fe),e.prev=15,h.s();case 17:if((g=h.n()).done){e.next=38;break}if(!(v=g.value).isFound){e.next=21;break}return e.abrupt("continue",36);case 21:if(!s.has(v.name)&&!c.has(v.name)){e.next=24;break}return v.isFound=!0,e.abrupt("continue",36);case 24:if("*"===v.PageTypeDepend){e.next=35;break}if(l){e.next=32;break}return e.next=28,ne("PageType");case 28:if(l=e.sent){e.next=32;break}return u.add(v.name),e.abrupt("continue",36);case 32:if(!(v.PageTypeDepend.indexOf(l)<0)){e.next=35;break}return v.isFound=!0,e.abrupt("continue",36);case 35:if("SingleWT"===v.method)ve(n,v,s,u);else if("GADataLayer"===v.method){m=X(r);try{for(m.s();!(y=m.n()).done;)b=y.value,ve(b,v,s,u)}catch(e){m.e(e)}finally{m.f()}}else if("DocSorg"===v.method){i||(i=ke()),w=X(i);try{for(w.s();!(k=w.n()).done;)x=k.value,ve(x,v,s,u)}catch(e){w.e(e)}finally{w.f()}}else"DocQuery"===v.method&&ve(o,v,s,u);case 36:e.next=17;break;case 38:e.next=43;break;case 40:e.prev=40,e.t0=e.catch(15),h.e(e.t0);case 43:return e.prev=43,h.f(),e.finish(43);case 46:0===u.size?(ie=10,ee.log("parseSearchPaths found all elements - setting retry to max")):0===s.size?("complete"!==t&&"interactive"!==t||(oe*=2,ie+=1),ee.log("parseSearchPaths processed but not found any, setting delay and retry to "+oe+" and "+ie+" for notfound: ["+Array.from(u).join(" | ")+"]")):ee.log("parseSearchPaths processed: notfound: ["+Array.from(u).join(" | ")+"] and found "+s.size);case 47:case"end":return e.stop()}}),e,null,[[15,40,43,46]])})));return function(){return e.apply(this,arguments)}}(),ve=function(e,n,r,o){!function(e,n){var r,o;try{switch(n.operand){case"JSONFilterOther":r=ye(e,n.selector);var i=n.value.split("=");if(2!==i.length)break;var s=i[0],c=i[1];if(!s||!c)break;var u=ye(e,s);if(!u||u!==c)break;r&&(Array.isArray(r)?r.length>0:r.toString().trim().length>0)&&(o=r);break;case"docQueryObserve":if(r=e.querySelector(n.selector)){n.isFound=!0;var l=[];n.children.forEach((function(e){var t=fe.filter((function(t){return t.name===e}));l.push.apply(l,j(t))})),new MutationObserver(t(a().mark((function e(){var t;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:l.forEach((function(e){e.isFound=!1})),t=ie>=10,oe=10,ie=0,t&&(ee.log("searchObj: triggered a restart of searchpaths due: "+n.name),me());case 5:case"end":return e.stop()}}),e)})))).observe(r,{subtree:!0,childList:!0})}break;case"docQueryInnerText":(r=e.querySelector(n.selector))&&r.innerText&&r.innerText.trim().length>0&&(o=r.innerText);break;case"docQueryAttribValueList":var d=[];if(!(r=e.querySelectorAll(n.selector))||0===r.length)break;var p,f=X(r);try{for(f.s();!(p=f.n()).done;){var h=p.value.getAttribute(n.value);h&&d.push(h)}}catch(e){f.e(e)}finally{f.f()}d.length>0&&(o=d);break;case"docQueryHasInnerText":(r=e.querySelector(n.selector))&&(o=(r.innerText.trim().length>0).toString());break;case"docQueryCountElts":(r=e.querySelectorAll(n.selector))&&(o=r.length);break;case"docQueryValueIfHasInnerText":(r=e.querySelector(n.selector))&&r.innerText&&r.innerText.trim().length>0&&(o=n.value);break;case"docQuerySumNumInnerText":if(!(r=e.querySelectorAll(n.selector))||0===r.length)break;var g,v=0,m=X(r);try{for(m.s();!(g=m.n()).done;){var y=g.value.innerText.trim().replace(/\D/g,"");y.length>0&&(v+=parseInt(y))}}catch(e){m.e(e)}finally{m.f()}v>0&&(o=v);break;case"docQueryArrayInnerText":if(!(r=e.querySelectorAll(n.selector))||0===r.length)break;var b,w=[],k=X(r);try{for(k.s();!(b=k.n()).done;){var x=b.value.innerText.trim();x.length>0&&w.push(x)}}catch(e){k.e(e)}finally{k.f()}w.length>0&&(o=w);break;default:null!=(r=ye(e,n.selector))&&(Array.isArray(r)?r.length>0:r.toString().trim().length>0)&&(o=r)}if(o&&(n.formatter&&(o=function(e,t){if(null==e||!t)return null;switch(t){case"upperCaseTR":return e.toString().toUpperCase("tr-TR");case"formatDeliveryDate":return Qe(e);case"numericOnly":return e.replace(/\D/g,"");case"lowerCaseTRFirstWord":return e.toString().toLowerCase("tr-TR").split(" ")[0];case"dearray":return Array.isArray(e)&&e.length>0?e[0]:e;case"toString":return e.toString().trim();default:return e}}(o,n.formatter)),te(n.name,o),n.isFound=!0,n.trigger&&he(n.trigger),n.exclusive&&Array.isArray(n.exclusive)&&n.exclusive.length>0)){var S,I=X(fe);try{for(I.s();!(S=I.n()).done;){var T=S.value;n.exclusive.includes(T.name)&&(T.isFound=!0)}}catch(e){I.e(e)}finally{I.f()}}if(n.isFound)return!0}catch(e){ee.error("searchObj error: "+e)}return!1}(e,n)?o.add(n.name):r.add(n.name)},me=function(){var e=t(a().mark((function e(){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ge();case 2:ie<10?(ee.log("parseSearchPaths: scheduled to be recalled in "+oe+"ms"),setTimeout(me,oe)):(ee.log("parseSearchPaths: reached max retry, calling remainder historical data"),le());case 3:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),ye=function e(t,n){if(!t)return null;if(!n)return null;try{for(var r=n.split("."),a=t,o=0;o<r.length;o++){if(null===a)return null;if("*"===r[o]){var i=r.slice(o+1).join("."),s=[];for(var c in a)if(void 0!==a[c]&&null!==a[c]){var u=e(a[c],i);null!=u&&s.push(u)}return s}a=a[r[o]]}return a}catch(e){return null}},be=function(){var e=t(a().mark((function e(){var t,n,r,o,i,s,c,u,l,d,p,f,g,m,y,b,w,k,x,I,T,L,_,A,D,P,C,O,E,N,j;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:m=window.top,y=m.navigator,b=crypto.randomUUID(),w=sessionStorage.getItem(v),te("v","0.0.29"),te("n","beagle-session_id-".concat(w)),te("vId",b),te("sr",h),k=(null===(t=m.navigator)||void 0===t||null===(n=t.userAgentData)||void 0===n?void 0:n.platform)||(null===(r=m.navigator)||void 0===r?void 0:r.platform)||(null===(o=m.navigator)||void 0===o?void 0:o.userAgent),te("device.navPlatform",k),te("device.windowPRatio",m.devicePixelRatio),x=(null===(i=m.screen)||void 0===i?void 0:i.availWidth)+"x"+(null===(s=m.screen)||void 0===s?void 0:s.availHeight),te("device.windowAvail",x),I=(null===(c=m.screen)||void 0===c?void 0:c.colorDepth)+"-"+(null===(u=m.screen)||void 0===u?void 0:u.pixelDepth),te("device.windowDepth",I),T=(null===(l=m.visualViewport)||void 0===l?void 0:l.width)+"x"+(null===(d=m.visualViewport)||void 0===d?void 0:d.height),te("device.windowVport",T),screen.width&&(L=parseInt(screen.width),_=screen.height?parseInt(screen.height):0,0!==L&&0!==_&&(/iPad|iPhone|iPod/.test(k)&&m.devicePixelRatio?(L=Math.round(L*m.devicePixelRatio),_=Math.round(_*m.devicePixelRatio)):90===Math.abs(m.orientation)&&(A=L,L=_,_=A),te("device.window",L+"x"+_))),te("device.navHistSize",null===(p=m.history)||void 0===p?void 0:p.length),y.userAgent?te("device.navAgent",y.userAgent):y.userAgentData&&(O=null==y||null===(D=y.userAgentData)||void 0===D||null===(P=D.brands)||void 0===P?void 0:P.map((function(e){return e.brand+":"+e.version})).join(),O+=null!=y&&null!==(C=y.userAgentData)&&void 0!==C&&C.mobile?"mobi":" ",te("device.navAgent",O+=k)),te("device.navHWCores",y.hardwareConcurrency),te("device.navLanguage",y.language||y.browserLanguage||y.systemLanguage||y.userLanguage),te("device.navTouch",y.maxTouchPoints),te("device.navVendor",y.vendor),te("device.internetSpeed",null===(f=m.navigator)||void 0===f||null===(g=f.connection)||void 0===g?void 0:g.downlink),E=new URL(window.top.location.href),te("u",E.href),te("d",E.hostname),te("donttrack",y.doNotTrack||m.doNotTrack||y.msDoNotTrack),te("r",m.document.referrer),(N=sessionStorage.getItem(S))?te("fr",N):(sessionStorage.setItem(S,m.document.referrer),te("fr",m.document.referrer)),E.pathname.indexOf("favorilerim.html")>-1?j="favorites":E.pathname.indexOf("siparis-listesi.html")>-1?j="basket":E.pathname.indexOf("siparis-ozeti.html")>-1?j="purchase":E.pathname.indexOf("odeme.html")>-1?j="payment":E.pathname.indexOf("adres-listesi.html")>-1?j="address":E.pathname.indexOf("siparislerim.html")>-1?j="pastorders":E.pathname.indexOf("uye-kayit.html")>-1?j="register":E.pathname.indexOf("uye-girisi.html")>-1?j="signin":E.pathname.indexOf("kuponlarim.html")>-1?j="profile_coupons":E.pathname.indexOf("profil-guncelle.html")>-1?j="profile_info":E.pathname.indexOf("adreslerim.html")>-1?j="profile_addresses":E.pathname.indexOf("duyuru-tercihleri.html")>-1?j="profile_notifications":E.pathname.indexOf("indirimli-mobilya-kampanyalari.html")>-1&&(j="special_campaigns"),j&&te("PageType",j);case 34:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),we=function(){var e=window.top,t={},n=e.performance.getEntriesByType("navigation")[0];e.performance&&n&&(t.connect=Math.round(n.connectEnd-n.connectStart),t.request=Math.round(n.responseEnd-n.requestStart),t.dom=Math.round(n.domComplete-n.domInteractive),t.load=Math.round(n.loadEventEnd-n.loadEventStart),t.duration=Math.round(n.duration)),te("metrics",t)},ke=function(){var e,t=[],n=X(window.top.document.querySelectorAll('[type="application/ld+json"]'));try{for(n.s();!(e=n.n()).done;){var r=e.value;try{var a=r.textContent,o=JSON.parse(a);t.push(o)}catch(e){}}}catch(e){n.e(e)}finally{n.f()}return t},xe=!1,Se=function(){var e=t(a().mark((function e(t){var n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t&&0!==t.length){e.next=3;break}return ee.failed("productInfoLookup: No sku found"),e.abrupt("return",null);case 3:if(!xe){e.next=6;break}return ee.failed("productInfoLookup: Already in progress"),e.abrupt("return",null);case 6:return ee.log("productInfoLookup: Starting product info lookup: "+t),(n=new Headers).append("Content-Type","application/json"),xe=!0,r=null,e.prev=11,e.next=14,fetch("https://catalog-api.adoraai.com",{method:"POST",body:JSON.stringify(t),headers:n,mode:"cors"});case 14:if(!(r=e.sent).ok){e.next=19;break}return e.next=18,r.json();case 18:r=e.sent;case 19:e.next=24;break;case 21:e.prev=21,e.t0=e.catch(11),ee.warn("productInfoLookup: fetch & parse failed");case 24:return xe=!1,e.abrupt("return",r);case 26:case"end":return e.stop()}}),e,null,[[11,21]])})));return function(t){return e.apply(this,arguments)}}();function Ie(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Te(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Te(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function Te(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Le=new C("Beagle Utils"),_e={ocak:0,"şubat":1,mart:2,nisan:3,"mayıs":4,haziran:5,temmuz:6,"ağustos":7,"eylül":8,ekim:9,"kasım":10,"aralık":11};crypto&&"function"==typeof crypto.randomUUID||(crypto.randomUUID=function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(e){return(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)}))});var Ae=function(){window.top.document.documentElement.classList.remove("nextDay-hide")},De=function(){var e=t(a().mark((function e(){var t,n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return Le.log("Fetching treatments"),e.next=3,fetch("https://host-b96.pages.dev/treatments.json");case 3:return t=e.sent,e.next=6,t.json();case 6:return n=e.sent,e.abrupt("return",n);case 8:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),Pe=function(){var e=t(a().mark((function e(){var t,n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return Le.log("Fetching treatment weights"),e.next=3,fetch(l);case 3:return t=e.sent,e.next=6,t.json();case 6:return n=e.sent,e.abrupt("return",n);case 8:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),Ce=function(e,t){if(!e)return null;var n=e.split(";").map((function(e){return e.split("=")})).reduce((function(e,t){return t[0]&&t[1]&&(e[decodeURIComponent(t[0].trim())]=decodeURIComponent(t[1].trim())),e}),{})[t];return n?("_ga"===t&&(n=n.split(".")[2]),n):null},Oe=function(){var e=t(a().mark((function e(t){var n,r,o,i;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,r=8+(n=9),t){e.next=6;break}return e.abrupt("return",-1);case 6:return e.next=8,Ee(t);case 8:return o=e.sent,i=parseInt(o.substring(n,r),16),e.abrupt("return",i%100);case 13:return e.prev=13,e.t0=e.catch(0),Le.failed("Could not map id to hash string",e.t0.message),e.abrupt("return",-1);case 17:case"end":return e.stop()}}),e,null,[[0,13]])})));return function(t){return e.apply(this,arguments)}}(),Ee=function(){var e=t(a().mark((function e(t){var n,r,o;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=(new TextEncoder).encode(t),e.next=3,crypto.subtle.digest("SHA-1",n);case 3:return r=e.sent,o=Array.from(new Uint8Array(r)),e.abrupt("return",o.map((function(e){return e.toString(16).padStart(2,"0")})).join(""));case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Ne=function(e,t){Le.log("Applying style changes",t,"to elements",e);for(var n=0;n<e.length;n++)for(var r=e[n],a=0,o=Object.entries(t);a<o.length;a++){var i=N(o[a],2),s=i[0],c=i[1];r.style[s]=c}},je=function(){var e=t(a().mark((function e(){var t;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(t=window.top.document.createElement("link")).rel="stylesheet",t.type="text/css",t.href=d,window.top.document.head.appendChild(t);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),Re=function(){var e=t(a().mark((function e(t,n,r){var o,i,s,c,u,l,d,p,f,h,g,v,m,y,b,w,k,x,S,I,T;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:o=JSON.parse(JSON.stringify(n)),i=null,s=Ie(o),e.prev=3,s.s();case 5:if((c=s.n()).done){e.next=55;break}if(u=c.value,l=u.businessRuleTransformations,d=u.variants,l||d){e.next=10;break}return e.abrupt("continue",53);case 10:if(r&&l){p=Ie(l);try{for(p.s();!(f=p.n()).done;)if((h=f.value).id===r)for(g in h)"id"!==g&&(u[g]=h[g])}catch(e){p.e(e)}finally{p.f()}}if(!d){e.next=53;break}v=0,m=Object.keys(d);case 13:if(!(v<m.length)){e.next=53;break}return y=m[v],e.next=17,Oe(t+y);case 17:if(!(e.sent<u.variants[y].weight)){e.next=50;break}if(i=y,!r||!d[y].businessRuleTransformations){e.next=48;break}b=Ie(d[y].businessRuleTransformations),e.prev=22,b.s();case 24:if((w=b.n()).done){e.next=38;break}if((k=w.value).id!=r){e.next=36;break}x=0,S=Object.keys(k);case 28:if(!(x<S.length)){e.next=36;break}if("id"!==(I=S[x])){e.next=32;break}return e.abrupt("continue",33);case 32:u[I]=k[I];case 33:x++,e.next=28;break;case 36:e.next=24;break;case 38:e.next=43;break;case 40:e.prev=40,e.t0=e.catch(22),b.e(e.t0);case 43:return e.prev=43,b.f(),e.finish(43);case 46:e.next=49;break;case 48:for(T in d[y])"weight"!==T&&"businessRuleTransformations"!==T&&(u[T]=d[y][T]);case 49:return e.abrupt("break",53);case 50:v++,e.next=13;break;case 53:e.next=5;break;case 55:e.next=60;break;case 57:e.prev=57,e.t1=e.catch(3),s.e(e.t1);case 60:return e.prev=60,s.f(),e.finish(60);case 63:return e.abrupt("return",[o,i]);case 64:case"end":return e.stop()}}),e,null,[[3,57,60,63],[22,40,43,46]])})));return function(t,n,r){return e.apply(this,arguments)}}(),Ge=function(e,t,n){if("notExist"===t)return e?(Le.failed("conditionChecker: -not satisfied- target does exist"),!1):(Le.success("conditionChecker: -satisfied- target does not exist"),!0);if(null==e||null==t)return Le.failed("conditionChecker: runTimeValue or condition is not defined"),!1;switch(t){case"exist":return e?(Le.success("conditionChecker: -satisfied- target does exist"),!0):(Le.failed("conditionChecker: -not satisfied- target does not exist"),!1);case"includes":case"contains":return e.includes(n)?(Le.success("conditionChecker: -satisfied- target contains value"),!0):(Le.failed("conditionChecker: -not satisfied- target does not contain value"),!1);case"notIncludes":case"notContains":return e.includes(n)?(Le.failed("conditionChecker: -not satisfied- target contains value"),!1):(Le.success("conditionChecker: -satisfied- target does not contain value"),!0);case"equal":return e===n?(Le.success("conditionChecker: -satisfied- target equals value"),!0):(Le.failed("conditionChecker: -not satisfied- target does not equal value"),!1);case"notEqual":return e!==n?(Le.success("conditionChecker: -satisfied- target does not equal value"),!0):(Le.failed("conditionChecker: -not satisfied- target equals value"),!1);case"greaterThan":return e>n?(Le.success("conditionChecker: -satisfied- target is greater than value"),!0):(Le.failed("conditionChecker: -not satisfied- target is not greater than value"),!1);case"lessThan":return e<n?(Le.success("conditionChecker: -satisfied- target is less than value"),!0):(Le.failed("conditionChecker: -not satisfied- target is not less than value"),!1);case"greaterEquals":return e>=n?(Le.success("conditionChecker: -satisfied- target is greater or equal than value"),!0):(Le.failed("conditionChecker: -not satisfied- target is not greater or equal than value"),!1);case"lessEquals":return e<=n?(Le.success("conditionChecker: -satisfied- target is less or equal than value"),!0):(Le.failed("conditionChecker: -not satisfied- target is not less or equal than value"),!1);case"between":var r=N(n.split(","),2),a=r[0],o=r[1];return a=parseInt(a),o=parseInt(o),e>=a&&e<=o?(Le.success("conditionChecker: -satisfied- target is between min and max"),!0):(Le.failed("conditionChecker: -not satisfied- target is not between min and max"),!1);case"regex":return new RegExp(n,"i").test(e);default:return Le.failed("conditionChecker: condition is not defined ",t),!1}},Be=function(e){var t=T,n=L,r=window.location.search;if(r.includes("nd_debug=1"))return window.localStorage.setItem(t,1),window.localStorage.setItem(n,e),te("dbm","on"),1;if(r.includes("nd_debug=2"))return window.localStorage.setItem(t,2),window.localStorage.setItem(n,e),te("dbm","on"),2;if(r.includes("nd_debug=0"))return window.localStorage.removeItem(t),window.localStorage.setItem(n,e),te("dbm","off"),0;var a=parseInt(window.localStorage.getItem(t));return te("dbm",a?"on":"off"),a||0},Me=function(){var e=t(a().mark((function e(){var t,n=arguments;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.length>0&&void 0!==n[0]?n[0]:"_ga",e.abrupt("return",new Promise((function(e){var n=window.localStorage.getItem(A);if(n&&e(n),n=Ce(window.top.document.cookie,t))window.localStorage.setItem(A,n),e(n);else{var r=setInterval((function(){(n=Ce(window.top.document.cookie,t))&&(clearInterval(r),window.localStorage.setItem(A,n),e(n))}),10);setTimeout((function(){clearInterval(r),Le.failed("Could not extract cookie identifier"),e(null)}),1e3)}})));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),qe=function(e){return new Promise((function(t){return setTimeout(t,e)}))},Qe=function(e){if(!e||"string"!=typeof e)return e;var t={startMonthIndex:void 0,endMonthIndex:void 0,startDay:void 0,endDay:void 0},n=e.match("([\\d]+)-([\\d]+)\\s?([\\wıüğşöçİÖÇĞÜŞ]+)");if(n&&4===n.length)t.startDay=parseInt(n[1]),t.endDay=parseInt(n[2]),t.startMonthIndex=_e[n[3].toLowerCase()],t.endMonthIndex=t.startMonthIndex;else{if(!(n=e.match("([\\d]+)\\s+([\\wıüğşöçİÖÇĞÜŞ]+)-([\\d]+)\\s+([\\wıüğşöçİÖÇĞÜŞ]+)"))||5!==n.length)return e;t.startDay=parseInt(n[1]),t.startMonthIndex=_e[n[2].toLowerCase()],t.endDay=parseInt(n[3]),t.endMonthIndex=_e[n[4].toLowerCase()]}try{var r=new Date;if(!t.startMonthIndex||!t.endMonthIndex)return e;var a=t.startMonthIndex>=r.getMonth()?r.getFullYear():r.getFullYear()+1,o=t.endMonthIndex>=r.getMonth()?r.getFullYear():r.getFullYear()+1,i=new Date(a,t.startMonthIndex,t.startDay),s=new Date(o,t.endMonthIndex,t.endDay),c=Math.ceil(Math.abs(i-r)/864e5),u=Math.ceil(Math.abs(s-r)/864e5),l=c<7?0:Math.ceil(c/7),d=u<7?0:Math.ceil(u/7);return 0===l&&0===d?"".concat(c," - ").concat(u," Gün"):0===l&&d>=1?"".concat(c," Gün - ").concat(d," Hafta"):l===d?"".concat(l," Hafta"):"".concat(l," - ").concat(d," Hafta")}catch(t){return e}},Ue=function(){var e=t(a().mark((function e(t,n){var r,o;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:o=function(){clearTimeout(r),r=setTimeout(n,t)},r=setTimeout(n,t),window.top.document.ontouchstart=o;case 3:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),Ve=function(){function e(){i(this,e),this.logger=new C("Beagle Monitor"),this.logger.log("Initializing monitor"),this.appliedTreatmentsHash=null,this.appliedTreatmentsChanges=!1,this.eligibleNotAppliedTreatmentsHash=null,this.eligibleNotAppliedTreatmentsChanges=!1,this.headers={type:"text/plain"},this.isLogged=!1,this.initializeExitEventListeners()}var n,r,o;return c(e,[{key:"sendLogs",value:(o=t(a().mark((function e(){var t,n,r,o=this,i=arguments;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=i.length>0&&void 0!==i[0]?i[0]:null,n=i.length>1&&void 0!==i[1]&&i[1],(r=this.logger).log("Sending logs"),"complete"!==window.top.document.readyState?(r.log("Document ready state is not complete"),window.addEventListener("load",(function(){r.log("In onload event"),o.handleQueueLogs(o.packageLogData(t),n)}),!0)):this.handleQueueLogs(this.packageLogData(t),n);case 5:case"end":return e.stop()}}),e,this)}))),function(){return o.apply(this,arguments)})},{key:"handleQueueLogs",value:(r=t(a().mark((function e(t){var n,r,o,i=arguments;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i.length>1&&void 0!==i[1]&&i[1]||!this.isLogged){e.next=3;break}return e.abrupt("return");case 3:if(n=this.logger,t){e.next=7;break}return n.failed("Could not create request blob"),e.abrupt("return");case 7:return n.log("Request blob to send: ",t),this.queueLogs(t),this.isLogged=!0,e.next=12,ne("a");case 12:return r=e.sent,e.next=15,ne("e");case 15:return o=e.sent,e.next=18,Ee(r);case 18:return this.appliedTreatmentsHash=e.sent,e.next=21,Ee(o);case 21:this.eligibleNotAppliedTreatmentsHash=e.sent;case 22:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"updateLatestChanges",value:(n=t(a().mark((function e(){var t,n,r,o;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ne("a");case 2:return t=e.sent,e.next=5,ne("e");case 5:return n=e.sent,e.next=8,Ee(t);case 8:return r=e.sent,e.next=11,Ee(n);case 11:o=e.sent,r!==this.appliedTreatmentsHash&&(this.appliedTreatmentsChanges=!0,this.appliedTreatmentsHash=r),o!==this.eligibleNotAppliedTreatmentsHash&&(this.eligibleNotAppliedTreatmentsChanges=!0,this.eligibleNotAppliedTreatmentsHash=o);case 14:case"end":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:"packageLogData",value:function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=this.headers,n={},r=0,a=Object.entries(window.beagleInfoLayer);r<a.length;r++){var o=N(a[r],2),i=o[0],s=o[1];i.startsWith("_")||(n[i]=s)}return n.t=Date.now(),e?e.startsWith("on-exit")?n.m=e+(Object.keys(n.a||{}).length>0?"treatments applied":"no treatments applied"):n.m=e:Object.keys(n.a||{}).length>0?n.m="Treatments applied":n.m="No treatments applied",new Blob([JSON.stringify(n)],t)}},{key:"packageUpdateLogData",value:function(){var e=this.headers,t=this.appliedTreatmentsChanges,n=this.eligibleNotAppliedTreatmentsChanges;if(!t&&!n)return!1;var r={t:Date.now(),a:t?window.beagleInfoLayer.a:{},e:n?window.beagleInfoLayer.e:{},vId:window.beagleInfoLayer.vId};return new Blob([JSON.stringify(r)],e)}},{key:"initializeExitEventListeners",value:function(){var e=this,t=this.logger,n=!1;t.log("Initializing exit event listener"),window.addEventListener("beforeunload",(function(){if(e.isLogged){if(!n){n=!0,t.log("In beforeunload event");var r=e.packageUpdateLogData();r?e.queueLogs(r):t.log("No changes to log")}}else e.handleQueueLogs(e.packageLogData("on-exit: "))}),{capture:!0}),window.addEventListener("pagehide",(function(){if(e.isLogged){if(!n){n=!0,t.log("In pagehide event");var r=e.packageUpdateLogData();r?e.queueLogs(r):t.log("No changes to log")}}else e.handleQueueLogs(e.packageLogData("on-exit: "))}),{capture:!0})}},{key:"queueLogs",value:function(e){var t=this.logger;if(navigator.sendBeacon&&"function"==typeof navigator.sendBeacon){var n=navigator.sendBeacon(p,e),r=setInterval((function(){n?(clearInterval(r),t.log("Logs queued successfully")):n=navigator.sendBeacon(p,e)}),10);setTimeout((function(){clearInterval(r),n||t.log("Logs not queued")}),1e3)}else fetch(p,e)}}]),e}(),Fe=Ve;function He(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return We(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?We(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function We(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Je=new C("ReplaceUtils"),ze=function(){var e=t(a().mark((function e(t,n){var r,i,s,c,l,d,p,f,h,g,v,m;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!Array.isArray(t)){e.next=27;break}r=He(t.entries()),e.prev=2,r.s();case 4:if((i=r.n()).done){e.next=17;break}if(s=N(i.value,2),c=s[0],l=s[1],"object"!==o(d=Array.isArray(n)?n[c]:n||"")){e.next=14;break}return e.next=10,$e(d);case 10:p=e.sent,t[c]=u(l,"{{REPLACE}}",p),e.next=15;break;case 14:t[c]=Ke(d,l);case 15:e.next=4;break;case 17:e.next=22;break;case 19:e.prev=19,e.t0=e.catch(2),r.e(e.t0);case 22:return e.prev=22,r.f(),e.finish(22);case 25:e.next=61;break;case 27:if(!Array.isArray(n)){e.next=53;break}f=He(n),e.prev=29,f.s();case 31:if((h=f.n()).done){e.next=43;break}if("object"!==o(g=h.value)){e.next=40;break}return e.next=36,$e(g);case 36:v=e.sent,t=t.replace("{{REPLACE}}",v),e.next=41;break;case 40:t=Ke(g,t,!0);case 41:e.next=31;break;case 43:e.next=48;break;case 45:e.prev=45,e.t1=e.catch(29),f.e(e.t1);case 48:return e.prev=48,f.f(),e.finish(48);case 51:e.next=61;break;case 53:if("object"!==o(n)){e.next=60;break}return e.next=56,$e(n);case 56:m=e.sent,t=u(t,"{{REPLACE}}",m),e.next=61;break;case 60:t=Ke(n,t);case 61:return e.abrupt("return",t);case 62:case"end":return e.stop()}}),e,null,[[2,19,22,25],[29,45,48,51]])})));return function(t,n){return e.apply(this,arguments)}}();function Ke(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(e&&t.includes("{{REPLACE}}")){Je.log("Executing replace function: ",e);var r=Function(e);return n?t.replace("{{REPLACE}}",r()):u(t,"{{REPLACE}}",r())}return t}function $e(e){return Ye.apply(this,arguments)}function Ye(){return(Ye=t(a().mark((function e(t){var n,r,o,i,s,c;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=t.storage,r=t.key,o=t.keyFallback,i=t.type,e.t0=n,e.next="session"===e.t0?4:"info-layer"===e.t0?18:26;break;case 4:if(s=null,(s=window.sessionStorage.getItem(r))||(s=window.sessionStorage.getItem(o)),!i){e.next=17;break}e.prev=8,s=(s=JSON.parse(s))[s.length-1][i],e.next=17;break;case 13:return e.prev=13,e.t1=e.catch(8),Je.failed("Could not parse ".concat(s)),e.abrupt("return",null);case 17:return e.abrupt("return",s);case 18:return e.next=20,ne(r);case 20:if(c=e.sent){e.next=25;break}return e.next=24,ne(o);case 24:c=e.sent;case 25:return e.abrupt("return",c);case 26:case"end":return e.stop()}}),e,null,[[8,13]])})))).apply(this,arguments)}var Xe=ze,Ze=new C("ActionConditionUtils"),et=function(e,t){var n=e.attribute,r=e.inner_condition,a=e.operator,o=e.selector,i=e.type,s=e.value;Ze.log("Action condition found: ",e);var c=[];if("productInfoLookup"===i)for(var u=0,l=Array.from(window.top.document.querySelectorAll(o));u<l.length;u++){var d,p,f=l[u],h=f.getAttribute(n),g=null==t||null===(d=t[h])||void 0===d||null===(p=d.catalog)||void 0===p?void 0:p[a];g&&Ge(g,r,s)&&c.push($(f))}return c};function tt(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return nt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?nt(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function nt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function rt(){return rt=t(a().mark((function e(n,r){var o,i,s,c,l,d,p,h,v,m,y,b,k,x;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=new C("Nextday Apply Actions"),i=w,s=r.productInfo,c=function(){var e=t(a().mark((function e(t){var n,r,c,u,l,h,w,k,x,S,I,T,L,_,A,D,P,C,O,E,N,j,R,G,B,M,q,Q,U,V,F,H,W,J,z,K,Y=arguments;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=Y.length>1&&void 0!==Y[1]?Y[1]:null,o.log("Applying action: ",JSON.stringify(t)),r=t.operator,c=t.type,u=t.applyEvent,l=t.contentSelector,h=t.selector,w=t.selectorFallback,k=t.mdCondition,x=t.move_selector_1,S=t.move_selector_2,I=t.replaceFn,T=t.pType,L=t.attribute,"noop"!==r){e.next=6;break}return o.failed("Noop Operator: No operation is applied on target "),e.abrupt("return");case 6:if(_=t.value,n=n?n.find(h):$(h),!k||window.matchMedia(k).matches){e.next=12;break}return o.failed("Media condition mismatch: ",k),e.abrupt("return",!1);case 12:if(!(x&&!S||S&&!x)){e.next=15;break}return o.failed("Both move selectors are required"),e.abrupt("return",!1);case 15:if(!x||!S){e.next=24;break}if($(x).length){e.next=19;break}return o.failed("Move selector 1 not found: ",x),e.abrupt("return",!1);case 19:if($(S).length){e.next=22;break}return o.failed("Move selector 2 not found: ",S),e.abrupt("return",!1);case 22:e.next=39;break;case 24:if(h){e.next=29;break}return o.failed("Selector not specified"),e.abrupt("return",!1);case 29:if(n.length){e.next=39;break}if($(w).length||"remove"!==r){e.next=32;break}return e.abrupt("return");case 32:if("no-selector"===h){e.next=39;break}if(o.failed("Selector not found: ",h),o.log("Trying fallback selector: ",w),w&&(n=$(w)),n.length){e.next=39;break}return o.failed("Fallback selector not found"),e.abrupt("return",!1);case 39:if(!I){e.next=43;break}return e.next=42,Xe(_,I,s);case 42:_=e.sent;case 43:if("remove"!==r){e.next=47;break}n.length?(o.log("Removing: ",h),n.remove()):o.log("Cannot found element with selector: ",h),e.next=199;break;case 47:if("insert"!==r){e.next=106;break}e.t0=c,e.next="before"===e.t0?51:"after"===e.t0?55:"append"===e.t0?58:"modal"===e.t0?61:"popup"===e.t0?66:102;break;case 51:return o.log("Inserting before: ",_),String(_).includes("nd-add-to-win")&&$(".nd-add-to-win").remove(),n.before(_),e.abrupt("break",104);case 55:return o.log("Inserting after: ",_),n.after(_),e.abrupt("break",104);case 58:return o.log("Appending value: ",_),n.append(_),e.abrupt("break",104);case 61:return n.off("click"),y(_,l,!0),(A=document.querySelector(h)).addEventListener("click",(function(e){A==e.target&&e.stopPropagation(),m(_,l)}),!0),e.abrupt("break",104);case 66:if(0===parseInt(sessionStorage.getItem(i))){e.next=69;break}return o.log("Popup already displayed in session"),e.abrupt("break",104);case 69:if(o.log("Creating Popup: ",_),T&&(_=d(s,T,_)),y(_,l),!u){e.next=100;break}D=window.matchMedia(f).matches,P=tt(u),e.prev=75,P.s();case 77:if((C=P.n()).done){e.next=90;break}O=C.value,e.t1=O,e.next="exitIntent"===e.t1?82:"copyIntent"===e.t1?85:88;break;case 82:return o.log("Adding exit intent listener"),D?(window.top.addEventListener("visibilitychange",v),null!==(E=window.beagleInfoLayer)&&void 0!==E&&E.r.includes(null===(N=window.beagleInfoLayer)||void 0===N?void 0:N.d)||window.history&&"function"==typeof window.history.pushState&&("complete"!==window.top.document.readyState?window.top.addEventListener("load",(function(){"bg_limbo"!==window.history.state&&window.history.pushState("bg_limbo",""),window.top.addEventListener("popstate",v,{once:!0})})):("bg_limbo"!==window.history.state&&window.history.pushState("bg_limbo",""),window.top.addEventListener("popstate",v,{once:!0}))),Ue(g,v)):window.top.document.documentElement.addEventListener("mouseleave",v,{once:!0}),e.abrupt("break",88);case 85:return o.log("Adding copy intent listener"),window.top.document.documentElement.addEventListener("copy",v,{once:!0}),e.abrupt("break",88);case 88:e.next=77;break;case 90:e.next=95;break;case 92:e.prev=92,e.t2=e.catch(75),P.e(e.t2);case 95:return e.prev=95,P.f(),e.finish(95);case 98:e.next=101;break;case 100:setTimeout((function(){v()}),timeout);case 101:return e.abrupt("break",104);case 102:return o.failed("Type: ".concat(c," not found for operator: ").concat(r)),e.abrupt("break",104);case 104:e.next=199;break;case 106:if("edit"!==r){e.next=134;break}e.t3=c,e.next="text"===e.t3?110:"html"===e.t3?113:"styleApplicator"===e.t3?116:"addClass"===e.t3?121:"removeClass"===e.t3?124:"documentTitle"===e.t3?127:130;break;case 110:return o.log("Editing text: ",_),n.text(_),e.abrupt("break",132);case 113:return o.log("Editing html: ",_),n.html(_),e.abrupt("break",132);case 116:return o.log("Applying style: ",_),j=JSON.parse(_),o.log("Style Changes Map: ",j),Ne(n,j),e.abrupt("break",132);case 121:return o.log("addding class to ".concat(n," named ").concat(_)),n.addClass(_),e.abrupt("break",132);case 124:return o.log("remove class from ".concat(n," named ").concat(_)),n.removeClass(_),e.abrupt("break",132);case 127:if(o.log("changing document title from ".concat(n," to ").concat(_)),u){R=tt(u);try{for(R.s();!(G=R.n()).done;)"tabChange"==G.value&&function(){o.log("catching event tabchange..");var e=window.top.document.title;window.top.document.addEventListener("visibilitychange",(function(t){return p(t,_,e)}))}()}catch(e){R.e(e)}finally{R.f()}}return e.abrupt("break",132);case 130:return o.log("Unknown edit type: ",c),e.abrupt("break",132);case 132:e.next=199;break;case 134:if("setattribute"!==r){e.next=151;break}o.log("Setting attribute: ",L,_),e.t4=L,e.next="src"===e.t4?139:"style"===e.t4?141:145;break;case 139:return n.css("content","url(".concat(_.trim(),")")),e.abrupt("break",149);case 141:return B=_.split(":")[0].trim(),M=_.split(":")[1].trim(),n.css(B,M,"!important"),e.abrupt("break",149);case 145:return _.includes("function")&&(_=Function(_)),n[L]=_,o.log("Unhandled attribute: Setting attribute: ",L,_),e.abrupt("break",149);case 149:e.next=199;break;case 151:if("replace"!==r){e.next=156;break}o.log("Replacing: ",_),n.replaceAll(_),e.next=199;break;case 156:if("swap"!==r){e.next=163;break}o.log("Swapping: ",x,S),q=window.top.document.querySelector(x),Q=window.top.document.querySelector(S),b(q,Q),e.next=199;break;case 163:if("injectscript"!==r){e.next=168;break}o.log("Injecting script: ",_),n.append("<script>".concat(_,"<\/script>")),e.next=199;break;case 168:if("move"!==r){e.next=176;break}o.log("Moving ".concat(x," to ").concat(S)),U=window.top.document.querySelector(x),V=window.top.document.querySelector(S),U.remove(),V.prepend(U),e.next=199;break;case 176:if("productInfoLookup"!==r){e.next=181;break}F=d(s,T,_),n.before(F),e.next=199;break;case 181:if("text-transform"!==r){e.next=198;break}e.t5=c,e.next="capitalize"===e.t5?185:196;break;case 185:H=0,W=Array.from(n);case 186:if(!(H<W.length)){e.next=195;break}if(K=W[H],null===(J=K.innerText)||void 0===J||!J.includes("\n")){e.next=191;break}return K.innerText=K.innerText.toLowerCase().split("\n").map((function(e){return e.split(" ").map((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})).join(" ")})).join("\n"),e.abrupt("continue",192);case 191:K.innerText=null===(z=K.innerText)||void 0===z?void 0:z.toLowerCase().split(" ").map((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})).join(" ");case 192:H++,e.next=186;break;case 195:return e.abrupt("break",196);case 196:e.next=199;break;case 198:o.failed("No such operator exists yet",r);case 199:case"end":return e.stop()}}),e,null,[[75,92,95,98]])})));return function(t){return e.apply(this,arguments)}}(),l=function(e,t){return e&&t.includes("{{REPLACE_PRODUCTINFO}}")&&(t=u(t,"{{REPLACE_PRODUCTINFO}}",e)),t},d=function(e,t,n){var r=Object.keys(e),a=null;if(!r||0===r.length)return o.log("No sku found"),null;var i=r[0];switch(t){case"transactionIn2Weeks":var s;a=l(null===(s=e[i].catalog.transactionIn2Weeks)||void 0===s?void 0:s.toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."),n),o.log("Replacing transcationIn2Weeks ",e[i].catalog.transactionIn2Weeks);break;case"addToCartIn2Weeks":var c;a=l(null===(c=e[i].catalog.addToCartIn2Weeks)||void 0===c?void 0:c.toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."),n),o.log("Replacing AddToCartCount ",e[i].catalog.addToCartIn2Weeks);break;case"productViewCount":var u;a=l(null===(u=e[i].catalog.productViewCount)||void 0===u?void 0:u.toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."),n),o.log("Replacing productViewCount for",e[i].catalog.productViewCount);break;default:o.failed("no such type found for productInfoLookup operator: "+t)}return a},p=function(){var e=t(a().mark((function e(t,n,r){var o,i,s,c;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:o=Array.isArray(n)?n:[n],i=tt(o),e.prev=2,i.s();case 4:if((s=i.n()).done){e.next=18;break}if(c=s.value,!window.top.document.hidden){e.next=15;break}return window.top.document.title=c,e.next=10,qe(2e3);case 10:return window.top.document.title=r,e.next=13,qe(2e3);case 13:e.next=16;break;case 15:window.top.document.title=r;case 16:e.next=4;break;case 18:e.next=23;break;case 20:e.prev=20,e.t0=e.catch(2),i.e(e.t0);case 23:return e.prev=23,i.f(),e.finish(23);case 26:window.top.document.hidden?p(t,n,r):window.top.document.title=r;case 27:case"end":return e.stop()}}),e,null,[[2,20,23,26]])})));return function(t,n,r){return e.apply(this,arguments)}}(),h=function e(t){var n=t.target.id;n&&"nd-popup__wrapper"===n&&($("#nd-popup__wrapper").remove(),window.removeEventListener("click",e,!0),window.removeEventListener("touchend",e,!0))},v=function e(){if(!(window.top.document.hidden||parseInt(sessionStorage.getItem(i))>0)){sessionStorage.setItem(i,1);var t=window.top.document.querySelector("#grt-shadow-host");t&&(t.style.display="none"),window.top.document.getElementById("nd-popup__wrapper").style.display="block",window.addEventListener("click",h,!0),window.addEventListener("touchend",h,!0),window.top.document.documentElement.removeEventListener("mouseleave",e,{once:!0}),window.top.document.documentElement.removeEventListener("copy",e,{once:!0}),window.top.removeEventListener("visibilitychange",e),window.top.removeEventListener("popstate",e,{once:!0}),setTimeout((function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",h,!0),window.removeEventListener("touchend",h,!0)}),15e3)}},m=function(e,t){if(!window.top.document.hidden){var n=window.top.document.querySelector("#grt-shadow-host");n&&(n.style.display="none"),window.top.document.getElementById("nd-popup__wrapper")||y(e,t,!0),window.top.document.getElementById("nd-popup__wrapper").style.display="block",window.addEventListener("click",h,!0)}},y=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=window.top.document.createElement("div");r.classList.add("nd-popup__wrapper"),r.id="nd-popup__wrapper";var a=window.top.document.createElement("button"),o=n?"nd-popup__button-close__colored":"nd-popup__button-close";if(a.classList.add(o),a.innerText="X",a.onclick=function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",h,!0)},t)for(var i=Array.from(window.top.document.querySelectorAll(t));e.includes("{{REPLACE}}")&&i.length>0;)e=e.replace("{{REPLACE}}",i.shift().src);var s=window.top.document.createElement("template");s.innerHTML=e.trim();var c=s.content.firstChild;c.appendChild(a),r.appendChild(c),$("#nd-popup__wrapper").remove(),window.top.document.body.appendChild(r)},b=function(e,t){var n,r,a=e.parentNode,o=t.parentNode;if(a&&o&&!a.isEqualNode(t)&&!o.isEqualNode(e)){for(var i=0;i<a.children.length;i++)a.children[i].isEqualNode(e)&&(n=i);for(var s=0;s<o.children.length;s++)o.children[s].isEqualNode(t)&&(r=s);a.isEqualNode(o)&&n<r&&r++,a.insertBefore(t,a.children[n]),o.insertBefore(e,o.children[r])}},k=function(){var e=t(a().mark((function e(n){var r,i,u,l,d,p,f,h;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(window.jQuery){e.next=4;break}setTimeout(t(a().mark((function e(){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,k(n);case 2:case"end":return e.stop()}}),e)}))),10),e.next=56;break;case 4:r=tt(n),e.prev=5,r.s();case 7:if((i=r.n()).done){e.next=48;break}if(u=i.value,e.prev=9,l=!1,!u.condition){e.next=35;break}d=et(u.condition,s),p=tt(d),e.prev=14,p.s();case 16:if((f=p.n()).done){e.next=25;break}return h=f.value,e.next=20,c(u,h);case 20:if(!1!==(l=e.sent)){e.next=23;break}return e.abrupt("return",!1);case 23:e.next=16;break;case 25:e.next=30;break;case 27:e.prev=27,e.t0=e.catch(14),p.e(e.t0);case 30:return e.prev=30,p.f(),e.finish(30);case 33:e.next=38;break;case 35:return e.next=37,c(u);case 37:l=e.sent;case 38:if(!1!==l){e.next=40;break}return e.abrupt("return",!1);case 40:e.next=46;break;case 42:return e.prev=42,e.t1=e.catch(9),o.failed("Couldn't apply action ".concat(u," with error ").concat(e.t1.message)),e.abrupt("return",e.t1);case 46:e.next=7;break;case 48:e.next=53;break;case 50:e.prev=50,e.t2=e.catch(5),r.e(e.t2);case 53:return e.prev=53,r.f(),e.finish(53);case 56:case"end":return e.stop()}}),e,null,[[5,50,53,56],[9,42],[14,27,30,33]])})));return function(t){return e.apply(this,arguments)}}(),e.next=15,k(n);case 15:return x=e.sent,e.abrupt("return",x);case 17:case"end":return e.stop()}}),e)}))),rt.apply(this,arguments)}var at=function(e,t){return rt.apply(this,arguments)},ot=new C("Beagle Counter Checker"),it=function(e){ot.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"pageView":return ct(n,r);case"CABasketPrice":return ut(n,r);default:return ot.failed("No such operator",t),!1}},st=function(e,t){try{switch(t){case"session":return sessionStorage.getItem(e);case"local":return localStorage.getItem(e);default:return ot.failed("No such type",t),null}}catch(t){return ot.failed("Could not get counter ".concat(e),t),null}},ct=function(e,t){var n=parseInt(st(b,"session"));return ot.log("Page views counter value: ",n),null===n?(ot.failed("Pageviews counter not found in session storage"),!1):Ge(n,e,parseInt(t))},ut=function(e,t){var n=parseInt(st(I,"local"));return ot.log("Coupon applicable basket price counter value: ",n),null===n?(ot.failed("Coupon applicable basket price counter not found in local storage"),!1):Ge(n,e,parseInt(t))},lt=new C("Beagle DataLayer Checker"),dt=function(){var e=t(a().mark((function e(t){var n,r,o,i;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return lt.log("Checking rule",JSON.stringify(t)),n=t.operator,r=t.condition,o=t.value,e.next=4,pt(n);case 4:return i=e.sent,e.abrupt("return",Ge(i,r,o));case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),pt=function(){var e=t(a().mark((function e(t){var n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return lt.log("Searching beagleInfoLayer for key ",t),e.next=3,ne(t,!0,10,1e3);case 3:if(!(n=e.sent)){e.next=7;break}return lt.success("Found key ".concat(t," with value ").concat(n)),e.abrupt("return",n);case 7:return lt.failed("Key ".concat(t," not found in beagleInfoLayer")),e.abrupt("return",null);case 9:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),ft=new C("Beagle Element Checker"),ht=function(e){ft.log("Checking rule",JSON.stringify(e));var t,n=e.operator,r=e.condition,a=e.value,o=e.selector,i=e.selectorAll,s=e.selectorFallback,c=void 0===s?null:s,u=o;if(u&&!window.top.document.querySelector(u)&&(u=c||u),null===n)return Ge(window.top.document.querySelector(u),r,a);if(u&&!window.top.document.querySelector(u))return ft.failed("Selector not found on page"),!1;if(i&&!window.top.document.querySelectorAll(i))return ft.failed("Selector not found on page"),!1;switch(u?t=window.top.document.querySelector(u):i&&(t=Array.from(window.top.document.querySelectorAll(i))),n){case"text-number":var l;l=Array.isArray(t)?t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0):parseInt(window.top.document.querySelector(u).textContent.replace("TL","").replace(".",""));var d=parseInt(l);return Ge(d,r,a);case"classList":return Ge(Array.from(t.classList),r,a);case"count":return Array.isArray(t)&&t.length>0?Ge(t.length,r,a):Ge(t?1:0,r,a);case"style":var p=getComputedStyle(t),f=a.split(":")[0].trim(),h=a.split(":")[1].trim(),g=p[f];return Ge(g,r,h);default:return ft.failed("Operator not defined"),!1}},gt=new C("Beagle Function Checker"),vt=function(e,t){gt.log("Checking rule",JSON.stringify(e));var n=t.productInfo,r=e.operator,a=e.condition,o=e.value,i=e.bindings;if(!r)return gt.failed("Rule function not defined"),!1;var s={};"productInfo"==i&&(s={productInfo:n});var c=Function(r).bind(s)();return Ge(c,a,o)},mt=new C("Beagle Session Checker"),yt=function(e){mt.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"duration":return bt(n,r);case"history":return wt(n,r);default:return null}},bt=function(e,t){var n=(Date.now()-function(){try{return new Date(parseInt(window.sessionStorage.getItem(m)))}catch(e){return mt.failed("Could not get session timestamp",e),Date.now()}}())/1e3;return Ge(n,e,parseInt(t))},wt=function(e,t){var n,r=null===(n=window.sessionStorage.getItem(y))||void 0===n?void 0:n.split(",");return Ge(r,e,t)},kt=new C("Beagle Url Checker"),xt=function(e){kt.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("path"===t){var a=window.top.location.href,o=new URL(a).pathname;return kt.log("Checking path ".concat(o," matches rule path ").concat(r)),Ge(o,n,r)}return null},St=new C("Beagle Env Checker"),It=function(e){St.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("device_type"===t){var a=window.matchMedia(f).matches?"mobile":"desktop";return Ge(a,n,r)}return null},Tt=new C("Beagle RandomPct Checker"),Lt=function(){var e=t(a().mark((function e(t){var n,r,o,i,s,c;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Tt.log("Checking rule",JSON.stringify(t)),n=t.condition,r=t.value,o=t.salt){e.next=5;break}return Tt.failed("Salt is not defined"),e.abrupt("return",!1);case 5:return e.next=7,Me();case 7:return i=e.sent,e.next=10,Oe(i+o);case 10:return s=e.sent,c=s,e.abrupt("return",Ge(c,n,r));case 13:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),_t=new C("Beagle ProductInfo Checker"),At=function(e,t){var n;_t.log("Checking rule",JSON.stringify(e));var r=e.operator,a=e.condition,i=e.value,s=t.productInfo;if(!s||"object"===o(s)&&!Object.keys(s).length)return!1;var c=null,u=null===(n=s[Object.keys(s)[0]])||void 0===n?void 0:n.id;switch(r){case"transactionIn2Weeks":_t.log("Getting TransactionCount for sku ",u),c=Dt(u,s);break;case"addToCartIn2Weeks":_t.log("Getting AddToCartCount for sku ",u),c=Pt(u,s);break;case"productViewCount":_t.log("Getting productViewCount for sku ",u),c=Ct(u,s)}return Ge(c,a,i)},Dt=function(e,t){var n,r;return e&&t&&t[e]?null===(n=t[e])||void 0===n||null===(r=n.catalog)||void 0===r?void 0:r.transactionIn2Weeks:-1},Pt=function(e,t){var n,r;return e&&t&&t[e]?null===(n=t[e])||void 0===n||null===(r=n.catalog)||void 0===r?void 0:r.addToCartIn2Weeks:-1},Ct=function(e,t){var n,r;return e&&t&&t[e]?null===(n=t[e])||void 0===n||null===(r=n.catalog)||void 0===r?void 0:r.productViewCount:-1};function Ot(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Et(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Et(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function Et(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Nt=new C("Beagle Rule Engine"),jt=function(){function e(t){i(this,e);var n=t.baseRuleSet,r=t.businessRuleSet,a=t.bindings,o=t.callback,s=void 0===o?null:o;this.baseRuleSet=n,this.businessRuleSet=r,this.callback=s,this.bindings=a}var n,r,o;return c(e,[{key:"checkRules",value:(o=t(a().mark((function e(){var t,n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=Ot(this.baseRuleSet),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=12;break}return r=n.value,e.next=7,this.checkRule(r);case 7:if(e.sent){e.next=10;break}return e.abrupt("return",!1);case 10:e.next=3;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(1),t.e(e.t0);case 17:return e.prev=17,t.f(),e.finish(17);case 20:return e.abrupt("return",!0);case 21:case"end":return e.stop()}}),e,this,[[1,14,17,20]])}))),function(){return o.apply(this,arguments)})},{key:"checkBusinessRules",value:(r=t(a().mark((function e(){var t,n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=Ot(this.businessRuleSet),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=12;break}return r=n.value,e.next=7,this.checkRule(r);case 7:if(!e.sent){e.next=10;break}return e.abrupt("return",r.businessRuleId);case 10:e.next=3;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(1),t.e(e.t0);case 17:return e.prev=17,t.f(),e.finish(17);case 20:return e.abrupt("return",null);case 21:case"end":return e.stop()}}),e,this,[[1,14,17,20]])}))),function(){return r.apply(this,arguments)})},{key:"checkRule",value:(n=t(a().mark((function e(t){var n,r,o,i;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=t.chain,r=t.chain_condition,o=t.type,i=null,e.t0=o,e.next="session"===e.t0?5:"counter"===e.t0?7:"element"===e.t0?9:"dataLayer"===e.t0?11:"url"===e.t0?15:"function"===e.t0?17:"environment"===e.t0?19:"random"===e.t0?21:"productInfoLookup"===e.t0?25:27;break;case 5:return i=yt(t),e.abrupt("break",29);case 7:return i=it(t),e.abrupt("break",29);case 9:return i=ht(t),e.abrupt("break",29);case 11:return e.next=13,dt(t);case 13:return i=e.sent,e.abrupt("break",29);case 15:return i=xt(t),e.abrupt("break",29);case 17:return i=vt(t,this.bindings),e.abrupt("break",29);case 19:return i=It(t),e.abrupt("break",29);case 21:return e.next=23,Lt(t);case 23:return i=e.sent,e.abrupt("break",29);case 25:return i=At(t,this.bindings),e.abrupt("break",29);case 27:return Nt.failed("No such rule type: ".concat(o)),e.abrupt("return",null);case 29:if(!n){e.next=55;break}e.t1=r,e.next="and"===e.t1?33:"or"===e.t1?40:"xor"===e.t1?47:53;break;case 33:if(e.t2=i,!e.t2){e.next=38;break}return e.next=37,this.checkRule(n);case 37:e.t2=e.sent;case 38:return i=e.t2,e.abrupt("break",55);case 40:if(e.t3=i,e.t3){e.next=45;break}return e.next=44,this.checkRule(n);case 44:e.t3=e.sent;case 45:return i=e.t3,e.abrupt("break",55);case 47:return e.t4=i,e.next=50,this.checkRule(n);case 50:return e.t5=e.sent,i=e.t4!=e.t5,e.abrupt("break",55);case 53:return Nt.failed("No such chain condition"),e.abrupt("break",55);case 55:return e.abrupt("return",i);case 56:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})}]),e}(),Rt=new C("SegmentationComputer");function Gt(e){return Bt.apply(this,arguments)}function Bt(){return(Bt=t(a().mark((function e(t){var n,r,o,i,s,c;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:Rt.log("Determining user segment"),n=0,r=Object.keys(t);case 2:if(!(n<r.length)){e.next=17;break}if(i=r[n],s=null===(o=t[i])||void 0===o?void 0:o.ruleSet){e.next=7;break}return e.abrupt("continue",14);case 7:return c=new jt({baseRuleSet:s,businessRuleSet:[],bindings:null}),e.next=10,c.checkRules();case 10:if(!e.sent){e.next=14;break}return Rt.log("User segment matched: ".concat(i)),te("s",i),e.abrupt("return",i);case 14:n++,e.next=2;break;case 17:return Rt.log("User segment not matched, returning default"),e.abrupt("return","default");case 19:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Mt(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return qt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?qt(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function qt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Qt=new C("Beagle Treatment Repository"),Ut=function(){function e(t){i(this,e);var n=t.treatments,r=t.treatmentWeights;this.treatments=n,this.treatmentWeights=r}var n,r,o;return c(e,[{key:"getMatchedTreatments",value:(o=t(a().mark((function e(){var t,n,r,o,i,s,c,u,l,d,p,f,h,g,v,m;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=this.treatmentWeights,e.next=3,Gt(t);case 3:if(n=e.sent,r=this.treatments,!t){e.next=43;break}o=n&&t[n]?t[n]:t.default,i=Mt(r),e.prev=8,i.s();case 10:if((s=i.n()).done){e.next=35;break}if((u=s.value).weight=(null===(c=o[null==u?void 0:u.id])||void 0===c?void 0:c.weight)||0,u.actions.some((function(e){return e.variants}))){e.next=15;break}return e.abrupt("continue",33);case 15:l=Mt(u.actions),e.prev=16,l.s();case 18:if((d=l.n()).done){e.next=25;break}if((p=d.value).variants){e.next=22;break}return e.abrupt("continue",23);case 22:for(f=0,h=Object.keys(p.variants);f<h.length;f++)m=h[f],null!==(g=o[u.id])&&void 0!==g&&g.variants&&null!==(v=o[u.id])&&void 0!==v&&v.variants[m]&&(p.variants[m].weight=o[u.id].variants[m]);case 23:e.next=18;break;case 25:e.next=30;break;case 27:e.prev=27,e.t0=e.catch(16),l.e(e.t0);case 30:return e.prev=30,l.f(),e.finish(30);case 33:e.next=10;break;case 35:e.next=40;break;case 37:e.prev=37,e.t1=e.catch(8),i.e(e.t1);case 40:return e.prev=40,i.f(),e.finish(40);case 43:if(Qt.log("".concat(r.length," treatments user group matched")),r.length){e.next=46;break}return e.abrupt("return",[]);case 46:return e.abrupt("return",r);case 47:case"end":return e.stop()}}),e,this,[[8,37,40,43],[16,27,30,33]])}))),function(){return o.apply(this,arguments)})}],[{key:"getTreatments",value:(r=t(a().mark((function e(){var t,n,r,o,i,s;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Qt.log("Loading treatments"),t="BG_Treatments",n=JSON.parse(window.sessionStorage.getItem(t)),r=null==n?void 0:n.treatments,o=null==n?void 0:n.timestamp,r&&o){e.next=13;break}return Qt.failed("Treatments not found in local storage"),e.next=9,De();case 9:return r=e.sent,i={timestamp:Date.now(),treatments:r},window.sessionStorage.setItem(t,JSON.stringify(i)),e.abrupt("return",r);case 13:if(!o){e.next=23;break}if(!((Date.now()-o)/864e5>1)){e.next=23;break}return Qt.failed("Treatments are expired"),e.next=19,De();case 19:return r=e.sent,s={timestamp:Date.now(),treatments:r},window.sessionStorage.setItem(t,JSON.stringify(s)),e.abrupt("return",r);case 23:return Qt.success("Treatments are loaded from local storage"),e.abrupt("return",r);case 25:case"end":return e.stop()}}),e)}))),function(){return r.apply(this,arguments)})},{key:"getTreatmentWeights",value:(n=t(a().mark((function e(){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,Pe();case 3:return e.abrupt("return",e.sent);case 6:e.prev=6,e.t0=e.catch(0),Qt.warn(e.t0.message),this.treatmentWeights=null;case 10:case"end":return e.stop()}}),e,this,[[0,6]])}))),function(){return n.apply(this,arguments)})}]),e}(),Vt=Ut;function Ft(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Ht(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ht(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function Ht(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Wt=new C("BeagleOnComponent"),Jt=function(){var e=t(a().mark((function e(n,r,o,i,s){var c,u,l,d,p,h,g,k,x,S,I,T,L,_,A,D,P,C,O,E,R;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return R=function(){return R=t(a().mark((function e(t){var r,c,u,l,f,h,g,v,m,y,b,w,k,x,S,I,_,A,D,P,C,O,E,N,R;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.id,c=t.actions,u=t.baseRuleSet,l=t.device,f=t.dependant_on_treatment,h=t.reapply_event,g=t.reapply_event_page_type,v=t.businessRuleSet,m=t.weight,y=t.delay,b=t.productInfoStorage,1===o||m){e.next=3;break}return e.abrupt("return");case 3:if(!o||!d||d.includes(r)){e.next=5;break}return e.abrupt("return");case 5:if("mobile"!==l||p){e.next=8;break}return Wt.failed("Treatment device 'mobile' mismatch"),e.abrupt("return");case 8:if("desktop"!==l||!p){e.next=11;break}return Wt.failed("Treatment device 'desktop' mismatch"),e.abrupt("return");case 11:if(h&&(!g||g===i)){w=h,Array.isArray(h)||(w=[h]),Wt.log("Reapply event '".concat(h,"' found for treatment: ").concat(r)),k=Ft(w);try{for(k.s();!(x=k.n()).done;)S=x.value,(I=L[S]?L[S]:[]).includes(r)?Wt.log("Treatment already added for reapply event"):L[S]=[].concat(j(I),[r])}catch(e){k.e(e)}finally{k.f()}}if(_=s,"basket"===i||"basket"!==b){e.next=17;break}return e.next=16,ne("__SKUsonLastBasketLookup",!0,5,250);case 16:_=e.sent;case 17:if(D=new jt({baseRuleSet:u,businessRuleSet:v,bindings:A={productInfo:_}}),Wt.log("Starting base rule set check for treatment: "+r),e.t0=!u,e.t0){e.next=25;break}return e.next=24,D.checkRules();case 24:e.t0=e.sent;case 25:if(!e.t0){e.next=58;break}if(P=100===m?0:100-m||50,f&&(O=null===(C=T.find((function(e){return e.id===f})))||void 0===C?void 0:C.weight,P=100===O?0:100-O||50),Wt.log("Treatment skip ratio: "+P),E=f||r,1!==o){e.next=34;break}e.t1=100,e.next=37;break;case 34:return e.next=36,Oe(n+E);case 36:e.t1=e.sent;case 37:if(N=e.t1,Wt.log("TreatmentPct: "+N+" with debug mode ".concat(o?"on":"off")),R=null,!v){e.next=46;break}return Wt.log("Starting sub variant rule set check for treatment: "+r),e.next=44,D.checkBusinessRules();case 44:(R=e.sent)?Wt.log("Applying business rule transformation with id: ",R):Wt.log("Applying treatment with default values");case 46:if(!(N<P)){e.next=50;break}return Wt.log("Treatment ".concat(r," skipped due to treatment split ratio")),ae(r,R,null,"skipped",f),e.abrupt("return");case 50:if(y){e.next=55;break}return e.next=53,Kt(r,n,c,R,A);case 53:e.next=56;break;case 55:setTimeout((function(){Kt(r,n,c,R,A)}),y);case 56:e.next=59;break;case 58:Wt.failed("Rule check failed for treatment: ",r);case 59:case"end":return e.stop()}}),e)}))),R.apply(this,arguments)},E=function(e){return R.apply(this,arguments)},c=Vt.getTreatments(),u=Vt.getTreatmentWeights(),je(),void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,G=b,B=w,M=v,q=m,Q=y,U=sessionStorage.getItem(G),V=sessionStorage.getItem(B),F=sessionStorage.getItem(M),H=sessionStorage.getItem(q),W=sessionStorage.getItem(Q),U?sessionStorage.setItem(G,parseInt(U)+1):sessionStorage.setItem(G,1),null===V&&sessionStorage.setItem(B,0),F||sessionStorage.setItem(M,crypto.randomUUID()),H||sessionStorage.setItem(q,Date.now()),W?sessionStorage.setItem(Q,[window.location.pathname,W]):sessionStorage.setItem(Q,[window.location.pathname]),l=window.location.search,d=null,o&&l.includes("filter=")&&(d=l.slice(l.indexOf("[")+1,l.lastIndexOf("]")).split(",").map((function(e){return parseInt(e,10)}))),setTimeout((function(){Ae()}),2e3),p=window.matchMedia(f).matches,h={subtree:!0,childList:!0,attributes:!0},e.next=14,Promise.all([c,u]);case 14:return g=e.sent,k=N(g,2),x=k[0],S=k[1],Wt.success("Found treatments: ",x),I=new Vt({treatments:x,treatmentWeights:S}),e.next=22,I.getMatchedTreatments();case 22:if((T=e.sent).length){e.next=27;break}return Wt.log("No treatments matched, returning without further action"),Ae(),e.abrupt("return");case 27:L={},_=Ft(T),e.prev=29,_.s();case 31:if((A=_.n()).done){e.next=43;break}return D=A.value,e.prev=33,e.next=36,E(D);case 36:e.next=41;break;case 38:e.prev=38,e.t0=e.catch(33),Wt.failed("Error executing rules",e.t0);case 41:e.next=31;break;case 43:e.next=48;break;case 45:e.prev=45,e.t1=e.catch(29),_.e(e.t1);case 48:return e.prev=48,_.f(),e.finish(48);case 51:return Ae(),e.t2=Wt,e.next=55,ne("a");case 55:for(e.t3=e.sent,e.t2.success.call(e.t2,"Applied treatments: ",e.t3),setInterval((function(){r.updateLatestChanges()}),1e3),P=function(){var e=O[C],n=L[e],r=T.filter((function(e){return n.includes(e.id)}));switch(e){case"infinite_scroll":var o=new ResizeObserver((function(){var e,t=Ft(r);try{for(t.s();!(e=t.n()).done;){var n=e.value;Wt.log("Retrying treatment ".concat(n.id," from infinite_scroll")),E(n)}}catch(e){t.e(e)}finally{t.f()}}));o.observe(window.top.document.documentElement);break;case"timeout":setTimeout((function(){var e,t=Ft(r);try{for(t.s();!(e=t.n()).done;){var n=e.value;Wt.log("Retrying treatment ".concat(n.id," from timeout")),E(n)}}catch(e){t.e(e)}finally{t.f()}}),500);break;case"element_change":var i,s=Ft(r);try{var c=function(){var e,t=i.value,n=Ft(Array.isArray(t.reapply_selector)?t.reapply_selector:[t.reapply_selector]);try{for(n.s();!(e=n.n()).done;){var r=e.value,a=window.top.document.querySelector(r);a&&new MutationObserver((function(){Wt.log("Retrying treatment ".concat(t.id," from element_change")),E(t)})).observe(a,h)}}catch(e){n.e(e)}finally{n.f()}};for(s.s();!(i=s.n()).done;)c()}catch(e){s.e(e)}finally{s.f()}break;case"on_scroll":window.onscroll=function(){var e,t=Ft(r);try{for(t.s();!(e=t.n()).done;){var n=e.value;Wt.log("Retrying treatment ".concat(n.id," from on_scroll")),E(n)}}catch(e){t.e(e)}finally{t.f()}};break;case"query_search_change":var u=window.location.search,l=new MutationObserver((function(){if(window.location.search!==u){u=window.location.search;var e,t=Ft(r);try{for(t.s();!(e=t.n()).done;){var n=e.value;Wt.log("Retrying treatment ".concat(n.id," from query_search_change")),E(n)}}catch(e){t.e(e)}finally{t.f()}}}));l.observe(document,h);break;case"interval":var d,p=Ft(r);try{var f=function(){var e=d.value,n=setInterval(t(a().mark((function t(){var r;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return Wt.log("Retrying treatment ".concat(e.id," from interval")),t.next=3,E(e);case 3:return t.next=5,ne("a",!0);case 5:null!=(r=t.sent)&&r[e.id]&&(clearInterval(n),L.interval=L.interval.filter((function(t){return t!==e.id})));case 7:case"end":return t.stop()}}),t)}))),50)};for(p.s();!(d=p.n()).done;)f()}catch(e){p.e(e)}finally{p.f()}break;default:Wt.failed("Reapply event not found: ",e)}},C=0,O=Object.keys(L);C<O.length;C++)P();case 60:case"end":return e.stop()}var G,B,M,q,Q,U,V,F,H,W}),e,null,[[29,45,48,51],[33,38]])})));return function(t,n,r,a,o){return e.apply(this,arguments)}}(),zt=Jt;function Kt(e,t,n,r,a){return $t.apply(this,arguments)}function $t(){return($t=t(a().mark((function e(t,n,r,o,i){var s,c,u,l,d;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Re(n,r,o);case 2:return s=e.sent,c=N(s,2),u=c[0],l=c[1],e.next=8,at(u,i);case 8:d=e.sent,ae(t,o,l,!1===d?"failed":"applied");case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}t(a().mark((function e(){var t,n,r,o,i,s,c,u,l,d,p,f,g;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=null,(n=new C).info("Beagle initializing"),window.dataLayer=window.dataLayer||[],e.prev=4,se(),t=new Fe,e.next=9,Me();case 9:return o=e.sent,n.log("Found cookie identifier: ",o),te("cookieGaId",o),e.next=14,Oe(o);case 14:if(i=e.sent,te("onHashPct",i),s=window.localStorage.getItem(L),-1!==i&&navigator.sendBeacon&&"function"==typeof navigator.sendBeacon&&"function"==typeof(null==String||null===(r=String.prototype)||void 0===r?void 0:r.padStart)&&(!s||"unsupported"!==s)){e.next=22;break}throw window.dataLayer.push({event:"GLOV",GLOV_ON:"unsupported"}),window.localStorage.setItem(L,"unsupported"),te("GLOV_ON","unsupported | device"),new Error("Device does not have required capabilities");case 22:if(c=window.localStorage.getItem(_),u=parseInt(sessionStorage.getItem(x))||0,(l=Be("employee"))||s||c||!(u>1)){e.next=29;break}throw window.dataLayer.push({event:"GLOV",GLOV_ON:"unsupported"}),te("GLOV_ON","unsupported | timeout"),new Error("Beagle timeout threshold reached");case 29:return e.next=31,ne("vvsIsShowroom",!0);case 31:if(!(d=e.sent)||"true"!==d){e.next=39;break}throw window.dataLayer.push({event:"GLOV",GLOV_ON:"employee"}),window.localStorage.setItem(L,"employee"),te("GLOV_ON","employee | showroom"),new Error("User is from VVS showroom/callcenter");case 39:if(null!=d){e.next=42;break}throw te("GLOV_ON","not-sent | timeout"),new Error("Could not determine if user is from VVS showroom/callcenter");case 42:if(window.top.document.documentElement.classList.contains("nextDay-hide")){e.next=46;break}throw sessionStorage.setItem(x,u+1),te("GLOV_ON","not-sent | timeout"),new Error("Beagle script timed out");case 46:if(p=null,!l){e.next=54;break}n.info("Debug mode on: all applicable treatments will be applied"),p=!0,window.dataLayer.push({event:"GLOV",GLOV_ON:"employee"}),te("GLOV_ON","employee | tester"),e.next=71;break;case 54:if(!s||"employee"!==s){e.next=61;break}n.warn("User is out of scope"),p=i>=h,window.dataLayer.push({event:"GLOV",GLOV_ON:"employee"}),te("GLOV_ON","employee | tester"),e.next=71;break;case 61:if(!s){e.next=66;break}throw te("GLOV_ON","unknown"),new Error("Unknown out of scope reason");case 66:te("isOn",p=i>=h),window.localStorage.setItem(_,!0),window.dataLayer.push({event:"GLOV",GLOV_ON:p.toString()}),te("GLOV_ON",p.toString());case 71:if(!1!==p){e.next=73;break}throw new Error("Control group: no treatments applied");case 73:return n.log("Found cookie percentage: ",i),n.log("Split_ratio: ",h),n.log("cookiePct < SPLIT_RATIO",i<h),n.info("Control group ratio: ".concat(h,"%")),e.next=79,ne("PageType",!0);case 79:if("purchase"!==(f=e.sent)){e.next=85;break}return e.next=83,ne("purchase.revenue",!0,10,500);case 83:return e.next=85,ne("purchase.paymentType",!0,10,500);case 85:if(t.sendLogs(),g=null,!["Listingpage","Productpage","basket","purchase"].includes(f)){e.next=91;break}return e.next=90,ne("__SKUsonPageLookup",!0,10,500);case 90:g=e.sent;case 91:zt(o,t,l,f,g),e.next=107;break;case 94:return e.prev=94,e.t0=e.catch(4),n.warn("Beagle alternate path: ",e.t0.message),e.next=99,ne("PageType",!0);case 99:if("purchase"!==e.sent){e.next=105;break}return e.next=103,ne("purchase.revenue",!0,10,500);case 103:return e.next=105,ne("purchase.paymentType",!0,10,500);case 105:t.sendLogs(e.t0.message,!0),Ae();case 107:case"end":return e.stop()}}),e,null,[[4,94]])})))()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJ1Q0FBQUEsRUFBT0MsUUFBVSxFQUFqQixNLGdCQ09BLElBQUlDLEVBQVcsU0FBVUQsR0FDdkIsYUFFQSxJQUVJRSxFQUZBQyxFQUFLQyxPQUFPQyxVQUNaQyxFQUFTSCxFQUFHSSxlQUVaQyxFQUE0QixtQkFBWEMsT0FBd0JBLE9BQVMsR0FDbERDLEVBQWlCRixFQUFRRyxVQUFZLGFBQ3JDQyxFQUFzQkosRUFBUUssZUFBaUIsa0JBQy9DQyxFQUFvQk4sRUFBUU8sYUFBZSxnQkFFL0MsU0FBU0MsRUFBT0MsRUFBS0MsRUFBS0MsR0FPeEIsT0FOQWYsT0FBT2dCLGVBQWVILEVBQUtDLEVBQUssQ0FDOUJDLE1BQU9BLEVBQ1BFLFlBQVksRUFDWkMsY0FBYyxFQUNkQyxVQUFVLElBRUxOLEVBQUlDLEdBRWIsSUFFRUYsRUFBTyxHQUFJLElBQ1gsTUFBT1EsR0FDUFIsRUFBUyxTQUFTQyxFQUFLQyxFQUFLQyxHQUMxQixPQUFPRixFQUFJQyxHQUFPQyxHQUl0QixTQUFTTSxFQUFLQyxFQUFTQyxFQUFTQyxFQUFNQyxHQUVwQyxJQUFJQyxFQUFpQkgsR0FBV0EsRUFBUXRCLHFCQUFxQjBCLEVBQVlKLEVBQVVJLEVBQy9FQyxFQUFZNUIsT0FBTzZCLE9BQU9ILEVBQWV6QixXQUN6QzZCLEVBQVUsSUFBSUMsRUFBUU4sR0FBZSxJQU16QyxPQUZBRyxFQUFVSSxRQXVNWixTQUEwQlYsRUFBU0UsRUFBTU0sR0FDdkMsSUFBSUcsRUFBUUMsRUFFWixPQUFPLFNBQWdCQyxFQUFRQyxHQUM3QixHQUFJSCxJQUFVSSxFQUNaLE1BQU0sSUFBSUMsTUFBTSxnQ0FHbEIsR0FBSUwsSUFBVU0sRUFBbUIsQ0FDL0IsR0FBZSxVQUFYSixFQUNGLE1BQU1DLEVBS1IsT0FBT0ksSUFNVCxJQUhBVixFQUFRSyxPQUFTQSxFQUNqQkwsRUFBUU0sSUFBTUEsSUFFRCxDQUNYLElBQUlLLEVBQVdYLEVBQVFXLFNBQ3ZCLEdBQUlBLEVBQVUsQ0FDWixJQUFJQyxFQUFpQkMsRUFBb0JGLEVBQVVYLEdBQ25ELEdBQUlZLEVBQWdCLENBQ2xCLEdBQUlBLElBQW1CRSxFQUFrQixTQUN6QyxPQUFPRixHQUlYLEdBQXVCLFNBQW5CWixFQUFRSyxPQUdWTCxFQUFRZSxLQUFPZixFQUFRZ0IsTUFBUWhCLEVBQVFNLFNBRWxDLEdBQXVCLFVBQW5CTixFQUFRSyxPQUFvQixDQUNyQyxHQUFJRixJQUFVQyxFQUVaLE1BREFELEVBQVFNLEVBQ0ZULEVBQVFNLElBR2hCTixFQUFRaUIsa0JBQWtCakIsRUFBUU0sU0FFTixXQUFuQk4sRUFBUUssUUFDakJMLEVBQVFrQixPQUFPLFNBQVVsQixFQUFRTSxLQUduQ0gsRUFBUUksRUFFUixJQUFJWSxFQUFTQyxFQUFTNUIsRUFBU0UsRUFBTU0sR0FDckMsR0FBb0IsV0FBaEJtQixFQUFPRSxLQUFtQixDQU81QixHQUpBbEIsRUFBUUgsRUFBUXNCLEtBQ1piLEVBQ0FjLEVBRUFKLEVBQU9iLE1BQVFRLEVBQ2pCLFNBR0YsTUFBTyxDQUNMN0IsTUFBT2tDLEVBQU9iLElBQ2RnQixLQUFNdEIsRUFBUXNCLE1BR1MsVUFBaEJILEVBQU9FLE9BQ2hCbEIsRUFBUU0sRUFHUlQsRUFBUUssT0FBUyxRQUNqQkwsRUFBUU0sSUFBTWEsRUFBT2IsT0EvUVBrQixDQUFpQmhDLEVBQVNFLEVBQU1NLEdBRTdDRixFQWNULFNBQVNzQixFQUFTSyxFQUFJMUMsRUFBS3VCLEdBQ3pCLElBQ0UsTUFBTyxDQUFFZSxLQUFNLFNBQVVmLElBQUttQixFQUFHQyxLQUFLM0MsRUFBS3VCLElBQzNDLE1BQU9oQixHQUNQLE1BQU8sQ0FBRStCLEtBQU0sUUFBU2YsSUFBS2hCLElBaEJqQ3hCLEVBQVF5QixLQUFPQSxFQW9CZixJQUFJYSxFQUF5QixpQkFDekJtQixFQUF5QixpQkFDekJoQixFQUFvQixZQUNwQkUsRUFBb0IsWUFJcEJLLEVBQW1CLEdBTXZCLFNBQVNqQixLQUNULFNBQVM4QixLQUNULFNBQVNDLEtBSVQsSUFBSUMsRUFBb0IsR0FDeEIvQyxFQUFPK0MsRUFBbUJyRCxHQUFnQixXQUN4QyxPQUFPc0QsUUFHVCxJQUFJQyxFQUFXN0QsT0FBTzhELGVBQ2xCQyxFQUEwQkYsR0FBWUEsRUFBU0EsRUFBU0csRUFBTyxNQUMvREQsR0FDQUEsSUFBNEJoRSxHQUM1QkcsRUFBT3NELEtBQUtPLEVBQXlCekQsS0FHdkNxRCxFQUFvQkksR0FHdEIsSUFBSUUsRUFBS1AsRUFBMkJ6RCxVQUNsQzBCLEVBQVUxQixVQUFZRCxPQUFPNkIsT0FBTzhCLEdBWXRDLFNBQVNPLEVBQXNCakUsR0FDN0IsQ0FBQyxPQUFRLFFBQVMsVUFBVWtFLFNBQVEsU0FBU2hDLEdBQzNDdkIsRUFBT1gsRUFBV2tDLEdBQVEsU0FBU0MsR0FDakMsT0FBT3dCLEtBQUs1QixRQUFRRyxFQUFRQyxTQWtDbEMsU0FBU2dDLEVBQWN4QyxFQUFXeUMsR0FDaEMsU0FBU0MsRUFBT25DLEVBQVFDLEVBQUttQyxFQUFTQyxHQUNwQyxJQUFJdkIsRUFBU0MsRUFBU3RCLEVBQVVPLEdBQVNQLEVBQVdRLEdBQ3BELEdBQW9CLFVBQWhCYSxFQUFPRSxLQUVKLENBQ0wsSUFBSXNCLEVBQVN4QixFQUFPYixJQUNoQnJCLEVBQVEwRCxFQUFPMUQsTUFDbkIsT0FBSUEsR0FDaUIsaUJBQVZBLEdBQ1BiLEVBQU9zRCxLQUFLekMsRUFBTyxXQUNkc0QsRUFBWUUsUUFBUXhELEVBQU0yRCxTQUFTQyxNQUFLLFNBQVM1RCxHQUN0RHVELEVBQU8sT0FBUXZELEVBQU93RCxFQUFTQyxNQUM5QixTQUFTcEQsR0FDVmtELEVBQU8sUUFBU2xELEVBQUttRCxFQUFTQyxNQUkzQkgsRUFBWUUsUUFBUXhELEdBQU80RCxNQUFLLFNBQVNDLEdBSTlDSCxFQUFPMUQsTUFBUTZELEVBQ2ZMLEVBQVFFLE1BQ1AsU0FBU0ksR0FHVixPQUFPUCxFQUFPLFFBQVNPLEVBQU9OLEVBQVNDLE1BdkJ6Q0EsRUFBT3ZCLEVBQU9iLEtBNEJsQixJQUFJMEMsRUFnQ0psQixLQUFLNUIsUUE5QkwsU0FBaUJHLEVBQVFDLEdBQ3ZCLFNBQVMyQyxJQUNQLE9BQU8sSUFBSVYsR0FBWSxTQUFTRSxFQUFTQyxHQUN2Q0YsRUFBT25DLEVBQVFDLEVBQUttQyxFQUFTQyxNQUlqQyxPQUFPTSxFQWFMQSxFQUFrQkEsRUFBZ0JILEtBQ2hDSSxFQUdBQSxHQUNFQSxLQWtIVixTQUFTcEMsRUFBb0JGLEVBQVVYLEdBQ3JDLElBQUlLLEVBQVNNLEVBQVNsQyxTQUFTdUIsRUFBUUssUUFDdkMsR0FBSUEsSUFBV3JDLEVBQVcsQ0FLeEIsR0FGQWdDLEVBQVFXLFNBQVcsS0FFSSxVQUFuQlgsRUFBUUssT0FBb0IsQ0FFOUIsR0FBSU0sRUFBU2xDLFNBQWlCLFNBRzVCdUIsRUFBUUssT0FBUyxTQUNqQkwsRUFBUU0sSUFBTXRDLEVBQ2Q2QyxFQUFvQkYsRUFBVVgsR0FFUCxVQUFuQkEsRUFBUUssUUFHVixPQUFPUyxFQUlYZCxFQUFRSyxPQUFTLFFBQ2pCTCxFQUFRTSxJQUFNLElBQUk0QyxVQUNoQixrREFHSixPQUFPcEMsRUFHVCxJQUFJSyxFQUFTQyxFQUFTZixFQUFRTSxFQUFTbEMsU0FBVXVCLEVBQVFNLEtBRXpELEdBQW9CLFVBQWhCYSxFQUFPRSxLQUlULE9BSEFyQixFQUFRSyxPQUFTLFFBQ2pCTCxFQUFRTSxJQUFNYSxFQUFPYixJQUNyQk4sRUFBUVcsU0FBVyxLQUNaRyxFQUdULElBQUlxQyxFQUFPaEMsRUFBT2IsSUFFbEIsT0FBTTZDLEVBT0ZBLEVBQUs3QixNQUdQdEIsRUFBUVcsRUFBU3lDLFlBQWNELEVBQUtsRSxNQUdwQ2UsRUFBUXFELEtBQU8xQyxFQUFTMkMsUUFRRCxXQUFuQnRELEVBQVFLLFNBQ1ZMLEVBQVFLLE9BQVMsT0FDakJMLEVBQVFNLElBQU10QyxHQVVsQmdDLEVBQVFXLFNBQVcsS0FDWkcsR0FORXFDLEdBM0JQbkQsRUFBUUssT0FBUyxRQUNqQkwsRUFBUU0sSUFBTSxJQUFJNEMsVUFBVSxvQ0FDNUJsRCxFQUFRVyxTQUFXLEtBQ1pHLEdBb0RYLFNBQVN5QyxFQUFhQyxHQUNwQixJQUFJQyxFQUFRLENBQUVDLE9BQVFGLEVBQUssSUFFdkIsS0FBS0EsSUFDUEMsRUFBTUUsU0FBV0gsRUFBSyxJQUdwQixLQUFLQSxJQUNQQyxFQUFNRyxXQUFhSixFQUFLLEdBQ3hCQyxFQUFNSSxTQUFXTCxFQUFLLElBR3hCMUIsS0FBS2dDLFdBQVdDLEtBQUtOLEdBR3ZCLFNBQVNPLEVBQWNQLEdBQ3JCLElBQUl0QyxFQUFTc0MsRUFBTVEsWUFBYyxHQUNqQzlDLEVBQU9FLEtBQU8sZ0JBQ1BGLEVBQU9iLElBQ2RtRCxFQUFNUSxXQUFhOUMsRUFHckIsU0FBU2xCLEVBQVFOLEdBSWZtQyxLQUFLZ0MsV0FBYSxDQUFDLENBQUVKLE9BQVEsU0FDN0IvRCxFQUFZMEMsUUFBUWtCLEVBQWN6QixNQUNsQ0EsS0FBS29DLE9BQU0sR0E4QmIsU0FBU2hDLEVBQU9pQyxHQUNkLEdBQUlBLEVBQVUsQ0FDWixJQUFJQyxFQUFpQkQsRUFBUzNGLEdBQzlCLEdBQUk0RixFQUNGLE9BQU9BLEVBQWUxQyxLQUFLeUMsR0FHN0IsR0FBNkIsbUJBQWxCQSxFQUFTZCxLQUNsQixPQUFPYyxFQUdULElBQUtFLE1BQU1GLEVBQVNHLFFBQVMsQ0FDM0IsSUFBSUMsR0FBSyxFQUFHbEIsRUFBTyxTQUFTQSxJQUMxQixPQUFTa0IsRUFBSUosRUFBU0csUUFDcEIsR0FBSWxHLEVBQU9zRCxLQUFLeUMsRUFBVUksR0FHeEIsT0FGQWxCLEVBQUtwRSxNQUFRa0YsRUFBU0ksR0FDdEJsQixFQUFLL0IsTUFBTyxFQUNMK0IsRUFPWCxPQUhBQSxFQUFLcEUsTUFBUWpCLEVBQ2JxRixFQUFLL0IsTUFBTyxFQUVMK0IsR0FHVCxPQUFPQSxFQUFLQSxLQUFPQSxHQUt2QixNQUFPLENBQUVBLEtBQU0zQyxHQUlqQixTQUFTQSxJQUNQLE1BQU8sQ0FBRXpCLE1BQU9qQixFQUFXc0QsTUFBTSxHQStNbkMsT0E3bUJBSyxFQUFrQnhELFVBQVl5RCxFQUM5QjlDLEVBQU9xRCxFQUFJLGNBQWVQLEdBQzFCOUMsRUFBTzhDLEVBQTRCLGNBQWVELEdBQ2xEQSxFQUFrQjZDLFlBQWMxRixFQUM5QjhDLEVBQ0FoRCxFQUNBLHFCQWFGZCxFQUFRMkcsb0JBQXNCLFNBQVNDLEdBQ3JDLElBQUlDLEVBQXlCLG1CQUFYRCxHQUF5QkEsRUFBT0UsWUFDbEQsUUFBT0QsSUFDSEEsSUFBU2hELEdBRzJCLHVCQUFuQ2dELEVBQUtILGFBQWVHLEVBQUtFLFFBSWhDL0csRUFBUWdILEtBQU8sU0FBU0osR0FRdEIsT0FQSXhHLE9BQU82RyxlQUNUN0csT0FBTzZHLGVBQWVMLEVBQVE5QyxJQUU5QjhDLEVBQU9NLFVBQVlwRCxFQUNuQjlDLEVBQU80RixFQUFROUYsRUFBbUIsc0JBRXBDOEYsRUFBT3ZHLFVBQVlELE9BQU82QixPQUFPb0MsR0FDMUJ1QyxHQU9UNUcsRUFBUW1ILE1BQVEsU0FBUzNFLEdBQ3ZCLE1BQU8sQ0FBRXNDLFFBQVN0QyxJQXNFcEI4QixFQUFzQkUsRUFBY25FLFdBQ3BDVyxFQUFPd0QsRUFBY25FLFVBQVdPLEdBQXFCLFdBQ25ELE9BQU9vRCxRQUVUaEUsRUFBUXdFLGNBQWdCQSxFQUt4QnhFLEVBQVFvSCxNQUFRLFNBQVMxRixFQUFTQyxFQUFTQyxFQUFNQyxFQUFhNEMsUUFDeEMsSUFBaEJBLElBQXdCQSxFQUFjNEMsU0FFMUMsSUFBSUMsRUFBTyxJQUFJOUMsRUFDYi9DLEVBQUtDLEVBQVNDLEVBQVNDLEVBQU1DLEdBQzdCNEMsR0FHRixPQUFPekUsRUFBUTJHLG9CQUFvQmhGLEdBQy9CMkYsRUFDQUEsRUFBSy9CLE9BQU9SLE1BQUssU0FBU0YsR0FDeEIsT0FBT0EsRUFBT3JCLEtBQU9xQixFQUFPMUQsTUFBUW1HLEVBQUsvQixXQXVLakRqQixFQUFzQkQsR0FFdEJyRCxFQUFPcUQsRUFBSXZELEVBQW1CLGFBTzlCRSxFQUFPcUQsRUFBSTNELEdBQWdCLFdBQ3pCLE9BQU9zRCxRQUdUaEQsRUFBT3FELEVBQUksWUFBWSxXQUNyQixNQUFPLHdCQWtDVHJFLEVBQVF1SCxLQUFPLFNBQVNDLEdBQ3RCLElBQUlELEVBQU8sR0FDWCxJQUFLLElBQUlyRyxLQUFPc0csRUFDZEQsRUFBS3RCLEtBQUsvRSxHQU1aLE9BSkFxRyxFQUFLRSxVQUlFLFNBQVNsQyxJQUNkLEtBQU9nQyxFQUFLZixRQUFRLENBQ2xCLElBQUl0RixFQUFNcUcsRUFBS0csTUFDZixHQUFJeEcsS0FBT3NHLEVBR1QsT0FGQWpDLEVBQUtwRSxNQUFRRCxFQUNicUUsRUFBSy9CLE1BQU8sRUFDTCtCLEVBUVgsT0FEQUEsRUFBSy9CLE1BQU8sRUFDTCtCLElBc0NYdkYsRUFBUW9FLE9BQVNBLEVBTWpCakMsRUFBUTlCLFVBQVksQ0FDbEJ5RyxZQUFhM0UsRUFFYmlFLE1BQU8sU0FBU3VCLEdBY2QsR0FiQTNELEtBQUs0RCxLQUFPLEVBQ1o1RCxLQUFLdUIsS0FBTyxFQUdadkIsS0FBS2YsS0FBT2UsS0FBS2QsTUFBUWhELEVBQ3pCOEQsS0FBS1IsTUFBTyxFQUNaUSxLQUFLbkIsU0FBVyxLQUVoQm1CLEtBQUt6QixPQUFTLE9BQ2R5QixLQUFLeEIsSUFBTXRDLEVBRVg4RCxLQUFLZ0MsV0FBV3pCLFFBQVEyQixJQUVuQnlCLEVBQ0gsSUFBSyxJQUFJWixLQUFRL0MsS0FFUSxNQUFuQitDLEVBQUtjLE9BQU8sSUFDWnZILEVBQU9zRCxLQUFLSSxLQUFNK0MsS0FDakJSLE9BQU9RLEVBQUtlLE1BQU0sTUFDckI5RCxLQUFLK0MsR0FBUTdHLElBTXJCNkgsS0FBTSxXQUNKL0QsS0FBS1IsTUFBTyxFQUVaLElBQ0l3RSxFQURZaEUsS0FBS2dDLFdBQVcsR0FDTEcsV0FDM0IsR0FBd0IsVUFBcEI2QixFQUFXekUsS0FDYixNQUFNeUUsRUFBV3hGLElBR25CLE9BQU93QixLQUFLaUUsTUFHZDlFLGtCQUFtQixTQUFTK0UsR0FDMUIsR0FBSWxFLEtBQUtSLEtBQ1AsTUFBTTBFLEVBR1IsSUFBSWhHLEVBQVU4QixLQUNkLFNBQVNtRSxFQUFPQyxFQUFLQyxHQVluQixPQVhBaEYsRUFBT0UsS0FBTyxRQUNkRixFQUFPYixJQUFNMEYsRUFDYmhHLEVBQVFxRCxLQUFPNkMsRUFFWEMsSUFHRm5HLEVBQVFLLE9BQVMsT0FDakJMLEVBQVFNLElBQU10QyxLQUdObUksRUFHWixJQUFLLElBQUk1QixFQUFJekMsS0FBS2dDLFdBQVdRLE9BQVMsRUFBR0MsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUlkLEVBQVEzQixLQUFLZ0MsV0FBV1MsR0FDeEJwRCxFQUFTc0MsRUFBTVEsV0FFbkIsR0FBcUIsU0FBakJSLEVBQU1DLE9BSVIsT0FBT3VDLEVBQU8sT0FHaEIsR0FBSXhDLEVBQU1DLFFBQVU1QixLQUFLNEQsS0FBTSxDQUM3QixJQUFJVSxFQUFXaEksRUFBT3NELEtBQUsrQixFQUFPLFlBQzlCNEMsRUFBYWpJLEVBQU9zRCxLQUFLK0IsRUFBTyxjQUVwQyxHQUFJMkMsR0FBWUMsRUFBWSxDQUMxQixHQUFJdkUsS0FBSzRELEtBQU9qQyxFQUFNRSxTQUNwQixPQUFPc0MsRUFBT3hDLEVBQU1FLFVBQVUsR0FDekIsR0FBSTdCLEtBQUs0RCxLQUFPakMsRUFBTUcsV0FDM0IsT0FBT3FDLEVBQU94QyxFQUFNRyxpQkFHakIsR0FBSXdDLEdBQ1QsR0FBSXRFLEtBQUs0RCxLQUFPakMsRUFBTUUsU0FDcEIsT0FBT3NDLEVBQU94QyxFQUFNRSxVQUFVLE9BRzNCLEtBQUkwQyxFQU1ULE1BQU0sSUFBSTdGLE1BQU0sMENBTGhCLEdBQUlzQixLQUFLNEQsS0FBT2pDLEVBQU1HLFdBQ3BCLE9BQU9xQyxFQUFPeEMsRUFBTUcsZ0JBVTlCMUMsT0FBUSxTQUFTRyxFQUFNZixHQUNyQixJQUFLLElBQUlpRSxFQUFJekMsS0FBS2dDLFdBQVdRLE9BQVMsRUFBR0MsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUlkLEVBQVEzQixLQUFLZ0MsV0FBV1MsR0FDNUIsR0FBSWQsRUFBTUMsUUFBVTVCLEtBQUs0RCxNQUNyQnRILEVBQU9zRCxLQUFLK0IsRUFBTyxlQUNuQjNCLEtBQUs0RCxLQUFPakMsRUFBTUcsV0FBWSxDQUNoQyxJQUFJMEMsRUFBZTdDLEVBQ25CLE9BSUE2QyxJQUNVLFVBQVRqRixHQUNTLGFBQVRBLElBQ0RpRixFQUFhNUMsUUFBVXBELEdBQ3ZCQSxHQUFPZ0csRUFBYTFDLGFBR3RCMEMsRUFBZSxNQUdqQixJQUFJbkYsRUFBU21GLEVBQWVBLEVBQWFyQyxXQUFhLEdBSXRELE9BSEE5QyxFQUFPRSxLQUFPQSxFQUNkRixFQUFPYixJQUFNQSxFQUVUZ0csR0FDRnhFLEtBQUt6QixPQUFTLE9BQ2R5QixLQUFLdUIsS0FBT2lELEVBQWExQyxXQUNsQjlDLEdBR0ZnQixLQUFLeUUsU0FBU3BGLElBR3ZCb0YsU0FBVSxTQUFTcEYsRUFBUTBDLEdBQ3pCLEdBQW9CLFVBQWhCMUMsRUFBT0UsS0FDVCxNQUFNRixFQUFPYixJQWNmLE1BWG9CLFVBQWhCYSxFQUFPRSxNQUNTLGFBQWhCRixFQUFPRSxLQUNUUyxLQUFLdUIsS0FBT2xDLEVBQU9iLElBQ00sV0FBaEJhLEVBQU9FLE1BQ2hCUyxLQUFLaUUsS0FBT2pFLEtBQUt4QixJQUFNYSxFQUFPYixJQUM5QndCLEtBQUt6QixPQUFTLFNBQ2R5QixLQUFLdUIsS0FBTyxPQUNhLFdBQWhCbEMsRUFBT0UsTUFBcUJ3QyxJQUNyQy9CLEtBQUt1QixLQUFPUSxHQUdQL0MsR0FHVDBGLE9BQVEsU0FBUzVDLEdBQ2YsSUFBSyxJQUFJVyxFQUFJekMsS0FBS2dDLFdBQVdRLE9BQVMsRUFBR0MsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUlkLEVBQVEzQixLQUFLZ0MsV0FBV1MsR0FDNUIsR0FBSWQsRUFBTUcsYUFBZUEsRUFHdkIsT0FGQTlCLEtBQUt5RSxTQUFTOUMsRUFBTVEsV0FBWVIsRUFBTUksVUFDdENHLEVBQWNQLEdBQ1AzQyxJQUtiLE1BQVMsU0FBUzRDLEdBQ2hCLElBQUssSUFBSWEsRUFBSXpDLEtBQUtnQyxXQUFXUSxPQUFTLEVBQUdDLEdBQUssSUFBS0EsRUFBRyxDQUNwRCxJQUFJZCxFQUFRM0IsS0FBS2dDLFdBQVdTLEdBQzVCLEdBQUlkLEVBQU1DLFNBQVdBLEVBQVEsQ0FDM0IsSUFBSXZDLEVBQVNzQyxFQUFNUSxXQUNuQixHQUFvQixVQUFoQjlDLEVBQU9FLEtBQWtCLENBQzNCLElBQUlvRixFQUFTdEYsRUFBT2IsSUFDcEIwRCxFQUFjUCxHQUVoQixPQUFPZ0QsR0FNWCxNQUFNLElBQUlqRyxNQUFNLDBCQUdsQmtHLGNBQWUsU0FBU3ZDLEVBQVVmLEVBQVlFLEdBYTVDLE9BWkF4QixLQUFLbkIsU0FBVyxDQUNkbEMsU0FBVXlELEVBQU9pQyxHQUNqQmYsV0FBWUEsRUFDWkUsUUFBU0EsR0FHUyxTQUFoQnhCLEtBQUt6QixTQUdQeUIsS0FBS3hCLElBQU10QyxHQUdOOEMsSUFRSmhELEVBOXNCSyxDQXF0QmlCRCxFQUFPQyxTQUd0QyxJQUNFNkksbUJBQXFCNUksRUFDckIsTUFBTzZJLEdBV21CLGlCQUFmQyxXQUNUQSxXQUFXRixtQkFBcUI1SSxFQUVoQytJLFNBQVMsSUFBSyx5QkFBZEEsQ0FBd0MvSSxNQzl1QnhDZ0osRUFBMkIsR0FHL0IsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQmpKLElBQWpCa0osRUFDSCxPQUFPQSxFQUFhcEosUUFHckIsSUFBSUQsRUFBU2tKLEVBQXlCRSxHQUFZLENBR2pEbkosUUFBUyxJQU9WLE9BSEFxSixFQUFvQkYsR0FBVXBKLEVBQVFBLEVBQU9DLFFBQVNrSixHQUcvQ25KLEVBQU9DLFFDcEJma0osRUFBb0JJLEVBQUksU0FBU3ZKLEdBQ2hDLElBQUl3SixFQUFTeEosR0FBVUEsRUFBT3lKLFdBQzdCLFdBQWEsT0FBT3pKLEVBQWdCLFNBQ3BDLFdBQWEsT0FBT0EsR0FFckIsT0FEQW1KLEVBQW9CTyxFQUFFRixFQUFRLENBQUVHLEVBQUdILElBQzVCQSxHQ0xSTCxFQUFvQk8sRUFBSSxTQUFTekosRUFBUzJKLEdBQ3pDLElBQUksSUFBSXpJLEtBQU95SSxFQUNYVCxFQUFvQlUsRUFBRUQsRUFBWXpJLEtBQVNnSSxFQUFvQlUsRUFBRTVKLEVBQVNrQixJQUM1RWQsT0FBT2dCLGVBQWVwQixFQUFTa0IsRUFBSyxDQUFFRyxZQUFZLEVBQU13SSxJQUFLRixFQUFXekksTUNKM0VnSSxFQUFvQlUsRUFBSSxTQUFTM0ksRUFBSzZJLEdBQVEsT0FBTzFKLE9BQU9DLFVBQVVFLGVBQWVxRCxLQUFLM0MsRUFBSzZJLEksd0JDQS9GLFNBQVNDLEVBQW1CQyxFQUFLckYsRUFBU0MsRUFBUXFGLEVBQU9DLEVBQVFoSixFQUFLc0IsR0FDcEUsSUFDRSxJQUFJNkMsRUFBTzJFLEVBQUk5SSxHQUFLc0IsR0FDaEJyQixFQUFRa0UsRUFBS2xFLE1BQ2pCLE1BQU84RCxHQUVQLFlBREFMLEVBQU9LLEdBSUxJLEVBQUs3QixLQUNQbUIsRUFBUXhELEdBRVJrRyxRQUFRMUMsUUFBUXhELEdBQU80RCxLQUFLa0YsRUFBT0MsR0FJeEIsU0FBU0MsRUFBa0J4RyxHQUN4QyxPQUFPLFdBQ0wsSUFBSS9CLEVBQU9vQyxLQUNQb0csRUFBT0MsVUFDWCxPQUFPLElBQUloRCxTQUFRLFNBQVUxQyxFQUFTQyxHQUNwQyxJQUFJb0YsRUFBTXJHLEVBQUcyRyxNQUFNMUksRUFBTXdJLEdBRXpCLFNBQVNILEVBQU05SSxHQUNiNEksRUFBbUJDLEVBQUtyRixFQUFTQyxFQUFRcUYsRUFBT0MsRUFBUSxPQUFRL0ksR0FHbEUsU0FBUytJLEVBQU8xSSxHQUNkdUksRUFBbUJDLEVBQUtyRixFQUFTQyxFQUFRcUYsRUFBT0MsRUFBUSxRQUFTMUksR0FHbkV5SSxPQUFNL0osTyxzQkMvQkcsU0FBU3FLLEVBQVF0SixHQUc5QixPQUFPc0osRUFBVSxtQkFBcUI5SixRQUFVLGlCQUFtQkEsT0FBT0UsU0FBVyxTQUFVTSxHQUM3RixjQUFjQSxHQUNaLFNBQVVBLEdBQ1osT0FBT0EsR0FBTyxtQkFBcUJSLFFBQVVRLEVBQUk2RixjQUFnQnJHLFFBQVVRLElBQVFSLE9BQU9KLFVBQVksZ0JBQWtCWSxHQUN2SHNKLEVBQVF0SixHQ1BFLFNBQVN1SixFQUFnQkMsRUFBVUMsR0FDaEQsS0FBTUQsYUFBb0JDLEdBQ3hCLE1BQU0sSUFBSXRGLFVBQVUscUNDRnhCLFNBQVN1RixFQUFrQkMsRUFBUUMsR0FDakMsSUFBSyxJQUFJcEUsRUFBSSxFQUFHQSxFQUFJb0UsRUFBTXJFLE9BQVFDLElBQUssQ0FDckMsSUFBSXFFLEVBQWFELEVBQU1wRSxHQUN2QnFFLEVBQVd6SixXQUFheUosRUFBV3pKLGFBQWMsRUFDakR5SixFQUFXeEosY0FBZSxFQUN0QixVQUFXd0osSUFBWUEsRUFBV3ZKLFVBQVcsR0FDakRuQixPQUFPZ0IsZUFBZXdKLEVBQVFFLEVBQVc1SixJQUFLNEosSUFJbkMsU0FBU0MsRUFBYUwsRUFBYU0sRUFBWUMsR0FNNUQsT0FMSUQsR0FBWUwsRUFBa0JELEVBQVlySyxVQUFXMkssR0FDckRDLEdBQWFOLEVBQWtCRCxFQUFhTyxHQUNoRDdLLE9BQU9nQixlQUFlc0osRUFBYSxZQUFhLENBQzlDbkosVUFBVSxJQUVMbUosRUNoQkYsSUFBTVEsRUFBYSxTQUFDQyxFQUFLQyxHQUF1QixJQUFqQkMsRUFBaUIsdURBQVAsR0FDOUMsSUFBS0YsRUFBSyxNQUFPLEdBRWpCLElBQU1HLEVBQVFILEVBQUlJLFFBQVFILEdBQzFCLEdBQUlFLEVBQVEsRUFBRyxPQUFPSCxFQUV0QixLQUFPQSxFQUFJSSxRQUFRSCxJQUFTLEdBQUcsQ0FDN0IsSUFBTUUsRUFBUUgsRUFBSUksUUFBUUgsR0FDMUJELEdBQU9HLEVBQVEsRUFBSUgsRUFBSUssVUFBVSxFQUFHRixHQUFTLElBQU1ELEVBQVVGLEVBQUlLLFVBQVVGLEVBQVFGLEVBQUs1RSxRQUcxRixPQUFPMkUsR0NMSU0sRUFBNkJDLE9BQU9DLFNBQVNDLEtBQUtDLFNBQVMsbUJBQXFCLGlEQUFtRCx5Q0FDbklDLEVBQXNCSixPQUFPQyxTQUFTQyxLQUFLQyxTQUFTLG1CQUFxQixrREFBbkQscURBQXFKWCxHQUFXLElBQUlhLE1BQU9DLGNBQWNSLFVBQVUsRUFBRyxJQUFJSCxRQUFRLElBQUssSUFBSyxJQUFLLEtBQ3ZQWSxFQUFjLGdFQUVkQyxFQUFxQixxQkFFckJDLEVBQWMsR0FRZEMsRUFBZSxLQUVmQyxFQUNDLHNCQUREQSxFQUVRLHNCQUZSQSxFQUdNLG9CQUhOQSxFQUtDLGVBTERBLEVBTVMsc0JBTlRBLEVBT00sdUJBUE5BLEVBUUksa0JBUkpBLEVBU08scUJBRVBDLEVBQ3FCLG1CQURyQkEsRUFFQyxXQUZEQSxFQUdHLGdCQUhIQSxFQUlJLGVBSkpBLEVBS0YsWUFMRUEsRUFNZ0Isd0JDdEN2QkMsRUFBQUEsV0FDSixhQUEwQyxJQUE5QkMsRUFBOEIsdURBQXJCLG9CQUFxQixVQUN4Q3hJLEtBQUt3SSxPQUFTQSxFQUNkeEksS0FBS3lJLE1BQVFmLE9BQU9nQixhQUFhQyxRQUFRTCxHLDhCQUczQyxXQUFjLFVBQ0xFLEVBQVV4SSxLQUFWd0ksT0FESyxtQkFBTnBDLEVBQU0seUJBQU5BLEVBQU0saUJBRVosRUFBQXdDLFNBQVF2SCxLQUFSLG9CQUFpQm1ILEVBQWpCLGFBQStCcEMsTSxpQkFHakMsV0FDRSxJQUFPcUMsRUFBaUJ6SSxLQUFqQnlJLE1BQU9ELEVBQVV4SSxLQUFWd0ksT0FDZCxHQUFJQyxFQUFPLDhCQUZOckMsRUFFTSx5QkFGTkEsRUFFTSxpQkFDVCxFQUFBd0MsU0FBUUMsSUFBUixvQkFBZ0JMLEVBQWhCLGFBQThCcEMsTyxvQkFJbEMsV0FBZ0IsTUFDUHFDLEVBQWlCekksS0FBakJ5SSxNQUFPRCxFQUFVeEksS0FBVndJLE9BQ2QsR0FBS0MsRUFBTCxDQUZjLElBR2QsSUFBSUssRUFBZ0IsVUFITixtQkFBTjFDLEVBQU0seUJBQU5BLEVBQU0sZ0JBS2RBLEVBQUs3RixTQUFRLFNBQUN3SSxHQUVaLE9BRGEsRUFBT0EsSUFFbEIsSUFBSyxTQUNMLElBQUssU0FDTCxJQUFLLFVBQ0hELEdBQWlCLFFBQ2pCLE1BRUYsSUFBSyxTQUNIQSxHQUFpQixRQUNqQixNQUlGLFFBQ0VBLEdBQWlCLGFBR3ZCLEVBQUFGLFNBQVFDLElBQVIsU0FBWUMsRUFBZSxhQUEzQixXQUE2Q04sRUFBN0MsYUFBMkRwQyxPLHFCQUc3RCxXQUFpQixNQUNScUMsRUFBaUJ6SSxLQUFqQnlJLE1BQU9ELEVBQVV4SSxLQUFWd0ksT0FDZCxHQUFLQyxFQUFMLENBRmUsSUFHZixJQUFJSyxFQUFnQixVQUhMLG1CQUFOMUMsRUFBTSx5QkFBTkEsRUFBTSxnQkFLZkEsRUFBSzdGLFNBQVEsU0FBQ3dJLEdBRVosT0FEYSxFQUFPQSxJQUVsQixJQUFLLFNBQ0wsSUFBSyxTQUNMLElBQUssVUFDSEQsR0FBaUIsUUFDakIsTUFFRixJQUFLLFNBQ0hBLEdBQWlCLFFBQ2pCLE1BSUYsUUFDRUEsR0FBaUIsYUFHdkIsRUFBQUYsU0FBUUMsSUFBUixTQUFZQyxFQUFlLGVBQTNCLFdBQStDTixFQUEvQyxhQUE2RHBDLE8sa0JBRy9ELFdBQWMsVUFDTG9DLEVBQVV4SSxLQUFWd0ksT0FESyxtQkFBTnBDLEVBQU0seUJBQU5BLEVBQU0saUJBRVosRUFBQXdDLFNBQVFJLEtBQVIsb0JBQWlCUixFQUFqQixhQUErQnBDLE0sbUJBR2pDLFdBQWUsVUFDTm9DLEVBQVV4SSxLQUFWd0ksT0FETSxtQkFBTnBDLEVBQU0seUJBQU5BLEVBQU0saUJBRWIsRUFBQXdDLFNBQVEzSCxNQUFSLG9CQUFrQnVILEVBQWxCLGFBQWdDcEMsUSxFQS9FOUJtQyxHQW1GTixJQ3BGZSxTQUFTVSxFQUFrQkMsRUFBS0MsSUFDbEMsTUFBUEEsR0FBZUEsRUFBTUQsRUFBSTFHLFVBQVEyRyxFQUFNRCxFQUFJMUcsUUFFL0MsSUFBSyxJQUFJQyxFQUFJLEVBQUcyRyxFQUFPLElBQUlDLE1BQU1GLEdBQU0xRyxFQUFJMEcsRUFBSzFHLElBQzlDMkcsRUFBSzNHLEdBQUt5RyxFQUFJekcsR0FHaEIsT0FBTzJHLEVDTk0sU0FBU0UsRUFBNEIxRCxFQUFHMkQsR0FDckQsR0FBSzNELEVBQUwsQ0FDQSxHQUFpQixpQkFBTkEsRUFBZ0IsT0FBTyxFQUFpQkEsRUFBRzJELEdBQ3RELElBQUlqRSxFQUFJbEosT0FBT0MsVUFBVW1OLFNBQVM1SixLQUFLZ0csR0FBRzlCLE1BQU0sR0FBSSxHQUVwRCxNQURVLFdBQU53QixHQUFrQk0sRUFBRTlDLGNBQWF3QyxFQUFJTSxFQUFFOUMsWUFBWUMsTUFDN0MsUUFBTnVDLEdBQXFCLFFBQU5BLEVBQW9CK0QsTUFBTUksS0FBSzdELEdBQ3hDLGNBQU5OLEdBQXFCLDJDQUEyQ29FLEtBQUtwRSxHQUFXLEVBQWlCTSxFQUFHMkQsUUFBeEcsR0NIYSxTQUFTSSxFQUFlVCxFQUFLekcsR0FDMUMsT0NMYSxTQUF5QnlHLEdBQ3RDLEdBQUlHLE1BQU1PLFFBQVFWLEdBQU0sT0FBT0EsRURJeEIsQ0FBZUEsSUVMVCxTQUErQkEsRUFBS3pHLEdBQ2pELElBQUlvSCxFQUFZLE1BQVBYLEVBQWMsS0FBeUIsb0JBQVh6TSxRQUEwQnlNLEVBQUl6TSxPQUFPRSxXQUFhdU0sRUFBSSxjQUUzRixHQUFVLE1BQU5XLEVBQUosQ0FDQSxJQUlJQyxFQUFJQyxFQUpKQyxFQUFPLEdBQ1BDLEdBQUssRUFDTEMsR0FBSyxFQUlULElBQ0UsSUFBS0wsRUFBS0EsRUFBR2pLLEtBQUtzSixLQUFRZSxHQUFNSCxFQUFLRCxFQUFHdEksUUFBUS9CLFFBQzlDd0ssRUFBSy9ILEtBQUs2SCxFQUFHM00sUUFFVHNGLEdBQUt1SCxFQUFLeEgsU0FBV0MsR0FINEJ3SCxHQUFLLElBSzVELE1BQU96TSxHQUNQME0sR0FBSyxFQUNMSCxFQUFLdk0sRUFDTCxRQUNBLElBQ095TSxHQUFzQixNQUFoQkosRUFBVyxRQUFXQSxFQUFXLFNBQzVDLFFBQ0EsR0FBSUssRUFBSSxNQUFNSCxHQUlsQixPQUFPQyxHRnRCdUIsQ0FBcUJkLEVBQUt6RyxJQUFNLEVBQTJCeUcsRUFBS3pHLElHTGpGLFdBQ2IsTUFBTSxJQUFJckIsVUFBVSw2SUhJZ0YsR0lEdkYsU0FBUytJLEVBQW1CakIsR0FDekMsT0NKYSxTQUE0QkEsR0FDekMsR0FBSUcsTUFBTU8sUUFBUVYsR0FBTSxPQUFPLEVBQWlCQSxHREd6QyxDQUFrQkEsSUVMWixTQUEwQjVGLEdBQ3ZDLEdBQXNCLG9CQUFYN0csUUFBbUQsTUFBekI2RyxFQUFLN0csT0FBT0UsV0FBMkMsTUFBdEIyRyxFQUFLLGNBQXVCLE9BQU8rRixNQUFNSSxLQUFLbkcsR0ZJbkYsQ0FBZ0I0RixJQUFRLEVBQTJCQSxJR0x2RSxXQUNiLE1BQU0sSUFBSTlILFVBQVUsd0lISXdFLEdJTDlGLElBdUJBLEVBdEJVLFNBc0JWLEVBckJXLEVBcUJYLEVBcEI2QixJQW9CN0IsRUFuQlMsQ0FDTDJCLEtBQU0sT0FDTnFILFFBQVMsQ0FBQyxDQUNSckgsS0FBTSxjQUNOc0gsT0FBUSxDQUFDLGNBQ1IsQ0FDRHRILEtBQU0sc0JBQ05zSCxPQUFRLENBQUMsWUFBYSxlQUNyQixDQUNEdEgsS0FBTSx3QkFDTnNILE9BQVEsQ0FBQyxZQUFhLGVBQ3JCLENBQ0R0SCxLQUFNLGdDQUNOc0gsT0FBUSxDQUFDLFlBQWEsYUFBYyxnQkFFdENDLFFBQVMsQ0FBQ0MsUUFBUyxLQUFNQyxlQUFlLEksdWdDQ2hCNUMsSUFBTUMsRUFDSyxVQURMQSxFQUN5QixVQUdWQyxFQUFBQSxXQUNuQixhQUFjLHFCQUNaMUssS0FBSzJLLGFBQWMsRUFFbkIsSUFBTUMsRUFBUUMsS0FBS0MsTUFBTzlLLEtBQUsrSyx3QkFBMEJDLEdBQ3pEaEwsS0FBS2lMLElBQU1QLEVBQTRCUSxlQUFlQyxLQUFLSCxFQUFlQSxFQUFpQkosR0FFM0Y1SyxLQUFLb0wsT0FBT3JLLE1BQUssV0FDZixFQUFLNEosYUFBYyxLQUNsQlUsTUFBTXpDLFFBQVEzSCxPLDZEQUduQixXQUNFLE9BQU9xSyxTQUFTNUMsYUFBYUMsUUFBUUwsS0FBa0QsSSxrQkFhekYsV0FBTyxXQUNMLElBQUtvQyxFQUE0QmEsY0FDL0IsTUFBTSxJQUFJN00sTUFBTSw4QkFHbEIsT0FBTyxJQUFJMkUsU0FBUSxTQUFDMUMsR0FDbEIsRUFBS3NLLElBQUlPLGdCQUFrQixXQUFNLE1BQy9CLElBQ0UsRUFBS1AsSUFBSXBLLE9BQU80SyxrQkFBa0JULEVBQUFBLE1BRWxDLE1BQU94TixJQUVULElBQU1rTyxFQUFRLEVBQUtULElBQUlwSyxPQUFPOEssa0JBQWtCWCxFQUFBQSxLQUFtQkEsRUFBQUEsU0FDbkUsSUFBSSxVQUFBQSxFQUFBQSxlQUFBLGVBQXNCeEksUUFBUyxFQUFHLFdBQ2xCd0ksRUFBQUEsU0FEa0IsSUFDcEMsMkJBQXdDLEtBQTdCWSxFQUE2QixRQUN0Q0YsRUFBTUcsWUFBWUQsRUFBSTdJLEtBQU02SSxFQUFJdkIsU0FGRSxpQ0FPeEMsRUFBS1ksSUFBSWEsVUFBWSxTQUFDQyxHQUNwQnBMLFUscUJBS04sU0FBUXFMLEdBQXVCLElBQWI1TCxFQUFhLHVEQUFKLEdBQ3pCLEdBQUtBLEVBQUwsQ0FENkIsVUFHVEEsR0FIUyxJQUc3QiwyQkFBNEIsS0FBakJqRCxFQUFpQixRQUMxQjZDLEtBQUtpTSxLQUFLRCxFQUFVN08sSUFKTyxrQyxpQ0FRL0IsV0FBVzZPLEVBQVVFLEdBQXJCLCtGQUN3QmxNLEtBQUttTSxrQkFEN0IsZ0JBQ1NULEVBRFQsRUFDU0EsTUFDRFUsRUFBWXBNLEtBQUtxTSxzQkFDakJDLEVBQU96QixLQUFLMEIsTUFBTXhFLEtBQUt5RSxNQUFRLEtBRS9CQyxFQUFVLENBQUMsVUFBYVQsRUFBVSxXQUFjRSxFQUFXLFdBQWNFLEVBQVdFLEtBQUFBLEdBQzFGWixFQUFNZ0IsSUFBSUQsR0FFVi9ELGFBQWFpRSxRQUFRckUsRUFBOEN0SSxLQUFLK0ssd0JBQTBCLEdBUnBHLGdELDJFQVdBLFdBQWdCLFdBQ2QsT0FBTyxJQUFJMUgsU0FBUSxTQUFDMUMsRUFBU0MsR0FDM0IsSUFBTWdNLEVBQVdDLGFBQVksV0FDdkIsRUFBS2xDLGNBQ1BoSyxFQUFRLEVBQUtzSyxJQUFJcEssUUFDakJpTSxjQUFjRixNQUVmLElBQ0hHLFlBQVcsV0FDVEQsY0FBY0YsR0FDZGhNLEVBQU8sSUFBSWxDLE1BQU0sd0NBQ2hCLFUsa0JBSVAsU0FBS3FFLEVBQU01RixHQUFPLFdBQ2hCLE9BQU8sSUFBSWtHLFNBQVEsU0FBQzFDLEVBQVNDLEdBQzNCLEVBQUt1TCxrQkFBa0JwTCxNQUFLLFlBQWEsSUFDakNpTSxFQURpQyxFQUFYdEIsTUFDUjdGLElBQUlvSCxJQUN4QkQsRUFBTWxCLFVBQVksV0FDaEJuTCxFQUFRcU0sRUFBTW5NLFlBRWZ3SyxPQUFNLFNBQUM3TixHQUFELE9BQVNvRCxFQUFPcEQsVyw0Q0FJN0Isc0dBQ1F3QyxLQUFLa04sZ0JBRGIsY0FFUUMsRUFBS25OLEtBQUtpTCxJQUFJcEssT0FBT3VNLFlBQVlwQyxFQUFBQSxLQUFtQixhQUNwRFUsRUFBUXlCLEVBQUdFLFlBQVlyQyxFQUFBQSxNQUgvQixrQkFLUyxDQUFDbUMsR0FBQUEsRUFBSXpCLE1BQUFBLElBTGQsZ0QsaUVBUUEsU0FBT00sRUFBVXNCLEdBQThCLFdBQTFCNUYsRUFBMEIsdURBQWpCK0MsRUFDNUIsT0FBTyxJQUFJcEgsU0FBUSxTQUFDMUMsR0FDbEIsRUFBS3dMLGtCQUFrQnBMLE1BQUssWUFBYSxJQUFYMkssRUFBVyxFQUFYQSxNQUN4QjZCLE9BQVNyUixFQUNiLEVBQUtzUixVQUFVOUIsRUFBT00sRUFBVXRFLEdBQVFvRSxVQUFZLFNBQVMyQixHQUMzRCxJQUFNQyxFQUFTRCxFQUFNN0csT0FBTy9GLE9BQzVCLEdBQUk2TSxFQUFRLENBQ1YsSUFBTXZRLEVBQVF1USxFQUFPdlEsTUFDakIsZUFBZ0JBLFFBRUxqQixJQUFYcVIsR0FDUSxRQUFQRCxHQUFnQm5RLEVBQUssV0FBaUJvUSxHQUMvQixRQUFQRCxHQUFnQm5RLEVBQUssV0FBaUJvUSxLQUV2Q0EsRUFBU3BRLEVBQUssWUFHaEJ5TCxRQUFRSSxLQUFLLGtDQUFvQ2dELEdBR25EMEIsRUFBT0MsZ0JBRVBoTixFQUFRNE0sWSxpQkFPbEIsU0FBSXZCLEdBQW9DLElBQTFCdEUsRUFBMEIsdURBQWpCK0MsRUFDckIsT0FBT3pLLEtBQUs0TixPQUFPNUIsRUFBVSxNQUFPdEUsSyxpQkFHdEMsU0FBSXNFLEdBQW9DLElBQTFCdEUsRUFBMEIsdURBQWpCK0MsRUFDckIsT0FBT3pLLEtBQUs0TixPQUFPNUIsRUFBVSxNQUFPdEUsSyxxQkFHdEMsU0FBUXNFLEdBQW9DLFdBQTFCdEUsRUFBMEIsdURBQWpCK0MsRUFDekIsT0FBTyxJQUFJcEgsU0FBUSxTQUFDMUMsR0FDbEIsRUFBS3dMLGtCQUFrQnBMLE1BQUssWUFBYSxJQUFYMkssRUFBVyxFQUFYQSxNQUN0Qm1DLEVBQU0sSUFBSUMsSUFDaEIsRUFBS04sVUFBVTlCLEVBQU9NLEVBQVV0RSxHQUFRb0UsVUFBWSxTQUFTMkIsR0FDM0QsSUFBTUMsRUFBU0QsRUFBTTdHLE9BQU8vRixPQUM1QixHQUFJNk0sRUFBUSxDQUNWLElBQU12USxFQUFRdVEsRUFBT3ZRLE1BQ2pCLGVBQWdCQSxHQUNiMFEsRUFBSUUsSUFBSTVRLEVBQUssYUFBaUIwUSxFQUFJRyxJQUFJN1EsRUFBSyxXQUFnQixHQUNoRTBRLEVBQUlHLElBQUk3USxFQUFLLFdBQWdCMFEsRUFBSWhJLElBQUkxSSxFQUFLLFlBQWtCLElBRTVEeUwsUUFBUUksS0FBSyxrQ0FBb0NnRCxHQUduRDBCLEVBQU9DLGdCQUVQaE4sRUFBUWtOLFksaUNBT2xCLFdBQVc3QixHQUFYLHdHQUFxQnRFLEVBQXJCLCtCQUE4QitDLEVBQTlCLFNBQ3FCekssS0FBS2lPLFFBQVFqQyxFQUFVdEUsR0FENUMsVUFFNkIsS0FEckJ3RyxFQURSLFFBRVczSyxPQUFPZixPQUZsQix5Q0FFdUMsTUFGdkMsT0FJUTJMLEVBQU0sQ0FBQ3BMLFVBQU03RyxFQUFXaUIsT0FBUSxHQUp4QyxJQU02QitRLEdBTjdCLElBTUUsMkJBQWlDLGVBQXJCaFIsRUFBcUIsS0FBaEJDLEVBQWdCLEtBQzNCZ1IsRUFBSWhSLE1BQVFBLElBQ2RnUixFQUFJcEwsS0FBTzdGLEVBQ1hpUixFQUFJaFIsTUFBUUEsR0FUbEIsdURBYVNnUixHQWJULGlELGlFQWdCQSxTQUFNbkMsR0FBb0MsV0FBMUJ0RSxFQUEwQix1REFBakIrQyxFQUN2QixPQUFPLElBQUlwSCxTQUFRLFNBQUMxQyxHQUNsQixFQUFLd0wsa0JBQWtCcEwsTUFBSyxZQUFhLElBQVgySyxFQUFXLEVBQVhBLE1BQ3hCMEMsRUFBUSxFQUNaLEVBQUtaLFVBQVU5QixFQUFPTSxFQUFVdEUsR0FBUW9FLFVBQVksU0FBUzJCLEdBQzNELElBQU1DLEVBQVNELEVBQU03RyxPQUFPL0YsT0FDeEI2TSxHQUNGVSxJQUNBVixFQUFPQyxZQUVQaE4sRUFBUXlOLFksaUJBT2xCLFNBQUlwQyxHQUE4QixXQUFwQnRFLEVBQW9CLHVEQUFYLFVBQ3JCLE9BQU8sSUFBSXJFLFNBQVEsU0FBQzFDLEdBQ2xCLEVBQUt3TCxrQkFBa0JwTCxNQUFLLFlBQWEsSUFBWDJLLEVBQVcsRUFBWEEsTUFDeEIyQyxFQUFRLEVBQ1osRUFBS2IsVUFBVTlCLEVBQU9NLEVBQVV0RSxHQUFRb0UsVUFBWSxTQUFTMkIsR0FDM0QsSUFBTUMsRUFBU0QsRUFBTTdHLE9BQU8vRixPQUM1QixHQUFJNk0sRUFBUSxDQUNWLElBQU12USxFQUFRdVEsRUFBT3ZRLE1BQ2pCLGVBQWdCQSxFQUNsQmtSLEdBQVNDLFdBQVduUixFQUFLLFlBRXpCeUwsUUFBUUksS0FBSyxrQ0FBb0NnRCxHQUduRDBCLEVBQU9DLGdCQUVQaE4sRUFBUTBOLEVBQU1FLFFBQVEsYSx1QkFPaEMsU0FBVTdDLEVBQU9NLEdBQTJELElBQWpEdEUsRUFBaUQsdURBQXhDK0MsRUFBaUJ5QixFQUF1Qiw0REFBWGhRLEVBQy9ELE9BQUlnUSxFQUNFeEUsSUFBVytDLEVBQ05pQixFQUFNcEUsTUFBTSxpQ0FDZGtILFdBQVdDLFlBQVlDLEtBQUssQ0FBQzFDLEVBQVVFLEVBQVdsTSxLQUFLcU0sc0JBQXNCN0MsY0FHN0VrQyxFQUFNcEUsTUFBTSx5QkFDZGtILFdBQVdDLFlBQVlDLEtBQUssQ0FBQzFDLEVBQVVFLEtBRzFDeEUsSUFBVytDLEVBQ05pQixFQUFNcEUsTUFBTSx1QkFDZGtILFdBQVdDLFlBQVlDLEtBQUssQ0FBQzFDLEVBQVVoTSxLQUFLcU0sc0JBQXNCN0MsY0FHbEVrQyxFQUFNcEUsTUFBTSxlQUNka0gsV0FBV0MsWUFBWUMsS0FBSyxDQUFDMUMsTyxnQ0FHcEMsV0FBVUEsR0FBViw4RkFBb0J0RSxFQUFwQiwrQkFBNkIrQyxFQUE3QixTQUNzQnpLLEtBQUsyTyxJQUFJM0MsRUFBVXRFLEdBRHpDLGNBQ1EyRyxFQURSLGdCQUVzQnJPLEtBQUtvTyxNQUFNcEMsRUFBVXRFLEdBRjNDLFVBRVEwRyxFQUZSLE9BSU9DLEdBQVVELEVBSmpCLHlDQUkrQixHQUovQixpQ0FNVUMsRUFBUUQsR0FBT0csUUFBUSxJQU5qQyxpRCwrRUFTQSxXQUFXdkMsR0FBWCxtR0FBcUI0QyxFQUFyQiwrQkFBNEIsRUFBR2xILEVBQS9CLCtCQUF3QytDLEVBQXhDLGtCQUNTLElBQUlwSCxTQUFRLFNBQUMxQyxHQUNsQixFQUFLd0wsa0JBQWtCcEwsTUFBSyxZQUFhLElBQVgySyxFQUFXLEVBQVhBLE1BQ3hCZ0MsRUFBU2hDLEVBQU1wRSxNQUFNLGVBQWVrSCxXQUFXLENBQUN4QyxHQUFXLFFBQzNEdEUsSUFBVytDLElBQ2JpRCxFQUFTaEMsRUFBTXBFLE1BQU0sdUJBQ2hCa0gsV0FBVyxDQUFDeEMsRUFBVSxFQUFLSyx1QkFBd0IsU0FHMUQsSUFBSS9FLEVBQVEsRUFDTmxILEVBQVMsR0FDZnNOLEVBQU81QixVQUFZLFNBQVMyQixHQUMxQixJQUFNNU0sRUFBUzRNLEVBQU03RyxPQUFPL0YsT0FDeEJBLEdBQVV5RyxFQUFRc0gsR0FDcEJ0SCxJQUNBbEgsRUFBTzZCLEtBQUtwQixFQUFPMUQsT0FDbkIwRCxFQUFPOE0sWUFFUGhOLEVBQVFQLFdBbEJsQiwyQywrRUF5QkEsV0FDRSxJQUFNcUYsRUFBSSxJQUFJc0MsS0FHZCxPQUZBdEMsRUFBRW9KLFNBQVNwSixFQUFFcUosV0FBYSxHQUVuQnJKLEVBQUVzSixjQUFnQixLQUN0QnRKLEVBQUV1SixXQUFhLEdBQUd4RixXQUFXeUYsU0FBUyxFQUFHLEtBQU8sSUFDakR4SixFQUFFeUosVUFBVTFGLFdBQVd5RixTQUFTLEVBQUcsUSwwQkExUXZDLFdBQ0UsUUFBU2pQLEtBQUtrTCxpQiwwQkFHaEIsV0FDRSxHQUFJeEQsT0FBT3lILFVBQVcsT0FBT3pILE9BQU95SCxjLEVBckJuQnpFLEcsdWdDQ0hyQixJQUFNMEUsRUFBUyxJQUFJN0csRUFBTyx3QkFDcEI4RyxFQUFlLElBQUlDLEVBSVpDLEVBQWdCLDZCQUFHLFdBQU9DLEVBQWlCQyxFQUFhL0gsR0FBckMsZ0dBQzlCMEgsRUFBT3ZHLElBQUksbUJBQW9CMkcsRUFBaUJDLEVBQWEvSCxHQUl6QyxRQUFoQitILEVBTDBCLGdDQU1ESixFQUFhSyxJQUFJRixFQUFpQjlILEdBTmpDLGNBTXRCaUksRUFOc0IseUJBT3JCQSxHQVBxQixVQVFILFFBQWhCRixFQVJtQixrQ0FTREosRUFBYWxCLElBQUlxQixFQUFpQjlILEdBVGpDLGVBU3RCaUksRUFUc0IseUJBVXJCQSxHQVZxQixXQVdILFFBQWhCRixFQVhtQixrQ0FZREosRUFBYU8sSUFBSUosRUFBaUI5SCxHQVpqQyxlQVl0QmlJLEVBWnNCLHlCQWFyQkEsR0FicUIsV0FjSCxPQUFoQkYsRUFkbUIsa0NBZWRKLEVBQWFwQixRQUFRdUIsRUFBaUI5SCxHQWZ4Qix3Q0FlaUNrSCxNQWZqQyxXQWdCSCxPQUFoQmEsRUFoQm1CLGtDQWlCVEosRUFBYWpCLE1BQU1vQixFQUFpQjlILEdBakIzQixRQWlCdEJ3RyxFQWpCc0IsT0FtQnhCRSxFQUFRLEVBbkJnQixJQW9CSkYsR0FwQkksSUFvQjVCLDJCQUE4QixlQUFoQi9RLEVBQWdCLEtBQzVCaVIsR0FBU2pSLEVBckJpQix1REF1QnJCaVIsR0F2QnFCLFdBMEJWLFNBQWhCcUIsRUExQjBCLGtDQTJCVEosRUFBYVEsS0FBS0wsRUFBaUI5SCxHQTNCMUIsV0EyQnRCd0csRUEzQnNCLGlEQTRCVixNQTVCVSxpQ0E2QnJCQSxFQUFLbkwsTUE3QmdCLGFBZ0MxQjBNLEVBQVlsSSxRQUFRLFNBQVcsR0FoQ0wscUJBaUN0QnVJLEVBQVFMLEVBQVlLLE1BQU0sd0JBQ0EsS0FBakJBLEVBQU10TixVQUFnQjhJLFNBQVN3RSxFQUFNLElBQU0sR0FsQzlCLDBDQWtDeUMsTUFsQ3pDLHlCQW1DRFQsRUFBYVUsS0FBS1AsRUFBaUJNLEVBQU0sR0FBSXBJLEdBbkM1QyxlQW1DdEJpSSxFQW5Dc0IseUJBb0NyQkEsR0FwQ3FCLGVBcUQ5QlAsRUFBT1ksT0FBUCw4QkFBcUNQLEVBQXJDLDZCQXJEOEIsa0JBc0R2QixNQXREdUIsNENBQUgsMERBeURoQlEsRUFBaUIsNkJBQUcsV0FBT1QsRUFBaUJVLEVBQWtCQyxHQUExQyx3RUFDL0JmLEVBQU92RyxJQUFJLG9CQUFxQjJHLEVBQWlCVSxFQUFrQkMsR0FEcEMsU0FHekJkLEVBQWFwRCxLQUFLdUQsRUFBaUJVLEdBSFYsMkNBQUgsMEQsdWdDQzVEOUJ4SSxPQUFPMEksZ0JBQWtCMUksT0FBTzBJLGlCQUFtQixDQUNqRDFLLEVBQUcsR0FBSXFHLEVBQUcsR0FBSXNFLEVBQUcsSUFHbkIsSUFBTWpCLEdBQVMsSUFBSTdHLEVBQU8sbUJBRWIrSCxHQUF1QixTQUFDcFQsRUFBS0MsR0FDeEMsSUFBTW9ULEVBQVk3SSxPQUFPOEksSUFBSUosZ0JBRTdCLEdBQUlsVCxNQUFBQSxHQUFBQSxNQUFxQ0MsRUFBekMsQ0FFQSxJQUFNc1QsRUFBZ0MsaUJBQVh0VCxFQUFzQkEsRUFBTXFNLFdBQVdrSCxPQUFTdlQsRUFFM0UsR0FBSUQsRUFBSXFLLFFBQVEsTUFBUSxFQUFHLENBQ3pCLElBQU1oRSxFQUFPckcsRUFBSXlULE1BQU0sS0FDakJDLEVBQVVyTixFQUFLRyxNQUNqQnpHLEVBQU1zVCxFQUNWaE4sRUFBS2hELFNBQVEsU0FBQ3JELEdBQ1BELEVBQUlDLEtBQU1ELEVBQUlDLEdBQU8sSUFDMUJELEVBQU1BLEVBQUlDLE1BRVpELEVBQUkyVCxHQUFXSCxPQUVmRixFQUFVclQsR0FBT3VULEVBR25CSSxHQUF5QjNULEVBQUt1VCxLQUduQkssR0FBeUIsU0FBQzVULEdBQThELElBQXpENlQsRUFBeUQsd0RBQXZDQyxFQUF1Qyx1REFBeEIsR0FBSUMsRUFBb0IsdURBQVYsSUFDekYsT0FBT0MsR0FBMEIsQ0FBQ2hVLEdBQU02VCxFQUFVQyxFQUFjQyxJQUc1REMsR0FBNEIsU0FBQzNOLEdBQStELElBSTVGNE4sRUFKbUNKLEVBQXlELHdEQUF2Q0MsRUFBdUMsdURBQXhCLEdBQUlDLEVBQW9CLHVEQUFWLElBQ2hGVixFQUFZN0ksT0FBTzhJLElBQUlKLGdCQUU3QixJQUFLN00sSUFBUzhGLE1BQU1PLFFBQVFyRyxLQUFVQSxFQUFLZixPQUFRLE9BQU8sS0FIc0MsVUFLOUVlLEdBTDhFLElBS2hHLDJCQUF3QixLQUFickcsRUFBYSxRQUV0QixHQURBaVUsRUFBYUMsR0FBUWIsRUFBV3JULEdBRzlCLE9BQU9tRyxRQUFRMUMsUUFBUXdRLElBVHFFLDhCQVloRyxPQUFJSixFQUNLLElBQUkxTixTQUFRLFNBQUMxQyxHQUNsQixJQUFNaU0sRUFBV0MsYUFBWSxXQUFNLFVBQ2Z0SixHQURlLElBQ2pDLDJCQUF3QixLQUFickcsRUFBYSxRQUV0QixHQURBaVUsRUFBYUMsR0FBUWIsRUFBV3JULEdBQ2hCLENBRWQ0UCxjQUFjRixHQUNkak0sRUFBUXdRLEdBQ1IsUUFQNkIsaUNBVWhDSCxHQUVIakUsWUFBVyxXQUNURCxjQUFjRixHQUNkak0sRUFBUSxRQUNQc1EsTUFHQTVOLFFBQVExQyxRQUFRLE9BU1owUSxHQUFlLFNBQUNwRSxFQUFJcUUsRUFBZ0JDLEVBQVNDLEdBQTBDLElBQWxDQyxFQUFrQyx1REFBVCxLQUNuRnRVLEVBQVEsR0FJZCxPQUhJbVUsSUFBZ0JuVSxFQUFNbVUsZUFBaUJBLEdBQ3ZDQyxJQUFTcFUsRUFBTW9VLFFBQVVBLEdBRXJCQyxHQUNOLElBQUssVUFDSDlKLE9BQU8wSSxnQkFBZ0IxSyxFQUFFdUgsR0FBTTlQLEVBQy9CLE1BQ0YsSUFBSyxVQUNIQSxFQUFNc1UsdUJBQXlCQSxFQUMvQi9KLE9BQU8wSSxnQkFBZ0JyRSxFQUFFa0IsR0FBTTlQLEVBQy9CLE1BQ0YsSUFBSyxTQUNIdUssT0FBTzBJLGdCQUFnQkMsRUFBRXBELEdBQU05UCxJQU9qQ3VVLEdBRDBCLEdBRTFCQyxHQUF3QixFQUVmQyxHQUF5Qiw2QkFBRyw4RUFFdkN0QixHQUFxQixhQUFjdkksS0FBS3lFLE9BR3hDcUYsS0FHQUMsS0FHQUMsR0FBZSxlQUdmQyxLQWR1QywyQ0FBSCxxREFpQmhDQyxHQUE0QixDQUNoQyxXQUFjLENBQ1osQ0FBQzlCLGFBQWMsUUFFakIsU0FBWSxDQUNWLENBQUNBLGFBQWMsaUJBRWpCLHdCQUF5QixDQUN2QixDQUFDQSxhQUFjLFNBRWpCLGVBQWdCLENBQ2QsQ0FBQ0EsYUFBYyxrQkFJYitCLEdBQTRCLENBQ2hDLFdBQWMsQ0FDWixDQUFDekMsWUFBYSxNQUFPL0gsT0FBUSxVQUFXeUssWUFBYSwyQkFFdkQsU0FBWSxDQUNWLENBQUMxQyxZQUFhLGdCQUFpQi9ILE9BQVEsVUFBV3lLLFlBQWEsa0NBQy9ELENBQUMxQyxZQUFhLGdCQUFpQi9ILE9BQVEsVUFBV3lLLFlBQWEsbUNBRWpFLHdCQUF5QixDQUN2QixDQUFDMUMsWUFBYSxPQUFRL0gsT0FBUSxVQUFXeUssWUFBYSwrQ0FFeEQsZUFBZ0IsQ0FDZCxDQUFDMUMsWUFBYSxPQUFRL0gsT0FBUSxVQUFXeUssWUFBYSxxQ0FDdEQsQ0FBQzFDLFlBQWEsT0FBUS9ILE9BQVEsVUFBV3lLLFlBQWEsdUNBSXBEQyxHQUE2Qiw2QkFBRyxrR0FDOUJDLEVBQXNCalcsT0FBT21ILEtBQUsyTyxJQURKLE1BRU5HLEVBRk0seUNBRXpCN0MsRUFGeUIsU0FHYjBDLEdBQTBCMUMsSUFIYiw4REFLdkI4QyxFQUx1QixTQU1qQkMsVUFOaUIsK0RBUWhDbkQsR0FBT3ZHLElBQUksbUJBQW9CMkcsRUFBaUI4QyxFQUFXN0MsWUFBYTZDLEVBQVc1SyxRQVJuRCxVQVNKNkgsRUFBaUJDLEVBQWlCOEMsRUFBVzdDLFlBQWE2QyxFQUFXNUssUUFUakUsU0FTMUI4SyxFQVQwQixVQVc5QmxDLEdBQXFCZ0MsRUFBV0gsWUFBYUssR0FDN0NGLEVBQVdDLFdBQVksR0FaTyxrT0FBSCxxREFrQjdCMUIsR0FBd0IsNkJBQUcsV0FBT3JCLEVBQWlCVSxHQUF4Qiw2RUFHL0IsSUFETXVDLEVBQVNSLEdBQTBCekMsS0FDM0JuRyxNQUFNTyxRQUFRNkksSUFBV0EsRUFBT2pRLE9BQVMsRUFBRyxLQUNyQ2lRLEdBRHFDLElBQ3hELDJCQUFXQyxFQUFnQixRQUN6QkMsR0FBcUJuRCxFQUFpQlUsRUFBa0J3QyxHQUZGLCtCQUgzQiwyQ0FBSCx3REFXeEJDLEdBQW9CLDZCQUFHLFdBQU9uRCxFQUFpQlUsRUFBa0IwQyxHQUExQyxvRkFDM0J4RCxHQUFPdkcsSUFBSSxvQkFBcUIyRyxFQUFpQlUsRUFBa0IwQyxFQUFxQnpDLGNBRDdELFNBRXJCRixFQUFrQlQsRUFBaUJVLEVBQWtCMEMsRUFBcUJ6QyxjQUZyRCxXQUlOK0IsR0FBMEIxQyxJQUpwQixnRUFNaEI4QyxFQU5nQixRQU96QmxELEdBQU92RyxJQUFJLG1CQUFvQjJHLEVBQWlCOEMsRUFBVzdDLFlBQWE2QyxFQUFXNUssUUFQMUQsVUFRRzZILEVBQWlCQyxFQUFpQjhDLEVBQVc3QyxZQUFhNkMsRUFBVzVLLFFBUnhFLFNBUW5COEssRUFSbUIsVUFVdkJsQyxHQUFxQmdDLEVBQVdILFlBQWFLLEdBQzdDRixFQUFXQyxXQUFZLEdBWEEsdU1BQUgsMERBaUJwQk0sR0FBYyxDQUdsQixDQUFDQyxlQUFnQixJQUFLdlUsT0FBUSxjQUFld1UsU0FBVSxXQUFZaFEsS0FBTSxZQUN6RSxDQUFDK1AsZUFBZ0IsSUFBS3ZVLE9BQVEsY0FBZXdVLFNBQVUsVUFBV2hRLEtBQU0saUJBQ3hFLENBQUMrUCxlQUFnQixJQUFLdlUsT0FBUSxjQUFld1UsU0FBVSxTQUFVaFEsS0FBTSxhQUV2RSxDQUFDK1AsZUFBZ0IsY0FBZXZVLE9BQVEsY0FBZXdVLFNBQVUsZUFBZ0JoUSxLQUFNLFlBQ3ZGLENBQUMrUCxlQUFnQixjQUFldlUsT0FBUSxjQUFld1UsU0FBVSxlQUFnQmhRLEtBQU0sYUFDdkYsQ0FBQytQLGVBQWdCLGNBQWV2VSxPQUFRLGNBQWV3VSxTQUFVLG1CQUFvQmhRLEtBQU0sYUFDM0YsQ0FBQytQLGVBQWdCLGNBQWV2VSxPQUFRLGNBQWV3VSxTQUFVLGNBQWVoUSxLQUFNLFVBQVdpUSxVQUFXLGNBQWVDLFFBQVMsdUJBQ3BJLENBQUNILGVBQWdCLGNBQWV2VSxPQUFRLGNBQWV3VSxTQUFVLFlBQWFoUSxLQUFNLFVBQVdrUSxRQUFTLHVCQUN4RyxDQUFDSCxlQUFnQixjQUFldlUsT0FBUSxjQUFld1UsU0FBVSxtQkFBb0JoUSxLQUFNLGdCQUMzRixDQUFDK1AsZUFBZ0IsY0FBZXZVLE9BQVEsY0FBZXdVLFNBQVUsb0NBQXFDaFEsS0FBTSxpQkFDNUcsQ0FBQytQLGVBQWdCLGNBQWV2VSxPQUFRLGNBQWV3VSxTQUFVLHdCQUF5QmhRLEtBQU0sVUFBV2tRLFFBQVMsc0JBQXVCRCxVQUFXLFdBQ3RKLENBQUNGLGVBQWdCLGNBQWV2VSxPQUFRLGNBQWV3VSxTQUFVLDZCQUE4QmhRLEtBQU0sZUFBZ0JpUSxVQUFXLFdBQ2hJLENBQUNGLGVBQWdCLGNBQWV2VSxPQUFRLGNBQWV3VSxTQUFVLGlDQUFrQ2hRLEtBQU0sbUJBQW9CaVEsVUFBVyxXQUN4SSxDQUFDRixlQUFnQixjQUFldlUsT0FBUSxjQUFld1UsU0FBVSxpQ0FBa0NoUSxLQUFNLG1CQUFvQmlRLFVBQVcsV0FDeEksQ0FBQ0YsZUFBZ0IsY0FBZXZVLE9BQVEsY0FBZXdVLFNBQVUsaUNBQWtDaFEsS0FBTSxtQkFBb0JpUSxVQUFXLFdBQ3hJLENBQUNGLGVBQWdCLGNBQWV2VSxPQUFRLGNBQWV3VSxTQUFVLDBCQUEyQmhRLEtBQU0sWUFBYWlRLFVBQVcsV0FFMUgsQ0FBQ0YsZUFBZ0IsY0FBZXZVLE9BQVEsY0FBZXdVLFNBQVUsY0FBZWhRLEtBQU0sVUFDdEYsQ0FBQytQLGVBQWdCLGNBQWV2VSxPQUFRLGNBQWV3VSxTQUFVLHlCQUEwQmhRLEtBQU0sd0JBQ2pHLENBQUMrUCxlQUFnQixjQUFldlUsT0FBUSxjQUFld1UsU0FBVSxlQUFnQmhRLEtBQU0sWUFDdkYsQ0FBQytQLGVBQWdCLGNBQWV2VSxPQUFRLGNBQWV3VSxTQUFVLGVBQWdCaFEsS0FBTSxhQUN2RixDQUFDK1AsZUFBZ0IsY0FBZXZVLE9BQVEsY0FBZXdVLFNBQVUsbUJBQW9CaFEsS0FBTSxhQUUzRixDQUFDK1AsZUFBZ0IsV0FBWXZVLE9BQVEsY0FBZXdVLFNBQVUsbUNBQW9DaFEsS0FBTSxpQkFDeEcsQ0FBQytQLGVBQWdCLFdBQVl2VSxPQUFRLGNBQWV3VSxTQUFVLHNDQUF1Q2hRLEtBQU0sbUJBQzNHLENBQUMrUCxlQUFnQixXQUFZdlUsT0FBUSxjQUFld1UsU0FBVSx5Q0FBMENoUSxLQUFNLHVCQUM5RyxDQUFDK1AsZUFBZ0IsV0FBWXZVLE9BQVEsY0FBZXdVLFNBQVUseUNBQTBDaFEsS0FBTSx1QkFDOUcsQ0FBQytQLGVBQWdCLFdBQVl2VSxPQUFRLGNBQWV3VSxTQUFVLG9DQUFxQ2hRLEtBQU0sb0JBQ3pHLENBQUMrUCxlQUFnQixXQUFZdlUsT0FBUSxjQUFld1UsU0FBVSx5Q0FBMENoUSxLQUFNLG9CQUM5RyxDQUFDK1AsZUFBZ0IsV0FBWXZVLE9BQVEsY0FBZXdVLFNBQVUsNkNBQThDaFEsS0FBTSx3QkFJbEgsQ0FBQytQLGVBQWdCLElBQUt2VSxPQUFRLFdBQVl3VSxTQUFVLDZDQUFnRGhRLEtBQU0sV0FBWW1RLFFBQVMsOEJBQStCL1YsTUFBTyxZQUNySyxDQUFDMlYsZUFBZ0IsSUFBS3ZVLE9BQVEsV0FBWXdVLFNBQVUsbUNBQXNDaFEsS0FBTSxXQUFZbVEsUUFBUyw4QkFBK0IvVixNQUFPLGVBQzNKLENBQUMyVixlQUFnQixJQUFLdlUsT0FBUSxXQUFZd1UsU0FBVSxrQ0FBcUNoUSxLQUFNLFdBQVltUSxRQUFTLDhCQUErQi9WLE1BQU8sZUFDMUosQ0FBQzJWLGVBQWdCLElBQUt2VSxPQUFRLFdBQVl3VSxTQUFVLHFCQUF3QmhRLEtBQU0sV0FBWW1RLFFBQVMsOEJBQStCL1YsTUFBTyxlQUU3SSxDQUFDMlYsZUFBZ0IsbUNBQW9DdlUsT0FBUSxXQUFZd1UsU0FBVSw4QkFBaUNoUSxLQUFNLGtCQUFtQm1RLFFBQVMsd0JBQ3RKLENBQUNKLGVBQWdCLG1DQUFvQ3ZVLE9BQVEsV0FBWXdVLFNBQVUsK0JBQWtDaFEsS0FBTSxxQkFBc0JtUSxRQUFTLHVCQUF3QkMsVUFBVyxDQUFDLG1CQUFvQixxQkFDbE4sQ0FBQ0wsZUFBZ0IsbUNBQW9DdlUsT0FBUSxXQUFZd1UsU0FBVSxnQ0FBbUNoUSxLQUFNLG1CQUFvQm1RLFFBQVMsb0JBQXFCQyxVQUFXLENBQUMsc0JBQXVCSCxVQUFXLGVBQzVOLENBQUNGLGVBQWdCLG1DQUFvQ3ZVLE9BQVEsV0FBWXdVLFNBQVUsa0RBQXVEaFEsS0FBTSxtQkFBb0JtUSxRQUFTLG9CQUFxQkMsVUFBVyxDQUFDLHVCQUU5TSxDQUFDTCxlQUFnQixjQUFldlUsT0FBUSxXQUFZd1UsU0FBVSwyQkFBOEJoUSxLQUFNLG1CQUFvQm1RLFFBQVMscUJBQy9ILENBQUNKLGVBQWdCLGNBQWV2VSxPQUFRLFdBQVl3VSxTQUFVLDJCQUE4QmhRLEtBQU0sNEJBQTZCbVEsUUFBUyxvQkFBcUJGLFVBQVcsc0JBQ3hLLENBQUNGLGVBQWdCLGNBQWV2VSxPQUFRLFdBQVl3VSxTQUFVLHFEQUEwRGhRLEtBQU0sV0FBWW1RLFFBQVMscUJBQ25KLENBQUNKLGVBQWdCLGNBQWV2VSxPQUFRLFdBQVl3VSxTQUFVLG1DQUFzQ2hRLEtBQU0sb0JBQXFCbVEsUUFBUyxvQkFBcUJDLFVBQVcsQ0FBQyx1QkFDekssQ0FBQ0wsZUFBZ0IsY0FBZXZVLE9BQVEsV0FBWXdVLFNBQVUsa0RBQW1EaFEsS0FBTSxxQkFBc0JtUSxRQUFTLHVCQUF3QkMsVUFBVyxDQUFDLHNCQUUxTCxDQUFDTCxlQUFnQixjQUFldlUsT0FBUSxXQUFZd1UsU0FBVSw4QkFBaUNoUSxLQUFNLGdCQUFpQm1RLFFBQVMsb0JBQXFCRixVQUFXLGVBQy9KLENBQUNGLGVBQWdCLGNBQWV2VSxPQUFRLFdBQVl3VSxTQUFVLGlDQUFvQ2hRLEtBQU0sV0FBWW1RLFFBQVMscUJBQzdILENBQUNKLGVBQWdCLGNBQWV2VSxPQUFRLFdBQVl3VSxTQUFVLGtDQUFtQ2hRLEtBQU0sV0FBWW1RLFFBQVMsMEJBQTJCL1YsTUFBTyxtQkFBb0I4VixRQUFTLHVCQUMzTCxDQUFDSCxlQUFnQixjQUFldlUsT0FBUSxXQUFZd1UsU0FBVSxnQkFBaUJLLFNBQVUsbUJBQW9CclEsS0FBTSw2QkFBOEJzUSxTQUFVLENBQUMsWUFBYUgsUUFBUyxtQkFFbEwsQ0FBQ0osZUFBZ0IsU0FBVXZVLE9BQVEsV0FBWXdVLFNBQVUsa0NBQXFDaFEsS0FBTSxlQUFnQm1RLFFBQVMsdUJBQXdCRCxRQUFTLHNCQUF1QkUsVUFBVyxDQUFDLGtCQUFtQix3QkFBeUIsWUFBYSxjQUFlLGtCQUFtQixrQkFBbUIsMkJBQy9TLENBQUNMLGVBQWdCLFNBQVV2VSxPQUFRLFdBQVl3VSxTQUFVLG9CQUFxQmhRLEtBQU0sa0JBQW1CbVEsUUFBUywwQkFBMkIvVixNQUFPLGdCQUFpQjhWLFFBQVMsc0JBQXVCRSxVQUFXLENBQUMsaUJBQy9NLENBQUNMLGVBQWdCLFNBQVV2VSxPQUFRLFdBQVl3VSxTQUFVLGdDQUFtQ2hRLEtBQU0sa0JBQW1CbVEsUUFBUyxvQkFBcUJDLFVBQVcsQ0FBQyxnQkFBaUJILFVBQVcsZUFDM0wsQ0FBQ0YsZUFBZ0IsU0FBVXZVLE9BQVEsV0FBWXdVLFNBQVUsa0ZBQXFGaFEsS0FBTSx3QkFBeUJtUSxRQUFTLDBCQUEyQkQsUUFBUywrQkFBZ0NFLFVBQVcsQ0FBQyxpQkFDdFEsQ0FBQ0wsZUFBZ0IsU0FBVXZVLE9BQVEsV0FBWXdVLFNBQVUsZUFBZ0JoUSxLQUFNLFlBQWFtUSxRQUFTLDBCQUEyQi9WLE1BQU8sV0FBWThWLFFBQVMsc0JBQXVCRSxVQUFXLENBQUMsZUFBZ0IsMEJBQy9NLENBQUNMLGVBQWdCLFNBQVV2VSxPQUFRLFdBQVl3VSxTQUFVLGVBQWdCaFEsS0FBTSxrQkFBbUJtUSxRQUFTLDBCQUEyQi9WLE1BQU8sdUJBQXdCOFYsUUFBUyxzQkFBdUJFLFVBQVcsQ0FBQyxlQUFnQiwwQkFDak8sQ0FBQ0wsZUFBZ0IsU0FBVXZVLE9BQVEsV0FBWXdVLFNBQVUsZUFBZ0JoUSxLQUFNLGNBQWVtUSxRQUFTLDBCQUEyQi9WLE1BQU8sYUFBYzhWLFFBQVMsc0JBQXVCRSxVQUFXLENBQUMsZUFBZ0IsMEJBQ25OLENBQUNMLGVBQWdCLFNBQVV2VSxPQUFRLFdBQVl3VSxTQUFVLGdCQUFpQkssU0FBVSxlQUFnQnJRLEtBQU0seUJBQTBCc1EsU0FBVSxDQUFDLGtCQUFtQix3QkFBeUIsWUFBYSxjQUFlLGtCQUFtQixrQkFBbUIsZ0JBQWlCSCxRQUFTLG1CQUV2UixDQUFDSixlQUFnQixXQUFZdlUsT0FBUSxXQUFZd1UsU0FBVSx3REFBNkRoUSxLQUFNLG1CQUFvQm1RLFFBQVMsb0JBQXFCRixVQUFXLGVBQzNMLENBQUNGLGVBQWdCLFdBQVl2VSxPQUFRLFdBQVl3VSxTQUFVLDZEQUFrRWhRLEtBQU0sb0JBQXFCbVEsUUFBUyxxQkFDakssQ0FBQ0osZUFBZ0IsV0FBWXZVLE9BQVEsV0FBWXdVLFNBQVUsd0NBQXlDaFEsS0FBTSx1QkFBd0JtUSxRQUFTLG9CQUFxQkYsVUFBVyx3QkFDM0ssQ0FBQ0YsZUFBZ0IsV0FBWXZVLE9BQVEsV0FBWXdVLFNBQVUsOEJBQWlDaFEsS0FBTSxnQkFBaUJtUSxRQUFTLDBCQUk1SCxDQUFDSixlQUFnQixjQUFldlUsT0FBUSxVQUFXd1UsU0FBVSxNQUFPaFEsS0FBTSxVQUFXa1EsUUFBUyx1QkFDOUYsQ0FBQ0gsZUFBZ0IsY0FBZXZVLE9BQVEsVUFBV3dVLFNBQVUsTUFBT2hRLEtBQU0sV0FDMUUsQ0FBQytQLGVBQWdCLGNBQWV2VSxPQUFRLFVBQVd3VSxTQUFVLE9BQVFoUSxLQUFNLFdBQVltUSxRQUFTLGtCQUFtQi9WLE1BQU8saUJBQzFILENBQUMyVixlQUFnQixjQUFldlUsT0FBUSxVQUFXd1UsU0FBVSxlQUFnQmhRLEtBQU0sYUFDbkYsQ0FBQytQLGVBQWdCLGNBQWV2VSxPQUFRLFVBQVd3VSxTQUFVLHlCQUEwQmhRLEtBQU0sdUJBQzdGLENBQUMrUCxlQUFnQixjQUFldlUsT0FBUSxVQUFXd1UsU0FBVSx5QkFBMEJoUSxLQUFNLG1CQUU3RixDQUFDK1AsZUFBZ0IsY0FBZXZVLE9BQVEsVUFBV3dVLFNBQVUsa0JBQW1CaFEsS0FBTSxZQUN0RixDQUFDK1AsZUFBZ0IsY0FBZXZVLE9BQVEsVUFBV3dVLFNBQVUsMkJBQTRCaFEsS0FBTSxpQkFDL0YsQ0FBQytQLGVBQWdCLGNBQWV2VSxPQUFRLFVBQVd3VSxTQUFVLHlDQUEwQ2hRLEtBQU0sbUJBSTdHLENBQUMrUCxlQUFnQixJQUFLdlUsT0FBUSxXQUFZd1UsU0FBVSxtQkFBb0JoUSxLQUFNLHNCQUM5RSxDQUFDK1AsZUFBZ0IsSUFBS3ZVLE9BQVEsV0FBWXdVLFNBQVUsVUFBV2hRLEtBQU0sZ0JBQWlCaVEsVUFBVyxZQUNqRyxDQUFDRixlQUFnQixJQUFLdlUsT0FBUSxXQUFZd1UsU0FBVSxTQUFVaFEsS0FBTSxjQStMaEVnUCxHQUFjLDZCQUFHLFdBQU9rQixHQUFQLDZGQUNqQkEsRUFEaUIsc0JBRVhBLEVBRlcsT0FHWixnQkFIWSxPQTJCWixpQ0EzQlksT0E2Q1osd0JBN0NZLHdDQUtpQm5DLEdBQXVCLFlBQVksRUFBTSxHQUFJLEtBTDlELGNBS1B3QyxFQUxPLFVBVVcsT0FEQTVMLE9BQU9nQixhQUFhQyxRQUFRTCxJQUNBLGFBQXBCZ0wsR0FDNUI1TCxPQUFPZ0IsYUFBYWlFLFFBQVFyRSxFQUFtRCxHQUd6RCxhQUFwQmdMLEVBQ0ZDLGVBQWU1RyxRQUFRdEUsRUFBc0MsTUFDaEMsV0FBcEJpTCxJQUVIRSxFQUF3QkMsS0FBS0MsTUFBTUgsZUFBZTVLLFFBQVFOLE1BRTlEaUksR0FBcUIsMkJBQTRCa0QsSUFwQjFDLDZDQTZCNEIxQyxHQUF1Qix5QkFBeUIsRUFBTSxHQUFJLEtBN0J0RixXQTZCUDZDLEVBN0JPLCtCQWlDWGpNLE9BQU9nQixhQUFhaUUsUUFBUXJFLEVBQW1ELEdBakNwRSxrQ0FxQ1RxTCxHQUE4QixHQUVoQ2pNLE9BQU9nQixhQUFhaUUsUUFBUXJFLEVBQW1EcUwsR0F2Q3BFLDhDQWlEaUI3QyxHQUF1QixZQUFZLEVBQU0sR0FBSSxLQWpEOUQsV0FtRFcsaUJBRmxCd0MsRUFqRE8sMENBb0RXeEMsR0FBdUIsWUFBWSxFQUFNLEdBQUksS0FwRHhELFNBb0RMOEMsRUFwREssUUFxRENwUixTQUNWcVIsRUFBYUQsR0F0REosMkJBeURrQixnQkFBcEJOLEVBekRFLGtDQTBET3hDLEdBQXVCLFdBQVcsRUFBTSxHQUFJLEtBMURuRCxTQTBETGdELEVBMURLLFVBNERURCxFQUFhLENBQUNDLElBNURMLDJCQThEa0IsV0FBcEJSLEVBOURFLGtDQStEV3hDLEdBQXVCLGFBQWEsRUFBTSxHQUFJLEtBL0R6RCxTQStETDhDLEVBL0RLLFFBZ0VDcFIsU0FDVnFSLEVBQWFELEdBakVKLGVBcUViQyxFQUFhQSxFQUFXRSxPQXJFWCxVQXNFYWpELEdBQXVCLGdCQXRFcEMsYUFzRVBrRCxFQXRFTyxVQXlFTUgsR0FBY0csRUFBWXhSLFNBQVdxUixFQUFXclIsUUFBVXdSLEVBQVlDLEtBQUssUUFBVUosRUFBV0ksS0FBSyxNQXpFM0csNkNBMkVGSixFQTNFRSx3QkE2RVh2RCxHQUFxQixlQUFnQnVELEdBN0UxQixVQThFZUssR0FBa0JMLEdBOUVqQyxTQThFTE0sRUE5RUssVUFnRlQ3RCxHQUFxQixxQkFBc0I2RCxHQUNuQixXQUFwQmIsR0FHRkMsZUFBZTVHLFFBQVF0RSxFQUFzQ29MLEtBQUtXLFVBQVVELEtBcEZyRSx3RkFBSCxzREFnR2RFLEdBQWdCLDZCQUFHLG1JQUNqQkMsRUFBWUMsU0FBU0MsV0FFM0JwRixHQUFPdkcsSUFBSSxrREFBb0R5TCxHQUV6REcsRUFBUy9NLE9BQU84SSxJQUNoQmtFLEVBQVlELEVBQU9DLFVBQ25CQyxFQUFTRixFQUFPRixTQUdoQkssRUFBYSxJQUFJQyxJQUNqQkMsRUFBaUIsSUFBSUQsSUFDckJFLEVBQWdCLElBQUlGLElBWkgsVUFlSy9ELEdBQXVCLFlBZjVCLFNBZW5Cd0MsRUFmbUIsU0FrQnJCd0IsRUFBZUUsSUFBSSxZQWxCRSxJQXNCS25DLElBdEJMLElBc0J2Qiw0QkFBV29DLEVBQThCLFNBQ3JCQyxTQUNoQkosRUFBZUUsSUFBSUMsRUFBY2xTLE1BeEJkLGtDQTRCSzhQLElBNUJMLGdFQTRCWm9DLEVBNUJZLFNBNkJIQyxRQTdCRyw0REFpQ2pCTixFQUFXN0csSUFBSWtILEVBQWNsUyxRQUFTK1IsRUFBZS9HLElBQUlrSCxFQUFjbFMsTUFqQ3RELHdCQW1DbkJrUyxFQUFjQyxTQUFVLEVBbkNMLG1DQXVDZ0IsTUFBakNELEVBQWNuQyxlQXZDRyxvQkF3Q2RRLEVBeENjLGtDQXlDT3hDLEdBQXVCLFlBekM5QixXQXlDakJ3QyxFQXpDaUIsK0JBMkNmeUIsRUFBY0MsSUFBSUMsRUFBY2xTLE1BM0NqQixxQ0FnRGZrUyxFQUFjbkMsZUFBZXZMLFFBQVErTCxHQUFtQixHQWhEekMsd0JBa0RqQjJCLEVBQWNDLFNBQVUsRUFsRFAsZ0NBdURyQixHQUE2QixhQUF6QkQsRUFBYzFXLE9BQ2hCNFcsR0FBYVYsRUFBUVEsRUFBZUwsRUFBWUcsUUFDM0MsR0FBNkIsZ0JBQXpCRSxFQUFjMVcsT0FBMEIsS0FDckJtVyxHQURxQixJQUNqRCwyQkFBV1UsRUFBNEIsUUFDckNELEdBQWFDLEVBQWVILEVBQWVMLEVBQVlHLEdBRlIsb0NBSTVDLEdBQTZCLFlBQXpCRSxFQUFjMVcsT0FBc0IsQ0FDeEM4VyxJQUNIQSxFQUFpQkMsTUFGMEIsSUFJdEJELEdBSnNCLElBSTdDLDJCQUFXRSxFQUE0QixRQUNyQ0osR0FBYUksRUFBVU4sRUFBZUwsRUFBWUcsR0FMUCxtQ0FPWCxhQUF6QkUsRUFBYzFXLFFBQ3ZCNFcsR0FBYVIsRUFBUU0sRUFBZUwsRUFBWUcsR0FyRTdCLGlKQXlFSSxJQUF2QkEsRUFBY25HLE1BQ2hCK0MsR0F0aUJ3QixHQXVpQnhCdkMsR0FBT3ZHLElBQUksK0RBQ2tCLElBQXBCK0wsRUFBV2hHLE1BRUYsYUFBZDBGLEdBQTBDLGdCQUFkQSxJQUM5QjVDLElBQXlCLEVBQ3pCQyxJQUF5QixHQUUzQnZDLEdBQU92RyxJQUFJLDRFQUNUNkksR0FBd0IsUUFDeEJDLEdBQXdCLG1CQUN4QnRJLE1BQU1JLEtBQUtzTCxHQUFlZCxLQUFLLE9BQVMsTUFHMUM3RSxHQUFPdkcsSUFBSSwwQ0FDVFEsTUFBTUksS0FBS3NMLEdBQWVkLEtBQUssT0FBUyxlQUN4Q1csRUFBV2hHLE1BMUZRLGlFQUFILHFEQStGaEJ1RyxHQUFlLFNBQUNsWSxFQUFLZ1ksRUFBZUwsRUFBWUcsSUFsV3BDLFNBQUM5WCxFQUFLZ1ksR0FDdEIsSUFBSTlYLEVBQ0FxWSxFQUVKLElBQ0UsT0FBUVAsRUFBYy9CLFNBQ3BCLElBQUssa0JBRUQvVixFQUFRaVUsR0FBUW5VLEVBQUtnWSxFQUFjbEMsVUFFbkMsSUFBTTBDLEVBQWVSLEVBQWM5WCxNQUFNd1QsTUFBTSxLQUMvQyxHQUE0QixJQUF4QjhFLEVBQWFqVCxPQUFjLE1BQy9CLElBQU1rVCxFQUFhRCxFQUFhLEdBQzFCRSxFQUFjRixFQUFhLEdBQ2pDLElBQUtDLElBQWVDLEVBQWEsTUFFakMsSUFBTUMsRUFBY3hFLEdBQVFuVSxFQUFLeVksR0FFakMsSUFBS0UsR0FBZUEsSUFBZ0JELEVBQWEsTUFFN0N4WSxJQUFVa00sTUFBTU8sUUFBUXpNLEdBQVNBLEVBQU1xRixPQUFTLEVBQUlyRixFQUFNcU0sV0FBV2tILE9BQU9sTyxPQUFTLEtBQ3ZGZ1QsRUFBYXJZLEdBR2pCLE1BQ0YsSUFBSyxrQkFFSCxHQURBQSxFQUFRRixFQUFJNFksY0FBY1osRUFBY2xDLFVBQzdCLENBQ1RrQyxFQUFjQyxTQUFVLEVBRXhCLElBQU1ZLEVBQWMsR0FDcEJiLEVBQWM1QixTQUFTOVMsU0FBUSxTQUFDd1YsR0FDOUIsSUFBTUMsRUFBZ0JuRCxHQUFZb0QsUUFBTyxTQUFDQyxHQUFELE9BQWFBLEVBQVFuVCxPQUFTZ1QsS0FFdkVELEVBQVk3VCxLQUFaLE1BQUE2VCxFQUFXLEVBQVNFLE9BR0wsSUFBSUcsaUJBQUosWUFBcUIsb0ZBRXBDTCxFQUFZdlYsU0FBUSxTQUFDMlYsR0FDbkJBLEVBQVFoQixTQUFVLEtBRWRrQixFQUFpQnpFLElBblFQLEdBb1FoQkQsR0FuUWtCLEdBb1FsQkMsR0FBd0IsRUFDcEJ5RSxJQUNGaEgsR0FBT3ZHLElBQUksc0RBQXNEb00sRUFBY2xTLE1BQy9FK08sTUFWa0MsNENBYTdCdUUsUUFBUWxaLEVBQU8sQ0FBQ21aLFNBQVMsRUFBTUMsV0FBVyxJQUVyRCxNQUNGLElBQUsscUJBQ0hwWixFQUFRRixFQUFJNFksY0FBY1osRUFBY2xDLFlBQzNCNVYsRUFBTXFaLFdBQWFyWixFQUFNcVosVUFBVTlGLE9BQU9sTyxPQUFTLElBQzlEZ1QsRUFBYXJZLEVBQU1xWixXQUVyQixNQUNGLElBQUssMEJBRUQsSUFBTUMsRUFBa0IsR0FFeEIsS0FEQXRaLEVBQVFGLEVBQUl5WixpQkFBaUJ6QixFQUFjbEMsWUFDWixJQUFqQjVWLEVBQU1xRixPQUFjLE1BSHBDLFVBSTJCckYsR0FKM0IsSUFJRSwyQkFBZ0MsS0FDeEJ3WixFQUR3QixRQUNDQyxhQUFhM0IsRUFBYzlYLE9BQ3REd1osR0FDRkYsRUFBZ0J4VSxLQUFLMFUsSUFQM0IsOEJBV01GLEVBQWdCalUsT0FBUyxJQUMzQmdULEVBQWFpQixHQUdqQixNQUNGLElBQUssd0JBQ0h0WixFQUFRRixFQUFJNFksY0FBY1osRUFBY2xDLGFBR3RDeUMsR0FEaUJyWSxFQUFNcVosVUFBVTlGLE9BQU9sTyxPQUFTLEdBQzNCZ0gsWUFFeEIsTUFDRixJQUFLLHFCQUNIck0sRUFBUUYsRUFBSXlaLGlCQUFpQnpCLEVBQWNsQyxhQUV6Q3lDLEVBQWFyWSxFQUFNcUYsUUFFckIsTUFDRixJQUFLLCtCQUNIckYsRUFBUUYsRUFBSTRZLGNBQWNaLEVBQWNsQyxZQUMzQjVWLEVBQU1xWixXQUFhclosRUFBTXFaLFVBQVU5RixPQUFPbE8sT0FBUyxJQUM5RGdULEVBQWFQLEVBQWM5WCxPQUU3QixNQUNGLElBQUssMEJBR0QsS0FEQUEsRUFBUUYsRUFBSXlaLGlCQUFpQnpCLEVBQWNsQyxZQUNaLElBQWpCNVYsRUFBTXFGLE9BQWMsTUFDbEMsSUFIRixFQUdNcVUsRUFBVyxFQUhqQixJQUlzQjFaLEdBSnRCLElBSUUsMkJBQTJCLEtBQ25CMlosRUFEbUIsUUFDRE4sVUFBVTlGLE9BQU9ySixRQUFRLE1BQU8sSUFDcER5UCxFQUFVdFUsT0FBUyxJQUNyQnFVLEdBQVV2TCxTQUFTd0wsS0FQekIsOEJBVU1ELEVBQVcsSUFDYnJCLEVBQWFxQixHQUdqQixNQUNGLElBQUsseUJBR0QsS0FEQTFaLEVBQVFGLEVBQUl5WixpQkFBaUJ6QixFQUFjbEMsWUFDWixJQUFqQjVWLEVBQU1xRixPQUFjLE1BQ2xDLElBSEYsRUFHUXVVLEVBQWlCLEdBSHpCLElBSXNCNVosR0FKdEIsSUFJRSwyQkFBMkIsS0FDbkIyWixFQURtQixRQUNETixVQUFVOUYsT0FDOUJvRyxFQUFVdFUsT0FBUyxHQUNyQnVVLEVBQWU5VSxLQUFLNlUsSUFQMUIsOEJBVU1DLEVBQWV2VSxPQUFTLElBQzFCZ1QsRUFBYXVCLEdBR2pCLE1BQ0YsUUFFTTVaLE9BREpBLEVBQVFpVSxHQUFRblUsRUFBS2dZLEVBQWNsQyxhQUNXMUosTUFBTU8sUUFBUXpNLEdBQVNBLEVBQU1xRixPQUFTLEVBQUlyRixFQUFNcU0sV0FBV2tILE9BQU9sTyxPQUFTLEtBQ3ZIZ1QsRUFBYXJZLEdBS25CLEdBQUlxWSxJQUNFUCxFQUFjakMsWUFDaEJ3QyxFQWxLaUIsU0FBQ3JZLEVBQU82VixHQUMvQixHQUFJN1YsTUFBQUEsSUFBMEM2VixFQUM1QyxPQUFPLEtBRVQsT0FBUUEsR0FDTixJQUFLLGNBQ0gsT0FBTzdWLEVBQU1xTSxXQUFXd04sWUFBWSxTQUN0QyxJQUFLLHFCQUNILE9BQU9DLEdBQW1COVosR0FDNUIsSUFBSyxjQUNILE9BQU9BLEVBQU1rSyxRQUFRLE1BQU8sSUFDOUIsSUFBSyx1QkFDSCxPQUFPbEssRUFBTXFNLFdBQVcwTixZQUFZLFNBQVN2RyxNQUFNLEtBQUssR0FDMUQsSUFBSyxVQUNILE9BQUl0SCxNQUFNTyxRQUFRek0sSUFBVUEsRUFBTXFGLE9BQVMsRUFDbENyRixFQUFNLEdBRVJBLEVBQ1QsSUFBSyxXQUNILE9BQU9BLEVBQU1xTSxXQUFXa0gsT0FDMUIsUUFDRSxPQUFPdlQsR0E2SVFnYSxDQUFpQjNCLEVBQVlQLEVBQWNqQyxZQUUxRDFDLEdBQXFCMkUsRUFBY2xTLEtBQU15UyxHQUN6Q1AsRUFBY0MsU0FBVSxFQUVwQkQsRUFBY2hDLFNBQ2hCbEIsR0FBZWtELEVBQWNoQyxTQUczQmdDLEVBQWM5QixXQUFhOUosTUFBTU8sUUFBUXFMLEVBQWM5QixZQUFjOEIsRUFBYzlCLFVBQVUzUSxPQUFTLEdBQUcsV0FDNUVxUSxJQUQ0RSxJQUMzRywyQkFBNEMsS0FBakN1RSxFQUFpQyxRQUN0Q25DLEVBQWM5QixVQUFVdEwsU0FBU3VQLEVBQWlCclUsUUFDcERxVSxFQUFpQmxDLFNBQVUsSUFINEUsK0JBUS9HLEdBQUlELEVBQWNDLFFBQ2hCLE9BQU8sRUFFVCxNQUFPbkosR0FDUHFELEdBQU9uTyxNQUFNLG9CQUFzQjhLLEdBRXJDLE9BQU8sRUFtTUhzTCxDQUFVcGEsRUFBS2dZLEdBR2pCRixFQUFjQyxJQUFJQyxFQUFjbFMsTUFGaEM2UixFQUFXSSxJQUFJQyxFQUFjbFMsT0FPM0IrTyxHQUFZLDZCQUFHLDhGQUNidUMsS0FEYSxPQUVmMUMsR0F0a0JzQixJQXVrQnhCdkMsR0FBT3ZHLElBQUksaURBQW1ENkksR0FBd0IsTUFDdEYzRSxXQUFXK0UsR0FBY0osTUFFekJ0QyxHQUFPdkcsSUFBSSwwRUFDWHVKLE1BUGlCLDJDQUFILHFEQWFaaEIsR0FBVSxTQUFWQSxFQUFXblUsRUFBS3FhLEdBQ3BCLElBQUtyYSxFQUFLLE9BQU8sS0FDakIsSUFBS3FhLEVBQU0sT0FBTyxLQUVsQixJQUdFLElBRkEsSUFBTUMsRUFBWUQsRUFBSzNHLE1BQU0sS0FDekI2RyxFQUFVdmEsRUFDTHdGLEVBQUksRUFBR0EsRUFBSThVLEVBQVUvVSxPQUFRQyxJQUFLLENBQ3pDLEdBQWdCLE9BQVorVSxFQUFrQixPQUFPLEtBQzdCLEdBQXFCLE1BQWpCRCxFQUFVOVUsR0FBWSxDQUN4QixJQUFNZ1YsRUFBVUYsRUFBVXpULE1BQU1yQixFQUFJLEdBQUd3UixLQUFLLEtBQ3RDeUQsRUFBVyxHQUNqQixJQUFLLElBQU1DLEtBQVVILEVBQ25CLFFBQXdCdGIsSUFBcEJzYixFQUFRRyxJQUE2QyxPQUFwQkgsRUFBUUcsR0FBa0IsQ0FDN0QsSUFBTUMsRUFBV3hHLEVBQVFvRyxFQUFRRyxHQUFTRixHQUN0Q0csTUFBQUEsR0FDRkYsRUFBU3pWLEtBQUsyVixHQUlwQixPQUFPRixFQUVURixFQUFVQSxFQUFRRCxFQUFVOVUsSUFFOUIsT0FBTytVLEVBQ1AsTUFBT3pMLEdBQ1AsT0FBTyxPQUlMOEYsR0FBZSw2QkFBRyxnSkFDaEJnRyxFQUFZblEsT0FBTzhJLElBQ25Cc0gsRUFBU0QsRUFBVUUsVUFFbkJDLEVBQVNDLE9BQU9DLGFBQ2hCOUwsRUFBWW1ILGVBQWU1SyxRQUFRTixHQUV6Q2lJLEdBQXFCLElBQUssVUFDMUJBLEdBQXFCLElBQUQsNEJBQTJCbEUsSUFDL0NrRSxHQUFxQixNQUFPMEgsR0FDNUIxSCxHQUFxQixLQUFNbkksR0FFckJnUSxHQUFXLFVBQUFOLEVBQVVFLGlCQUFWLG1CQUFxQksscUJBQXJCLGVBQW9DRCxZQUFwQyxVQUNmTixFQUFVRSxpQkFESyxhQUNmLEVBQXFCSSxZQUROLFVBRWZOLEVBQVVFLGlCQUZLLGFBRWYsRUFBcUJNLFdBRXZCL0gsR0FBcUIscUJBQXNCNkgsR0FHM0M3SCxHQUFxQixzQkFBdUJ1SCxFQUFVUyxrQkFFaERDLEdBQWMsVUFBQVYsRUFBVVcsY0FBVixlQUFrQkMsWUFBYSxLQUEvQixVQUFxQ1osRUFBVVcsY0FBL0MsYUFBcUMsRUFBa0JFLGFBQzNFcEksR0FBcUIscUJBQXNCaUksR0FFckNJLEdBQWMsVUFBQWQsRUFBVVcsY0FBVixlQUFrQkksWUFBYSxLQUEvQixVQUFxQ2YsRUFBVVcsY0FBL0MsYUFBcUMsRUFBa0JLLFlBQzNFdkksR0FBcUIscUJBQXNCcUksR0FFckNHLEdBQWEsVUFBQWpCLEVBQVVrQixzQkFBVixlQUEwQkMsT0FBUSxLQUFsQyxVQUF3Q25CLEVBQVVrQixzQkFBbEQsYUFBd0MsRUFBMEJFLFFBQ3JGM0ksR0FBcUIscUJBQXNCd0ksR0FFdkNOLE9BQU9RLFFBQ0xBLEVBQVExTixTQUFTa04sT0FBT1EsT0FDeEJDLEVBQVVULE9BQU9TLE9BQVUzTixTQUFTa04sT0FBT1MsUUFBVSxFQUMzQyxJQUFWRCxHQUEwQixJQUFYQyxJQUNMLG1CQUFtQnZQLEtBQUt5TyxJQUN6Qk4sRUFBVVMsa0JBRW5CVSxFQUFRbk8sS0FBSzBCLE1BQU15TSxFQUFRbkIsRUFBVVMsa0JBQ3JDVyxFQUFTcE8sS0FBSzBCLE1BQU0wTSxFQUFTcEIsRUFBVVMsbUJBRUMsS0FBcEN6TixLQUFLcU8sSUFBSXJCLEVBQVVzQixlQUdmQyxFQUFPSixFQUNiQSxFQUFRQyxFQUNSQSxFQUFTRyxHQUdiOUksR0FBcUIsZ0JBQWlCMEksRUFBUSxJQUFNQyxLQUt4RDNJLEdBQXFCLHFCQUFELFVBQXVCdUgsRUFBVXdCLGVBQWpDLGFBQXVCLEVBQW1CN1csUUFHekRzVixFQUFPTyxVQWFWL0gsR0FBcUIsa0JBQW1Cd0gsRUFBT08sV0FaM0NQLEVBQU9NLGdCQUVMa0IsRUFBV3hCLE1BQUFBLEdBRlMsVUFFVEEsRUFBUU0scUJBRkMsaUJBRVQsRUFBdUJtQixjQUZkLGFBRVQsRUFBK0IxTCxLQUFJLFNBQVM5QixHQUN6RCxPQUFPQSxFQUFFeU4sTUFBUSxJQUFNek4sRUFBRTBOLFdBQ3hCeEYsT0FFSHFGLEdBQWF4QixNQUFBQSxHQUFBLFVBQUFBLEVBQVFNLHFCQUFSLFNBQXVCc0IsT0FBUyxPQUFTLElBR3REcEosR0FBcUIsa0JBRHJCZ0osR0FBWW5CLElBT2hCN0gsR0FBcUIsb0JBQXFCd0gsRUFBTzZCLHFCQUNqRHJKLEdBQXFCLHFCQUFzQndILEVBQU84QixVQUM5QzlCLEVBQU8rQixpQkFDUC9CLEVBQU9nQyxnQkFDUGhDLEVBQU9pQyxjQUVYekosR0FBcUIsa0JBQW1Cd0gsRUFBT2tDLGdCQUMvQzFKLEdBQXFCLG1CQUFvQndILEVBQU9tQyxRQUNoRDNKLEdBQXFCLHVCQUFELFVBQXlCdUgsRUFBVUUsaUJBQW5DLGlCQUF5QixFQUFxQm1DLGtCQUE5QyxhQUF5QixFQUFpQ0MsVUFHeEVDLEVBQWEsSUFBSUMsSUFBSTNTLE9BQU84SSxJQUFJN0ksU0FBU0MsTUFDL0MwSSxHQUFxQixJQUFLOEosRUFBV3hTLE1BQ3JDMEksR0FBcUIsSUFBSzhKLEVBQVdFLFVBQ3JDaEssR0FBcUIsWUFBYXdILEVBQU95QyxZQUFjMUMsRUFBVTBDLFlBQWN6QyxFQUFPMEMsY0FFdEZsSyxHQUFxQixJQUFLdUgsRUFBVXRELFNBQVNrRyxXQUN2Q0MsRUFBdUJuSCxlQUFlNUssUUFBUU4sSUFLbERpSSxHQUFxQixLQUFNb0ssSUFIM0JuSCxlQUFlNUcsUUFBUXRFLEVBQXVDd1AsRUFBVXRELFNBQVNrRyxVQUNqRm5LLEdBQXFCLEtBQU11SCxFQUFVdEQsU0FBU2tHLFdBUTVDTCxFQUFXTyxTQUFTcFQsUUFBUSxxQkFBdUIsRUFDckRxVCxFQUFXLFlBQ0ZSLEVBQVdPLFNBQVNwVCxRQUFRLHlCQUEyQixFQUNoRXFULEVBQVcsU0FDRlIsRUFBV08sU0FBU3BULFFBQVEsdUJBQXlCLEVBQzlEcVQsRUFBVyxXQUNGUixFQUFXTyxTQUFTcFQsUUFBUSxlQUFpQixFQUN0RHFULEVBQVcsVUFDRlIsRUFBV08sU0FBU3BULFFBQVEsdUJBQXlCLEVBQzlEcVQsRUFBVyxVQUNGUixFQUFXTyxTQUFTcFQsUUFBUSxzQkFBd0IsRUFDN0RxVCxFQUFXLGFBQ0ZSLEVBQVdPLFNBQVNwVCxRQUFRLG1CQUFxQixFQUMxRHFULEVBQVcsV0FDRlIsRUFBV08sU0FBU3BULFFBQVEsb0JBQXNCLEVBQzNEcVQsRUFBVyxTQUNGUixFQUFXTyxTQUFTcFQsUUFBUSxvQkFBc0IsRUFDM0RxVCxFQUFXLGtCQUNGUixFQUFXTyxTQUFTcFQsUUFBUSx5QkFBMkIsRUFDaEVxVCxFQUFXLGVBQ0ZSLEVBQVdPLFNBQVNwVCxRQUFRLG9CQUFzQixFQUMzRHFULEVBQVcsb0JBQ0ZSLEVBQVdPLFNBQVNwVCxRQUFRLDJCQUE2QixFQUNsRXFULEVBQVcsd0JBQ0ZSLEVBQVdPLFNBQVNwVCxRQUFRLHdDQUEwQyxJQUMvRXFULEVBQVcscUJBR1RBLEdBQ0Z0SyxHQUFxQixXQUFZc0ssR0FqSWIsNENBQUgscURBcUlmNUksR0FBYSxXQUNqQixJQUFNNkYsRUFBWW5RLE9BQU84SSxJQUNuQnFLLEVBQWMsR0FDZEMsRUFBd0JqRCxFQUFVa0QsWUFBWUMsaUJBQWlCLGNBQWMsR0FDL0VuRCxFQUFVa0QsYUFBZUQsSUFDM0JELEVBQVlJLFFBQVVwUSxLQUFLMEIsTUFBTXVPLEVBQXNCSSxXQUFhSixFQUFzQkssY0FDMUZOLEVBQVlPLFFBQVV2USxLQUFLMEIsTUFBTXVPLEVBQXNCTyxZQUFjUCxFQUFzQlEsY0FDM0ZULEVBQVlVLElBQU0xUSxLQUFLMEIsTUFBTXVPLEVBQXNCVSxZQUFjVixFQUFzQlcsZ0JBQ3ZGWixFQUFZYSxLQUFPN1EsS0FBSzBCLE1BQU11TyxFQUFzQmEsYUFBZWIsRUFBc0JjLGdCQUN6RmYsRUFBWWdCLFNBQVdoUixLQUFLMEIsTUFBTXVPLEVBQXNCZSxXQUUxRHZMLEdBQXFCLFVBQVd1SyxJQUk1QnZGLEdBQWUsV0FDbkIsSUFEeUIsRUFFbkJ3RyxFQUFZLEdBRk8sSUFDSHBVLE9BQU84SSxJQUFJK0QsU0FBU21DLGlCQUFpQixpQ0FEbEMsSUFJekIsMkJBQWtDLEtBQXZCcUYsRUFBdUIsUUFDaEMsSUFDRSxJQUFNQyxFQUFRRCxFQUFLRSxZQUNiQyxFQUFjekksS0FBS0MsTUFBTXNJLEdBQy9CRixFQUFVN1osS0FBS2lhLEdBQ2YsTUFBTzFlLE1BVGMsOEJBYXpCLE9BQU9zZSxHQUdMSyxJQUE4QixFQUVyQmpJLEdBQWlCLDZCQUFHLFdBQU9rSSxHQUFQLDRFQUMxQkEsR0FBOEIsSUFBbkJBLEVBQVE1WixPQURPLHVCQUU3QjRNLEdBQU9ZLE9BQU8sbUNBRmUsa0JBR3RCLE1BSHNCLFdBTTNCbU0sR0FOMkIsdUJBTzdCL00sR0FBT1ksT0FBTywwQ0FQZSxrQkFRdEIsTUFSc0IsY0FXL0JaLEdBQU92RyxJQUFJLG9EQUFvRHVULElBRXpEQyxFQUFVLElBQUlDLFNBQ1pDLE9BQU8sZUFBZ0Isb0JBRS9CSixJQUE4QixFQUMxQmhJLEVBQWMsS0FqQmEsb0JBbUJUcUksTWZsNEJNLGtDZWs0QmdCLENBQ3hDamUsT0FBUSxPQUNSa2UsS0FBTWhKLEtBQUtXLFVBQVVnSSxHQUNyQkMsUUFBQUEsRUFDQXhNLEtBQU0sU0F2QnFCLGFBbUI3QnNFLEVBbkI2QixRQXlCYnVJLEdBekJhLGtDQTBCUHZJLEVBQVl3SSxPQTFCTCxRQTBCM0J4SSxFQTFCMkIsa0VBNkI3Qi9FLEdBQU9wRyxLQUFLLDJDQTdCaUIsZUFnQy9CbVQsSUFBOEIsRUFoQ0Msa0JBaUN4QmhJLEdBakN3QiwyREFBSCxzRCwyZ0NDNTJCOUIsSUFBTS9FLEdBQVMsSUFBSTdHLEVBQU8sZ0JBQ3BCcVUsR0FBUyxDQUNiLEtBQVEsRUFDUixRQUFTLEVBQ1QsS0FBUSxFQUNSLE1BQVMsRUFDVCxRQUFTLEVBQ1QsUUFBVyxFQUNYLE9BQVUsRUFDVixVQUFXLEVBQ1gsUUFBUyxFQUNULEtBQVEsRUFDUixRQUFTLEdBQ1QsU0FBVSxJQWFQM0UsUUFBdUMsbUJBQXRCQSxPQUFPQyxhQVIzQkQsT0FBT0MsV0FBYSxXQUNsQixPQUNFLENBQUMsTUFBUSxLQUFPLEtBQU8sS0FBTyxNQUFNN1EsUUFBUSxVQUMxQyxTQUFDd1YsR0FBRCxPQUFRQSxFQUFJNUUsT0FBTzZFLGdCQUFnQixJQUFJQyxXQUFXLElBQUksR0FBSyxJQUFNRixFQUFJLEdBQUdyVCxTQUFTLFNBU2xGLElBQU13VCxHQUFxQixXQUNoQ3RWLE9BQU84SSxJQUFJK0QsU0FBUzBJLGdCQUFnQkMsVUFBVUMsT0FBTyxpQkFHMUNDLEdBQWUsNkJBQUcsNkZBQzdCaE8sR0FBT3ZHLElBQUksdUJBRGtCLFNBRUoyVCxNaEIzQ1EsOENnQnlDSixjQUV2QmEsRUFGdUIsZ0JBR0RBLEVBQVdWLE9BSFYsY0FHdkJXLEVBSHVCLHlCQUl0QkEsR0FKc0IsMkNBQUgscURBT2ZDLEdBQXFCLDZCQUFHLDZGQUNuQ25PLEdBQU92RyxJQUFJLDhCQUR3QixTQUVKMlQsTUFBTS9VLEdBRkYsY0FFN0IrVixFQUY2QixnQkFHQUEsRUFBaUJiLE9BSGpCLGNBRzdCYyxFQUg2Qix5QkFJNUJBLEdBSjRCLDJDQUFILHFEQU9yQkMsR0FBMEIsU0FBQ0MsRUFBY0MsR0FDcEQsSUFBS0QsRUFDSCxPQUFPLEtBR1QsSUFVSUUsRUFWV0YsRUFDVmhOLE1BQU0sS0FDTjlDLEtBQUksU0FBQ2lRLEdBQUQsT0FBT0EsRUFBRW5OLE1BQU0sUUFDbkJvTixRQUFPLFNBQUNDLEVBQUtGLEdBSVosT0FISUEsRUFBRSxJQUFNQSxFQUFFLEtBQ1pFLEVBQUlDLG1CQUFtQkgsRUFBRSxHQUFHcE4sU0FBV3VOLG1CQUFtQkgsRUFBRSxHQUFHcE4sU0FFMURzTixJQUNOLElBRWlCSixHQUN4QixPQUFLQyxHQUdjLFFBQWZELElBR0ZDLEVBQWFBLEVBQVdsTixNQUFNLEtBRE4sSUFHbkJrTixHQVBFLE1BVUVLLEdBQVksNkJBQUcsV0FBT0wsR0FBUCx5RkFJbEJNLEVBRGtCLEdBRGxCQyxFQUF5QixHQUcxQlAsRUFMbUIsMENBTWQsR0FOYyx1QkFRQ1EsR0FBaUJSLEdBUmxCLGNBUWxCUyxFQVJrQixPQVdsQkMsRUFBYWpULFNBQVNnVCxFQUFXOVcsVUFBVTRXLEVBQXdCRCxHQUF1QixJQVh4RSxrQkFhakJJLEVBQWEsS0FiSSx5Q0FleEJuUCxHQUFPWSxPQUFPLGtDQUFtQyxLQUFJd08sU0FmN0IsbUJBZ0JoQixHQWhCZ0IsMERBQUgsc0RBb0JaSCxHQUFnQiw2QkFBRyxXQUFPSSxHQUFQLGtGQUV4QkMsR0FBVSxJQUFJQyxhQUFjQyxPQUFPSCxHQUZYLFNBS0x4RyxPQUFPNEcsT0FBT0MsT0FBTyxRQUFTSixHQUx6QixjQUt4QkssRUFMd0IsT0FReEJDLEVBQVkzVixNQUFNSSxLQUFLLElBQUlzVCxXQUFXZ0MsSUFSZCxrQkFXdkJDLEVBQVVuUixLQUFJLFNBQUNvUixHQUFELE9BQU9BLEVBQUV6VixTQUFTLElBQUl5RixTQUFTLEVBQUcsUUFBTWdGLEtBQUssS0FYcEMsMkNBQUgsc0RBcUNoQmlMLEdBQWtCLFNBQUNDLEVBQVVDLEdBQ3hDaFEsR0FBT3ZHLElBQUkseUJBQTBCdVcsRUFBaUIsY0FBZUQsR0FDckUsSUFBSyxJQUFJMWMsRUFBSSxFQUFHQSxFQUFJMGMsRUFBUzNjLE9BQVFDLElBRW5DLElBREEsSUFBTXlULEVBQVVpSixFQUFTMWMsR0FDekIsTUFBMkJyRyxPQUFPaWpCLFFBQVFELEdBQTFDLGVBQTRELENBQXZELGdCQUFPbGlCLEVBQVAsS0FBWUMsRUFBWixLQUNIK1ksRUFBUW9KLE1BQU1waUIsR0FBT0MsSUFLZG9pQixHQUFnQiw2QkFBRyxxRkFDeEJDLEVBQWE5WCxPQUFPOEksSUFBSStELFNBQVNrTCxjQUFjLFNBQzFDQyxJQUFNLGFBQ2pCRixFQUFXamdCLEtBQU8sV0FDbEJpZ0IsRUFBVzVYLEtBQU9FLEVBQ2xCSixPQUFPOEksSUFBSStELFNBQVNvTCxLQUFLQyxZQUFZSixHQUxQLDJDQUFILHFEQVFoQkssR0FBYyw2QkFBRyxXQUFPaEMsRUFBWWlDLEVBQWtCeE8sR0FBckMsK0dBQ3RCeU8sRUFBVXRNLEtBQUtDLE1BQU1ELEtBQUtXLFVBQVUwTCxJQUN0Q3ZPLEVBQVUsS0FGYyxLQUdQd08sR0FITyw0REFHakJDLEVBSGlCLFFBSW5CQyxFQUF5Q0QsRUFBekNDLDRCQUE2QkMsRUFBWUYsRUFBWkUsU0FDL0JELEdBQWdDQyxFQUxYLHdEQU0xQixHQUFJNU8sR0FBa0IyTyxFQUE2QixNQUNaQSxHQURZLElBQ2pELDJCQUNFLElBRFNFLEVBQXVELFNBQ3JDbFQsS0FBT3FFLEVBQ2hDLElBQVdwVSxLQUFPaWpCLEVBQ0osT0FBUmpqQixJQUNGOGlCLEVBQU85aUIsR0FBT2lqQixFQUF1QmpqQixJQUxJLCtCQU56QixJQWlCdEJnakIsRUFqQnNCLHVCQWtCQzlqQixPQUFPbUgsS0FBSzJjLEdBbEJiLGlEQWtCYkUsRUFsQmEsZUFtQkVsQyxHQUFhTCxFQUFhdUMsR0FuQjVCLG9CQW9CTkosRUFBT0UsU0FBU0UsR0FBWUMsUUFwQnRCLG9CQXFCcEI5TyxFQUFVNk8sR0FDTjlPLElBQWtCNE8sRUFBU0UsR0FBWUgsNEJBdEJ2QixzQkF1Qm1CQyxFQUFTRSxHQUFZSCw2QkF2QnhDLCtEQXVCUEUsRUF2Qk8sU0F3QldsVCxJQUFNcUUsRUF4QmpCLHVCQXlCSWxWLE9BQU9tSCxLQUFLNGMsR0F6QmhCLDZDQTBCQSxRQURIampCLEVBekJHLDhEQTJCWjhpQixFQUFPOWlCLEdBQU9pakIsRUFBdUJqakIsR0EzQnpCLHFNQWdDbEIsSUFBV0EsS0FBT2dqQixFQUFTRSxHQUNiLFdBQVJsakIsR0FBNEIsZ0NBQVJBLElBQ3RCOGlCLEVBQU85aUIsR0FBT2dqQixFQUFTRSxHQUFZbGpCLElBbENyQix3T0EyQ3JCLENBQUM2aUIsRUFBU3hPLElBM0NXLDhFQUFILDBEQTRFZCtPLEdBQW1CLFNBQUNDLEVBQWNDLEVBQVdyakIsR0FDeEQsR0FBa0IsYUFBZHFqQixFQUNGLE9BQUtELEdBSUxuUixHQUFPWSxPQUFPLHdEQUNQLElBSkxaLEdBQU9xUixRQUFRLHdEQUNSLEdBS1gsR0FBSUYsTUFBQUEsR0FBQUEsTUFFRkMsRUFHQSxPQURBcFIsR0FBT1ksT0FBTywrREFDUCxFQUVULE9BQVF3USxHQUNOLElBQUssUUFDSCxPQUFJRCxHQUNGblIsR0FBT3FSLFFBQVEsb0RBQ1IsSUFFVHJSLEdBQU9ZLE9BQU8sNERBQ1AsR0FDVCxJQUFLLFdBQ0wsSUFBSyxXQUNILE9BQUl1USxFQUFhMVksU0FBUzFLLElBQ3hCaVMsR0FBT3FSLFFBQVEsd0RBQ1IsSUFFVHJSLEdBQU9ZLE9BQU8sb0VBQ1AsR0FDVCxJQUFLLGNBQ0wsSUFBSyxjQUNILE9BQUt1USxFQUFhMVksU0FBUzFLLElBSTNCaVMsR0FBT1ksT0FBTyw0REFDUCxJQUpMWixHQUFPcVIsUUFBUSxnRUFDUixHQUlYLElBQUssUUFDSCxPQUFJRixJQUFpQnBqQixHQUNuQmlTLEdBQU9xUixRQUFRLHNEQUNSLElBRVRyUixHQUFPWSxPQUFPLGtFQUNQLEdBQ1QsSUFBSyxXQUNILE9BQUl1USxJQUFpQnBqQixHQUNuQmlTLEdBQU9xUixRQUFRLDhEQUNSLElBRVRyUixHQUFPWSxPQUFPLDBEQUNQLEdBQ1QsSUFBSyxjQUNILE9BQUl1USxFQUFlcGpCLEdBQ2pCaVMsR0FBT3FSLFFBQVEsK0RBQ1IsSUFFVHJSLEdBQU9ZLE9BQU8sdUVBQ1AsR0FDVCxJQUFLLFdBQ0gsT0FBSXVRLEVBQWVwakIsR0FDakJpUyxHQUFPcVIsUUFBUSw0REFDUixJQUVUclIsR0FBT1ksT0FBTyxvRUFDUCxHQUNULElBQUssZ0JBQ0gsT0FBSXVRLEdBQWdCcGpCLEdBQ2xCaVMsR0FBT3FSLFFBQVEsd0VBQ1IsSUFFVHJSLEdBQU9ZLE9BQU8sZ0ZBQ1AsR0FDVCxJQUFLLGFBQ0gsT0FBSXVRLEdBQWdCcGpCLEdBQ2xCaVMsR0FBT3FSLFFBQVEscUVBQ1IsSUFFVHJSLEdBQU9ZLE9BQU8sNkVBQ1AsR0FDVCxJQUFLLFVBQ0gsUUFBaUI3UyxFQUFNd1QsTUFBTSxLQUE3QixHQUFLakIsRUFBTCxLQUFVdkIsRUFBVixLQUdBLE9BRkF1QixFQUFNcEUsU0FBU29FLEdBQ2Z2QixFQUFNN0MsU0FBUzZDLEdBQ1hvUyxHQUFnQjdRLEdBQU82USxHQUFnQnBTLEdBQ3pDaUIsR0FBT3FSLFFBQVEsZ0VBQ1IsSUFFVHJSLEdBQU9ZLE9BQU8sd0VBQ1AsR0FFVCxJQUFLLFFBRUgsT0FEYyxJQUFJMFEsT0FBT3ZqQixFQUFPLEtBQ25CdU0sS0FBSzZXLEdBRXBCLFFBRUUsT0FEQW5SLEdBQU9ZLE9BQU8sOENBQStDd1EsSUFDdEQsSUFJQUcsR0FBZSxTQUFDQyxHQUMzQixJQUFPQyxFQUE0QnZZLEVBQWhCd1ksRUFBZ0J4WSxFQUM3QnlZLEVBQWNyWixPQUFPQyxTQUFTcVosT0FDcEMsR0FBSUQsRUFBWWxaLFNBQVMsY0FJdkIsT0FIQUgsT0FBT2dCLGFBQWFpRSxRQUFRa1UsRUFBWSxHQUN4Q25aLE9BQU9nQixhQUFhaUUsUUFBUW1VLEVBQWNGLEdBQzFDdFEsR0FBcUIsTUFBTyxNQUNyQixFQUVULEdBQUl5USxFQUFZbFosU0FBUyxjQUl2QixPQUhBSCxPQUFPZ0IsYUFBYWlFLFFBQVFrVSxFQUFZLEdBQ3hDblosT0FBT2dCLGFBQWFpRSxRQUFRbVUsRUFBY0YsR0FDMUN0USxHQUFxQixNQUFPLE1BQ3JCLEVBRVQsR0FBSXlRLEVBQVlsWixTQUFTLGNBSXZCLE9BSEFILE9BQU9nQixhQUFhdVksV0FBV0osR0FDL0JuWixPQUFPZ0IsYUFBYWlFLFFBQVFtVSxFQUFjRixHQUMxQ3RRLEdBQXFCLE1BQU8sT0FDckIsRUFFVCxJQUFNa0gsRUFBVWxNLFNBQVM1RCxPQUFPZ0IsYUFBYUMsUUFBUWtZLElBRXJELE9BREF2USxHQUFxQixNQUFRa0gsRUFBVSxLQUFPLE9BQ3RDQSxHQUFXLEdBR1IwSixHQUFhLDZCQUFHLHVHQUFPdEQsRUFBUCwrQmhCNVdGLE1nQjRXRSxrQkFDcEIsSUFBSXZhLFNBQVEsU0FBQzFDLEdBQ2xCLElBQUlzTSxFQUFLdkYsT0FBT2dCLGFBQWFDLFFBQVFMLEdBR3JDLEdBRkkyRSxHQUFJdE0sRUFBUXNNLEdBQ2hCQSxFQUFLeVEsR0FBd0JoVyxPQUFPOEksSUFBSStELFNBQVM0TSxPQUFRdkQsR0FFdkRsVyxPQUFPZ0IsYUFBYWlFLFFBQVFyRSxFQUE0QjJFLEdBQ3hEdE0sRUFBUXNNLE9BQ0gsQ0FDTCxJQUFNbVUsRUFBNEJ2VSxhQUFZLFlBQzVDSSxFQUFLeVEsR0FBd0JoVyxPQUFPOEksSUFBSStELFNBQVM0TSxPQUFRdkQsTUFFdkQ5USxjQUFjc1UsR0FDZDFaLE9BQU9nQixhQUFhaUUsUUFBUXJFLEVBQTRCMkUsR0FDeER0TSxFQUFRc00sTUFFVCxJQUNIRixZQUFXLFdBQ1RELGNBQWNzVSxHQUNkaFMsR0FBT1ksT0FBTyx1Q0FDZHJQLEVBQVEsUUFDUCxVQXJCb0IsMkNBQUgscURBMEJiMGdCLEdBQVEsU0FBQ0MsR0FBRCxPQUFRLElBQUlqZSxTQUFRLFNBQUNrZSxHQUFELE9BQVN4VSxXQUFXd1UsRUFBS0QsT0FFckRySyxHQUFxQixTQUFDdUssR0FDakMsSUFBS0EsR0FBd0IsaUJBQVRBLEVBQW1CLE9BQU9BLEVBRTlDLElBQU0zZ0IsRUFBUyxDQUNiNGdCLHFCQUFpQnZsQixFQUNqQndsQixtQkFBZXhsQixFQUNmeWxCLGNBQVV6bEIsRUFDVjBsQixZQUFRMWxCLEdBR040VCxFQUFRMFIsRUFBSzFSLE1BQU0sNkNBQ3ZCLEdBQUlBLEdBQTBCLElBQWpCQSxFQUFNdE4sT0FDakIzQixFQUFPOGdCLFNBQVdyVyxTQUFTd0UsRUFBTSxJQUNqQ2pQLEVBQU8rZ0IsT0FBU3RXLFNBQVN3RSxFQUFNLElBQy9CalAsRUFBTzRnQixnQkFBa0I3RSxHQUFPOU0sRUFBTSxHQUFHb0gsZUFDekNyVyxFQUFPNmdCLGNBQWdCN2dCLEVBQU80Z0Isb0JBQ3pCLENBRUwsS0FEQTNSLEVBQVEwUixFQUFLMVIsTUFBTSx1RUFDWSxJQUFqQkEsRUFBTXROLE9BQWMsT0FBT2dmLEVBRXpDM2dCLEVBQU84Z0IsU0FBV3JXLFNBQVN3RSxFQUFNLElBQ2pDalAsRUFBTzRnQixnQkFBa0I3RSxHQUFPOU0sRUFBTSxHQUFHb0gsZUFDekNyVyxFQUFPK2dCLE9BQVN0VyxTQUFTd0UsRUFBTSxJQUMvQmpQLEVBQU82Z0IsY0FBZ0I5RSxHQUFPOU0sRUFBTSxHQUFHb0gsZUFHekMsSUFDRSxJQUFNMkssRUFBUSxJQUFJOVosS0FFbEIsSUFBS2xILEVBQU80Z0Isa0JBQW9CNWdCLEVBQU82Z0IsY0FBZSxPQUFPRixFQUU3RCxJQUFNTSxFQUFZamhCLEVBQU80Z0IsaUJBQW1CSSxFQUFNN1MsV0FBYTZTLEVBQU05UyxjQUFnQjhTLEVBQU05UyxjQUFnQixFQUNyR2dULEVBQVVsaEIsRUFBTzZnQixlQUFpQkcsRUFBTTdTLFdBQWE2UyxFQUFNOVMsY0FBZ0I4UyxFQUFNOVMsY0FBZ0IsRUFFakdpVCxFQUFpQixJQUFJamEsS0FBSytaLEVBQVdqaEIsRUFBTzRnQixnQkFBaUI1Z0IsRUFBTzhnQixVQUNwRU0sRUFBZSxJQUFJbGEsS0FBS2dhLEVBQVNsaEIsRUFBTzZnQixjQUFlN2dCLEVBQU8rZ0IsUUFHOURNLEVBQW9CclgsS0FBS3NYLEtBQUt0WCxLQUFLcU8sSUFBSThJLEVBQWlCSCxHQUExQixPQUM5Qk8sRUFBa0J2WCxLQUFLc1gsS0FBS3RYLEtBQUtxTyxJQUFJK0ksRUFBZUosR0FBeEIsT0FFNUJRLEVBQXFCSCxFQUFvQixFQUFJLEVBQUlyWCxLQUFLc1gsS0FBS0QsRUFBb0IsR0FDL0VJLEVBQW1CRixFQUFrQixFQUFJLEVBQUl2WCxLQUFLc1gsS0FBS0MsRUFBa0IsR0FFL0UsT0FBMkIsSUFBdkJDLEdBQWlELElBQXJCQyxFQUM5QixVQUFVSixFQUFWLGNBQWlDRSxFQUFqQyxRQUd5QixJQUF2QkMsR0FBNEJDLEdBQW9CLEVBQ2xELFVBQVVKLEVBQVYsa0JBQXFDSSxFQUFyQyxVQUdFRCxJQUF1QkMsRUFDekIsVUFBVUQsRUFBVixVQUdGLFVBQVVBLEVBQVYsY0FBa0NDLEVBQWxDLFVBQ0EsTUFBTzlrQixHQUNQLE9BQU9na0IsSUFJRWUsR0FBUyw2QkFBRyxXQUFPQyxFQUFTQyxHQUFoQixNQUtkQyxFQUxjLGlFQUtkQSxFQUxjLFdBTXJCQyxhQUFhQyxHQUNiQSxFQUFjN1YsV0FBVzBWLEVBQVVELElBTmpDSSxFQUFjN1YsV0FBVzBWLEVBQVVELEdBRXZDOWEsT0FBTzhJLElBQUkrRCxTQUFTc08sYUFBZUgsRUFIWiwyQ0FBSCx3RENwY1RJLEdBQWIsV0FDRSxhQUFjLFVBQ1o5aUIsS0FBS29QLE9BQVMsSUFBSTdHLEVBQU8sa0JBQ3pCdkksS0FBS29QLE9BQU92RyxJQUFJLHdCQUVoQjdJLEtBQUsraUIsc0JBQXdCLEtBQzdCL2lCLEtBQUtnakIsMEJBQTJCLEVBQ2hDaGpCLEtBQUtpakIsaUNBQW1DLEtBQ3hDampCLEtBQUtrakIscUNBQXNDLEVBQzNDbGpCLEtBQUtxYyxRQUFVLENBQ2I5YyxLQUFNLGNBRVJTLEtBQUttakIsVUFBVyxFQUVoQm5qQixLQUFLb2pCLCtCQWRULDJEQWlCRSwyR0FBZTVFLEVBQWYsK0JBQXlCLEtBQU02RSxFQUEvQixpQ0FDU2pVLEVBQVVwUCxLQUFWb1AsUUFDQXZHLElBQUksZ0JBRTRCLGFBQW5DbkIsT0FBTzhJLElBQUkrRCxTQUFTQyxZQUN0QnBGLEVBQU92RyxJQUFJLHdDQUNYbkIsT0FBTzRiLGlCQUFpQixRQUFRLFdBQzlCbFUsRUFBT3ZHLElBQUksbUJBQ1gsRUFBSzBhLGdCQUFnQixFQUFLQyxlQUFlaEYsR0FBVTZFLE1BQ2xELElBRUhyakIsS0FBS3VqQixnQkFBZ0J2akIsS0FBS3dqQixlQUFlaEYsR0FBVTZFLEdBWHZELGdEQWpCRix5RkFnQ0UsV0FBc0JJLEdBQXRCLDRIQUNrQnpqQixLQUFLbWpCLFNBRHZCLG9EQUVTL1QsRUFBVXBQLEtBQVZvUCxPQUVGcVUsRUFKUCx1QkFLSXJVLEVBQU9ZLE9BQU8saUNBTGxCLGlDQVFFWixFQUFPdkcsSUFBSSx5QkFBMEI0YSxHQUNyQ3pqQixLQUFLMGpCLFVBQVVELEdBRWZ6akIsS0FBS21qQixVQUFXLEVBWGxCLFVBWXdCclMsR0FBdUIsS0FaL0MsZUFZUTZTLEVBWlIsaUJBYW1DN1MsR0FBdUIsS0FiMUQsZUFhUThTLEVBYlIsaUJBY3FDdkYsR0FBaUJzRixHQWR0RCxlQWNFM2pCLEtBQUsraUIsc0JBZFAsaUJBZWdEMUUsR0FBaUJ1RixHQWZqRSxRQWVFNWpCLEtBQUtpakIsaUNBZlAsd0RBaENGLDhGQWtERSwwR0FDd0JuUyxHQUF1QixLQUQvQyxjQUNRNlMsRUFEUixnQkFFbUM3UyxHQUF1QixLQUYxRCxjQUVROFMsRUFGUixnQkFHNkN2RixHQUFpQnNGLEdBSDlELGNBR1FFLEVBSFIsaUJBSXdEeEYsR0FBaUJ1RixHQUp6RSxRQUlRRSxFQUpSLE9BTU1ELElBQWlDN2pCLEtBQUsraUIsd0JBQ3hDL2lCLEtBQUtnakIsMEJBQTJCLEVBQ2hDaGpCLEtBQUsraUIsc0JBQXdCYyxHQUUzQkMsSUFBNEM5akIsS0FBS2lqQixtQ0FDbkRqakIsS0FBS2tqQixxQ0FBc0MsRUFDM0NsakIsS0FBS2lqQixpQ0FBbUNhLEdBWjVDLGlEQWxERix5RUFrRUUsV0FHRSxJQUg2QixJQUFoQnRGLEVBQWdCLHVEQUFOLEtBQ2hCbkMsRUFBV3JjLEtBQVhxYyxRQUNESSxFQUFPLEdBQ2IsTUFBMkJyZ0IsT0FBT2lqQixRQUFRM1gsT0FBTzBJLGlCQUFqRCxlQUFtRSxDQUE5RCxnQkFBT2xULEVBQVAsS0FBWUMsRUFBWixLQUNFRCxFQUFJNm1CLFdBQVcsT0FBTXRILEVBQUt2ZixHQUFPQyxHQVl4QyxPQVZBc2YsRUFBS3VILEVBQUlqYyxLQUFLeUUsTUFDVmdTLEVBQ0VBLEVBQVF1RixXQUFXLFdBQ3JCdEgsRUFBS3dILEVBQUl6RixHQUFXcGlCLE9BQU9tSCxLQUFLa1osRUFBSy9XLEdBQUssSUFBSWxELE9BQVMsRUFBSSxxQkFBdUIseUJBQzdFaWEsRUFBS3dILEVBQUl6RixFQUNQcGlCLE9BQU9tSCxLQUFLa1osRUFBSy9XLEdBQUssSUFBSWxELE9BQVMsRUFDNUNpYSxFQUFLd0gsRUFBSSxxQkFFVHhILEVBQUt3SCxFQUFJLHdCQUVKLElBQUlDLEtBQUssQ0FBQ3pRLEtBQUtXLFVBQVVxSSxJQUFRSixLQWxGNUMsa0NBcUZFLFdBQ0UsSUFBT0EsRUFBMEVyYyxLQUExRXFjLFFBQVMyRyxFQUFpRWhqQixLQUFqRWdqQix5QkFBMEJFLEVBQXVDbGpCLEtBQXZDa2pCLG9DQUMxQyxJQUFLRixJQUE2QkUsRUFBcUMsT0FBTyxFQUM5RSxJQUFNekcsRUFBTyxDQUNYdUgsRUFBR2pjLEtBQUt5RSxNQUNSOUcsRUFBR3NkLEVBQTJCdGIsT0FBTzBJLGdCQUFnQjFLLEVBQUksR0FDekRxRyxFQUFHbVgsRUFBc0N4YixPQUFPMEksZ0JBQWdCckUsRUFBSSxHQUNwRW9ZLElBQUt6YyxPQUFPMEksZ0JBQWdCK1QsS0FFOUIsT0FBTyxJQUFJRCxLQUFLLENBQUN6USxLQUFLVyxVQUFVcUksSUFBUUosS0E5RjVDLDBDQWlHRSxXQUErQixXQUN0QmpOLEVBQVVwUCxLQUFWb1AsT0FDSGdWLEdBQXNCLEVBQzFCaFYsRUFBT3ZHLElBQUksb0NBQ1huQixPQUFPNGIsaUJBQ0gsZ0JBQ0EsV0FDRSxHQUFLLEVBQUtILFVBSVYsSUFBSWlCLEVBQUosQ0FDQUEsR0FBc0IsRUFDdEJoVixFQUFPdkcsSUFBSSx5QkFDWCxJQUFNd2IsRUFBVSxFQUFLQyx1QkFDaEJELEVBSUwsRUFBS1gsVUFBVVcsR0FIYmpWLEVBQU92RyxJQUFJLDJCQVJYLEVBQUswYSxnQkFBZ0IsRUFBS0MsZUFBZSxnQkFhN0MsQ0FBQ2UsU0FBUyxJQUVkN2MsT0FBTzRiLGlCQUNILFlBQ0EsV0FDRSxHQUFLLEVBQUtILFVBSVYsSUFBSWlCLEVBQUosQ0FDQUEsR0FBc0IsRUFDdEJoVixFQUFPdkcsSUFBSSxxQkFDWCxJQUFNd2IsRUFBVSxFQUFLQyx1QkFDaEJELEVBSUwsRUFBS1gsVUFBVVcsR0FIYmpWLEVBQU92RyxJQUFJLDJCQVJYLEVBQUswYSxnQkFBZ0IsRUFBS0MsZUFBZSxnQkFhN0MsQ0FBQ2UsU0FBUyxNQXpJbEIsdUJBNklFLFNBQVVGLEdBQ1IsSUFBT2pWLEVBQVVwUCxLQUFWb1AsT0FFUCxHQUFLMkksVUFBVXlNLFlBQThDLG1CQUF6QnpNLFVBQVV5TSxXQUE5QyxDQUtBLElBQUlDLEVBQVMxTSxVQUFVeU0sV0FBV3ZjLEVBQWFvYyxHQUN6Q0ssRUFBZ0I3WCxhQUFZLFdBQzNCNFgsR0FFSDNYLGNBQWM0WCxHQUNkdFYsRUFBT3ZHLElBQUksNkJBSEE0YixFQUFTMU0sVUFBVXlNLFdBQVd2YyxFQUFhb2MsS0FLdkQsSUFDSHRYLFlBQVcsV0FDVEQsY0FBYzRYLEdBQ1RELEdBQ0hyVixFQUFPdkcsSUFBSSxxQkFFWixVQWpCRDJULE1BQU12VSxFQUFhb2MsT0FqSnpCLEtBc0tBLE0sMmdDQ3ZLQSxJQUFNalYsR0FBUyxJQUFJN0csRUFBTyxnQkFFcEJvYyxHQUFRLDZCQUFHLFdBQU94bkIsRUFBT3luQixHQUFkLGlHQUNYdmIsTUFBTU8sUUFBUXpNLEdBREgsc0JBRVVBLEVBQU1raUIsV0FGaEIsMkVBRUQ1YyxFQUZDLEtBRUVvaUIsRUFGRixLQUlxQixXQUE1QixFQURFQyxFQUFtQnpiLE1BQU1PLFFBQVFnYixHQUFhQSxFQUFVbmlCLEdBQUttaUIsR0FBYSxJQUhyRSxrQ0FLZ0JHLEdBQXVCRCxHQUx2QyxRQUtIRSxFQUxHLE9BTVQ3bkIsRUFBTXNGLEdBQUt5RSxFQUFXMmQsRUFBSyxjQUFlRyxHQU5qQyx3QkFPSjduQixFQUFNc0YsR0FBS3dpQixHQUFrQkgsRUFBa0JELEdBUDNDLDJLQVNKeGIsTUFBTU8sUUFBUWdiLEdBVFYsc0JBVUtBLEdBVkwsOERBV1EsV0FBZixFQURLTSxFQVZFLDJDQVlnQkgsR0FBdUJHLEdBWnZDLFFBWUhGLEVBWkcsT0FhVDduQixFQUFRQSxFQUFNa0ssUUFBUSxjQUFlMmQsR0FiNUIsd0JBY0o3bkIsRUFBUThuQixHQUFrQkMsRUFBSy9uQixHQUFPLEdBZGxDLDRLQWlCWSxXQUFyQixFQUFPeW5CLEdBakJFLGtDQWtCY0csR0FBdUJILEdBbEJyQyxRQWtCTEksRUFsQkssT0FtQlg3bkIsRUFBUStKLEVBQVcvSixFQUFPLGNBQWU2bkIsR0FuQjlCLHdCQW9CTjduQixFQUFROG5CLEdBQWtCTCxFQUFXem5CLEdBcEIvQixpQ0FzQlJBLEdBdEJRLDhFQUFILHdEQXlCZCxTQUFTOG5CLEdBQWtCTCxFQUFXem5CLEdBQXVCLElBQWhCZ29CLEVBQWdCLHdEQUMzRCxHQUFJUCxHQUFhem5CLEVBQU0wSyxTQUFTLGVBQWdCLENBQzlDdUgsR0FBT3ZHLElBQUksK0JBQWdDK2IsR0FDM0MsSUFBTVEsRUFBa0JwZ0IsU0FBUzRmLEdBQ2pDLE9BQUlPLEVBQWVob0IsRUFBTWtLLFFBQVEsY0FBZStkLEtBQ3pDbGUsRUFBVy9KLEVBQU8sY0FBZWlvQixLQUUxQyxPQUFPam9CLEUsU0FHTTRuQixHQUF1QixHLG9FQUF0QyxXQUFzQ0gsR0FBdEMsaUZBQ1NTLEVBQW1DVCxFQUFuQ1MsUUFBU25vQixFQUEwQjBuQixFQUExQjFuQixJQUFLb29CLEVBQXFCVixFQUFyQlUsWUFBYS9sQixFQUFRcWxCLEVBQVJybEIsS0FEcEMsS0FFVThsQixFQUZWLE9BR1MsWUFIVCxPQWtCUyxlQWxCVCwyQkFJVUwsRUFBYSxNQUNqQkEsRUFBYXRkLE9BQU82TCxlQUFlNUssUUFBUXpMLE1BQzFCOG5CLEVBQWF0ZCxPQUFPNkwsZUFBZTVLLFFBQVEyYyxLQUN4RC9sQixFQVBWLDBCQVVVeWxCLEdBREFBLEVBQWF2UixLQUFLQyxNQUFNc1IsSUFDQUEsRUFBV3hpQixPQUFTLEdBQUdqRCxHQVZ6RCx5REFZVTZQLEdBQU9ZLE9BQVAsMEJBQWlDZ1YsSUFaM0Msa0JBYWlCLE1BYmpCLGlDQWdCYUEsR0FoQmIseUJBbUI2QmxVLEdBQXVCNVQsR0FuQnBELFdBbUJVOG5CLEVBbkJWLHlDQW9CMENsVSxHQUF1QndVLEdBcEJqRSxRQW9CdUJOLEVBcEJ2Qix3Q0FxQmFBLEdBckJiLDJELHNCQTBCQSxVQ2pFTTVWLEdBQVMsSUFBSTdHLEVBQU8sd0JBc0IxQixHQXBCNkIsU0FBQ2lZLEVBQVdyTSxHQUN2QyxJQUFPb1IsRUFBK0QvRSxFQUEvRCtFLFVBQVdDLEVBQW9EaEYsRUFBcERnRixnQkFBaUJDLEVBQW1DakYsRUFBbkNpRixTQUFVMVMsRUFBeUJ5TixFQUF6QnpOLFNBQVV4VCxFQUFlaWhCLEVBQWZqaEIsS0FBTXBDLEVBQVNxakIsRUFBVHJqQixNQUM3RGlTLEdBQU92RyxJQUFJLDJCQUE0QjJYLEdBQ3ZDLElBQU1rRixFQUFtQixHQUN6QixHQUNPLHNCQURDbm1CLEVBR0osSUFEQSxJQUNBLE1BRDBCOEosTUFBTUksS0FBSy9CLE9BQU84SSxJQUFJK0QsU0FBU21DLGlCQUFpQjNELElBQzFFLGVBQXlDLFNBQTlCbUQsRUFBTyxLQUNWeVAsRUFBYXpQLEVBQVFVLGFBQWEyTyxHQUNsQ2hGLEVBQWVwTSxNQUFBQSxHQUFILFVBQUdBLEVBQWN3UixVQUFqQixpQkFBRyxFQUEyQkMsZUFBOUIsYUFBRyxFQUFxQ0gsR0FDckRsRixHQUNBRCxHQUFpQkMsRUFBY2lGLEVBQWlCcm9CLElBQ3JEdW9CLEVBQWlCempCLEtBQUs0akIsRUFBRTNQLElBSzlCLE9BQU93UCxHLCtpQ0NkVCxXQUE0QjNGLEVBQVMrRixHQUFyQyx3R0FDUTFXLEVBQVMsSUFBSTdHLEVBQU8seUJBQ25Cd2QsRUFBc0IxZCxFQUN0QjhMLEVBQWUyUixFQUFmM1IsWUFFRDZSLEVBTFIsNkJBS3NCLFdBQTJCaEcsR0FBM0IsNEpBQW1DOUosRUFBbkMsK0JBQTZDLEtBQy9EOUcsRUFBT3ZHLElBQUksb0JBQXFCNEssS0FBS1csVUFBVTRMLElBRTdDeUYsRUFZRXpGLEVBWkZ5RixTQUNBbG1CLEVBV0V5Z0IsRUFYRnpnQixLQUNBMG1CLEVBVUVqRyxFQVZGaUcsV0FDQUMsRUFTRWxHLEVBVEZrRyxnQkFDQW5ULEVBUUVpTixFQVJGak4sU0FDQW9ULEVBT0VuRyxFQVBGbUcsaUJBQ0FDLEVBTUVwRyxFQU5Gb0csWUFDQUMsRUFLRXJHLEVBTEZxRyxnQkFDQUMsRUFJRXRHLEVBSkZzRyxnQkFDQTFCLEVBR0U1RSxFQUhGNEUsVUFDQTJCLEVBRUV2RyxFQUZGdUcsTUFDQWhCLEVBQ0V2RixFQURGdUYsVUFFZSxTQUFiRSxFQWhCYyx1QkFpQmhCclcsRUFBT1ksT0FBTyxxREFqQkUsNkJBb0JiN1MsRUFBUzZpQixFQUFUN2lCLE1BRUwrWSxFQUFVQSxFQUFVQSxFQUFROU8sS0FBSzJMLEdBQVk4UyxFQUFFOVMsSUFFcENxVCxHQUFjMWUsT0FBTzhlLFdBQVdKLEdBQWFLLFFBeEJ0Qyx3QkEwQmhCclgsRUFBT1ksT0FBTyw2QkFBOEJvVyxHQTFCNUIsbUJBMkJULEdBM0JTLGFBOEJmQyxJQUFvQkMsR0FDcEJBLElBQW9CRCxHQS9CTCx3QkFpQ2hCalgsRUFBT1ksT0FBTyxvQ0FqQ0UsbUJBa0NULEdBbENTLFlBb0NkcVcsSUFBbUJDLEVBcENMLG9CQXFDWFQsRUFBRVEsR0FBaUI3akIsT0FyQ1Isd0JBc0NkNE0sRUFBT1ksT0FBTyw4QkFBK0JxVyxHQXRDL0IsbUJBdUNQLEdBdkNPLFdBeUNYUixFQUFFUyxHQUFpQjlqQixPQXpDUix3QkEwQ2Q0TSxFQUFPWSxPQUFPLDhCQUErQnNXLEdBMUMvQixtQkEyQ1AsR0EzQ08sbUNBNkNOdlQsRUE3Q00sd0JBOENoQjNELEVBQU9ZLE9BQU8sMEJBOUNFLG1CQStDVCxHQS9DUyxXQWlEWGtHLEVBQVExVCxPQWpERyxvQkFrRFRxakIsRUFBRU0sR0FBa0IzakIsUUFBdUIsV0FBYmlqQixFQWxEckIsc0RBbURHLGdCQUFiMVMsRUFuRFUsb0JBb0RaM0QsRUFBT1ksT0FBTyx1QkFBd0IrQyxHQUN0QzNELEVBQU92RyxJQUFJLDZCQUE4QnNkLEdBQ3JDQSxJQUFrQmpRLEVBQVUyUCxFQUFFTSxJQUM3QmpRLEVBQVExVCxPQXZERCx3QkF3RFY0TSxFQUFPWSxPQUFPLCtCQXhESixtQkF5REgsR0F6REcsWUErRGQ0VSxFQS9EYyxrQ0FnRUZELEdBQVN4bkIsRUFBT3luQixFQUFXelEsR0FoRXpCLFFBZ0VoQmhYLEVBaEVnQixrQkFrRUQsV0FBYnNvQixFQWxFYyxpQkFtRVp2UCxFQUFRMVQsUUFDVjRNLEVBQU92RyxJQUFJLGFBQWNrSyxHQUN6Qm1ELEVBQVFpSCxVQUNIL04sRUFBT3ZHLElBQUksdUNBQXdDa0ssR0F0RTFDLDRCQXVFTSxXQUFiMFMsRUF2RU8sdUJBd0VSbG1CLEVBeEVRLE9BeUVULFdBekVTLFFBZ0ZULFVBaEZTLFFBb0ZULFdBcEZTLFFBd0ZULFVBeEZTLFFBcUdULFVBckdTLGlDQTBFWjZQLEVBQU92RyxJQUFJLHFCQUFzQjFMLEdBQzdCdXBCLE9BQU92cEIsR0FBTzBLLFNBQVMsa0JBQ3pCZ2UsRUFBRSxrQkFBa0IxSSxTQUV0QmpILEVBQVF5USxPQUFPeHBCLEdBOUVILHFDQWlGWmlTLEVBQU92RyxJQUFJLG9CQUFxQjFMLEdBQ2hDK1ksRUFBUTBRLE1BQU16cEIsR0FsRkYscUNBcUZaaVMsRUFBT3ZHLElBQUksb0JBQXFCMUwsR0FDaEMrWSxFQUFRcUcsT0FBT3BmLEdBdEZILHFDQTBGVitZLEVBQVEyUSxJQUFJLFNBQ1pDLEVBQVkzcEIsRUFBTytvQixHQUFpQixJQUM5QmEsRUFBTXhTLFNBQVNzQixjQUFjOUMsSUFDL0J1USxpQkFBaUIsU0FBUyxTQUFTdlgsR0FDakNnYixHQUFPaGIsRUFBRW5GLFFBQ1htRixFQUFFaWIsa0JBRUpDLEVBQWE5cEIsRUFBTytvQixNQUNuQixHQWxHTyxpQ0F1R21ELElBQXpENWEsU0FBU2lJLGVBQWU1SyxRQUFRb2QsSUF2RzFCLHdCQXdHUjNXLEVBQU92RyxJQUFJLHNDQXhHSCxpQ0EyR1Z1RyxFQUFPdkcsSUFBSSxtQkFBb0IxTCxHQUMzQm9wQixJQUNGcHBCLEVBQVErcEIsRUFBZS9TLEVBQWFvUyxFQUFPcHBCLElBRTdDMnBCLEVBQVkzcEIsRUFBTytvQixJQUVmRCxFQWpITSxrQkFrSEZ2TSxFQUFTaFMsT0FBTzhlLFdBQVd0ZSxHQUFvQnVlLFFBbEg3QyxLQW1IWVIsR0FuSFosMkRBbUhHeFksRUFuSEgsYUFvSEVBLEVBcEhGLE9BcUhDLGVBckhELFFBMklDLGVBM0lELGdDQXNIRjJCLEVBQU92RyxJQUFJLCtCQUNQNlEsR0FDRmhTLE9BQU84SSxJQUFJOFMsaUJBQWlCLG1CQUFvQjZELEdBQzVDLFVBQUN6ZixPQUFPMEksdUJBQVIsT0FBQyxFQUF3QmdYLEVBQUV2ZixTQUExQixVQUFtQ0gsT0FBTzBJLHVCQUExQyxhQUFtQyxFQUF3QjNLLElBQzFEaUMsT0FBTzJSLFNBQStDLG1CQUE3QjNSLE9BQU8yUixRQUFRZ08sWUFDSCxhQUFuQzNmLE9BQU84SSxJQUFJK0QsU0FBU0MsV0FDdEI5TSxPQUFPOEksSUFBSThTLGlCQUFpQixRQUFRLFdBQ0wsYUFBekI1YixPQUFPMlIsUUFBUWhiLE9BQXNCcUosT0FBTzJSLFFBQVFnTyxVQUFVLFdBQVksSUFDOUUzZixPQUFPOEksSUFBSThTLGlCQUFpQixXQUFZNkQsRUFBYyxDQUFDRyxNQUFNLFFBR2xDLGFBQXpCNWYsT0FBTzJSLFFBQVFoYixPQUFzQnFKLE9BQU8yUixRQUFRZ08sVUFBVSxXQUFZLElBQzlFM2YsT0FBTzhJLElBQUk4UyxpQkFBaUIsV0FBWTZELEVBQWMsQ0FBQ0csTUFBTSxNQUluRS9FLEdBQVVuYSxFQUFjK2UsSUFFeEJ6ZixPQUFPOEksSUFBSStELFNBQVMwSSxnQkFBZ0JxRyxpQkFBaUIsYUFBYzZELEVBQWMsQ0FBQ0csTUFBTSxJQXhJeEYsb0NBNElGbFksRUFBT3ZHLElBQUksK0JBQ1huQixPQUFPOEksSUFBSStELFNBQVMwSSxnQkFBZ0JxRyxpQkFBaUIsT0FBUTZELEVBQWMsQ0FBQ0csTUFBTSxJQTdJaEYsZ01BbUpSdmEsWUFBVyxXQUNUb2EsTUFDQ2xXLFNBckpLLHNEQTBKWjdCLEVBQU9ZLE9BQVAsZ0JBQXVCelEsRUFBdkIsb0NBQXVEa21CLElBMUozQyw0REE2Sk0sU0FBYkEsRUE3Sk8sdUJBOEpSbG1CLEVBOUpRLE9BK0pULFNBL0pTLFNBbUtULFNBbktTLFNBdUtULG9CQXZLUyxTQStLVCxhQS9LUyxTQW1MVCxnQkFuTFMsU0F1TFQsa0JBdkxTLG1DQWdLWjZQLEVBQU92RyxJQUFJLGlCQUFrQjFMLEdBQzdCK1ksRUFBUXFSLEtBQUtwcUIsR0FqS0Qsc0NBb0taaVMsRUFBT3ZHLElBQUksaUJBQWtCMUwsR0FDN0IrWSxFQUFRc1IsS0FBS3JxQixHQXJLRCxzQ0F5S1ZpUyxFQUFPdkcsSUFBSSxtQkFBb0IxTCxHQUN6QmlpQixFQUFrQjNMLEtBQUtDLE1BQU12VyxHQUNuQ2lTLEVBQU92RyxJQUFJLHNCQUF1QnVXLEdBQ2xDRixHQUFnQmhKLEVBQVNrSixHQTVLZixzQ0FnTFpoUSxFQUFPdkcsSUFBUCwyQkFBK0JxTixFQUEvQixrQkFBZ0QvWSxJQUNoRCtZLEVBQVF1UixTQUFTdHFCLEdBakxMLHNDQW9MWmlTLEVBQU92RyxJQUFQLDRCQUFnQ3FOLEVBQWhDLGtCQUFpRC9ZLElBQ2pEK1ksRUFBUXdSLFlBQVl2cUIsR0FyTFIsK0JBeUxaLEdBREFpUyxFQUFPdkcsSUFBUCx1Q0FBMkNxTixFQUEzQyxlQUF5RC9ZLElBQ3JEOG9CLEVBQVksTUFDTUEsR0FETixJQUNkLDJCQUNlLGFBRGlCLFNBQ0osV0FDeEI3VyxFQUFPdkcsSUFBSSw4QkFDWCxJQUFNOGUsRUFBZ0JqZ0IsT0FBTzhJLElBQUkrRCxTQUFTcVQsTUFDMUNsZ0IsT0FBTzhJLElBQUkrRCxTQUFTK08saUJBQWlCLG9CQUFvQixTQUFDdlgsR0FBRCxPQUN2RDhiLEVBQTZCOWIsRUFBRzVPLEVBQU93cUIsTUFKakIsR0FGZCwrQkF6TEosNkNBc01adlksRUFBT3ZHLElBQUksc0JBQXVCdEosR0F0TXRCLDREQXlNTSxpQkFBYmttQixFQXpNTyxrQkEwTWhCclcsRUFBT3ZHLElBQUksc0JBQXVCMGMsRUFBV3BvQixHQTFNN0IsS0EyTVJvb0IsRUEzTVEsT0E0TVQsUUE1TVMsU0ErTVQsVUEvTVMsbUNBNk1aclAsRUFBUTRSLElBQUksVUFBWixjQUE4QjNxQixFQUFNdVQsT0FBcEMsTUE3TVksc0NBaU5OcVgsRUFBVzVxQixFQUFNd1QsTUFBTSxLQUFLLEdBQUdELE9BRS9Cc1gsRUFBZ0I3cUIsRUFBTXdULE1BQU0sS0FBSyxHQUFHRCxPQUUxQ3dGLEVBQVE0UixJQUFJQyxFQUFVQyxFQUFlLGNBck56QixzQ0F3TlI3cUIsRUFBTTBLLFNBQVMsY0FDakIxSyxFQUFRNkgsU0FBUzdILElBRW5CK1ksRUFBUXFQLEdBQWFwb0IsRUFDckJpUyxFQUFPdkcsSUFBSSwyQ0FBNEMwYyxFQUFXcG9CLEdBNU50RCw0REErTk0sWUFBYnNvQixFQS9OTyxrQkFnT2hCclcsRUFBT3ZHLElBQUksY0FBZTFMLEdBQzFCK1ksRUFBUWhQLFdBQVcvSixHQWpPSCw2QkFrT00sU0FBYnNvQixFQWxPTyxrQkFtT2hCclcsRUFBT3ZHLElBQUksYUFBY3dkLEVBQWlCQyxHQUNwQzJCLEVBQUt2Z0IsT0FBTzhJLElBQUkrRCxTQUFTc0IsY0FBY3dRLEdBQ3ZDNkIsRUFBS3hnQixPQUFPOEksSUFBSStELFNBQVNzQixjQUFjeVEsR0FDN0M2QixFQUFVRixFQUFJQyxHQXRPRSw2QkF1T00saUJBQWJ6QyxFQXZPTyxrQkF3T2hCclcsRUFBT3ZHLElBQUkscUJBQXNCMUwsR0FDakMrWSxFQUFRcUcsT0FBUixrQkFBMEJwZixFQUExQixlQXpPZ0IsNkJBME9NLFNBQWJzb0IsRUExT08sa0JBMk9oQnJXLEVBQU92RyxJQUFQLGlCQUFxQndkLEVBQXJCLGVBQTJDQyxJQUNyQzhCLEVBQVMxZ0IsT0FBTzhJLElBQUkrRCxTQUFTc0IsY0FBY3dRLEdBQzNDZ0MsRUFBYzNnQixPQUFPOEksSUFBSStELFNBQVNzQixjQUFjeVEsR0FDdEQ4QixFQUFPakwsU0FDUGtMLEVBQVlDLFFBQVFGLEdBL09KLDZCQWdQTSxzQkFBYjNDLEVBaFBPLGtCQWlQVmxFLEVBQU0yRixFQUFlL1MsRUFBYW9TLEVBQU9wcEIsR0FDL0MrWSxFQUFReVEsT0FBT3BGLEdBbFBDLDZCQW1QTSxtQkFBYmtFLEVBblBPLHVCQW9QUmxtQixFQXBQUSxPQXFQVCxlQXJQUyxrQ0FzUEk4SixNQUFNSSxLQUFLeU0sR0F0UGYsK0NBc1BEbkssRUF0UEMsZUF1UE5BLEVBQUV5SyxpQkF2UEksUUF1UE4sRUFBYTNPLFNBQVMsTUF2UGhCLHlCQXdQUmtFLEVBQUV5SyxVQUFZekssRUFBRXlLLFVBQVVVLGNBQWN2RyxNQUFNLE1BQU05QyxLQUFJLFNBQUMwYSxHQUFELE9BQ3REQSxFQUFTNVgsTUFBTSxLQUFLOUMsS0FBSSxTQUFDMmEsR0FBRCxPQUFVQSxFQUFLM2tCLE9BQU8sR0FBR21ULGNBQWdCd1IsRUFBSzFrQixNQUFNLE1BQUltUSxLQUFLLFFBQ3JGQSxLQUFLLE1BMVBDLGtDQTZQVmxJLEVBQUV5SyxVQUFGLFVBQWN6SyxFQUFFeUssaUJBQWhCLGFBQWMsRUFBYVUsY0FDdEJ2RyxNQUFNLEtBQ045QyxLQUFJLFNBQUMyYSxHQUFELE9BQVVBLEVBQUsza0IsT0FBTyxHQUFHbVQsY0FBZ0J3UixFQUFLMWtCLE1BQU0sTUFDeERtUSxLQUFLLEtBaFFBLHVHQXNRaEI3RSxFQUFPWSxPQUFPLDhCQUErQnlWLEdBdFE3QixrRUFMdEIsc0RBK1FRZ0QsRUFBaUIsU0FBQ3RyQixFQUFPdXJCLEdBSTdCLE9BSEl2ckIsR0FBU3VyQixFQUFRN2dCLFNBQVMsNkJBQzVCNmdCLEVBQVV4aEIsRUFBV3doQixFQUFTLDBCQUEyQnZyQixJQUVwRHVyQixHQUVIeEIsRUFBaUIsU0FBQy9TLEVBQWE1VSxFQUFNcEMsR0FFekMsSUFBTXlXLEVBQVV4WCxPQUFPbUgsS0FBSzRRLEdBQ3hCb04sRUFBTSxLQUNWLElBQUszTixHQUE4QixJQUFuQkEsRUFBUXBSLE9BRXRCLE9BREE0TSxFQUFPdkcsSUFBSSxnQkFDSixLQUVULElBQU04YyxFQUFhL1IsRUFBUSxHQUMzQixPQUFRclUsR0FDTixJQUFLLHNCQUF1QixNQUMxQmdpQixFQUFNa0gsRUFBYyxVQUFDdFUsRUFBWXdSLEdBQVlDLFFBQVErQywyQkFBakMsYUFBQyxFQUFxRG5mLFdBQ3JFbkMsUUFBUSx3QkFBeUIsS0FBTWxLLEdBQzVDaVMsRUFBT3ZHLElBQUksaUNBQWtDc0wsRUFBWXdSLEdBQVlDLFFBQVErQyxxQkFDN0UsTUFFRixJQUFLLG9CQUFxQixNQUN4QnBILEVBQU1rSCxFQUFjLFVBQUN0VSxFQUFZd1IsR0FBWUMsUUFBUWdELHlCQUFqQyxhQUFDLEVBQW1EcGYsV0FDbkVuQyxRQUFRLHdCQUF5QixLQUFNbEssR0FDNUNpUyxFQUFPdkcsSUFBSSw0QkFBNkJzTCxFQUFZd1IsR0FBWUMsUUFBUWdELG1CQUN4RSxNQUVGLElBQUssbUJBQW9CLE1BQ3ZCckgsRUFBTWtILEVBQWMsVUFBQ3RVLEVBQVl3UixHQUFZQyxRQUFRaUQsd0JBQWpDLGFBQUMsRUFBa0RyZixXQUNsRW5DLFFBQVEsd0JBQXlCLEtBQU1sSyxHQUM1Q2lTLEVBQU92RyxJQUFJLGlDQUFrQ3NMLEVBQVl3UixHQUFZQyxRQUFRaUQsa0JBQzdFLE1BRUYsUUFDRXpaLEVBQU9ZLE9BQU8sc0RBQXVEelEsR0FFekUsT0FBT2dpQixHQUVIc0csRUF0VFIsNkJBc1R1QyxXQUFPcGEsRUFBT3FiLEVBQVFuQixHQUF0Qiw2RUFDN0JvQixFQUFnQjFmLE1BQU1PLFFBQVFrZixHQUFxQkEsRUFBWCxDQUFDQSxHQURaLEtBRVRDLEdBRlMsNERBRXhCQyxFQUZ3QixTQUc3QnRoQixPQUFPOEksSUFBSStELFNBQVMwVSxPQUhTLHdCQUkvQnZoQixPQUFPOEksSUFBSStELFNBQVNxVCxNQUFRb0IsRUFKRyxVQUt6QjNILEdBQU0sS0FMbUIsZUFNL0IzWixPQUFPOEksSUFBSStELFNBQVNxVCxNQUFRRCxFQU5HLFVBT3pCdEcsR0FBTSxLQVBtQixnQ0FTL0IzWixPQUFPOEksSUFBSStELFNBQVNxVCxNQUFRRCxFQVRHLCtJQVk5QmpnQixPQUFPOEksSUFBSStELFNBQVMwVSxPQUd2QnBCLEVBQTZCcGEsRUFBT3FiLEVBQVFuQixHQUY1Q2pnQixPQUFPOEksSUFBSStELFNBQVNxVCxNQUFRRCxFQWJLLGdFQXRUdkMsMERBeVVRdUIsRUFBbUIsU0FBbkJBLEVBQW9CemIsR0FDeEIsSUFBTVIsRUFBS1EsRUFBTTdHLE9BQU9xRyxHQUNwQkEsR0FBYSxzQkFBUEEsSUFDUjRZLEVBQUUsc0JBQXNCMUksU0FDeEJ6VixPQUFPeWhCLG9CQUFvQixRQUFTRCxHQUFrQixHQUN0RHhoQixPQUFPeWhCLG9CQUFvQixXQUFZRCxHQUFrQixLQUl2RC9CLEVBQWUsU0FBZkEsSUFDSixLQUFJemYsT0FBTzhJLElBQUkrRCxTQUFTMFUsUUFDcEIzZCxTQUFTaUksZUFBZTVLLFFBQVFvZCxJQUF1QixHQUEzRCxDQUNBeFMsZUFBZTVHLFFBQVFvWixFQUFvQixHQUMzQyxJQUFNcUQsRUFBUzFoQixPQUFPOEksSUFBSStELFNBQVNzQixjQUFjLG9CQUM3Q3VULElBQVFBLEVBQU85SixNQUFQLFFBQTBCLFFBQ3RDNVgsT0FBTzhJLElBQUkrRCxTQUFTOFUsZUFBZSxxQkFBcUIvSixNQUF4RCxRQUEyRSxRQUMzRTVYLE9BQU80YixpQkFBaUIsUUFBUzRGLEdBQWtCLEdBQ25EeGhCLE9BQU80YixpQkFBaUIsV0FBWTRGLEdBQWtCLEdBRXREeGhCLE9BQU84SSxJQUFJK0QsU0FBUzBJLGdCQUFnQmtNLG9CQUFvQixhQUFjaEMsRUFBYyxDQUNsRkcsTUFBTSxJQUVSNWYsT0FBTzhJLElBQUkrRCxTQUFTMEksZ0JBQWdCa00sb0JBQW9CLE9BQVFoQyxFQUFjLENBQzVFRyxNQUFNLElBRVI1ZixPQUFPOEksSUFBSTJZLG9CQUFvQixtQkFBb0JoQyxHQUNuRHpmLE9BQU84SSxJQUFJMlksb0JBQW9CLFdBQVloQyxFQUFjLENBQ3ZERyxNQUFNLElBR1J2YSxZQUFXLFdBQ1Q4WSxFQUFFLHNCQUFzQjFJLFNBQ3hCelYsT0FBT3loQixvQkFBb0IsUUFBU0QsR0FBa0IsR0FDdER4aEIsT0FBT3loQixvQkFBb0IsV0FBWUQsR0FBa0IsS0FDeEQsUUFHQ2pDLEVBQWUsU0FBQzlwQixFQUFPK29CLEdBQzNCLElBQUl4ZSxPQUFPOEksSUFBSStELFNBQVMwVSxPQUF4QixDQUNBLElBQU1HLEVBQVMxaEIsT0FBTzhJLElBQUkrRCxTQUFTc0IsY0FBYyxvQkFDN0N1VCxJQUFRQSxFQUFPOUosTUFBUCxRQUEwQixRQUNqQzVYLE9BQU84SSxJQUFJK0QsU0FBUzhVLGVBQWUsc0JBQXNCdkMsRUFBWTNwQixFQUFPK29CLEdBQWlCLEdBQ2xHeGUsT0FBTzhJLElBQUkrRCxTQUFTOFUsZUFBZSxxQkFBcUIvSixNQUF4RCxRQUEyRSxRQUUzRTVYLE9BQU80YixpQkFBaUIsUUFBUzRGLEdBQWtCLEtBRy9DcEMsRUFBYyxTQUFDM3BCLEVBQU8rb0IsR0FBbUMsSUFBbEJvRCxFQUFrQix3REFFdkRDLEVBQWU3aEIsT0FBTzhJLElBQUkrRCxTQUFTa0wsY0FBYyxPQUV2RDhKLEVBQWFyTSxVQUFVbEksSUFBSSxxQkFDM0J1VSxFQUFhdGMsR0FBSyxvQkFHbEIsSUFBTXVjLEVBQW1COWhCLE9BQU84SSxJQUFJK0QsU0FBU2tMLGNBQWMsVUFDckRnSyxFQUF3QkgsRUFBVSxrQ0FBb0MseUJBUTVFLEdBUEFFLEVBQWlCdE0sVUFBVWxJLElBQUl5VSxHQUMvQkQsRUFBaUJoVCxVQUFZLElBQzdCZ1QsRUFBaUJFLFFBQVUsV0FDekI3RCxFQUFFLHNCQUFzQjFJLFNBQ3hCelYsT0FBT3loQixvQkFBb0IsUUFBU0QsR0FBa0IsSUFHcERoRCxFQUVGLElBREEsSUFBTXlELEVBQVd0Z0IsTUFBTUksS0FBSy9CLE9BQU84SSxJQUFJK0QsU0FBU21DLGlCQUFpQndQLElBQzFEL29CLEVBQU0wSyxTQUFTLGdCQUFrQjhoQixFQUFTbm5CLE9BQVMsR0FDeERyRixFQUFRQSxFQUFNa0ssUUFBUSxjQUFlc2lCLEVBQVNDLFFBQVFDLEtBSzFELElBQU1DLEVBQVdwaUIsT0FBTzhJLElBQUkrRCxTQUFTa0wsY0FBYyxZQUNuRHFLLEVBQVNDLFVBQVk1c0IsRUFBTXVULE9BQzNCLElBQU1zWixFQUFRRixFQUFTRyxRQUFRQyxXQUMvQkYsRUFBTXBLLFlBQVk0SixHQUNsQkQsRUFBYTNKLFlBQVlvSyxHQUd6Qm5FLEVBQUUsc0JBQXNCMUksU0FDeEJ6VixPQUFPOEksSUFBSStELFNBQVNrSSxLQUFLbUQsWUFBWTJKLElBR2pDcEIsRUFBWSxTQUFtQkYsRUFBSUMsR0FDdkMsSUFFSWlDLEVBQ0FDLEVBSEVDLEVBQUtwQyxFQUFHcUMsV0FDUkMsRUFBS3JDLEVBQUdvQyxXQUlkLEdBQUtELEdBQU9FLElBQU1GLEVBQUdHLFlBQVl0QyxLQUFPcUMsRUFBR0MsWUFBWXZDLEdBQXZELENBRUEsSUFBSyxJQUFJeGxCLEVBQUksRUFBR0EsRUFBSTRuQixFQUFHaFgsU0FBUzdRLE9BQVFDLElBQ2xDNG5CLEVBQUdoWCxTQUFTNVEsR0FBRytuQixZQUFZdkMsS0FDN0JrQyxFQUFLMW5CLEdBR1QsSUFBSyxJQUFJQSxFQUFJLEVBQUdBLEVBQUk4bkIsRUFBR2xYLFNBQVM3USxPQUFRQyxJQUNsQzhuQixFQUFHbFgsU0FBUzVRLEdBQUcrbkIsWUFBWXRDLEtBQzdCa0MsRUFBSzNuQixHQUlMNG5CLEVBQUdHLFlBQVlELElBQU9KLEVBQUtDLEdBQzdCQSxJQUVGQyxFQUFHSSxhQUFhdkMsRUFBSW1DLEVBQUdoWCxTQUFTOFcsSUFDaENJLEVBQUdFLGFBQWF4QyxFQUFJc0MsRUFBR2xYLFNBQVMrVyxNQUc1Qk0sRUF0YlIsNkJBc2IyQixXQUFPM0ssR0FBUCx3RkFDbEJyWSxPQUFPaWpCLE9BRFcsZ0JBRXJCNWQsV0FBVSxZQUFDLDhGQUNIMmQsRUFBaUIzSyxHQURkLDJDQUVSLElBSmtCLDRCQU1BQSxHQU5BLDREQU1WQyxFQU5VLGlCQVFibmYsR0FBUyxHQUNUbWYsRUFBT1EsVUFUTSxpQkFVVGtGLEVBQW1Ca0YsR0FBcUI1SyxFQUFPUSxVQUFXck0sR0FWakQsS0FXT3VSLEdBWFAsa0VBV0p4UCxFQVhJLGtCQVlFOFAsRUFBWWhHLEVBQVE5SixHQVp0QixZQWFFLEtBRGZyVixFQVphLG1EQWNKLEdBZEksMExBaUJLbWxCLEVBQVloRyxHQWpCakIsUUFpQlZuZixFQWpCVSxtQkFrQkYsSUFBWEEsRUFsQmEsMkNBbUJSLEdBbkJRLGlFQXNCakJ1TyxFQUFPWSxPQUFQLGdDQUF1Q2dRLEVBQXZDLHVCQUE0RCxLQUFJeEIsVUF0Qi9DLG9QQXRiM0IsZ0VBb2R1QmtNLEVBQWlCM0ssR0FwZHhDLGVBb2RRbGYsRUFwZFIseUJBcWRTQSxHQXJkVCw0Qyx5QkF1ZEEsTyxTQXZkNEIsRUFBYmdxQixHLGlDQ0pUemIsR0FBUyxJQUFJN0csRUFBTywwQkFFYnVpQixHQUFtQixTQUFDQyxHQUMvQjNiLEdBQU92RyxJQUFJLGdCQUFpQjRLLEtBQUtXLFVBQVUyVyxJQUMzQyxJQUFPdEYsRUFBOEJzRixFQUE5QnRGLFNBQVVqRixFQUFvQnVLLEVBQXBCdkssVUFBV3JqQixFQUFTNHRCLEVBQVQ1dEIsTUFDNUIsT0FBUXNvQixHQUNOLElBQUssV0FDSCxPQUFPdUYsR0FBZ0J4SyxFQUFXcmpCLEdBQ3BDLElBQUssZ0JBQ0gsT0FBTzh0QixHQUFxQnpLLEVBQVdyakIsR0FDekMsUUFFRSxPQURBaVMsR0FBT1ksT0FBTyxtQkFBb0J5VixJQUMzQixJQUlQeUYsR0FBYSxTQUFDQyxFQUFTNXJCLEdBQzNCLElBQ0UsT0FBUUEsR0FDTixJQUFLLFVBQ0gsT0FBT2dVLGVBQWU1SyxRQUFRd2lCLEdBQ2hDLElBQUssUUFDSCxPQUFPemlCLGFBQWFDLFFBQVF3aUIsR0FDOUIsUUFFRSxPQURBL2IsR0FBT1ksT0FBTyxlQUFnQnpRLEdBQ3ZCLE1BRVgsTUFBTy9CLEdBRVAsT0FEQTRSLEdBQU9ZLE9BQVAsZ0NBQXVDbWIsR0FBVzN0QixHQUMzQyxPQUlMd3RCLEdBQWtCLFNBQUN4SyxFQUFXcmpCLEdBQ2xDLElBQU1pdUIsRUFBWTlmLFNBQVM0ZixHQUFXN2lCLEVBQWlDLFlBRXZFLE9BREErRyxHQUFPdkcsSUFBSSw2QkFBOEJ1aUIsR0FDdkIsT0FBZEEsR0FDRmhjLEdBQU9ZLE9BQU8sbURBQ1AsR0FFRnNRLEdBQWlCOEssRUFBVzVLLEVBQVdsVixTQUFTbk8sS0FHbkQ4dEIsR0FBdUIsU0FBQ3pLLEVBQVdyakIsR0FDdkMsSUFBTWt1QixFQUFnQi9mLFNBQ2xCNGYsR0FBVzVpQixFQUFtRCxVQUVsRSxPQURBOEcsR0FBT3ZHLElBQUksaURBQWtEd2lCLEdBQ3ZDLE9BQWxCQSxHQUNGamMsR0FBT1ksT0FBTyxzRUFDUCxHQUVGc1EsR0FBaUIrSyxFQUFlN0ssRUFBV2xWLFNBQVNuTyxLQ25EdkRpUyxHQUFTLElBQUk3RyxFQUFPLDRCQUViK2lCLEdBQWtCLDZCQUFHLFdBQU9QLEdBQVAsb0ZBQ2hDM2IsR0FBT3ZHLElBQUksZ0JBQWlCNEssS0FBS1csVUFBVTJXLElBQ3BDdEYsRUFBOEJzRixFQUE5QnRGLFNBQVVqRixFQUFvQnVLLEVBQXBCdkssVUFBV3JqQixFQUFTNHRCLEVBQVQ1dEIsTUFGSSxTQUdMb3VCLEdBQWdCOUYsR0FIWCxjQUcxQitGLEVBSDBCLHlCQUl6QmxMLEdBQWlCa0wsRUFBY2hMLEVBQVdyakIsSUFKakIsMkNBQUgsc0RBT2xCb3VCLEdBQWUsNkJBQUcsV0FBT3J1QixHQUFQLDhFQUM3QmtTLEdBQU92RyxJQUFJLHFDQUFzQzNMLEdBRHBCLFNBRVg0VCxHQUF1QjVULEdBQUssRUFBTSxHQUFJLEtBRjNCLFlBRXZCcWtCLEVBRnVCLCtCQUkzQm5TLEdBQU9xUixRQUFQLG9CQUE0QnZqQixFQUE1Qix1QkFBOENxa0IsSUFKbkIsa0JBS3BCQSxHQUxvQixjQU83Qm5TLEdBQU9ZLE9BQVAsY0FBcUI5UyxFQUFyQixrQ0FQNkIsa0JBUXRCLE1BUnNCLDJDQUFILHNEQ1Z0QmtTLEdBQVMsSUFBSTdHLEVBQU8sMEJBRWJrakIsR0FBbUIsU0FBQ1YsR0FDL0IzYixHQUFPdkcsSUFBSSxnQkFBaUI0SyxLQUFLVyxVQUFVMlcsSUFDM0MsSUFrQkk3VSxFQWxCR3VQLEVBQThFc0YsRUFBOUV0RixTQUFVakYsRUFBb0V1SyxFQUFwRXZLLFVBQVdyakIsRUFBeUQ0dEIsRUFBekQ1dEIsTUFBTzRWLEVBQWtEZ1ksRUFBbERoWSxTQUFVMlksRUFBd0NYLEVBQXhDVyxZQUE3QyxFQUFxRlgsRUFBM0I1RSxpQkFBQUEsT0FBMUQsTUFBNkUsS0FBN0UsRUFDSXdGLEVBQWU1WSxFQUtuQixHQUpJNFksSUFBaUJqa0IsT0FBTzhJLElBQUkrRCxTQUFTc0IsY0FBYzhWLEtBQ3JEQSxFQUFleEYsR0FBc0N3RixHQUd0QyxPQUFibEcsRUFDRixPQUFPbkYsR0FBaUI1WSxPQUFPOEksSUFBSStELFNBQVNzQixjQUFjOFYsR0FBZW5MLEVBQVdyakIsR0FFdEYsR0FBSXd1QixJQUFpQmprQixPQUFPOEksSUFBSStELFNBQVNzQixjQUFjOFYsR0FFckQsT0FEQXZjLEdBQU9ZLE9BQU8sK0JBQ1AsRUFFVCxHQUFJMGIsSUFBZ0Joa0IsT0FBTzhJLElBQUkrRCxTQUFTbUMsaUJBQWlCZ1YsR0FFdkQsT0FEQXRjLEdBQU9ZLE9BQU8sK0JBQ1AsRUFPVCxPQUhJMmIsRUFBY3pWLEVBQVV4TyxPQUFPOEksSUFBSStELFNBQVNzQixjQUFjOFYsR0FDckRELElBQWF4VixFQUFVN00sTUFBTUksS0FBSy9CLE9BQU84SSxJQUFJK0QsU0FBU21DLGlCQUFpQmdWLEtBRXhFakcsR0FDTixJQUFLLGNBQ0gsSUFBSW1HLEVBRUZBLEVBREV2aUIsTUFBTU8sUUFBUXNNLEdBQ05BLEVBQVE2SCxRQUFPLFNBQUM4TixFQUFXQyxHQUVuQyxPQURBRCxFQUFhdmdCLFNBQVN3Z0IsRUFBSzdQLFlBQVk1VSxRQUFRLEtBQU0sSUFBSUEsUUFBUSxJQUFLLE9BRXJFLEdBRU9pRSxTQUFTNUQsT0FBTzhJLElBQUkrRCxTQUFTc0IsY0FBYzhWLEdBQWMxUCxZQUM5RDVVLFFBQVEsS0FBTSxJQUFJQSxRQUFRLElBQUssS0FFdEMsSUFBTWtaLEVBQWVqVixTQUFTc2dCLEdBQzlCLE9BQU90TCxHQUFpQkMsRUFBY0MsRUFBV3JqQixHQUVuRCxJQUFLLFlBQ0gsT0FBT21qQixHQUFpQmpYLE1BQU1JLEtBQUt5TSxFQUFRZ0gsV0FBWXNELEVBQVdyakIsR0FDcEUsSUFBSyxRQUNILE9BQUlrTSxNQUFNTyxRQUFRc00sSUFBWUEsRUFBUTFULE9BQVMsRUFDdEM4ZCxHQUFpQnBLLEVBQVExVCxPQUFRZ2UsRUFBV3JqQixHQUU1Q21qQixHQURFcEssRUFDZSxFQUVBLEVBRkdzSyxFQUFXcmpCLEdBSzFDLElBQUssUUFDSCxJQUFNNHVCLEVBQWdCQyxpQkFBaUI5VixHQUNqQytWLEVBQVc5dUIsRUFBTXdULE1BQU0sS0FBSyxHQUFHRCxPQUMvQndiLEVBQWEvdUIsRUFBTXdULE1BQU0sS0FBSyxHQUFHRCxPQUNqQzZQLEVBQWV3TCxFQUFjRSxHQUNuQyxPQUFPM0wsR0FBaUJDLEVBQWNDLEVBQVcwTCxHQUVuRCxRQUVFLE9BREE5YyxHQUFPWSxPQUFPLHlCQUNQLElDN0RQWixHQUFTLElBQUk3RyxFQUFPLDJCQUViNGpCLEdBQW9CLFNBQUNwQixFQUFNcUIsR0FDdENoZCxHQUFPdkcsSUFBSSxnQkFBaUI0SyxLQUFLVyxVQUFVMlcsSUFDM0MsSUFBTzVXLEVBQWVpWSxFQUFmalksWUFDQXNSLEVBQXdDc0YsRUFBeEN0RixTQUFVakYsRUFBOEJ1SyxFQUE5QnZLLFVBQVdyakIsRUFBbUI0dEIsRUFBbkI1dEIsTUFBTzJvQixFQUFZaUYsRUFBWmpGLFNBQ25DLElBQUtMLEVBRUgsT0FEQXJXLEdBQU9ZLE9BQU8sOEJBQ1AsRUFFVCxJQUFJOVIsRUFBVSxHQUNFLGVBQVo0bkIsSUFDRjVuQixFQUFVLENBQ1JpVyxZQUFBQSxJQUdKLElBQ01xWCxFQURleG1CLFNBQVN5Z0IsR0FBVTRHLEtBQUtudUIsRUFDeEJvdUIsR0FDckIsT0FBT2hNLEdBQWlCa0wsRUFBY2hMLEVBQVdyakIsSUNqQjdDaVMsR0FBUyxJQUFJN0csRUFBTywwQkFFYmdrQixHQUFtQixTQUFDeEIsR0FDL0IzYixHQUFPdkcsSUFBSSxnQkFBaUI0SyxLQUFLVyxVQUFVMlcsSUFDM0MsSUFBT3RGLEVBQThCc0YsRUFBOUJ0RixTQUFVakYsRUFBb0J1SyxFQUFwQnZLLFVBQVdyakIsRUFBUzR0QixFQUFUNXRCLE1BQzVCLE9BQVFzb0IsR0FDTixJQUFLLFdBQ0gsT0FBTytHLEdBQWdCaE0sRUFBV3JqQixHQUNwQyxJQUFLLFVBQ0gsT0FBT3N2QixHQUFlak0sRUFBV3JqQixHQUNuQyxRQUNFLE9BQU8sT0FhUHF2QixHQUFrQixTQUFDaE0sRUFBV3JqQixHQUNsQyxJQUFNMGUsR0FBWTlULEtBQUt5RSxNQVZHLFdBQzFCLElBQ0UsT0FBTyxJQUFJekUsS0FBS3VELFNBQVM1RCxPQUFPNkwsZUFBZTVLLFFBQVFOLEtBQ3ZELE1BQU83SyxHQUVQLE9BREE0UixHQUFPWSxPQUFPLGtDQUFtQ3hTLEdBQzFDdUssS0FBS3lFLE9BS2lCa2dCLElBQXlCLElBQ3hELE9BQU9wTSxHQUFpQnpFLEVBQVUyRSxFQUFXbFYsU0FBU25PLEtBR2xEc3ZCLEdBQWlCLFNBQUNqTSxFQUFXcmpCLEdBQVUsTUFDckN3dkIsRUFBYyxVQUFHamxCLE9BQU82TCxlQUFlNUssUUFBUU4sVUFBakMsYUFBRyxFQUFxRXNJLE1BQU0sS0FDbEcsT0FBTzJQLEdBQWlCcU0sRUFBZ0JuTSxFQUFXcmpCLElDaEMvQ2lTLEdBQVMsSUFBSTdHLEVBQU8sc0JBRWJxa0IsR0FBZSxTQUFDN0IsR0FDM0IzYixHQUFPdkcsSUFBSSxnQkFBaUI0SyxLQUFLVyxVQUFVMlcsSUFDM0MsSUFBT3RGLEVBQThCc0YsRUFBOUJ0RixTQUFVakYsRUFBb0J1SyxFQUFwQnZLLFVBQVdyakIsRUFBUzR0QixFQUFUNXRCLE1BRTVCLEdBQ08sU0FEQ3NvQixFQUNOLENBQ0UsSUFBTW9ILEVBQVlubEIsT0FBTzhJLElBQUk3SSxTQUFTQyxLQUNoQzBQLEVBQU8sSUFBSStDLElBQUl3UyxHQUFZbFMsU0FFakMsT0FEQXZMLEdBQU92RyxJQUFQLHdCQUE0QnlPLEVBQTVCLDhCQUFzRG5hLElBQy9DbWpCLEdBQWlCaEosRUFBTWtKLEVBQVdyakIsR0FNekMsT0FBTyxNQ2hCUGlTLEdBQVMsSUFBSTdHLEVBQU8sc0JBRWJ1a0IsR0FBZSxTQUFDL0IsR0FDM0IzYixHQUFPdkcsSUFBSSxnQkFBaUI0SyxLQUFLVyxVQUFVMlcsSUFDM0MsSUFBT3RGLEVBQThCc0YsRUFBOUJ0RixTQUFVakYsRUFBb0J1SyxFQUFwQnZLLFVBQVdyakIsRUFBUzR0QixFQUFUNXRCLE1BRTVCLEdBQ08sZ0JBRENzb0IsRUFDTixDQUNFLElBQU1zSCxFQUFXcmxCLE9BQU84ZSxXQUFXdGUsR0FBb0J1ZSxRQUFVLFNBQVcsVUFDNUUsT0FBT25HLEdBQWlCeU0sRUFBVXZNLEVBQVdyakIsR0FNN0MsT0FBTyxNQ2hCUGlTLEdBQVMsSUFBSTdHLEVBQU8sNEJBRWJ5a0IsR0FBcUIsNkJBQUcsV0FBT2pDLEdBQVAsb0ZBQ25DM2IsR0FBT3ZHLElBQUksZ0JBQWlCNEssS0FBS1csVUFBVTJXLElBQ3BDdkssRUFBMEJ1SyxFQUExQnZLLFVBQVdyakIsRUFBZTR0QixFQUFmNXRCLE1BQU84dkIsRUFBUWxDLEVBQVJrQyxLQUZVLHVCQUlqQzdkLEdBQU9ZLE9BQU8sdUJBSm1CLG1CQUsxQixHQUwwQix1QkFPVmtSLEtBUFUsY0FPN0JyRCxFQVA2QixpQkFRWEssR0FBYUwsRUFBYW9QLEdBUmYsZUFRN0JDLEVBUjZCLE9BUzdCMUIsRUFBZTBCLEVBVGMsa0JBVTVCNU0sR0FBaUJrTCxFQUFjaEwsRUFBV3JqQixJQVZkLDRDQUFILHNEQ0Q1QmlTLEdBQVMsSUFBSTdHLEVBQU8sOEJBRWI0a0IsR0FBdUIsU0FBQ3BDLEVBQU1qRixHQUFZLE1BQ3JEMVcsR0FBT3ZHLElBQUksZ0JBQWlCNEssS0FBS1csVUFBVTJXLElBQzNDLElBQU90RixFQUE4QnNGLEVBQTlCdEYsU0FBVWpGLEVBQW9CdUssRUFBcEJ2SyxVQUFXcmpCLEVBQVM0dEIsRUFBVDV0QixNQUNyQmdYLEVBQWUyUixFQUFmM1IsWUFDUCxJQUFLQSxHQUF1QyxXQUF2QixFQUFPQSxLQUE2Qi9YLE9BQU9tSCxLQUFLNFEsR0FBYTNSLE9BQVMsT0FBTyxFQUNsRyxJQUFJZ3BCLEVBQWUsS0FDYjFYLEVBQUcsVUFBR0ssRUFBWS9YLE9BQU9tSCxLQUFLNFEsR0FBYSxXQUF4QyxhQUFHLEVBQTBDbEgsR0FDdEQsT0FBUXdZLEdBQ04sSUFBSyxzQkFDSHJXLEdBQU92RyxJQUFJLG9DQUFxQ2lMLEdBQ2hEMFgsRUFBZTRCLEdBQW9CdFosRUFBS0ssR0FDeEMsTUFFRixJQUFLLG9CQUNIL0UsR0FBT3ZHLElBQUksa0NBQW1DaUwsR0FDOUMwWCxFQUFlNkIsR0FBa0J2WixFQUFLSyxHQUN0QyxNQUVGLElBQUssbUJBQ0gvRSxHQUFPdkcsSUFBSSxvQ0FBcUNpTCxHQUNoRDBYLEVBQWU4QixHQUFnQnhaLEVBQUtLLEdBSXhDLE9BQU9tTSxHQUFpQmtMLEVBQWNoTCxFQUFXcmpCLElBRzdDaXdCLEdBQXNCLFNBQUN0WixFQUFLSyxHQUNZLFFBQTVDLE9BQUlMLEdBQU9LLEdBQWVBLEVBQVlMLEdBQ3BDLFVBQU9LLEVBQVlMLFVBQW5CLGlCQUFPLEVBQWtCOFIsZUFBekIsYUFBTyxFQUEyQitDLHFCQUU1QixHQUdKMEUsR0FBb0IsU0FBQ3ZaLEVBQUtLLEdBQ2MsUUFBNUMsT0FBSUwsR0FBT0ssR0FBZUEsRUFBWUwsR0FDcEMsVUFBT0ssRUFBWUwsVUFBbkIsaUJBQU8sRUFBa0I4UixlQUF6QixhQUFPLEVBQTJCZ0QsbUJBRTVCLEdBR0owRSxHQUFrQixTQUFDeFosRUFBS0ssR0FDZ0IsUUFBNUMsT0FBSUwsR0FBT0ssR0FBZUEsRUFBWUwsR0FDcEMsVUFBT0ssRUFBWUwsVUFBbkIsaUJBQU8sRUFBa0I4UixlQUF6QixhQUFPLEVBQTJCaUQsa0JBRTVCLEcsMmdDQ3hDVixJQUFNelosR0FBUyxJQUFJN0csRUFBTyxzQkFFTGdsQixHQUFBQSxXQUNuQixXQUFZOVEsR0FBTSxVQUNoQixJQUFPK1EsRUFBMkQvUSxFQUEzRCtRLFlBQWFDLEVBQThDaFIsRUFBOUNnUixnQkFBaUIzSCxFQUE2QnJKLEVBQTdCcUosU0FBckMsRUFBa0VySixFQUFuQmlSLFNBQUFBLE9BQS9DLE1BQTBELEtBQTFELEVBQ0ExdEIsS0FBS3d0QixZQUFjQSxFQUNuQnh0QixLQUFLeXRCLGdCQUFrQkEsRUFDdkJ6dEIsS0FBSzB0QixTQUFXQSxFQUNoQjF0QixLQUFLOGxCLFNBQVdBLEUsNkRBR2xCLDZGQUNxQjlsQixLQUFLd3RCLGFBRDFCLGdFQUNhekMsRUFEYixpQkFFZ0MvcUIsS0FBSzJ0QixVQUFVNUMsR0FGL0MsNERBSWEsR0FKYix5S0FPUyxHQVBULGdFLDRGQVVBLDZGQUNxQi9xQixLQUFLeXRCLGlCQUQxQixnRUFDYTFDLEVBRGIsaUJBRWdDL3FCLEtBQUsydEIsVUFBVTVDLEdBRi9DLDREQUlhQSxFQUFLelosZ0JBSmxCLHdLQU9TLE1BUFQsZ0UsbUZBVUEsV0FBZ0J5WixHQUFoQiw2RUFDUzZDLEVBQWdDN0MsRUFBaEM2QyxNQUFPQyxFQUF5QjlDLEVBQXpCOEMsZ0JBQWlCdHVCLEVBQVF3ckIsRUFBUnhyQixLQUMzQnV1QixFQUFnQixLQUZ0QixLQUlVdnVCLEVBSlYsT0FLUyxZQUxULE9BUVMsWUFSVCxPQVdTLFlBWFQsT0FjUyxjQWRULFFBaUJTLFFBakJULFFBb0JTLGFBcEJULFFBdUJTLGdCQXZCVCxRQTBCUyxXQTFCVCxRQTZCUyxzQkE3QlQsK0JBTU11dUIsRUFBZ0J2QixHQUFpQnhCLEdBTnZDLG1DQVNNK0MsRUFBZ0JoRCxHQUFpQkMsR0FUdkMsbUNBWU0rQyxFQUFnQnJDLEdBQWlCVixHQVp2Qyw4Q0FlNEJPLEdBQW1CUCxHQWYvQyxlQWVNK0MsRUFmTiwyQ0FrQk1BLEVBQWdCbEIsR0FBYTdCLEdBbEJuQyxvQ0FxQk0rQyxFQUFnQjNCLEdBQWtCcEIsRUFBTS9xQixLQUFLOGxCLFVBckJuRCxvQ0F3Qk1nSSxFQUFnQmhCLEdBQWEvQixHQXhCbkMsOENBMkI0QmlDLEdBQXNCakMsR0EzQmxELGVBMkJNK0MsRUEzQk4sMkNBOEJNQSxFQUFnQlgsR0FBcUJwQyxFQUFNL3FCLEtBQUs4bEIsVUE5QnRELG9DQWlDTTFXLEdBQU9ZLE9BQVAsNkJBQW9DelEsSUFqQzFDLGtCQWtDYSxNQWxDYixZQXFDTXF1QixFQXJDTixzQkFzQ1lDLEVBdENaLE9BdUNXLFFBdkNYLFFBMENXLE9BMUNYLFFBNkNXLFFBN0NYLGlDQXdDd0JDLEdBeEN4Qix1Q0F3QytDOXRCLEtBQUsydEIsVUFBVUMsR0F4QzlELG1DQXdDUUUsRUF4Q1IsMENBMkN3QkEsRUEzQ3hCLHVDQTJDK0M5dEIsS0FBSzJ0QixVQUFVQyxHQTNDOUQsbUNBMkNRRSxFQTNDUiw4Q0E4Q3dCQSxFQTlDeEIsVUE4QytDOXRCLEtBQUsydEIsVUFBVUMsR0E5QzlELDJCQThDUUUsRUE5Q1IsK0NBaURRMWUsR0FBT1ksT0FBTywyQkFqRHRCLHNEQXFEUzhkLEdBckRULGlELGtEQTdCbUJQLEdDUmZuZSxHQUFTLElBQUk3RyxFQUFPLHdCQUVuQixTQUFld2xCLEdBQXRCLG1DLG9DQUFPLFdBQThCdlEsR0FBOUIsaUZBQ0xwTyxHQUFPdkcsSUFBSSw0QkFETixNQUVpQnpNLE9BQU9tSCxLQUFLaWEsR0FGN0IsNENBRU13USxFQUZOLEtBR0dDLEVBSEgsVUFHYXpRLEVBQWlCd1EsVUFIOUIsYUFHYSxFQUEyQkMsUUFIeEMsNkRBS0dDLEVBQW9CLElBQUlYLEdBQVcsQ0FBQ0MsWUFBYVMsRUFBU1IsZ0JBQWlCLEdBQUkzSCxTQUFVLE9BTDVGLFVBTU9vSSxFQUFrQkMsYUFOekIsMkNBT0QvZSxHQUFPdkcsSUFBUCxnQ0FBb0NtbEIsSUFDcEMxZCxHQUFxQixJQUFLMGQsR0FSekIsa0JBU01BLEdBVE4sMENBYUw1ZSxHQUFPdkcsSUFBSSwrQ0FiTixrQkFjRSxXQWRGLDZDLGlpQ0NGUCxJQUFNdUcsR0FBUyxJQUFJN0csRUFBTywrQkFFcEI2bEIsR0FBQUEsV0FDSixXQUFZM1IsR0FBTSxVQUNoQixJQUFPWSxFQUFnQ1osRUFBaENZLFdBQVlHLEVBQW9CZixFQUFwQmUsaUJBQ25CeGQsS0FBS3FkLFdBQWFBLEVBRWxCcmQsS0FBS3dkLGlCQUFtQkEsRSx1RUE2QzFCLHlIQUNRQSxFQUFtQnhkLEtBQUt3ZCxpQkFEaEMsU0FFMEJ1USxHQUFldlEsR0FGekMsVUFFUTZRLEVBRlIsT0FHUWhSLEVBQWFyZCxLQUFLcWQsWUFDcEJHLEVBSk4saUJBS1U4USxFQUFvQkQsR0FBYTdRLEVBQWlCNlEsR0FDeEQ3USxFQUFpQjZRLEdBQWE3USxFQUFnQixRQU5sRCxLQU80QkgsR0FQNUIsOERBT2VrUixFQVBmLFNBUWdCbE8sUUFBUyxVQUFBaU8sRUFBaUJDLE1BQUFBLE9BQUQsRUFBQ0EsRUFBV3RoQixXQUE1QixlQUFpQ29ULFNBQVUsRUFDekRrTyxFQUFVeE8sUUFBUXlPLE1BQUssU0FBQzlvQixHQUFELE9BQU9BLEVBQUV3YSxZQVQzQyw2REFVMkJxTyxFQUFVeE8sU0FWckMsK0RBVWlCQyxFQVZqQixTQVdvQkUsU0FYcEIsd0RBWVEsVUFBeUI5akIsT0FBT21ILEtBQUt5YyxFQUFPRSxVQUE1QyxlQUFXRSxFQUE0QyxLQUNqRCxVQUFBa08sRUFBaUJDLEVBQVV0aEIsV0FBM0IsU0FBZ0NpVCxVQUFoQyxVQUE0Q29PLEVBQWlCQyxFQUFVdGhCLFdBQXZFLE9BQTRDLEVBQWdDaVQsU0FBU0UsS0FDdkZKLEVBQU9FLFNBQVNFLEdBQVlDLE9BQVNpTyxFQUFpQkMsRUFBVXRoQixJQUFJaVQsU0FBU0UsSUFkekYsNFJBcUJFaFIsR0FBT3ZHLElBQVAsVUFBY3dVLEVBQVc3YSxPQUF6QixtQ0FDSzZhLEVBQVc3YSxPQXRCbEIsMENBc0JpQyxJQXRCakMsaUNBdUJTNmEsR0F2QlQsOEUseUZBMUNBLGlHQUNFak8sR0FBT3ZHLElBQUksc0JBQ0o0bEIsRWhDVUcsZ0JnQ1RKQyxFQUFnQmpiLEtBQUtDLE1BQU1oTSxPQUFPNkwsZUFBZTVLLFFBQVE4bEIsSUFDM0RwUixFQUFhcVIsTUFBQUEsT0FKbkIsRUFJbUJBLEVBQWVyUixXQUMxQnNSLEVBQVlELE1BQUFBLE9BTHBCLEVBS29CQSxFQUFlQyxVQUM1QnRSLEdBQWVzUixFQU50Qix3QkFPSXZmLEdBQU9ZLE9BQU8seUNBUGxCLFNBUXVCb04sS0FSdkIsY0FRSUMsRUFSSixPQVNVdVIsRUFBeUIsQ0FDN0JELFVBQVc1bUIsS0FBS3lFLE1BQ2hCNlEsV0FBQUEsR0FFRjNWLE9BQU82TCxlQUFlNUcsUUFBUThoQixFQUFZaGIsS0FBS1csVUFBVXdhLElBYjdELGtCQWNXdlIsR0FkWCxZQWdCTXNSLEVBaEJOLHVCQWlCeUI1bUIsS0FBS3lFLE1BQVFtaUIsR0FBZCxNaENoQlMsR2dDRGpDLHdCQW1CTXZmLEdBQU9ZLE9BQU8sMEJBbkJwQixVQW9CeUJvTixLQXBCekIsZUFvQk1DLEVBcEJOLE9BcUJZdVIsRUFBeUIsQ0FDN0JELFVBQVc1bUIsS0FBS3lFLE1BQ2hCNlEsV0FBQUEsR0FFRjNWLE9BQU82TCxlQUFlNUcsUUFBUThoQixFQUFZaGIsS0FBS1csVUFBVXdhLElBekIvRCxrQkEwQmF2UixHQTFCYixlQTZCRWpPLEdBQU9xUixRQUFRLDRDQTdCakIsa0JBOEJTcEQsR0E5QlQsNEMsNkZBaUNBLHVHQUVpQkUsS0FGakIsd0VBSUluTyxHQUFPcEcsS0FBSyxLQUFJd1YsU0FDaEJ4ZSxLQUFLd2QsaUJBQW1CLEtBTDVCLHlELGlEQXpDSTRRLEdBNkVOLE0sMmdDQzlEQSxJQUFNaGYsR0FBUyxJQUFJN0csRUFBTyxxQkFFcEJzbUIsR0FBUSw2QkFBRyxXQUFPaFIsRUFBWWlSLEVBQVNDLEVBQVduVSxFQUFVb1UsR0FBakQsMENBd0lBQyxFQXhJQSw0R0F3SWYsV0FBK0JWLEdBQS9CLDBIQUVJdGhCLEVBV0VzaEIsRUFYRnRoQixHQUNBOFMsRUFVRXdPLEVBVkZ4TyxRQUNBeU4sRUFTRWUsRUFURmYsWUFDQTBCLEVBUUVYLEVBUkZXLE9BQ0F6ZCxFQU9FOGMsRUFQRjljLHVCQUNBMGQsRUFNRVosRUFORlksY0FDQUMsRUFLRWIsRUFMRmEsd0JBQ0EzQixFQUlFYyxFQUpGZCxnQkFDQXBOLEVBR0VrTyxFQUhGbE8sT0FDQWdCLEVBRUVrTixFQUZGbE4sTUFDQWdPLEVBQ0VkLEVBREZjLG1CQUVnQixJQUFkTixHQUFvQjFPLEVBZDFCLHFEQWVNME8sSUFBYU8sR0FBNEJBLEVBQXdCem5CLFNBQVNvRixHQWZoRixvREFrQmlCLFdBQVhpaUIsR0FBd0JuQyxFQWxCOUIsdUJBbUJJM2QsR0FBT1ksT0FBTyxzQ0FuQmxCLDZCQXNCaUIsWUFBWGtmLElBQXdCbkMsRUF0QjlCLHdCQXVCSTNkLEdBQU9ZLE9BQU8sdUNBdkJsQiwyQkEwQkUsR0FBSW1mLEtBQ0dDLEdBQTJCQSxJQUE0QnhVLEdBQVUsQ0FDaEUyVSxFQUFzQkosRUFDckI5bEIsTUFBTU8sUUFBUXVsQixLQUFnQkksRUFBc0IsQ0FBQ0osSUFDMUQvZixHQUFPdkcsSUFBUCx5QkFBNkJzbUIsRUFBN0Isa0NBQW9FbGlCLElBSEEsS0FJekNzaUIsR0FKeUMsSUFJcEUsMkJBQVdDLEVBQXFDLFNBQ3hDQyxFQUFnQkMsRUFBcUJGLEdBQ3pDRSxFQUFxQkYsR0FBZ0IsSUFDckIzbkIsU0FBU29GLEdBQ3pCbUMsR0FBT3ZHLElBQUksNkNBQ042bUIsRUFBcUJGLEdBQXJCLFlBQXlDQyxHQUF6QyxDQUF3RHhpQixJQVRHLCtCQTNCMUUsR0F5Q01rSCxFQUFjNmEsRUFDRCxXQUFicFUsR0FBZ0QsV0FBdkJ5VSxFQTFDL0Isa0NBMkN3QnZlLEdBQXVCLDRCQUE0QixFQUFNLEVBQUcsS0EzQ3BGLFFBMkNJcUQsRUEzQ0osa0JBK0NRd2IsRUFBYSxJQUFJcEMsR0FBVyxDQUFDQyxZQUFBQSxFQUFhQyxnQkFBQUEsRUFBaUIzSCxTQUQzREEsRUFBVyxDQUFDM1IsWUFBQUEsS0FFbEIvRSxHQUFPdkcsSUFBSSwrQ0FBaURvRSxHQWhEOUQsTUFpRE91Z0IsRUFqRFAsdUNBaUQ0Qm1DLEVBQVd4QixhQWpEdkMseURBa0RReUIsRUFBZ0MsTUFBWHZQLEVBQWlCLEVBQUssSUFBTUEsR2pDbk01QixHaUNvTXJCNU8sSUFFSW9lLEVBRm9CLFVBRVNDLEVBQWtCMW9CLE1BQUssU0FBQzRjLEdBQUQsT0FBT0EsRUFBRS9XLEtBQU93RSxZQUZoRCxhQUVTLEVBQWdFNE8sT0FDbkd1UCxFQUFvRCxNQUEvQkMsRUFBcUMsRUFBSyxJQUFNQSxHakN2TTlDLElpQzBNekJ6Z0IsR0FBT3ZHLElBQUkseUJBQTJCK21CLEdBRWhDRyxFQUF3QnRlLEdBQTBCeEUsRUFJckIsSUFBZDhoQixFQS9EekIsc0JBK0QyQyxJQS9EM0MseUNBK0R1RDdRLEdBQWFMLEVBQWFrUyxHQS9EakYsK0JBK0RVQyxFQS9EVixLQWdFSTVnQixHQUFPdkcsSUFBSSxpQkFBbUJtbkIsRUFBbkIsMkJBQXNEakIsRUFBWSxLQUFPLFFBQ2hGemQsRUFBaUIsTUFDakJtYyxFQWxFUix3QkFtRU1yZSxHQUFPdkcsSUFBSSxzREFBd0RvRSxHQW5FekUsVUFvRTZCMGlCLEVBQVdNLHFCQXBFeEMsU0FvRU0zZSxFQXBFTixRQXNFUWxDLEdBQU92RyxJQUFJLGtEQUFtRHlJLEdBQ3pEbEMsR0FBT3ZHLElBQUksMENBdkV4QixhQXlFUW1uQixFQUFlSixHQXpFdkIsd0JBMEVNeGdCLEdBQU92RyxJQUFQLG9CQUF3Qm9FLEVBQXhCLDBDQUNBb0UsR0FBYXBFLEVBQUlxRSxFQUFnQixLQUFNLFVBQVdHLEdBM0V4RCw4QkE4RVM0UCxFQTlFVCxrQ0E4RXNCNk8sR0FBZ0JqakIsRUFBSTRRLEVBQVlrQyxFQUFTek8sRUFBZ0J3VSxHQTlFL0UsZ0NBZ0ZNL1ksWUFBVyxXQUNUbWpCLEdBQWdCampCLEVBQUk0USxFQUFZa0MsRUFBU3pPLEVBQWdCd1UsS0FDeER6RSxHQWxGVCxnQ0FvRlNqUyxHQUFPWSxPQUFPLG9DQUFxQy9DLEdBcEY1RCw0Q0F4SWUseUJBd0lBZ2lCLEVBeElBLDRDQUNUa0IsRUFBb0IvQixHQUFBQSxnQkFDcEJnQyxFQUEwQmhDLEdBQUFBLHNCQUVoQzdPLFVqQnNMTzhRLE9BQVl0SyxPQUFvQnVLLE9BQVlDLE9BQW1CQyxPQUVoRXBGLE9BQ0FxRixPQUNBcmtCLE9BQ0Fza0IsT0FDQUMsRUFOQ04sRUFBa0Zob0IsRUFBdEUwZCxFQUFzRTFkLEVBQWxEaW9CLEVBQWtEam9CLEVBQXRDa29CLEVBQXNDbG9CLEVBQW5CbW9CLEVBQW1Cbm9CLEVBRW5GK2lCLEVBQVk3WCxlQUFlNUssUUFBUTBuQixHQUNuQ0ksRUFBbUJsZCxlQUFlNUssUUFBUW9kLEdBQzFDM1osRUFBWW1ILGVBQWU1SyxRQUFRMm5CLEdBQ25DSSxFQUFtQm5kLGVBQWU1SyxRQUFRNG5CLEdBQzFDSSxFQUFpQnBkLGVBQWU1SyxRQUFRNm5CLEdBRXpDcEYsRUFHSDdYLGVBQWU1RyxRQUFRMGpCLEVBQVkva0IsU0FBUzhmLEdBQWEsR0FGekQ3WCxlQUFlNUcsUUFBUTBqQixFQUFZLEdBSVosT0FBckJJLEdBQ0ZsZCxlQUFlNUcsUUFBUW9aLEVBQW9CLEdBRXhDM1osR0FDSG1ILGVBQWU1RyxRQUFRMmpCLEVBQVlyWSxPQUFPQyxjQUV2Q3dZLEdBQ0huZCxlQUFlNUcsUUFBUTRqQixFQUFtQnhvQixLQUFLeUUsT0FFNUNta0IsRUFHSHBkLGVBQWU1RyxRQUFRNmpCLEVBQWlCLENBQUM5b0IsT0FBT0MsU0FBU2dULFNBQVVnVyxJQUZuRXBkLGVBQWU1RyxRQUFRNmpCLEVBQWlCLENBQUM5b0IsT0FBT0MsU0FBU2dULFdpQjFNckRpVyxFQUFlbHBCLE9BQU9DLFNBQVNxWixPQUNqQ3NPLEVBQTBCLEtBQzFCUCxHQUFhNkIsRUFBYS9vQixTQUFTLGFBQ3JDeW5CLEVBQTBCc0IsRUFBYTlzQixNQUNuQzhzQixFQUFhcnBCLFFBQVEsS0FBTyxFQUM1QnFwQixFQUFhQyxZQUFZLE1BQzNCbGdCLE1BQU0sS0FBSzlDLEtBQUksU0FBQ2lqQixHQUFELE9BQVV4bEIsU0FBU3dsQixFQUFNLFFBRzVDL2pCLFlBQVcsV0FDVGlRLE9BQ0MsS0FFRytQLEVBQVdybEIsT0FBTzhlLFdBQVd0ZSxHQUFvQnVlLFFBQ2pEc0ssRUFBa0IsQ0FBQ3phLFNBQVMsRUFBTUMsV0FBVyxFQUFNeWEsWUFBWSxHQXJCdEQsVUF1QjhCM3RCLFFBQVE0dEIsSUFBSSxDQUFDZCxFQUFtQkMsSUF2QjlELGlDQXVCUi9TLEVBdkJRLEtBdUJJRyxFQXZCSixLQXlCZnBPLEdBQU9xUixRQUFRLHFCQUFzQnBELEdBRS9CNlQsRUFBc0IsSUFBSTlDLEdBQW9CLENBQ2xEL1EsV0FBQUEsRUFDQUcsaUJBQUFBLElBN0JhLFVBZ0NpQjBULEVBQW9CQyx1QkFoQ3JDLFlBZ0NUckIsRUFoQ1MsUUFpQ1F0dEIsT0FqQ1Isd0JBa0NiNE0sR0FBT3ZHLElBQUksMkRBQ1htVSxLQW5DYSwyQkFzQ1QwUyxFQUF1QixHQXRDZCxLQXVDU0ksR0F2Q1Qsa0VBdUNKdkIsRUF2Q0ksNEJBeUNMVSxFQUFnQlYsR0F6Q1gsMkRBMkNYbmYsR0FBT1ksT0FBTyx3QkFBZCxNQTNDVyx3SkE4Q2ZnTixLQTlDZSxLQWdEZjVOLEdBaERlLFVBZ0Q4QjBCLEdBQXVCLEtBaERyRCxRQXNEZixJQXREZSxpQkFnRFIyUCxRQWhEUSxVQWdEQSx1QkFoREEsTUFrRGY1VCxhQUFZLFdBQ1ZpaUIsRUFBUXNDLHdCQUNQLEtBcERZLGFBc0RWLElBQU1sMEIsRUFBRyxLQUNObTBCLEVBQWUzQixFQUFxQnh5QixHQUNwQ28wQixFQUFvQnhCLEVBQWtCN1osUUFBTyxTQUFDK04sR0FBRCxPQUFPcU4sRUFBYXhwQixTQUFTbWMsRUFBRS9XLE9BQ2xGLE9BQVEvUCxHQUNOLElBQUssa0JBQ0gsSUFBTWtXLEVBQVcsSUFBSW1lLGdCQUFlLFdBQVcsV0FDckJELEdBRHFCLElBQzdDLDJCQUEyQyxLQUFoQy9DLEVBQWdDLFFBQ3pDbmYsR0FBT3ZHLElBQVAsNkJBQWlDMGxCLEVBQVV0aEIsR0FBM0MsMEJBQ0FnaUIsRUFBZ0JWLElBSDJCLGtDQU0vQ25iLEVBQVNpRCxRQUFRM08sT0FBTzhJLElBQUkrRCxTQUFTMEksaUJBRXJDLE1BQ0YsSUFBSyxVQUNIbFEsWUFBVyxXQUFNLFdBQ1N1a0IsR0FEVCxJQUNmLDJCQUEyQyxLQUFoQy9DLEVBQWdDLFFBQ3pDbmYsR0FBT3ZHLElBQVAsNkJBQWlDMGxCLEVBQVV0aEIsR0FBM0Msa0JBQ0FnaUIsRUFBZ0JWLElBSEgsaUNBS2QsS0FFSCxNQUNGLElBQUssaUJBQWtCLFdBQ0crQyxHQURILDJCQUNWL0MsRUFEVSxhQUVTbGxCLE1BQU1PLFFBQVEya0IsRUFBVWlELGtCQUNsRGpELEVBQVVpRCxpQkFBbUIsQ0FBQ2pELEVBQVVpRCxtQkFIdkIsSUFJbkIsMkJBQTRDLEtBQWpDemUsRUFBaUMsUUFDcENtRCxFQUFVeE8sT0FBTzhJLElBQUkrRCxTQUFTc0IsY0FBYzlDLEdBQzlDbUQsR0FDZSxJQUFJQyxrQkFBaUIsV0FDcEMvRyxHQUFPdkcsSUFBUCw2QkFBaUMwbEIsRUFBVXRoQixHQUEzQyx5QkFDQWdpQixFQUFnQlYsTUFFVGxZLFFBQVFILEVBQVM2YSxJQVhYLGdDQUNyQiwyQkFBMkMsSUFEdEIsOEJBZ0JyQixNQUNGLElBQUssWUFDSHJwQixPQUFPK3BCLFNBQVcsV0FBVyxXQUNISCxHQURHLElBQzNCLDJCQUEyQyxLQUFoQy9DLEVBQWdDLFFBQ3pDbmYsR0FBT3ZHLElBQVAsNkJBQWlDMGxCLEVBQVV0aEIsR0FBM0Msb0JBQ0FnaUIsRUFBZ0JWLElBSFMsZ0NBTzdCLE1BQ0YsSUFBSyxzQkFDSCxJQUFJeE4sRUFBY3JaLE9BQU9DLFNBQVNxWixPQUM1QjVOLEVBQVcsSUFBSStDLGtCQUFpQixXQUNwQyxHQUFJek8sT0FBT0MsU0FBU3FaLFNBQVdELEVBQWEsQ0FDMUNBLEVBQWNyWixPQUFPQyxTQUFTcVosT0FEWSxXQUVsQnNRLEdBRmtCLElBRTFDLDJCQUEyQyxLQUFoQy9DLEVBQWdDLFFBQ3pDbmYsR0FBT3ZHLElBQVAsNkJBQWlDMGxCLEVBQVV0aEIsR0FBM0MsOEJBQ0FnaUIsRUFBZ0JWLElBSndCLG1DQVE5Q25iLEVBQVNpRCxRQUFROUIsU0FBVXdjLEdBRTNCLE1BQ0YsSUFBSyxXQUFMLFdBQzBCTyxHQUQxQix5QkFDYS9DLEVBRGIsUUFFVW1ELEVBQWtCN2tCLFlBQVcsWUFBQywyRkFDbEN1QyxHQUFPdkcsSUFBUCw2QkFBaUMwbEIsRUFBVXRoQixHQUEzQyxtQkFEa0MsU0FFNUJnaUIsRUFBZ0JWLEdBRlksdUJBR1p6ZCxHQUF1QixLQUFLLEdBSGhCLE9BSTlCNlMsT0FERUEsRUFINEIsU0FJOUJBLEVBQVU0SyxFQUFVdGhCLE1BQ3RCSCxjQUFjNGtCLEdBQ2RoQyxFQUFxQjlpQixTQUFXOGlCLEVBQXFCOWlCLFNBQVNxSixRQUFPLFNBQUNoSixHQUFELE9BQVFBLElBQU9zaEIsRUFBVXRoQixPQU45RCwyQ0FRakMsS0FUTCwyQkFBMkMsSUFEN0MsOEJBWUUsTUFDRixRQUNFbUMsR0FBT1ksT0FBTyw0QkFBNkI5UyxLQTdFakQsTUFBa0JkLE9BQU9tSCxLQUFLbXNCLEdBQTlCLGVBQXFELElBdER0QyxrQ2pCeUxzQixJQUM5QlcsRUFBWXRLLEVBQW9CdUssRUFBWUMsRUFBbUJDLEVBRWhFcEYsRUFDQXFGLEVBQ0Fya0IsRUFDQXNrQixFQUNBQyxJaUJoTVMsb0NBQUgsOERBZ09kLE0sU0FFZVQsR0FBZ0IsRUFBaEJBLEVBQUFBLEVBQUFBLEVBQUFBLEcsb0VBQWYsV0FBK0JqakIsRUFBSTRRLEVBQVlrQyxFQUFTek8sRUFBZ0J3VSxHQUF4RSwrRkFDb0NqRyxHQUFlaEMsRUFBWWtDLEVBQVN6TyxHQUR4RSxnQ0FDU3FnQixFQURULEtBQ21CcGdCLEVBRG5CLGNBRW9Cc1osR0FBYThHLEVBQVU3TCxHQUYzQyxPQUVRdkUsRUFGUixPQUlJbFEsR0FBYXBFLEVBQUlxRSxFQUFnQkMsR0FEdkIsSUFBUmdRLEVBQ3dDLFNBRUEsV0FOOUMsNkMsc0JDbk9BLFlBQUMsbUhBQ0t1TixFQUFVLE1BQ1IxZixFQUFTLElBQUk3RyxHQUNabEgsS0FBSyx1QkFDWnFHLE9BQU9nTixVQUFZaE4sT0FBT2dOLFdBQWEsR0FKeEMsU0FRRzlDLEtBRUFrZCxFQUFVLElBQUloTSxHQVZqQixTQVk0QjVCLEtBWjVCLGNBWVNyRCxFQVpULE9BYUd6TyxFQUFPdkcsSUFBSSw0QkFBNkJnVixHQUN4Q3ZOLEdBQXFCLGFBQWN1TixHQWR0QyxVQWUyQkssR0FBYUwsR0FmeEMsV0FlUytULEVBZlQsT0FnQkd0aEIsR0FBcUIsWUFBYXNoQixHQUU1QmhSLEVBQVlsWixPQUFPZ0IsYUFBYUMsUUFBUUwsSUFJN0IsSUFBZnNwQixHQUNDN1osVUFBVXlNLFlBQ3FCLG1CQUF6QnpNLFVBQVV5TSxZQUNzQixtQkFBaENrQyxNQUFBQSxRQUFQLFVBQU9BLE9BQVFycUIsaUJBQWYsYUFBTyxFQUFtQjRTLGFBQ3pCMlIsR0FBMkIsZ0JBQWRBLEdBMUJuQix1QkE0QktsWixPQUFPZ04sVUFBVXpTLEtBQUssQ0FBQ3dMLE1BQU8sT0FBUW9rQixRQUFTLGdCQUMvQ25xQixPQUFPZ0IsYUFBYWlFLFFBQVFyRSxFQUFpQyxlQUM3RGdJLEdBQXFCLFVBQVcsd0JBQzFCLElBQUk1UixNQUFNLDhDQS9CckIsV0FrQ1NvekIsRUFBY3BxQixPQUFPZ0IsYUFBYUMsUUFBUUwsR0FDMUN5cEIsRUFBaUJ6bUIsU0FBU2lJLGVBQWU1SyxRQUFRTixLQUF3QyxHQUd6RjBtQixFQUFZcE8sR0FBYSxjQUdaQyxHQUFja1IsS0FBZUMsRWxDL0NiLEdrQ010Qyx1QkEyQ0tycUIsT0FBT2dOLFVBQVV6UyxLQUFLLENBQUN3TCxNQUFPLE9BQVFva0IsUUFBUyxnQkFDL0N2aEIsR0FBcUIsVUFBVyx5QkFDMUIsSUFBSTVSLE1BQU0sb0NBN0NyQix5QkFrRDRCb1MsR0FBdUIsaUJBQWlCLEdBbERwRSxhQWtEU2toQixFQWxEVCxTQW1Eb0MsU0FBZkEsRUFuRHJCLHVCQW9ES3RxQixPQUFPZ04sVUFBVXpTLEtBQUssQ0FBQ3dMLE1BQU8sT0FBUW9rQixRQUFTLGFBQy9DbnFCLE9BQU9nQixhQUFhaUUsUUFBUXJFLEVBQWlDLFlBQzdEZ0ksR0FBcUIsVUFBVyx1QkFDMUIsSUFBSTVSLE1BQU0sd0NBdkRyQixpQkF3RGNzekIsRUF4RGQsdUJBeURLMWhCLEdBQXFCLFVBQVcsc0JBQzFCLElBQUk1UixNQUFNLCtEQTFEckIsV0E2RFFnSixPQUFPOEksSUFBSStELFNBQVMwSSxnQkFBZ0JDLFVBQVUrVSxTQUFTLGdCQTdEL0QsdUJBOERLMWUsZUFBZTVHLFFBQVF0RSxFQUFvQzBwQixFQUFpQixHQUM1RXpoQixHQUFxQixVQUFXLHNCQUMxQixJQUFJNVIsTUFBTSwyQkFoRXJCLFdBb0VPd3pCLEVBQU8sTUFFUG5ELEVBdEVQLGlCQXVFSzNmLEVBQU8vTixLQUFLLDREQUNaNndCLEdBQU8sRUFDUHhxQixPQUFPZ04sVUFBVXpTLEtBQUssQ0FBQ3dMLE1BQU8sT0FBUW9rQixRQUFTLGFBQy9DdmhCLEdBQXFCLFVBQVcscUJBMUVyQyw0QkEyRWNzUSxHQUEyQixhQUFkQSxFQTNFM0IsaUJBNEVLeFIsRUFBT3BHLEtBQUssd0JBRVprcEIsRUFBT04sR0FBYXpwQixFQUNwQlQsT0FBT2dOLFVBQVV6UyxLQUFLLENBQUN3TCxNQUFPLE9BQVFva0IsUUFBUyxhQUMvQ3ZoQixHQUFxQixVQUFXLHFCQWhGckMsNEJBaUZjc1EsRUFqRmQsdUJBa0ZLdFEsR0FBcUIsVUFBVyxXQUMxQixJQUFJNVIsTUFBTSwrQkFuRnJCLFFBdUZLNFIsR0FBcUIsT0FEckI0aEIsRUFBT04sR0FBYXpwQixHQUVwQlQsT0FBT2dCLGFBQWFpRSxRQUFRckUsR0FBa0MsR0FDOURaLE9BQU9nTixVQUFVelMsS0FBSyxDQUFDd0wsTUFBTyxPQUFRb2tCLFFBQVNLLEVBQUsxb0IsYUFDcEQ4RyxHQUFxQixVQUFXNGhCLEVBQUsxb0IsWUExRjFDLFlBNkZnQixJQUFUMG9CLEVBN0ZQLHVCQTZGNkIsSUFBSXh6QixNQUFNLHdDQTdGdkMsZUErRkcwUSxFQUFPdkcsSUFBSSw0QkFBNkIrb0IsR0FDeEN4aUIsRUFBT3ZHLElBQUksZ0JBQWlCVixHQUM1QmlILEVBQU92RyxJQUFJLDBCQUEyQitvQixFQUFZenBCLEdBQ2xEaUgsRUFBTy9OLEtBQVAsK0JBQW9DOEcsRUFBcEMsTUFsR0gsVUF1RzBCMkksR0FBdUIsWUFBWSxHQXZHN0QsV0F3R29CLGNBRFg4SixFQXZHVCwwQ0F5R1c5SixHQUF1QixvQkFBb0IsRUFBTSxHQUFJLEtBekdoRSx5QkEwR1dBLEdBQXVCLHdCQUF3QixFQUFNLEdBQUksS0ExR3BFLFdBNEdHZ2UsRUFBUXFELFdBR0poZSxFQUFjLE1BQ2QsQ0FBQyxjQUFlLGNBQWUsU0FBVSxZQUFZdE0sU0FBUytTLEdBaEhyRSxrQ0FpSHlCOUosR0FBdUIsc0JBQXNCLEVBQU0sR0FBSSxLQWpIaEYsUUFpSEtxRCxFQWpITCxlQW1IRzBhLEdBQVNoUixFQUFZaVIsRUFBU0MsRUFBV25VLEVBQVV6RyxHQW5IdEQsMERBcUhHL0UsRUFBT3BHLEtBQUssMEJBQTJCLEtBQUl3VixTQXJIOUMsVUF3SDBCMU4sR0FBdUIsWUFBWSxHQXhIN0QsV0F5SG9CLGFBekhwQiwyQ0EwSFdBLEdBQXVCLG9CQUFvQixFQUFNLEdBQUksS0ExSGhFLDJCQTJIV0EsR0FBdUIsd0JBQXdCLEVBQU0sR0FBSSxLQTNIcEUsU0E2SEdnZSxFQUFRcUQsU0FBUyxLQUFJM1QsU0FBUyxHQUU5QnhCLEtBL0hILDBEQUFELEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL3N0cmluZ1V0aWxzLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvbG9nZ2VyLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlMaWtlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5TGltaXQuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9CZWFnbGVEYXRhQ29sbGVjdGlvbi9zdG9yZS5jb25maWcuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9CZWFnbGVEYXRhQ29sbGVjdGlvbi9hcGkuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9CZWFnbGVEYXRhQ29sbGVjdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL0JlYWdsZUluZm9MYXllci9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL3V0aWxzLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvTmV4dGRheU1vbml0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9OZXh0ZGF5QXBwbHlBY3Rpb25zL3JlcGxhY2UtdXRpbHMuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9OZXh0ZGF5QXBwbHlBY3Rpb25zL2FjdGlvbi1jb25kaXRpb24tdXRpbC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlBcHBseUFjdGlvbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9OZXh0ZGF5UnVsZUVuZ2luZS9jb3VudGVyQ2hlY2tlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlSdWxlRW5naW5lL2RhdGFMYXllckNoZWNrZXIuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9OZXh0ZGF5UnVsZUVuZ2luZS9lbGVtZW50Q2hlY2tlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlSdWxlRW5naW5lL2Z1bmN0aW9uQ2hlY2tlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlSdWxlRW5naW5lL3Nlc3Npb25DaGVja2VyLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvTmV4dGRheVJ1bGVFbmdpbmUvdXJsQ2hlY2tlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlSdWxlRW5naW5lL2VudkNoZWNrZXIuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9OZXh0ZGF5UnVsZUVuZ2luZS9yYW5kb21OdW1iZXJDaGVja2VyLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvTmV4dGRheVJ1bGVFbmdpbmUvcHJvZHVjdEluZm9DaGVja2VyLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvTmV4dGRheVJ1bGVFbmdpbmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9CZWFnbGVJbmZvTGF5ZXIvc2VnbWVudC1jb21wdXRlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlUcmVhdG1lbnRSZXBvc2l0b3J5L2luZGV4LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvQmVhZ2xlT24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9OZXh0ZGF5Q2xpZW50U0RLL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBkZWZpbmUoSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIGRlZmluZShHcCwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gIGRlZmluZShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvbik7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKFxuICAgIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIHRvU3RyaW5nVGFnU3ltYm9sLFxuICAgIFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICApO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgZGVmaW5lKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlLCBhc3luY0l0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIGRlZmluZShHcCwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICBkZWZpbmUoR3AsIFwidG9TdHJpbmdcIiwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIGluIG1vZGVybiBlbmdpbmVzXG4gIC8vIHdlIGNhbiBleHBsaWNpdGx5IGFjY2VzcyBnbG9iYWxUaGlzLiBJbiBvbGRlciBlbmdpbmVzIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIikge1xuICAgIGdsb2JhbFRoaXMucmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbiAgfSBlbHNlIHtcbiAgICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xuICB9XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZTsgfTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfSIsImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgfSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICB9LCBfdHlwZW9mKG9iaik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn0iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn0iLCJleHBvcnQgY29uc3QgcmVwbGFjZUFsbCA9IChzdHIsIGZpbmQsIHJlcGxhY2UgPSBcIlwiKSA9PiB7XG4gIGlmICghc3RyKSByZXR1cm4gXCJcIjtcblxuICBjb25zdCBpbmRleCA9IHN0ci5pbmRleE9mKGZpbmQpO1xuICBpZiAoaW5kZXggPCAwKSByZXR1cm4gc3RyO1xuXG4gIHdoaWxlIChzdHIuaW5kZXhPZihmaW5kKSA+PSAwKSB7XG4gICAgY29uc3QgaW5kZXggPSBzdHIuaW5kZXhPZihmaW5kKTtcbiAgICBzdHIgPSAoaW5kZXggPiAwID8gc3RyLnN1YnN0cmluZygwLCBpbmRleCkgOiBcIlwiKSArIHJlcGxhY2UgKyBzdHIuc3Vic3RyaW5nKGluZGV4ICsgZmluZC5sZW5ndGgpO1xuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5pbXBvcnQge3JlcGxhY2VBbGx9IGZyb20gXCIuL3N0cmluZ1V0aWxzXCI7XG5cbmV4cG9ydCBjb25zdCBDT09LSUVfTkFNRSA9IFwiX2dhXCI7XG4vLyBUT0RPIHJldmVydCB0aGUgZm9sbG93aW5nIHN0YWdpbmcgZW52IGNoZWNrIGFmdGVyIG1vdmluZyB0byBuZXcgYnJhbmNoIHN0cnVjdHVyZVxuZXhwb3J0IGNvbnN0IFRSRUFUTUVOVFNfTE9DQVRJT04gPSBcImh0dHBzOi8vaG9zdC1iOTYucGFnZXMuZGV2L3RyZWF0bWVudHMuanNvblwiO1xuZXhwb3J0IGNvbnN0IFRSRUFUTUVOVF9XRUlHSFRTX0xPQ0FUSU9OID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMoXCJzdGFnaW5nLnZpdmVuc2VcIikgPyBcImh0dHBzOi8vbmR2aXZlbnNlLmdsb3YuYWkvd2VpZ2h0c19zdGFnaW5nLmpzb25cIiA6IFwiaHR0cHM6Ly9uZHZpdmVuc2UuZ2xvdi5haS93ZWlnaHRzLmpzb25cIjtcbmV4cG9ydCBjb25zdCBTVFlMRVNIRUVUX0xPQ0FUSU9OID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMoXCJzdGFnaW5nLnZpdmVuc2VcIikgPyBcImh0dHBzOi8vbmR2aXZlbnNlLmdsb3YuYWkvbmQtc3R5bGVzX3N0YWdpbmcuY3NzXCIgOiBgaHR0cHM6Ly9uZHZpdmVuc2UuZ2xvdi5haS9uZC1zdHlsZXMuY3NzP2lkPSR7cmVwbGFjZUFsbChuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc3Vic3RyaW5nKDAsIDEzKS5yZXBsYWNlKFwiVFwiLCBcIlwiKSwgXCItXCIsIFwiXCIpfWA7XG5leHBvcnQgY29uc3QgTE9HX0FQSV9VUkwgPSBcImh0dHBzOi8vZXVyb3BlLXdlc3QzLW5leHRkYXktMzRlYjMuY2xvdWRmdW5jdGlvbnMubmV0L2FwaS9sb2dcIjtcbmV4cG9ydCBjb25zdCBMT09LVVBfQVBJX1VSTCA9IFwiaHR0cHM6Ly9jYXRhbG9nLWFwaS5hZG9yYWFpLmNvbVwiO1xuZXhwb3J0IGNvbnN0IE1PQklMRV9NRURJQV9RVUVSWSA9IFwiKG1heC13aWR0aDogNDQwcHgpXCI7XG4vLyBDb250cm9sIGdyb3VwIHBlcmNlbnRhZ2VcbmV4cG9ydCBjb25zdCBTUExJVF9SQVRJTyA9IDUwO1xuLy8gU2tpcHBlZCB0cmVhdG1lbnQgcGVyY2VudGFnZVxuZXhwb3J0IGNvbnN0IFRSRUFUTUVOVF9SQVRJTyA9IDUwO1xuZXhwb3J0IGNvbnN0IFRSRUFUTUVOVFNfRFVSQVRJT04gPSAxO1xuZXhwb3J0IGNvbnN0IE1BWF9USU1FT1VUX1BFUl9TRVNTSU9OID0gMTtcbmV4cG9ydCBjb25zdCBMSVNUX01PREVfQkVBR0xFX0tFWVMgPSBbXCJwYWdldHlwZVwiLCBcImNhdGVnb3J5XCIsIFwiYWxsdGltZVBMUENhdGVnb3J5TW9kZVwiLCBcInNlc3Npb25QTFBDYXRlZ29yeU1vZGVcIixcbiAgXCJhbGx0aW1lUERQQ2F0ZWdvcnlNb2RlXCIsIFwic2Vzc2lvblBEUENhdGVnb3J5TW9kZVwiLCBcImFsbHRpbWVDYXJ0Q2F0ZWdvcnlNb2RlXCIsIFwic2Vzc2lvbkNhcnRDYXRlZ29yeU1vZGVcIl07XG4gIC8vIFRPRE8gc2V0IHRvIDEyMDAwMChtcykgYmVmb3JlIGdvIGxpdmVcbmV4cG9ydCBjb25zdCBJRExFX1RJTUVPVVQgPSAxNTAwMDtcblxuZXhwb3J0IGNvbnN0IFNFU1NJT05fU1RPUkFHRV9LRVlTID0ge1xuICBTRVNTSU9OX0lEOiBcIl9fYmVhZ2xlX3Nlc3Npb25faWRcIixcbiAgU0VTU0lPTl9USU1FU1RBTVA6IFwiQkdfU2Vzc2lvblRpbWVzdGFtcFwiLFxuICBTRVNTSU9OX0hJU1RPUlk6IFwiQkdfU2Vzc2lvbkhpc3RvcnlcIixcbiAgVFJFQVRNRU5UUzogXCJCR19UcmVhdG1lbnRzXCIsXG4gIFBBR0VfVklFV1M6IFwiQkdfUGFnZVZpZXdzXCIsXG4gIFBPUFVQX0RJU1BMQVlfRkxBRzogXCJCR19Qb3B1cERpc3BsYXlGbGFnXCIsXG4gIFNLVV9JTkZPX0JBU0tFVDogXCJCR19Qcm9kdWN0SW5mb0Jhc2tldFwiLFxuICBUSU1FT1VUX0NPVU5UOiBcIkJHX1RpbWVvdXRDb3VudFwiLFxuICBTRVNTSU9OX1JFRkVSUkVSOiBcIkJHX1Nlc3Npb25SZWZlcnJlclwiLFxufTtcbmV4cG9ydCBjb25zdCBMT0NBTF9TVE9SQUdFX0tFWVMgPSB7XG4gIENPVVBPTl9BUFBMSUNBQkxFX0JBU0tFVF9QUklDRTogXCJCR19DQUJhc2tldFByaWNlXCIsXG4gIERFQlVHX01PREU6IFwiQkdfRGVidWdcIixcbiAgT1VUX09GX1NDT1BFOiBcIkJHX091dE9mU2NvcGVcIixcbiAgSVNfTEFCRUxfU0VOVDogXCJCR19MYWJlbFNlbnRcIixcbiAgVVNFUl9JRDogXCJCR19Vc2VySWRcIixcbiAgREFUQV9DT0xMRUNUSU9OX0RBVEFfU0laRTogXCJCR19Db2xsZWN0aW9uRGF0YVNpemVcIixcbn07XG5cbmV4cG9ydCBjb25zdCBDVVNUT01fU1RPUkFHRV9QUkVGSVggPSBcIkJHX1NlZ19cIjtcbiIsImltcG9ydCB7TE9DQUxfU1RPUkFHRV9LRVlTfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmNsYXNzIExvZ2dlciB7XG4gIGNvbnN0cnVjdG9yKG9yaWdpbiA9IFwiQmVhZ2xlIENsaWVudCBTREtcIikge1xuICAgIHRoaXMub3JpZ2luID0gb3JpZ2luO1xuICAgIHRoaXMuREVCVUcgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oTE9DQUxfU1RPUkFHRV9LRVlTLkRFQlVHX01PREUpO1xuICB9XG5cbiAgaW5mbyguLi5hcmdzKSB7XG4gICAgY29uc3Qge29yaWdpbn0gPSB0aGlzO1xuICAgIGNvbnNvbGUuaW5mbyhgWyR7b3JpZ2lufV1gLCAuLi5hcmdzKTtcbiAgfVxuXG4gIGxvZyguLi5hcmdzKSB7XG4gICAgY29uc3Qge0RFQlVHLCBvcmlnaW59ID0gdGhpcztcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBbJHtvcmlnaW59XWAsIC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIGZhaWxlZCguLi5hcmdzKSB7XG4gICAgY29uc3Qge0RFQlVHLCBvcmlnaW59ID0gdGhpcztcbiAgICBpZiAoIURFQlVHKSByZXR1cm47XG4gICAgbGV0IG1lc3NhZ2VDb25maWcgPSBcIiVjJXMgICBcIjtcblxuICAgIGFyZ3MuZm9yRWFjaCgoYXJndW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgYXJndW1lbnQ7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcImJpZ2ludFwiOlxuICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgbWVzc2FnZUNvbmZpZyArPSBcIiVkICAgXCI7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgIG1lc3NhZ2VDb25maWcgKz0gXCIlcyAgIFwiO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIG1lc3NhZ2VDb25maWcgKz0gXCIlbyAgIFwiO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2VDb25maWcsIFwiY29sb3I6IHJlZFwiLCBgWyR7b3JpZ2lufV1gLCAuLi5hcmdzKTtcbiAgfVxuXG4gIHN1Y2Nlc3MoLi4uYXJncykge1xuICAgIGNvbnN0IHtERUJVRywgb3JpZ2lufSA9IHRoaXM7XG4gICAgaWYgKCFERUJVRykgcmV0dXJuO1xuICAgIGxldCBtZXNzYWdlQ29uZmlnID0gXCIlYyVzICAgXCI7XG5cbiAgICBhcmdzLmZvckVhY2goKGFyZ3VtZW50KSA9PiB7XG4gICAgICBjb25zdCB0eXBlID0gdHlwZW9mIGFyZ3VtZW50O1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgIG1lc3NhZ2VDb25maWcgKz0gXCIlZCAgIFwiO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICBtZXNzYWdlQ29uZmlnICs9IFwiJXMgICBcIjtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBtZXNzYWdlQ29uZmlnICs9IFwiJW8gICBcIjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZyhtZXNzYWdlQ29uZmlnLCBcImNvbG9yOiBncmVlblwiLCBgWyR7b3JpZ2lufV1gLCAuLi5hcmdzKTtcbiAgfVxuXG4gIHdhcm4oLi4uYXJncykge1xuICAgIGNvbnN0IHtvcmlnaW59ID0gdGhpcztcbiAgICBjb25zb2xlLndhcm4oYFske29yaWdpbn1dYCwgLi4uYXJncyk7XG4gIH1cblxuICBlcnJvciguLi5hcmdzKSB7XG4gICAgY29uc3Qge29yaWdpbn0gPSB0aGlzO1xuICAgIGNvbnNvbGUuZXJyb3IoYFske29yaWdpbn1dYCwgLi4uYXJncyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTG9nZ2VyO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59IiwiaW1wb3J0IGFycmF5V2l0aEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aEhvbGVzLmpzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5TGltaXQgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5TGltaXQuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlUmVzdCBmcm9tIFwiLi9ub25JdGVyYWJsZVJlc3QuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdO1xuXG4gIGlmIChfaSA9PSBudWxsKSByZXR1cm47XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuXG4gIHZhciBfcywgX2U7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufSIsImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhvdXRIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlU3ByZWFkIGZyb20gXCIuL25vbkl0ZXJhYmxlU3ByZWFkLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiY29uc3QgY29uZmlnID0ge1xuICBkYk5hbWU6IFwiYmVhZ2xlXCIsXG4gIHZlcnNpb246IDEsXG4gIG1haW50ZW5hbmNlT3BlcmF0aW9uQ291bnQ6IDEwMDAsIC8vIGFmZmVjdHMgdmVyc2lvblxuICBzdG9yZToge1xuICAgIG5hbWU6IFwiZGF0YVwiLFxuICAgIGluZGV4ZXM6IFt7XG4gICAgICBuYW1lOiBcIml4X2RhdGFOYW1lXCIsXG4gICAgICBmaWVsZHM6IFtcImRhdGFfbmFtZVwiXSxcbiAgICB9LCB7XG4gICAgICBuYW1lOiBcIml4X2RhdGFOYW1lX3Nlc3Npb25cIixcbiAgICAgIGZpZWxkczogW1wiZGF0YV9uYW1lXCIsIFwic2Vzc2lvbl9pZFwiXSxcbiAgICB9LCB7XG4gICAgICBuYW1lOiBcIml4X2RhdGFOYW1lX2RhdGFWYWx1ZVwiLFxuICAgICAgZmllbGRzOiBbXCJkYXRhX25hbWVcIiwgXCJkYXRhX3ZhbHVlXCJdLFxuICAgIH0sIHtcbiAgICAgIG5hbWU6IFwiaXhfZGF0YU5hbWVfZGF0YVZhbHVlX3Nlc3Npb25cIixcbiAgICAgIGZpZWxkczogW1wiZGF0YV9uYW1lXCIsIFwiZGF0YV92YWx1ZVwiLCBcInNlc3Npb25faWRcIl0sXG4gICAgfV0sXG4gICAgb3B0aW9uczoge2tleVBhdGg6IFwiaWRcIiwgYXV0b0luY3JlbWVudDogdHJ1ZX0sXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25maWc7XG4iLCJpbXBvcnQgY29uZmlnIGZyb20gXCIuL3N0b3JlLmNvbmZpZ1wiO1xuaW1wb3J0IHtMT0NBTF9TVE9SQUdFX0tFWVN9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxuY29uc3QgX3dpbmRvdyA9IHtcbiAgYWxsdGltZTogXCJhbGx0aW1lXCIsIHNlc3Npb246IFwic2Vzc2lvblwiLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmVhZ2xlRGF0YUNvbGxlY3Rpb25XcmFwcGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgY29uc3QgY2h1bmsgPSBNYXRoLmZsb29yKCB0aGlzLmdldENvbGxlY3Rpb25EYXRhU2l6ZSgpIC8gY29uZmlnLm1haW50ZW5hbmNlT3BlcmF0aW9uQ291bnQpO1xuICAgIHRoaXMuaWRiID0gQmVhZ2xlRGF0YUNvbGxlY3Rpb25XcmFwcGVyLmdldEluZGV4ZWREYigpLm9wZW4oY29uZmlnLmRiTmFtZSwgY29uZmlnLnZlcnNpb24gKyBjaHVuayk7XG5cbiAgICB0aGlzLmluaXQoKS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIH0pLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xuICB9XG5cbiAgZ2V0Q29sbGVjdGlvbkRhdGFTaXplKCkge1xuICAgIHJldHVybiBwYXJzZUludChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShMT0NBTF9TVE9SQUdFX0tFWVMuREFUQV9DT0xMRUNUSU9OX0RBVEFfU0laRSkpIHx8IDA7XG4gIH1cblxuICBzdGF0aWMgaXNTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5nZXRJbmRleGVkRGIoKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRJbmRleGVkRGIoKSB7XG4gICAgaWYgKHdpbmRvdy5pbmRleGVkREIpIHJldHVybiB3aW5kb3cuaW5kZXhlZERCO1xuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgaWYgKCFCZWFnbGVEYXRhQ29sbGVjdGlvbldyYXBwZXIuaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW5kZXhlZGRiIGlzIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLmlkYi5vbnVwZ3JhZGVuZWVkZWQgPSAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5pZGIucmVzdWx0LmRlbGV0ZU9iamVjdFN0b3JlKGNvbmZpZy5zdG9yZS5uYW1lKTtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuXG4gICAgICAgIGNvbnN0IHN0b3JlID0gdGhpcy5pZGIucmVzdWx0LmNyZWF0ZU9iamVjdFN0b3JlKGNvbmZpZy5zdG9yZS5uYW1lLCBjb25maWcuc3RvcmUub3B0aW9ucyk7XG4gICAgICAgIGlmIChjb25maWcuc3RvcmUuaW5kZXhlcz8ubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGZvciAoY29uc3QgaWR4IG9mIGNvbmZpZy5zdG9yZS5pbmRleGVzKSB7XG4gICAgICAgICAgICBzdG9yZS5jcmVhdGVJbmRleChpZHgubmFtZSwgaWR4LmZpZWxkcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmlkYi5vbnN1Y2Nlc3MgPSAoZSkgPT4ge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgc2F2ZUFsbChkYXRhTmFtZSwgdmFsdWVzID0gW10pIHtcbiAgICBpZiAoIXZhbHVlcykgcmV0dXJuO1xuXG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIHRoaXMuc2F2ZShkYXRhTmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNhdmUoZGF0YU5hbWUsIGRhdGFWYWx1ZSkge1xuICAgIGNvbnN0IHtzdG9yZX0gPSBhd2FpdCB0aGlzLmluaXRUcmFuc2FjdGlvbigpO1xuICAgIGNvbnN0IHNlc3Npb25JZCA9IHRoaXMuZ2V0Q3VycmVudFNlc3Npb25JZCgpOyAvLyBkYXRlIGN1cnJlbnQgLTIgc2FhdCAgeWlsLWF5LWd1blxuICAgIGNvbnN0IHRpbWUgPSBNYXRoLnJvdW5kKERhdGUubm93KCkgLyAxMDAwKTtcblxuICAgIGNvbnN0IHBheWxvYWQgPSB7XCJkYXRhX25hbWVcIjogZGF0YU5hbWUsIFwiZGF0YV92YWx1ZVwiOiBkYXRhVmFsdWUsIFwic2Vzc2lvbl9pZFwiOiBzZXNzaW9uSWQsIHRpbWV9O1xuICAgIHN0b3JlLnB1dChwYXlsb2FkKTtcblxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKExPQ0FMX1NUT1JBR0VfS0VZUy5EQVRBX0NPTExFQ1RJT05fREFUQV9TSVpFLCB0aGlzLmdldENvbGxlY3Rpb25EYXRhU2l6ZSgpICsgMSk7XG4gIH1cblxuICBnZXRDb25uZWN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICByZXNvbHZlKHRoaXMuaWRiLnJlc3VsdCk7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0sIDEwKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkNvdWxkIG5vdCBzZXQgcmVhZHkgY29sbGVjdGlvbkFwaVwiKSk7XG4gICAgICB9LCAxMDAwKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZpbmQobmFtZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5pbml0VHJhbnNhY3Rpb24oKS50aGVuKCh7c3RvcmV9KSA9PiB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gc3RvcmUuZ2V0KGlkKTtcbiAgICAgICAgcXVlcnkub25zdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICAgIHJlc29sdmUocXVlcnkucmVzdWx0KTtcbiAgICAgICAgfTtcbiAgICAgIH0pLmNhdGNoKChlcnIpID0+IHJlamVjdChlcnIpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGluaXRUcmFuc2FjdGlvbigpIHtcbiAgICBhd2FpdCB0aGlzLmdldENvbm5lY3Rpb24oKTtcbiAgICBjb25zdCB0eCA9IHRoaXMuaWRiLnJlc3VsdC50cmFuc2FjdGlvbihjb25maWcuc3RvcmUubmFtZSwgXCJyZWFkd3JpdGVcIik7XG4gICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZShjb25maWcuc3RvcmUubmFtZSk7XG5cbiAgICByZXR1cm4ge3R4LCBzdG9yZX07XG4gIH1cblxuICBtaW5tYXgoZGF0YU5hbWUsIG9wLCB3aW5kb3cgPSBfd2luZG93LmFsbHRpbWUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIHRoaXMuaW5pdFRyYW5zYWN0aW9uKCkudGhlbigoe3N0b3JlfSkgPT4ge1xuICAgICAgICBsZXQgc3RvcmVkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmdldEN1cnNvcihzdG9yZSwgZGF0YU5hbWUsIHdpbmRvdykub25zdWNjZXNzID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICBjb25zdCBjdXJzb3IgPSBldmVudC50YXJnZXQucmVzdWx0O1xuICAgICAgICAgIGlmIChjdXJzb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY3Vyc29yLnZhbHVlO1xuICAgICAgICAgICAgaWYgKFwiZGF0YV92YWx1ZVwiIGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBzdG9yZWQgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgIChvcCA9PT0gXCJtaW5cIiAmJiB2YWx1ZVtcImRhdGFfdmFsdWVcIl0gPCBzdG9yZWQpIHx8XG4gICAgICAgICAgICAgICAgKG9wID09PSBcIm1heFwiICYmIHZhbHVlW1wiZGF0YV92YWx1ZVwiXSA+IHN0b3JlZClcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgc3RvcmVkID0gdmFsdWVbXCJkYXRhX3ZhbHVlXCJdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJrZXkgbm90IGZvdW5kIGluIGN1cnNvciB2YWx1ZXMgXCIgKyBkYXRhTmFtZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKHN0b3JlZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBtaW4oZGF0YU5hbWUsIHdpbmRvdyA9IF93aW5kb3cuYWxsdGltZSkge1xuICAgIHJldHVybiB0aGlzLm1pbm1heChkYXRhTmFtZSwgXCJtaW5cIiwgd2luZG93KTtcbiAgfVxuXG4gIG1heChkYXRhTmFtZSwgd2luZG93ID0gX3dpbmRvdy5hbGx0aW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWlubWF4KGRhdGFOYW1lLCBcIm1heFwiLCB3aW5kb3cpO1xuICB9XG5cbiAgZ3JvdXBCeShkYXRhTmFtZSwgd2luZG93ID0gX3dpbmRvdy5hbGx0aW1lKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLmluaXRUcmFuc2FjdGlvbigpLnRoZW4oKHtzdG9yZX0pID0+IHtcbiAgICAgICAgY29uc3QgbWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmdldEN1cnNvcihzdG9yZSwgZGF0YU5hbWUsIHdpbmRvdykub25zdWNjZXNzID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICBjb25zdCBjdXJzb3IgPSBldmVudC50YXJnZXQucmVzdWx0O1xuICAgICAgICAgIGlmIChjdXJzb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY3Vyc29yLnZhbHVlO1xuICAgICAgICAgICAgaWYgKFwiZGF0YV92YWx1ZVwiIGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmICghbWFwLmhhcyh2YWx1ZVtcImRhdGFfdmFsdWVcIl0pKSBtYXAuc2V0KHZhbHVlW1wiZGF0YV92YWx1ZVwiXSwgMCk7XG4gICAgICAgICAgICAgIG1hcC5zZXQodmFsdWVbXCJkYXRhX3ZhbHVlXCJdLCBtYXAuZ2V0KHZhbHVlW1wiZGF0YV92YWx1ZVwiXSkgKyAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihcImtleSBub3QgZm91bmQgaW4gY3Vyc29yIHZhbHVlcyBcIiArIGRhdGFOYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3Vyc29yLmNvbnRpbnVlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUobWFwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIG1vZGUoZGF0YU5hbWUsIHdpbmRvdyA9IF93aW5kb3cuYWxsdGltZSkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmdyb3VwQnkoZGF0YU5hbWUsIHdpbmRvdyk7XG4gICAgaWYgKGRhdGEua2V5cygpLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCBtYXggPSB7bmFtZTogdW5kZWZpbmVkLCB2YWx1ZTogLTF9O1xuXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZGF0YSkge1xuICAgICAgaWYgKG1heC52YWx1ZSA8IHZhbHVlKSB7XG4gICAgICAgIG1heC5uYW1lID0ga2V5O1xuICAgICAgICBtYXgudmFsdWUgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWF4O1xuICB9XG5cbiAgY291bnQoZGF0YU5hbWUsIHdpbmRvdyA9IF93aW5kb3cuYWxsdGltZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgdGhpcy5pbml0VHJhbnNhY3Rpb24oKS50aGVuKCh7c3RvcmV9KSA9PiB7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIHRoaXMuZ2V0Q3Vyc29yKHN0b3JlLCBkYXRhTmFtZSwgd2luZG93KS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgIGNvbnN0IGN1cnNvciA9IGV2ZW50LnRhcmdldC5yZXN1bHQ7XG4gICAgICAgICAgaWYgKGN1cnNvcikge1xuICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKGNvdW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHN1bShkYXRhTmFtZSwgd2luZG93ID0gXCJhbGx0aW1lXCIpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIHRoaXMuaW5pdFRyYW5zYWN0aW9uKCkudGhlbigoe3N0b3JlfSkgPT4ge1xuICAgICAgICBsZXQgdG90YWwgPSAwLjAwO1xuICAgICAgICB0aGlzLmdldEN1cnNvcihzdG9yZSwgZGF0YU5hbWUsIHdpbmRvdykub25zdWNjZXNzID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICBjb25zdCBjdXJzb3IgPSBldmVudC50YXJnZXQucmVzdWx0O1xuICAgICAgICAgIGlmIChjdXJzb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY3Vyc29yLnZhbHVlO1xuICAgICAgICAgICAgaWYgKFwiZGF0YV92YWx1ZVwiIGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgIHRvdGFsICs9IHBhcnNlRmxvYXQodmFsdWVbXCJkYXRhX3ZhbHVlXCJdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihcImtleSBub3QgZm91bmQgaW4gY3Vyc29yIHZhbHVlcyBcIiArIGRhdGFOYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3Vyc29yLmNvbnRpbnVlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUodG90YWwudG9GaXhlZCgyKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRDdXJzb3Ioc3RvcmUsIGRhdGFOYW1lLCB3aW5kb3cgPSBfd2luZG93LmFsbHRpbWUsIGRhdGFWYWx1ZSA9IHVuZGVmaW5lZCkge1xuICAgIGlmIChkYXRhVmFsdWUpIHtcbiAgICAgIGlmICh3aW5kb3cgPT09IF93aW5kb3cuc2Vzc2lvbikge1xuICAgICAgICByZXR1cm4gc3RvcmUuaW5kZXgoXCJpeF9kYXRhTmFtZV9kYXRhVmFsdWVfc2Vzc2lvblwiKVxuICAgICAgICAgICAgLm9wZW5DdXJzb3IoSURCS2V5UmFuZ2Uub25seShbZGF0YU5hbWUsIGRhdGFWYWx1ZSwgdGhpcy5nZXRDdXJyZW50U2Vzc2lvbklkKCkudG9TdHJpbmcoKV0pKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0b3JlLmluZGV4KFwiaXhfZGF0YU5hbWVfZGF0YVZhbHVlXCIpXG4gICAgICAgICAgLm9wZW5DdXJzb3IoSURCS2V5UmFuZ2Uub25seShbZGF0YU5hbWUsIGRhdGFWYWx1ZV0pKTtcbiAgICB9XG5cbiAgICBpZiAod2luZG93ID09PSBfd2luZG93LnNlc3Npb24pIHtcbiAgICAgIHJldHVybiBzdG9yZS5pbmRleChcIml4X2RhdGFOYW1lX3Nlc3Npb25cIilcbiAgICAgICAgICAub3BlbkN1cnNvcihJREJLZXlSYW5nZS5vbmx5KFtkYXRhTmFtZSwgdGhpcy5nZXRDdXJyZW50U2Vzc2lvbklkKCkudG9TdHJpbmcoKV0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RvcmUuaW5kZXgoXCJpeF9kYXRhTmFtZVwiKVxuICAgICAgICAub3BlbkN1cnNvcihJREJLZXlSYW5nZS5vbmx5KFtkYXRhTmFtZV0pKTtcbiAgfVxuXG4gIGFzeW5jIGF2ZyhkYXRhTmFtZSwgd2luZG93ID0gX3dpbmRvdy5hbGx0aW1lKSB7XG4gICAgY29uc3QgdG90YWwgPSBhd2FpdCB0aGlzLnN1bShkYXRhTmFtZSwgd2luZG93KTtcbiAgICBjb25zdCBjb3VudCA9IGF3YWl0IHRoaXMuY291bnQoZGF0YU5hbWUsIHdpbmRvdyk7XG5cbiAgICBpZiAoIXRvdGFsIHx8ICFjb3VudCkgcmV0dXJuIDA7XG5cbiAgICByZXR1cm4gKHRvdGFsIC8gY291bnQpLnRvRml4ZWQoMik7XG4gIH1cblxuICBhc3luYyBsYXN0KGRhdGFOYW1lLCBzaXplID0gMSwgd2luZG93ID0gX3dpbmRvdy5hbGx0aW1lKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLmluaXRUcmFuc2FjdGlvbigpLnRoZW4oKHtzdG9yZX0pID0+IHtcbiAgICAgICAgbGV0IGN1cnNvciA9IHN0b3JlLmluZGV4KFwiaXhfZGF0YU5hbWVcIikub3BlbkN1cnNvcihbZGF0YU5hbWVdLCBcInByZXZcIik7XG4gICAgICAgIGlmICh3aW5kb3cgPT09IF93aW5kb3cuc2Vzc2lvbikge1xuICAgICAgICAgIGN1cnNvciA9IHN0b3JlLmluZGV4KFwiaXhfZGF0YU5hbWVfc2Vzc2lvblwiKVxuICAgICAgICAgICAgICAub3BlbkN1cnNvcihbZGF0YU5hbWUsIHRoaXMuZ2V0Q3VycmVudFNlc3Npb25JZCgpXSwgXCJwcmV2XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgICAgIGN1cnNvci5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGV2ZW50LnRhcmdldC5yZXN1bHQ7XG4gICAgICAgICAgaWYgKHJlc3VsdCAmJiBpbmRleCA8IHNpemUpIHtcbiAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICB2YWx1ZXMucHVzaChyZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgcmVzdWx0LmNvbnRpbnVlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldEN1cnJlbnRTZXNzaW9uSWQoKSB7XG4gICAgY29uc3QgZCA9IG5ldyBEYXRlKCk7XG4gICAgZC5zZXRIb3VycyhkLmdldEhvdXJzKCkgLSAyKTtcblxuICAgIHJldHVybiBkLmdldEZ1bGxZZWFyKCkgKyBcIi1cIiArXG4gICAgICAoZC5nZXRNb250aCgpICsgMSkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIikgKyBcIi1cIiArXG4gICAgICBkLmdldERhdGUoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcbiAgfVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyXCI7XG5pbXBvcnQgQ29sbGVjdG9yQXBpIGZyb20gXCIuL2FwaVwiO1xuXG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFwiQmVhZ2xlRGF0YUNvbGxlY3Rpb25cIik7XG5jb25zdCBjb2xsZWN0b3JBcGkgPSBuZXcgQ29sbGVjdG9yQXBpKCk7XG5cbi8vIGtlZXAgYSB0YWJsZSBpbiBpbmRleGRiIHRoZSBmb3JtYXQgW3Nlc3Npb25faWQsIGRhdGFfbmFtZSwgZGF0YV92YWx1ZSwgc3RvcmVkX3ZhbHVlXVxuXG5leHBvcnQgY29uc3QgcXVlcnlJbkNvbGxlY3RvciA9IGFzeW5jIChiYXNlRmVhdHVyZU5hbWUsIHF1ZXJ5TWV0aG9kLCB3aW5kb3cpID0+IHtcbiAgbG9nZ2VyLmxvZyhcInF1ZXJ5SW5Db2xsZWN0b3JcIiwgYmFzZUZlYXR1cmVOYW1lLCBxdWVyeU1ldGhvZCwgd2luZG93KTtcblxuICAvLyB3aW5kb3cgY2FuIGJlIGVpdGhlciBzYW1lZGF5IG9yIGFsbHRpbWVcblxuICBpZiAocXVlcnlNZXRob2QgPT09IFwibWluXCIpIHtcbiAgICBjb25zdCBxdWVyeVByb21pc2UgPSBhd2FpdCBjb2xsZWN0b3JBcGkubWluKGJhc2VGZWF0dXJlTmFtZSwgd2luZG93KTtcbiAgICByZXR1cm4gcXVlcnlQcm9taXNlO1xuICB9IGVsc2UgaWYgKHF1ZXJ5TWV0aG9kID09PSBcIm1heFwiKSB7XG4gICAgY29uc3QgcXVlcnlQcm9taXNlID0gYXdhaXQgY29sbGVjdG9yQXBpLm1heChiYXNlRmVhdHVyZU5hbWUsIHdpbmRvdyk7XG4gICAgcmV0dXJuIHF1ZXJ5UHJvbWlzZTtcbiAgfSBlbHNlIGlmIChxdWVyeU1ldGhvZCA9PT0gXCJhdmdcIikge1xuICAgIGNvbnN0IHF1ZXJ5UHJvbWlzZSA9IGF3YWl0IGNvbGxlY3RvckFwaS5hdmcoYmFzZUZlYXR1cmVOYW1lLCB3aW5kb3cpO1xuICAgIHJldHVybiBxdWVyeVByb21pc2U7XG4gIH0gZWxzZSBpZiAocXVlcnlNZXRob2QgPT09IFwiY2RcIikge1xuICAgIHJldHVybiAoYXdhaXQgY29sbGVjdG9yQXBpLmdyb3VwQnkoYmFzZUZlYXR1cmVOYW1lLCB3aW5kb3cpKS5zaXplO1xuICB9IGVsc2UgaWYgKHF1ZXJ5TWV0aG9kID09PSBcImN2XCIpIHtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgY29sbGVjdG9yQXBpLmNvdW50KGJhc2VGZWF0dXJlTmFtZSwgd2luZG93KTtcblxuICAgIGxldCBjb3VudCA9IDA7XG4gICAgZm9yIChjb25zdCBbLCB2YWx1ZV0gb2YgZGF0YSkge1xuICAgICAgY291bnQgKz0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBjb3VudDtcbiAgfVxuXG4gIGlmIChxdWVyeU1ldGhvZCA9PT0gXCJtb2RlXCIpIHtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgY29sbGVjdG9yQXBpLm1vZGUoYmFzZUZlYXR1cmVOYW1lLCB3aW5kb3cpO1xuICAgIGlmICghZGF0YSkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIGRhdGEubmFtZTtcbiAgfVxuXG4gIGlmIChxdWVyeU1ldGhvZC5pbmRleE9mKFwibGFzdFwiKSA+PSAwKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBxdWVyeU1ldGhvZC5tYXRjaChcImxhc3RcXFxcKChbXFxcXGRdKylcXFxcKVwiKTtcbiAgICBpZiAoIW1hdGNoIHx8ICFtYXRjaC5sZW5ndGggPT09IDIgfHwgcGFyc2VJbnQobWF0Y2hbMV0pIDwgMSApIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHF1ZXJ5UHJvbWlzZSA9IGF3YWl0IGNvbGxlY3RvckFwaS5sYXN0KGJhc2VGZWF0dXJlTmFtZSwgbWF0Y2hbMV0sIHdpbmRvdyk7XG4gICAgcmV0dXJuIHF1ZXJ5UHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgIHtcIkxpc3RpbmdwYWdlXCIgPT4gMjF9XG4gICAge1wiSG9tZXBhZ2VcIiA9PiAxMn1cbiAgICAtLSBleGFtcGxlIHdpbGwgaGF2ZTpcbiAgICBtb2RlOiBMaXN0aW5ncGFnZVxuICAgIGNkOiAyXG4gICAgY3Y6IDIxKzEyXG4gICAgbGFzdCgzKSAobiwgbi0xLCBuLTIpXG4gICovXG5cbiAgLy8gMTAwMGxpayB0ZW1pemxlbmVjZWsgKG1haW50T3BDb3VudCAtPiB2ZXJzaW9uKVxuXG4gIC8vIHF1ZXJ5TWV0aG9kIGNhbiBiZSBcIm1vZGVcIiwgXCJjZFwiIChjb3VudCBkaXN0aW50KSBmb3Igc3RyaW5nL2NhdGVnb3JpY2FsIGRhdGEgdHlwZXNcbiAgLy8gcXVlcnlNZXRob2QgY2FuIGJlIFwiY3ZcIiAoc3VtIG9mIGNvdW50IHZhbHVlcyksIFwiY3VycmVudFwiLCBvciBcInByZXZcIiBmb3IgYW55IGRhdGEgdHlwZSAoc3RvcmVkIHZpYSBsYXN0KVxuICBsb2dnZXIuZmFpbGVkKGB1bmtub3duIHF1ZXJ5TWV0aG9kPSR7cXVlcnlNZXRob2R9IGluIEJlYWdsZURhdGFDb2xsZWN0aW9uYCk7XG4gIHJldHVybiBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZUluQ29sbGVjdG9yID0gYXN5bmMgKGJhc2VGZWF0dXJlTmFtZSwgYmFzZUZlYXR1cmVWYWx1ZSwgdXBkYXRlTWV0aG9kKSA9PiB7XG4gIGxvZ2dlci5sb2coXCJ1cGRhdGVJbkNvbGxlY3RvclwiLCBiYXNlRmVhdHVyZU5hbWUsIGJhc2VGZWF0dXJlVmFsdWUsIHVwZGF0ZU1ldGhvZCk7XG5cbiAgYXdhaXQgY29sbGVjdG9yQXBpLnNhdmUoYmFzZUZlYXR1cmVOYW1lLCBiYXNlRmVhdHVyZVZhbHVlKTtcblxuXG4gIC8vIHVwZGF0ZU1ldGhvZCBjYW4gYmUgXCJtaW5cIiwgXCJtYXhcIiwgXCJjbnRcIiwgXCJzdW1cIiBmb3IgbnVtZXJpYyBkYXRhIHR5cGVzLCBtaW4tbWF4IGNvbXBhcmVzIHdpdGggb25seSBleGlzdGluZywgYXZnIHVwZGF0ZXMgY250IGFuZCBzdW1cbiAgLy8gLS0+IG1pbjogW3Nlc3Npb25faWQsIGRhdGFfbmFtZSwgXCJtaW5cIiwgKGxlYXN0IG9mIGV4aXN0aW5nIGFuZCBpbmNvbWluZyBzdG9yZWRfdmFsdWUpXVxuICAvLyAtLT4gbWF4OiBbc2Vzc2lvbl9pZCwgZGF0YV9uYW1lLCBcIm1heFwiLCAoZ3JlYXRlc3Qgb2YgZXhpc3RpbmcgYW5kIGluY29taW5nIHN0b3JlZF92YWx1ZSldXG4gIC8vIC0tPiBzdW06IFtzZXNzaW9uX2lkLCBkYXRhX25hbWUsIFwic3VtXCIsIChzdW0gb2YgZXhpc3RpbmcgYW5kIGluY29taW5nIHN0b3JlZF92YWx1ZSldXG4gIC8vIC0tPiBjbnQ6IFtzZXNzaW9uX2lkLCBkYXRhX25hbWUsIFwiY250XCIsIChleGlzdGluZyArIDEpXVxuICAvL1xuICAvLyB1cGRhdGVNZXRob2QgY2FuIGJlIFwiY291bnRfdmFsdWVzXCIgZm9yIHN0cmluZy9jYXRlZ29yaWNhbCBkYXRhIHR5cGVzLCBrZWVwIGEgY291bnRlciBmb3IgZWFjaCB2YWx1ZVxuICAvLyAtLT4gY291bnRfdmFsdWVzOiBbc2Vzc2lvbl9pZCwgZGF0YV9uYW1lLCBkYXRhX3ZhbHVlLCAoZXhpc3RpbmcgKyAxKV1cbiAgLy9cbiAgLy8gdXBkYXRlTWV0aG9kIGNhbiBiZSBcImxhc3RcIiBmb3IgYW55IGRhdGEgdHlwZSAtLT4ga2VlcHMgMiB2YWx1ZXMgZm9yIGN1cnJlbnQgYW5kIHRoZSBwcmV2aW91c1xuICAvLyBkZWxldGU6IFtzZXNzaW9uX2lkLCBkYXRhX25hbWUsIFwicHJldlwiLCAoZXhpc3RpbmcgdmFsdWUpXVxuICAvLyBtb3ZlOiBleGlzdGluZyBbc2Vzc2lvbl9pZCwgZGF0YV9uYW1lLCBcImN1cnJlbnRcIiwgKGV4aXN0aW5nIHZhbHVlKV0gLS0+IFtzZXNzaW9uX2lkLCBkYXRhX25hbWUsIFwicHJldlwiLCAoZXhpc3RpbmcgdmFsdWUpXVxuICAvLyBwdXQ6IFtzZXNzaW9uX2lkLCBkYXRhX25hbWUsIFwiY3VycmVudFwiLCAoaW5jb21pbmcgc3RvcmVkX3ZhbHVlKV1cbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5pbXBvcnQge2Zvcm1hdERlbGl2ZXJ5RGF0ZX0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQge0xPT0tVUF9BUElfVVJMLCBMT0NBTF9TVE9SQUdFX0tFWVMsIFNFU1NJT05fU1RPUkFHRV9LRVlTLCBTUExJVF9SQVRJT30gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHtxdWVyeUluQ29sbGVjdG9yLCB1cGRhdGVJbkNvbGxlY3Rvcn0gZnJvbSBcIi4uL0JlYWdsZURhdGFDb2xsZWN0aW9uXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcblxud2luZG93LmJlYWdsZUluZm9MYXllciA9IHdpbmRvdy5iZWFnbGVJbmZvTGF5ZXIgfHwge1xuICBhOiB7fSwgZToge30sIGY6IHt9LFxufTtcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIkJlYWdsZUluZm9MYXllclwiKTtcblxuZXhwb3J0IGNvbnN0IGFkZFRvQmVhZ2xlSW5mb0xheWVyID0gKGtleSwgdmFsdWUpID0+IHtcbiAgY29uc3QgaW5mb0xheWVyID0gd2luZG93LnRvcC5iZWFnbGVJbmZvTGF5ZXI7XG5cbiAgaWYgKGtleSA9PT0gbnVsbCB8fCBrZXkgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gIC8vIGlmIHZhbHVlIGlzIHN0cmluZywgYWRkIGFzIGEgY2xlYW4gc3RyaW5nLCBpZiBvYmplY3QgYWRkIHRoZSBzYW1lXG4gIGNvbnN0IHR5cGVkVmFsdWUgPSB0eXBlb2YgKHZhbHVlKSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnRvU3RyaW5nKCkudHJpbSgpIDogdmFsdWU7XG4gIC8vIGlmIGtleSBjb250YWlucyAuIGNyZWF0ZSBuZXN0ZWQgb2JqZWN0XG4gIGlmIChrZXkuaW5kZXhPZihcIi5cIikgPiAtMSkge1xuICAgIGNvbnN0IGtleXMgPSBrZXkuc3BsaXQoXCIuXCIpO1xuICAgIGNvbnN0IGxhc3RLZXkgPSBrZXlzLnBvcCgpO1xuICAgIGxldCBvYmogPSBpbmZvTGF5ZXI7XG4gICAga2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmICghb2JqW2tleV0pIG9ialtrZXldID0ge307XG4gICAgICBvYmogPSBvYmpba2V5XTtcbiAgICB9KTtcbiAgICBvYmpbbGFzdEtleV0gPSB0eXBlZFZhbHVlO1xuICB9IGVsc2Uge1xuICAgIGluZm9MYXllcltrZXldID0gdHlwZWRWYWx1ZTtcbiAgfVxuICAvLyBwcm9jZXNzIGRlcGVuZGVudCBoaXN0b3JpY2FsIGRhdGEgZm9yIHNjYW4tZm91bmQgZWxlbWVudHNcbiAgdXBkYXRlSGlzdG9yaWNhbERhdGFTY2FuKGtleSwgdHlwZWRWYWx1ZSk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RnJvbUJlYWdsZUluZm9MYXllciA9IChrZXksIGJsb2NraW5nID0gZmFsc2UsIHBvbGxJbnRlcnZhbCA9IDEwLCB0aW1lb3V0ID0gMTAwMDApID0+IHtcbiAgcmV0dXJuIGdldEFueUZyb21CZWFnbGVJbmZvTGF5ZXIoW2tleV0sIGJsb2NraW5nLCBwb2xsSW50ZXJ2YWwsIHRpbWVvdXQpO1xufTtcblxuY29uc3QgZ2V0QW55RnJvbUJlYWdsZUluZm9MYXllciA9IChrZXlzLCBibG9ja2luZyA9IGZhbHNlLCBwb2xsSW50ZXJ2YWwgPSAxMCwgdGltZW91dCA9IDEwMDAwKSA9PiB7XG4gIGNvbnN0IGluZm9MYXllciA9IHdpbmRvdy50b3AuYmVhZ2xlSW5mb0xheWVyO1xuICAvLyByZXR1cm4gbnVsbCBpZiBrZXlzIGlzIG1pc3Npbmcgb3Igbm90IGFuIGFycmF5IG9yIGhhcyBubyBlbGVtZW50c1xuICBpZiAoIWtleXMgfHwgIUFycmF5LmlzQXJyYXkoa2V5cykgfHwgIWtleXMubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgbGV0IG9idGFpbkRhdGE7XG4gIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICBvYnRhaW5EYXRhID0ganNvbkdldChpbmZvTGF5ZXIsIGtleSk7XG4gICAgaWYgKG9idGFpbkRhdGEpIHtcbiAgICAgIC8vIGZvdW5kIGRhdGEgZm9yIGtleVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShvYnRhaW5EYXRhKTtcbiAgICB9XG4gIH1cbiAgaWYgKGJsb2NraW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgICAgIG9idGFpbkRhdGEgPSBqc29uR2V0KGluZm9MYXllciwga2V5KTtcbiAgICAgICAgICBpZiAob2J0YWluRGF0YSkge1xuICAgICAgICAgICAgLy8gZm91bmQgZGF0YSBmb3Iga2V5LCBjbGVhciBpbnRlcnZhbCBhbmQgcmVzb2x2ZVxuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICAgICAgICByZXNvbHZlKG9idGFpbkRhdGEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBwb2xsSW50ZXJ2YWwpO1xuICAgICAgLy8gYWRkIHRpbWVvdXRcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgIH0sIHRpbWVvdXQpOyAvLyB3YWl0IGJsb2NraW5nIGZvciBcInRpbWVvdXRcIiBtc2Vjc1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG59O1xuXG5leHBvcnQgY29uc3QgcmVtb3ZlRnJvbUJlYWdsZUluZm9MYXllciA9IChrZXkpID0+IHtcbiAgY29uc3QgaW5mb0xheWVyID0gd2luZG93LnRvcC5iZWFnbGVJbmZvTGF5ZXI7XG4gIGlmIChrZXkgPT09IG51bGwgfHwga2V5ID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgZGVsZXRlIGluZm9MYXllcltrZXldO1xufTtcblxuZXhwb3J0IGNvbnN0IGFkZFRyZWF0bWVudCA9IChpZCwgYnVzaW5lc3NSdWxlSWQsIHZhcmlhbnQsIHN0YXR1cywgZGVwZW5kYW50X29uX3RyZWF0bWVudCA9IG51bGwpID0+IHtcbiAgY29uc3QgdmFsdWUgPSB7fTtcbiAgaWYgKGJ1c2luZXNzUnVsZUlkKSB2YWx1ZS5idXNpbmVzc1J1bGVJZCA9IGJ1c2luZXNzUnVsZUlkO1xuICBpZiAodmFyaWFudCkgdmFsdWUudmFyaWFudCA9IHZhcmlhbnQ7XG5cbiAgc3dpdGNoIChzdGF0dXMpIHtcbiAgICBjYXNlIFwiYXBwbGllZFwiOlxuICAgICAgd2luZG93LmJlYWdsZUluZm9MYXllci5hW2lkXSA9IHZhbHVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInNraXBwZWRcIjpcbiAgICAgIHZhbHVlLmRlcGVuZGFudF9vbl90cmVhdG1lbnQgPSBkZXBlbmRhbnRfb25fdHJlYXRtZW50O1xuICAgICAgd2luZG93LmJlYWdsZUluZm9MYXllci5lW2lkXSA9IHZhbHVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImZhaWxlZFwiOlxuICAgICAgd2luZG93LmJlYWdsZUluZm9MYXllci5mW2lkXSA9IHZhbHVlO1xuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbmNvbnN0IFBBUlNFU0VBUkNITUFYUkVUUlkgPSAxMDtcbmNvbnN0IFBBUlNFU0VBUkNIU1RBUlRERUxBWSA9IDEwO1xubGV0IHBhcnNlU2VhcmNoUGF0aHNEZWxheSA9IFBBUlNFU0VBUkNIU1RBUlRERUxBWTtcbmxldCBwYXJzZVNlYXJjaFBhdGhzUmV0cnkgPSAwO1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZUJlYWdsZUluZm9MYXllciA9IGFzeW5jICgpID0+IHtcbiAgLy8gYWRkIGN1cnJlbnQgZXBvY2ggaW50ZWdlciB0byBiZWFnbGVJbmZvTGF5ZXJcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJ2aWV3X2Vwb2NoXCIsIERhdGUubm93KCkpO1xuXG4gIC8vIENvbGxlY3QgY29yZSBkYXRhXG4gIHByZXBhcmVDb3JlRGF0YSgpO1xuXG4gIC8vIFRyaWdnZXItc3RhcnQgdGhlIHBhcnNlciBsb29wXG4gIHBhcnNlckNhbGxlcigpO1xuXG4gIC8vIFRyaWdnZXIgcGFnZS1yZWZyZXNoIHRvIHByb2Nlc3MgaGlzdG9yeVxuICBwcm9jZXNzVHJpZ2dlcihcInBhZ2VDaGFuZ2VkXCIpO1xuXG4gIC8vIEFkZCBtZXRyaWNzXG4gIGFkZE1ldHJpY3MoKTtcbn07XG5cbmNvbnN0IGZlYXR1cmVFbmdpbmVlcmluZ1VwZGF0ZXMgPSB7XG4gIFwidmlld19lcG9jaFwiOiBbXG4gICAge3VwZGF0ZU1ldGhvZDogXCJtaW5cIn0sXG4gIF0sXG4gIFwiUGFnZVR5cGVcIjogW1xuICAgIHt1cGRhdGVNZXRob2Q6IFwiY291bnRfdmFsdWVzXCJ9LFxuICBdLFxuICBcImNhcnQuY291cG9uQXBwbGljYWJsZVwiOiBbXG4gICAge3VwZGF0ZU1ldGhvZDogXCJsYXN0XCJ9LFxuICBdLFxuICBcInBkcC5jYXRlZ29yeVwiOiBbXG4gICAge3VwZGF0ZU1ldGhvZDogXCJjb3VudF92YWx1ZXNcIn0sXG4gIF0sXG59O1xuXG5jb25zdCBmZWF0dXJlRW5naW5lZXJpbmdRdWVyaWVzID0ge1xuICBcInZpZXdfZXBvY2hcIjogW1xuICAgIHtxdWVyeU1ldGhvZDogXCJtaW5cIiwgd2luZG93OiBcInNlc3Npb25cIiwgZmVhdHVyZU5hbWU6IFwiaGlzdG9yeS52aWV3X2Vwb2NoX21pblwifSxcbiAgXSxcbiAgXCJQYWdlVHlwZVwiOiBbXG4gICAge3F1ZXJ5TWV0aG9kOiBcInN1bV9vZl9jb3VudHNcIiwgd2luZG93OiBcInNlc3Npb25cIiwgZmVhdHVyZU5hbWU6IFwiaGlzdG9yeS5QYWdlVHlwZV9jb3VudF9zZXNzaW9uXCJ9LFxuICAgIHtxdWVyeU1ldGhvZDogXCJzdW1fb2ZfY291bnRzXCIsIHdpbmRvdzogXCJhbGx0aW1lXCIsIGZlYXR1cmVOYW1lOiBcImhpc3RvcnkuUGFnZVR5cGVfY291bnRfYWxsdGltZVwifSxcbiAgXSxcbiAgXCJjYXJ0LmNvdXBvbkFwcGxpY2FibGVcIjogW1xuICAgIHtxdWVyeU1ldGhvZDogXCJsYXN0XCIsIHdpbmRvdzogXCJzZXNzaW9uXCIsIGZlYXR1cmVOYW1lOiBcImhpc3RvcnkuY2FydF9jb3Vwb25BcHBsaWNhYmxlX2xhc3Rfc2Vzc2lvblwifSxcbiAgXSxcbiAgXCJwZHAuY2F0ZWdvcnlcIjogW1xuICAgIHtxdWVyeU1ldGhvZDogXCJtb2RlXCIsIHdpbmRvdzogXCJzZXNzaW9uXCIsIGZlYXR1cmVOYW1lOiBcImhpc3RvcnkucGRwX2NhdGVnb3J5X21vZGVfc2Vzc2lvblwifSxcbiAgICB7cXVlcnlNZXRob2Q6IFwibGFzdFwiLCB3aW5kb3c6IFwic2Vzc2lvblwiLCBmZWF0dXJlTmFtZTogXCJoaXN0b3J5LnBkcF9jYXRlZ29yeV9sYXN0X3Nlc3Npb25cIn0sXG4gIF0sXG59O1xuXG5jb25zdCB1cGRhdGVSZW1haW5pbmdIaXN0b3JpY2FsRGF0YSA9IGFzeW5jICgpID0+IHtcbiAgY29uc3QgcXVlcmllZEZlYXR1cmVOYW1lcyA9IE9iamVjdC5rZXlzKGZlYXR1cmVFbmdpbmVlcmluZ1F1ZXJpZXMpO1xuICBmb3IgKGNvbnN0IGJhc2VGZWF0dXJlTmFtZSBvZiBxdWVyaWVkRmVhdHVyZU5hbWVzKSB7XG4gICAgY29uc3QgcXVlcnlFbnRyaWVzID0gZmVhdHVyZUVuZ2luZWVyaW5nUXVlcmllc1tiYXNlRmVhdHVyZU5hbWVdO1xuXG4gICAgZm9yIChjb25zdCBxdWVyeUVudHJ5IG9mIHF1ZXJ5RW50cmllcykge1xuICAgICAgaWYgKHF1ZXJ5RW50cnkuaXNVcGRhdGVkKSBjb250aW51ZTtcblxuICAgICAgbG9nZ2VyLmxvZyhcInF1ZXJ5SW5Db2xsZWN0b3JcIiwgYmFzZUZlYXR1cmVOYW1lLCBxdWVyeUVudHJ5LnF1ZXJ5TWV0aG9kLCBxdWVyeUVudHJ5LndpbmRvdyk7XG4gICAgICBjb25zdCBxdWVyeVJlc3BvbnNlID0gYXdhaXQgcXVlcnlJbkNvbGxlY3RvcihiYXNlRmVhdHVyZU5hbWUsIHF1ZXJ5RW50cnkucXVlcnlNZXRob2QsIHF1ZXJ5RW50cnkud2luZG93KTtcbiAgICAgIGlmIChxdWVyeVJlc3BvbnNlKSB7XG4gICAgICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKHF1ZXJ5RW50cnkuZmVhdHVyZU5hbWUsIHF1ZXJ5UmVzcG9uc2UpO1xuICAgICAgICBxdWVyeUVudHJ5LmlzVXBkYXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCB1cGRhdGVIaXN0b3JpY2FsRGF0YVNjYW4gPSBhc3luYyAoYmFzZUZlYXR1cmVOYW1lLCBiYXNlRmVhdHVyZVZhbHVlKSA9PiB7XG4gIC8vIHByb2Nlc3MgZGVwZW5kZW50IGhpc3RvcmljYWwgZGF0YSBmb3Igc2Nhbi1mb3VuZCBlbGVtZW50c1xuICBjb25zdCBGRURhdGEgPSBmZWF0dXJlRW5naW5lZXJpbmdVcGRhdGVzW2Jhc2VGZWF0dXJlTmFtZV07XG4gIGlmIChGRURhdGEgJiYgQXJyYXkuaXNBcnJheShGRURhdGEpICYmIEZFRGF0YS5sZW5ndGggPiAwKSB7XG4gICAgZm9yIChjb25zdCBGRU9wIG9mIEZFRGF0YSkge1xuICAgICAgdXBkYXRlSGlzdG9yaWNhbERhdGEoYmFzZUZlYXR1cmVOYW1lLCBiYXNlRmVhdHVyZVZhbHVlLCBGRU9wKTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIFdyYXBwZXIgdG8gaGlzdG9yaWNhbCBrZWVwXG5jb25zdCB1cGRhdGVIaXN0b3JpY2FsRGF0YSA9IGFzeW5jIChiYXNlRmVhdHVyZU5hbWUsIGJhc2VGZWF0dXJlVmFsdWUsIGZlYXR1cmVFbmdpbmVlcmluZ09wKSA9PiB7XG4gIGxvZ2dlci5sb2coXCJ1cGRhdGVJbkNvbGxlY3RvclwiLCBiYXNlRmVhdHVyZU5hbWUsIGJhc2VGZWF0dXJlVmFsdWUsIGZlYXR1cmVFbmdpbmVlcmluZ09wLnVwZGF0ZU1ldGhvZCk7XG4gIGF3YWl0IHVwZGF0ZUluQ29sbGVjdG9yKGJhc2VGZWF0dXJlTmFtZSwgYmFzZUZlYXR1cmVWYWx1ZSwgZmVhdHVyZUVuZ2luZWVyaW5nT3AudXBkYXRlTWV0aG9kKTtcblxuICBjb25zdCBxdWVyeUVudHJpZXMgPSBmZWF0dXJlRW5naW5lZXJpbmdRdWVyaWVzW2Jhc2VGZWF0dXJlTmFtZV07XG5cbiAgZm9yIChjb25zdCBxdWVyeUVudHJ5IG9mIHF1ZXJ5RW50cmllcykge1xuICAgIGxvZ2dlci5sb2coXCJxdWVyeUluQ29sbGVjdG9yXCIsIGJhc2VGZWF0dXJlTmFtZSwgcXVlcnlFbnRyeS5xdWVyeU1ldGhvZCwgcXVlcnlFbnRyeS53aW5kb3cpO1xuICAgIGNvbnN0IHF1ZXJ5UmVzcG9uc2UgPSBhd2FpdCBxdWVyeUluQ29sbGVjdG9yKGJhc2VGZWF0dXJlTmFtZSwgcXVlcnlFbnRyeS5xdWVyeU1ldGhvZCwgcXVlcnlFbnRyeS53aW5kb3cpO1xuICAgIGlmIChxdWVyeVJlc3BvbnNlKSB7XG4gICAgICBhZGRUb0JlYWdsZUluZm9MYXllcihxdWVyeUVudHJ5LmZlYXR1cmVOYW1lLCBxdWVyeVJlc3BvbnNlKTtcbiAgICAgIHF1ZXJ5RW50cnkuaXNVcGRhdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIFRPRE86IGNvbnZlcnQgdG8gbmFtZSAtLT4gYXJyYXkgb2Ygc2VsZWN0b3JzXG5jb25zdCBzZWFyY2hQYXRocyA9IFtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBHQSBEYXRhIExheWVyIFF1ZXJpZXNcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIipcIiwgbWV0aG9kOiBcIkdBRGF0YUxheWVyXCIsIHNlbGVjdG9yOiBcIlBhZ2VUeXBlXCIsIG5hbWU6IFwiUGFnZVR5cGVcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCIqXCIsIG1ldGhvZDogXCJHQURhdGFMYXllclwiLCBzZWxlY3RvcjogXCJpc0FkbWluXCIsIG5hbWU6IFwidnZzSXNTaG93cm9vbVwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIipcIiwgbWV0aG9kOiBcIkdBRGF0YUxheWVyXCIsIHNlbGVjdG9yOiBcInVzZXJJZFwiLCBuYW1lOiBcInZ2c1VzZXJJZFwifSxcblxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiUHJvZHVjdHBhZ2VcIiwgbWV0aG9kOiBcIkdBRGF0YUxheWVyXCIsIHNlbGVjdG9yOiBcImNvbnRlbnRfbmFtZVwiLCBuYW1lOiBcInBkcC5uYW1lXCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiUHJvZHVjdHBhZ2VcIiwgbWV0aG9kOiBcIkdBRGF0YUxheWVyXCIsIHNlbGVjdG9yOiBcInByb2R1Y3Rncm91cFwiLCBuYW1lOiBcInBkcC5ncm91cFwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIlByb2R1Y3RwYWdlXCIsIG1ldGhvZDogXCJHQURhdGFMYXllclwiLCBzZWxlY3RvcjogXCJ2aXZlbnNlX2NhdGVnb3J5XCIsIG5hbWU6IFwicGRwLmNsYXNzXCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiUHJvZHVjdHBhZ2VcIiwgbWV0aG9kOiBcIkdBRGF0YUxheWVyXCIsIHNlbGVjdG9yOiBcImNvbnRlbnRfaWRzXCIsIG5hbWU6IFwicGRwLnNrdVwiLCBmb3JtYXR0ZXI6IFwidXBwZXJDYXNlVFJcIiwgdHJpZ2dlcjogXCJ1cGRhdGVBY3RpdmVTS1VMaXN0XCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiUHJvZHVjdHBhZ2VcIiwgbWV0aG9kOiBcIkdBRGF0YUxheWVyXCIsIHNlbGVjdG9yOiBcIlByb2R1Y3RJRFwiLCBuYW1lOiBcInBkcC5za3VcIiwgdHJpZ2dlcjogXCJ1cGRhdGVBY3RpdmVTS1VMaXN0XCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiUHJvZHVjdHBhZ2VcIiwgbWV0aG9kOiBcIkdBRGF0YUxheWVyXCIsIHNlbGVjdG9yOiBcImNvbnRlbnRfY2F0ZWdvcnlcIiwgbmFtZTogXCJwZHAuY2F0ZWdvcnlcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJQcm9kdWN0cGFnZVwiLCBtZXRob2Q6IFwiR0FEYXRhTGF5ZXJcIiwgc2VsZWN0b3I6IFwiZWNvbW1lcmNlLmRldGFpbC5hY3Rpb25GaWVsZC5saXN0XCIsIG5hbWU6IFwicGRwLmxpc3RhbGlhc1wifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIlByb2R1Y3RwYWdlXCIsIG1ldGhvZDogXCJHQURhdGFMYXllclwiLCBzZWxlY3RvcjogXCJ2aXZlbnNlUHJvZHVjdHMuKi5za3VcIiwgbmFtZTogXCJwZHAuc2t1XCIsIHRyaWdnZXI6IFwidXBkYXRlQWN0aXZlU0tVTGlzdFwiLCBmb3JtYXR0ZXI6IFwiZGVhcnJheVwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIlByb2R1Y3RwYWdlXCIsIG1ldGhvZDogXCJHQURhdGFMYXllclwiLCBzZWxlY3RvcjogXCJ2aXZlbnNlUHJvZHVjdHMuKi5jYXRlZ29yeVwiLCBuYW1lOiBcInBkcC5jYXRlZ29yeVwiLCBmb3JtYXR0ZXI6IFwiZGVhcnJheVwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIlByb2R1Y3RwYWdlXCIsIG1ldGhvZDogXCJHQURhdGFMYXllclwiLCBzZWxlY3RvcjogXCJ2aXZlbnNlUHJvZHVjdHMuKi5kaXNjb3VudFJhdGVcIiwgbmFtZTogXCJwZHAuZGlzY291bnRSYXRlXCIsIGZvcm1hdHRlcjogXCJkZWFycmF5XCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiUHJvZHVjdHBhZ2VcIiwgbWV0aG9kOiBcIkdBRGF0YUxheWVyXCIsIHNlbGVjdG9yOiBcInZpdmVuc2VQcm9kdWN0cy4qLmZhc3REZWxpdmVyeVwiLCBuYW1lOiBcInBkcC5mYXN0RGVsaXZlcnlcIiwgZm9ybWF0dGVyOiBcImRlYXJyYXlcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJQcm9kdWN0cGFnZVwiLCBtZXRob2Q6IFwiR0FEYXRhTGF5ZXJcIiwgc2VsZWN0b3I6IFwidml2ZW5zZVByb2R1Y3RzLiouaXNJblNob3dyb29tXCIsIG5hbWU6IFwicGRwLmlzSW5TaG93cm9vbVwiLCBmb3JtYXR0ZXI6IFwiZGVhcnJheVwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIlByb2R1Y3RwYWdlXCIsIG1ldGhvZDogXCJHQURhdGFMYXllclwiLCBzZWxlY3RvcjogXCJ2aXZlbnNlUHJvZHVjdHMuKi5wcmljZVwiLCBuYW1lOiBcInBkcC5wcmljZVwiLCBmb3JtYXR0ZXI6IFwiZGVhcnJheVwifSxcblxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiTGlzdGluZ3BhZ2VcIiwgbWV0aG9kOiBcIkdBRGF0YUxheWVyXCIsIHNlbGVjdG9yOiBcImNvbnRlbnRfaWRzXCIsIG5hbWU6IFwicGxwLmlkXCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiTGlzdGluZ3BhZ2VcIiwgbWV0aG9kOiBcIkdBRGF0YUxheWVyXCIsIHNlbGVjdG9yOiBcImNhdGVnb3J5X3Byb2R1Y3RfY291bnRcIiwgbmFtZTogXCJwbHAuYXBwcm94aW1hdGVDb3VudFwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIkxpc3RpbmdwYWdlXCIsIG1ldGhvZDogXCJHQURhdGFMYXllclwiLCBzZWxlY3RvcjogXCJjb250ZW50X25hbWVcIiwgbmFtZTogXCJwbHAubmFtZVwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIkxpc3RpbmdwYWdlXCIsIG1ldGhvZDogXCJHQURhdGFMYXllclwiLCBzZWxlY3RvcjogXCJwcm9kdWN0Z3JvdXBcIiwgbmFtZTogXCJwbHAuZ3JvdXBcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJMaXN0aW5ncGFnZVwiLCBtZXRob2Q6IFwiR0FEYXRhTGF5ZXJcIiwgc2VsZWN0b3I6IFwidml2ZW5zZV9jYXRlZ29yeVwiLCBuYW1lOiBcInBscC5jbGFzc1wifSxcblxuICB7UGFnZVR5cGVEZXBlbmQ6IFwicHVyY2hhc2VcIiwgbWV0aG9kOiBcIkdBRGF0YUxheWVyXCIsIHNlbGVjdG9yOiBcImVjb21tZXJjZS5wdXJjaGFzZS5wcm9kdWN0cy4qLmlkXCIsIG5hbWU6IFwicHVyY2hhc2Uuc2t1c1wifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcInB1cmNoYXNlXCIsIG1ldGhvZDogXCJHQURhdGFMYXllclwiLCBzZWxlY3RvcjogXCJlY29tbWVyY2UucHVyY2hhc2UucHJvZHVjdHMuKi5wcmljZVwiLCBuYW1lOiBcInB1cmNoYXNlLnByaWNlc1wifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcInB1cmNoYXNlXCIsIG1ldGhvZDogXCJHQURhdGFMYXllclwiLCBzZWxlY3RvcjogXCJlY29tbWVyY2UucHVyY2hhc2UucHJvZHVjdHMuKi5xdWFudGl0eVwiLCBuYW1lOiBcInB1cmNoYXNlLnF1YW50aXRpZXNcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJwdXJjaGFzZVwiLCBtZXRob2Q6IFwiR0FEYXRhTGF5ZXJcIiwgc2VsZWN0b3I6IFwiZWNvbW1lcmNlLnB1cmNoYXNlLnByb2R1Y3RzLiouY2F0ZWdvcnlcIiwgbmFtZTogXCJwdXJjaGFzZS5jYXRlZ29yaWVzXCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwicHVyY2hhc2VcIiwgbWV0aG9kOiBcIkdBRGF0YUxheWVyXCIsIHNlbGVjdG9yOiBcImVjb21tZXJjZS5wdXJjaGFzZS5hY3Rpb25GaWVsZC5pZFwiLCBuYW1lOiBcInB1cmNoYXNlLm9yZGVySWRcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJwdXJjaGFzZVwiLCBtZXRob2Q6IFwiR0FEYXRhTGF5ZXJcIiwgc2VsZWN0b3I6IFwiZWNvbW1lcmNlLnB1cmNoYXNlLmFjdGlvbkZpZWxkLnJldmVudWVcIiwgbmFtZTogXCJwdXJjaGFzZS5yZXZlbnVlXCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwicHVyY2hhc2VcIiwgbWV0aG9kOiBcIkdBRGF0YUxheWVyXCIsIHNlbGVjdG9yOiBcImVjb21tZXJjZS5wdXJjaGFzZS5hY3Rpb25GaWVsZC5kaW1lbnNpb24xNVwiLCBuYW1lOiBcInB1cmNoYXNlLnBheW1lbnRUeXBlXCJ9LFxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gRG9jdW1lbnQgUXVlcmllc1xuICB7UGFnZVR5cGVEZXBlbmQ6IFwiKlwiLCBtZXRob2Q6IFwiRG9jUXVlcnlcIiwgc2VsZWN0b3I6IFwiW2NsYXNzKj1cXFwicGFnZV9wcmV2aWV3X3dyYXBwZXJfcHJvZHVjdGlvblxcXCJdXCIsIG5hbWU6IFwiUGFnZVR5cGVcIiwgb3BlcmFuZDogXCJkb2NRdWVyeVZhbHVlSWZIYXNJbm5lclRleHRcIiwgdmFsdWU6IFwiSG9tZXBhZ2VcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCIqXCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCJbY2xhc3MqPVxcXCJjYXRlZ29yeV9wYWdlX3dyYXBwZXJcXFwiXVwiLCBuYW1lOiBcIlBhZ2VUeXBlXCIsIG9wZXJhbmQ6IFwiZG9jUXVlcnlWYWx1ZUlmSGFzSW5uZXJUZXh0XCIsIHZhbHVlOiBcIkxpc3RpbmdwYWdlXCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiKlwiLCBtZXRob2Q6IFwiRG9jUXVlcnlcIiwgc2VsZWN0b3I6IFwiW2NsYXNzKj1cXFwicHJvZHVjdC1tYWluLWRldGFpbHNcXFwiXVwiLCBuYW1lOiBcIlBhZ2VUeXBlXCIsIG9wZXJhbmQ6IFwiZG9jUXVlcnlWYWx1ZUlmSGFzSW5uZXJUZXh0XCIsIHZhbHVlOiBcIlByb2R1Y3RwYWdlXCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiKlwiLCBtZXRob2Q6IFwiRG9jUXVlcnlcIiwgc2VsZWN0b3I6IFwiW2NsYXNzKj1cXFwicHJvZHVjdFxcXCJdXCIsIG5hbWU6IFwiUGFnZVR5cGVcIiwgb3BlcmFuZDogXCJkb2NRdWVyeVZhbHVlSWZIYXNJbm5lclRleHRcIiwgdmFsdWU6IFwiUHJvZHVjdHBhZ2VcIn0sXG5cbiAge1BhZ2VUeXBlRGVwZW5kOiBcIkhvbWVwYWdlfFByb2R1Y3RwYWdlfExpc3RpbmdwYWdlXCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCJbY2xhc3MqPVxcXCJ3ZWxjb21lX3VzZXJuYW1lXFxcIl1cIiwgbmFtZTogXCJ2aWV3LmlzTG9nZ2VkSW5cIiwgb3BlcmFuZDogXCJkb2NRdWVyeUhhc0lubmVyVGV4dFwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIkhvbWVwYWdlfFByb2R1Y3RwYWdlfExpc3RpbmdwYWdlXCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCJbY2xhc3MqPVxcXCJlbXB0eV9iYXNrZXRfdGV4dFxcXCJdXCIsIG5hbWU6IFwidmlldy5pc0VtcHR5QmFza2V0XCIsIG9wZXJhbmQ6IFwiZG9jUXVlcnlIYXNJbm5lclRleHRcIiwgZXhjbHVzaXZlOiBbXCJ2aWV3LmJhc2tldFRvdGFsXCIsIFwidmlldy5iYXNrZXRDb3VudFwiXX0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJIb21lcGFnZXxQcm9kdWN0cGFnZXxMaXN0aW5ncGFnZVwiLCBtZXRob2Q6IFwiRG9jUXVlcnlcIiwgc2VsZWN0b3I6IFwiW2NsYXNzKj1cXFwiYmFza2V0X3RvdGFsX3ByaWNlXFxcIl1cIiwgbmFtZTogXCJ2aWV3LmJhc2tldFRvdGFsXCIsIG9wZXJhbmQ6IFwiZG9jUXVlcnlJbm5lclRleHRcIiwgZXhjbHVzaXZlOiBbXCJ2aWV3LmlzRW1wdHlCYXNrZXRcIl0sIGZvcm1hdHRlcjogXCJudW1lcmljT25seVwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIkhvbWVwYWdlfFByb2R1Y3RwYWdlfExpc3RpbmdwYWdlXCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCJbaWQqPVxcXCJjYXJ0X3F1YW50aXR5XFxcIl0sIFtjbGFzcyo9XFxcImJhc2tldF9sZW5ndGhcXFwiXVwiLCBuYW1lOiBcInZpZXcuYmFza2V0Q291bnRcIiwgb3BlcmFuZDogXCJkb2NRdWVyeUlubmVyVGV4dFwiLCBleGNsdXNpdmU6IFtcInZpZXcuaXNFbXB0eUJhc2tldFwiXX0sXG5cbiAge1BhZ2VUeXBlRGVwZW5kOiBcIlByb2R1Y3RwYWdlXCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCJbY2xhc3MqPVxcXCJkZWxpdmVyeS1kYXRlXFxcIl1cIiwgbmFtZTogXCJwZHAuZGVsaXZlcnlEYXRlXCIsIG9wZXJhbmQ6IFwiZG9jUXVlcnlJbm5lclRleHRcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJQcm9kdWN0cGFnZVwiLCBtZXRob2Q6IFwiRG9jUXVlcnlcIiwgc2VsZWN0b3I6IFwiW2NsYXNzKj1cXFwiZGVsaXZlcnktZGF0ZVxcXCJdXCIsIG5hbWU6IFwicGRwLmRlbGl2ZXJ5RGF0ZUZvcm1hdHRlZFwiLCBvcGVyYW5kOiBcImRvY1F1ZXJ5SW5uZXJUZXh0XCIsIGZvcm1hdHRlcjogXCJmb3JtYXREZWxpdmVyeURhdGVcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJQcm9kdWN0cGFnZVwiLCBtZXRob2Q6IFwiRG9jUXVlcnlcIiwgc2VsZWN0b3I6IFwiW2NsYXNzKj1cXFwicHJvZHVjdC10aXRsZVxcXCJdLCBbY2xhc3MqPVxcXCJoZWFkZXItYm90dG9tXFxcIl1cIiwgbmFtZTogXCJwZHAubmFtZVwiLCBvcGVyYW5kOiBcImRvY1F1ZXJ5SW5uZXJUZXh0XCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiUHJvZHVjdHBhZ2VcIiwgbWV0aG9kOiBcIkRvY1F1ZXJ5XCIsIHNlbGVjdG9yOiBcIltjbGFzcyo9XFxcInZpdmVuc2Utc2hvd3Jvb21zXFxcIl0gPiAqXCIsIG5hbWU6IFwicGRwLnNob3dyb29tY291bnRcIiwgb3BlcmFuZDogXCJkb2NRdWVyeUNvdW50RWx0c1wiLCBleGNsdXNpdmU6IFtcInBkcC5oYXNOb1Nob3dyb29tc1wiXX0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJQcm9kdWN0cGFnZVwiLCBtZXRob2Q6IFwiRG9jUXVlcnlcIiwgc2VsZWN0b3I6IFwiI3ZpdmVuc2Utc2hvd3Jvb20tdGFiIHA6bm90KC52aXZlbnNlLXNob3dyb29tcylcIiwgbmFtZTogXCJwZHAuaGFzTm9TaG93cm9vbXNcIiwgb3BlcmFuZDogXCJkb2NRdWVyeUhhc0lubmVyVGV4dFwiLCBleGNsdXNpdmU6IFtcInBkcC5zaG93cm9vbWNvdW50XCJdfSxcblxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiTGlzdGluZ3BhZ2VcIiwgbWV0aG9kOiBcIkRvY1F1ZXJ5XCIsIHNlbGVjdG9yOiBcIltjbGFzcyo9XFxcImNvdW50LW9mLXByb2R1Y3RcXFwiXVwiLCBuYW1lOiBcInBscC5pdGVtQ291bnRcIiwgb3BlcmFuZDogXCJkb2NRdWVyeUlubmVyVGV4dFwiLCBmb3JtYXR0ZXI6IFwibnVtZXJpY09ubHlcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJMaXN0aW5ncGFnZVwiLCBtZXRob2Q6IFwiRG9jUXVlcnlcIiwgc2VsZWN0b3I6IFwiW2NsYXNzKj1cXFwic3ViY2F0ZWdvcmllcy10aXRsZVxcXCJdXCIsIG5hbWU6IFwicGxwLm5hbWVcIiwgb3BlcmFuZDogXCJkb2NRdWVyeUlubmVyVGV4dFwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIkxpc3RpbmdwYWdlXCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCIucHJvZHVjdC1jYXJkW2RhdGEtcHJvZHVjdC1za3VdXCIsIG5hbWU6IFwicGxwLnNrdXNcIiwgb3BlcmFuZDogXCJkb2NRdWVyeUF0dHJpYlZhbHVlTGlzdFwiLCB2YWx1ZTogXCJkYXRhLXByb2R1Y3Qtc2t1XCIsIHRyaWdnZXI6IFwidXBkYXRlQWN0aXZlU0tVTGlzdFwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIkxpc3RpbmdwYWdlXCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCIucHJvZHVjdC1saXN0XCIsIG9ic2VydmVyOiBcImxpc3RpbmdJdGVtQmxvY2tcIiwgbmFtZTogXCJfX2xpc3RpbmdJdGVtQmxvY2tPYnNlcnZlclwiLCBjaGlsZHJlbjogW1wicGxwLnNrdXNcIl0sIG9wZXJhbmQ6IFwiZG9jUXVlcnlPYnNlcnZlXCJ9LFxuXG4gIHtQYWdlVHlwZURlcGVuZDogXCJiYXNrZXRcIiwgbWV0aG9kOiBcIkRvY1F1ZXJ5XCIsIHNlbGVjdG9yOiBcIltjbGFzcyo9XFxcImVtcHR5LWNhcnQtY29udGFpbmVyXFxcIl1cIiwgbmFtZTogXCJjYXJ0LmlzZW1wdHlcIiwgb3BlcmFuZDogXCJkb2NRdWVyeUhhc0lubmVyVGV4dFwiLCB0cmlnZ2VyOiBcInVwZGF0ZUFjdGl2ZVNLVUxpc3RcIiwgZXhjbHVzaXZlOiBbXCJjYXJ0LnRvdGFsUHJpY2VcIiwgXCJjYXJ0LmNvdXBvbkFwcGxpY2FibGVcIiwgXCJjYXJ0LnNrdXNcIiwgXCJjYXJ0LnByaWNlc1wiLCBcImNhcnQucXVhbnRpdGllc1wiLCBcImNhcnQuY2F0ZWdvcmllc1wiLCBcIl9fY2hlY2tvdXRGb3JtT2JzZXJ2ZXJcIl19LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiYmFza2V0XCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCIuY2FydEl0ZW1RdWFudGl0eVwiLCBuYW1lOiBcImNhcnQucXVhbnRpdGllc1wiLCBvcGVyYW5kOiBcImRvY1F1ZXJ5QXR0cmliVmFsdWVMaXN0XCIsIHZhbHVlOiBcImRhdGEtcHJldmlvdXNcIiwgdHJpZ2dlcjogXCJ1cGRhdGVBY3RpdmVTS1VMaXN0XCIsIGV4Y2x1c2l2ZTogW1wiY2FydC5pc2VtcHR5XCJdfSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcImJhc2tldFwiLCBtZXRob2Q6IFwiRG9jUXVlcnlcIiwgc2VsZWN0b3I6IFwiW2NsYXNzKj1cXFwib3JkZXItZmluYWwtbnVtYmVyXFxcIl1cIiwgbmFtZTogXCJjYXJ0LnRvdGFsUHJpY2VcIiwgb3BlcmFuZDogXCJkb2NRdWVyeUlubmVyVGV4dFwiLCBleGNsdXNpdmU6IFtcImNhcnQuaXNlbXB0eVwiXSwgZm9ybWF0dGVyOiBcIm51bWVyaWNPbmx5XCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiYmFza2V0XCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCJbY2xhc3MqPVxcXCJjYXJ0LXByaWNlXFxcIl0gPiBzcGFuLnByaWNlLCBzcGFuLnN1cGVyLCBzcGFuLm5ldy1wcmljZSwgc3Bhbi5zcGFuLXByaWNlXCIsIG5hbWU6IFwiY2FydC5jb3Vwb25BcHBsaWNhYmxlXCIsIG9wZXJhbmQ6IFwiZG9jUXVlcnlTdW1OdW1Jbm5lclRleHRcIiwgdHJpZ2dlcjogXCJ1cGRhdGVDb3Vwb25BcHBsaWNhYmxlQW1vdW50XCIsIGV4Y2x1c2l2ZTogW1wiY2FydC5pc2VtcHR5XCJdfSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcImJhc2tldFwiLCBtZXRob2Q6IFwiRG9jUXVlcnlcIiwgc2VsZWN0b3I6IFwiLmNhcnQtaW5zaWRlXCIsIG5hbWU6IFwiY2FydC5za3VzXCIsIG9wZXJhbmQ6IFwiZG9jUXVlcnlBdHRyaWJWYWx1ZUxpc3RcIiwgdmFsdWU6IFwiZGF0YS1za3VcIiwgdHJpZ2dlcjogXCJ1cGRhdGVBY3RpdmVTS1VMaXN0XCIsIGV4Y2x1c2l2ZTogW1wiY2FydC5pc2VtcHR5XCIsIFwiY2FydC5jb3Vwb25BcHBsaWNhYmxlXCJdfSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcImJhc2tldFwiLCBtZXRob2Q6IFwiRG9jUXVlcnlcIiwgc2VsZWN0b3I6IFwiLmNhcnQtaW5zaWRlXCIsIG5hbWU6IFwiY2FydC5jYXRlZ29yaWVzXCIsIG9wZXJhbmQ6IFwiZG9jUXVlcnlBdHRyaWJWYWx1ZUxpc3RcIiwgdmFsdWU6IFwiZGF0YS1sYXN0LWJyZWFkY3J1bWJcIiwgdHJpZ2dlcjogXCJ1cGRhdGVBY3RpdmVTS1VMaXN0XCIsIGV4Y2x1c2l2ZTogW1wiY2FydC5pc2VtcHR5XCIsIFwiY2FydC5jb3Vwb25BcHBsaWNhYmxlXCJdfSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcImJhc2tldFwiLCBtZXRob2Q6IFwiRG9jUXVlcnlcIiwgc2VsZWN0b3I6IFwiLmNhcnQtaW5zaWRlXCIsIG5hbWU6IFwiY2FydC5wcmljZXNcIiwgb3BlcmFuZDogXCJkb2NRdWVyeUF0dHJpYlZhbHVlTGlzdFwiLCB2YWx1ZTogXCJkYXRhLXByaWNlXCIsIHRyaWdnZXI6IFwidXBkYXRlQWN0aXZlU0tVTGlzdFwiLCBleGNsdXNpdmU6IFtcImNhcnQuaXNlbXB0eVwiLCBcImNhcnQuY291cG9uQXBwbGljYWJsZVwiXX0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJiYXNrZXRcIiwgbWV0aG9kOiBcIkRvY1F1ZXJ5XCIsIHNlbGVjdG9yOiBcIiNjaGVja291dEZvcm1cIiwgb2JzZXJ2ZXI6IFwiY2hlY2tvdXRGb3JtXCIsIG5hbWU6IFwiX19jaGVja291dEZvcm1PYnNlcnZlclwiLCBjaGlsZHJlbjogW1wiY2FydC50b3RhbFByaWNlXCIsIFwiY2FydC5jb3Vwb25BcHBsaWNhYmxlXCIsIFwiY2FydC5za3VzXCIsIFwiY2FydC5wcmljZXNcIiwgXCJjYXJ0LnF1YW50aXRpZXNcIiwgXCJjYXJ0LmNhdGVnb3JpZXNcIiwgXCJjYXJ0LmlzZW1wdHlcIl0sIG9wZXJhbmQ6IFwiZG9jUXVlcnlPYnNlcnZlXCJ9LFxuXG4gIHtQYWdlVHlwZURlcGVuZDogXCJwdXJjaGFzZVwiLCBtZXRob2Q6IFwiRG9jUXVlcnlcIiwgc2VsZWN0b3I6IFwiW2NsYXNzKj1cXFwiYmFza2V0X3N1bW1hcnlfdG90YWxcXFwiXSwgW2NsYXNzKj1cXFwidG90YWxfcm93XFxcIl1cIiwgbmFtZTogXCJwdXJjaGFzZS5yZXZlbnVlXCIsIG9wZXJhbmQ6IFwiZG9jUXVlcnlJbm5lclRleHRcIiwgZm9ybWF0dGVyOiBcIm51bWVyaWNPbmx5XCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwicHVyY2hhc2VcIiwgbWV0aG9kOiBcIkRvY1F1ZXJ5XCIsIHNlbGVjdG9yOiBcIltjbGFzcyo9XFxcIm9yZGVyX2ZvbGxvd19udW1iXFxcIl0sIFtjbGFzcyo9XFxcImNhcnQtdGl0bGUtYm90dG9tXFxcIl1cIiwgbmFtZTogXCJwdXJjaGFzZS52dnNUeG5JZFwiLCBvcGVyYW5kOiBcImRvY1F1ZXJ5SW5uZXJUZXh0XCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwicHVyY2hhc2VcIiwgbWV0aG9kOiBcIkRvY1F1ZXJ5XCIsIHNlbGVjdG9yOiBcIi5wYXltZW50X3R5cGVfdGl0bGUsIC5jYXJ0LXRpdGxlLWluZm9cIiwgbmFtZTogXCJwdXJjaGFzZS5wYXltZW50VHlwZVwiLCBvcGVyYW5kOiBcImRvY1F1ZXJ5SW5uZXJUZXh0XCIsIGZvcm1hdHRlcjogXCJsb3dlckNhc2VUUkZpcnN0V29yZFwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcInB1cmNoYXNlXCIsIG1ldGhvZDogXCJEb2NRdWVyeVwiLCBzZWxlY3RvcjogXCJbY2xhc3MqPVxcXCJwcm9kdWN0X3NrdV9jb2RlXFxcIl1cIiwgbmFtZTogXCJwdXJjaGFzZS5za3VzXCIsIG9wZXJhbmQ6IFwiZG9jUXVlcnlBcnJheUlubmVyVGV4dFwifSxcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFNPUkcgRWxlbWVudHNcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIlByb2R1Y3RwYWdlXCIsIG1ldGhvZDogXCJEb2NTb3JnXCIsIHNlbGVjdG9yOiBcInNrdVwiLCBuYW1lOiBcInBkcC5za3VcIiwgdHJpZ2dlcjogXCJ1cGRhdGVBY3RpdmVTS1VMaXN0XCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiUHJvZHVjdHBhZ2VcIiwgbWV0aG9kOiBcIkRvY1NvcmdcIiwgc2VsZWN0b3I6IFwibXBuXCIsIG5hbWU6IFwicGRwLm1wblwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIlByb2R1Y3RwYWdlXCIsIG1ldGhvZDogXCJEb2NTb3JnXCIsIHNlbGVjdG9yOiBcIm5hbWVcIiwgbmFtZTogXCJwZHAubmFtZVwiLCBvcGVyYW5kOiBcIkpTT05GaWx0ZXJPdGhlclwiLCB2YWx1ZTogXCJAdHlwZT1Qcm9kdWN0XCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiUHJvZHVjdHBhZ2VcIiwgbWV0aG9kOiBcIkRvY1NvcmdcIiwgc2VsZWN0b3I6IFwib2ZmZXJzLnByaWNlXCIsIG5hbWU6IFwicGRwLnByaWNlXCJ9LFxuICB7UGFnZVR5cGVEZXBlbmQ6IFwiUHJvZHVjdHBhZ2VcIiwgbWV0aG9kOiBcIkRvY1NvcmdcIiwgc2VsZWN0b3I6IFwib2ZmZXJzLnByaWNlVmFsaWRVbnRpbFwiLCBuYW1lOiBcInBkcC5wcmljZVZhbGlkVW50aWxcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJQcm9kdWN0cGFnZVwiLCBtZXRob2Q6IFwiRG9jU29yZ1wiLCBzZWxlY3RvcjogXCJpdGVtTGlzdEVsZW1lbnQuKi5uYW1lXCIsIG5hbWU6IFwidmlldy5icmVhZGNydW1iXCJ9LFxuXG4gIHtQYWdlVHlwZURlcGVuZDogXCJMaXN0aW5ncGFnZVwiLCBtZXRob2Q6IFwiRG9jU29yZ1wiLCBzZWxlY3RvcjogXCJtYWluRW50aXR5Lm5hbWVcIiwgbmFtZTogXCJwbHAubmFtZVwifSxcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIkxpc3RpbmdwYWdlXCIsIG1ldGhvZDogXCJEb2NTb3JnXCIsIHNlbGVjdG9yOiBcIm1haW5FbnRpdHkubnVtYmVyT2ZJdGVtc1wiLCBuYW1lOiBcInBscC5pdGVtQ291bnRcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCJMaXN0aW5ncGFnZVwiLCBtZXRob2Q6IFwiRG9jU29yZ1wiLCBzZWxlY3RvcjogXCJicmVhZGNydW1iLml0ZW1MaXN0RWxlbWVudC4qLml0ZW0ubmFtZVwiLCBuYW1lOiBcInZpZXcuYnJlYWRjcnVtYlwifSxcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFdpbmRvdyBjdXN0b20gZWxlbWVudHNcbiAge1BhZ2VUeXBlRGVwZW5kOiBcIipcIiwgbWV0aG9kOiBcIlNpbmdsZVdUXCIsIHNlbGVjdG9yOiBcImZhdm9yaXRlUHJvZHVjdHNcIiwgbmFtZTogXCJ2aWV3LmZhdm9yaXRlZE1QTnNcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCIqXCIsIG1ldGhvZDogXCJTaW5nbGVXVFwiLCBzZWxlY3RvcjogXCJpc0FkbWluXCIsIG5hbWU6IFwidnZzSXNTaG93cm9vbVwiLCBmb3JtYXR0ZXI6IFwidG9TdHJpbmdcIn0sXG4gIHtQYWdlVHlwZURlcGVuZDogXCIqXCIsIG1ldGhvZDogXCJTaW5nbGVXVFwiLCBzZWxlY3RvcjogXCJ1c2VySWRcIiwgbmFtZTogXCJ2dnNVc2VySWRcIn0sXG5dO1xuXG5jb25zdCBwcm9jZXNzRm9ybWF0dGVyID0gKHZhbHVlLCBmb3JtYXR0ZXIpID0+IHtcbiAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgIWZvcm1hdHRlcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHN3aXRjaCAoZm9ybWF0dGVyKSB7XG4gICAgY2FzZSBcInVwcGVyQ2FzZVRSXCI6XG4gICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKS50b1VwcGVyQ2FzZShcInRyLVRSXCIpO1xuICAgIGNhc2UgXCJmb3JtYXREZWxpdmVyeURhdGVcIjpcbiAgICAgIHJldHVybiBmb3JtYXREZWxpdmVyeURhdGUodmFsdWUpO1xuICAgIGNhc2UgXCJudW1lcmljT25seVwiOlxuICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1xcRC9nLCBcIlwiKTtcbiAgICBjYXNlIFwibG93ZXJDYXNlVFJGaXJzdFdvcmRcIjpcbiAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKFwidHItVFJcIikuc3BsaXQoXCIgXCIpWzBdO1xuICAgIGNhc2UgXCJkZWFycmF5XCI6XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gdmFsdWVbMF07XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgY2FzZSBcInRvU3RyaW5nXCI6XG4gICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKS50cmltKCk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufTtcblxuY29uc3Qgc2VhcmNoT2JqID0gKG9iaiwgc2VhcmNoRWxlbWVudCkgPT4ge1xuICBsZXQgdmFsdWU7XG4gIGxldCBsYXllclZhbHVlO1xuXG4gIHRyeSB7XG4gICAgc3dpdGNoIChzZWFyY2hFbGVtZW50Lm9wZXJhbmQpIHtcbiAgICAgIGNhc2UgXCJKU09ORmlsdGVyT3RoZXJcIjpcbiAgICAgICAge1xuICAgICAgICAgIHZhbHVlID0ganNvbkdldChvYmosIHNlYXJjaEVsZW1lbnQuc2VsZWN0b3IpO1xuXG4gICAgICAgICAgY29uc3QgZmlsdGVyUGFyYW1zID0gc2VhcmNoRWxlbWVudC52YWx1ZS5zcGxpdChcIj1cIik7XG4gICAgICAgICAgaWYgKGZpbHRlclBhcmFtcy5sZW5ndGggIT09IDIpIGJyZWFrO1xuICAgICAgICAgIGNvbnN0IGZpbHRlck5hbWUgPSBmaWx0ZXJQYXJhbXNbMF07XG4gICAgICAgICAgY29uc3QgZmlsdGVyVmFsdWUgPSBmaWx0ZXJQYXJhbXNbMV07XG4gICAgICAgICAgaWYgKCFmaWx0ZXJOYW1lIHx8ICFmaWx0ZXJWYWx1ZSkgYnJlYWs7XG5cbiAgICAgICAgICBjb25zdCBmaWx0ZXJNYXRjaCA9IGpzb25HZXQob2JqLCBmaWx0ZXJOYW1lKTtcblxuICAgICAgICAgIGlmICghZmlsdGVyTWF0Y2ggfHwgZmlsdGVyTWF0Y2ggIT09IGZpbHRlclZhbHVlKSBicmVhaztcblxuICAgICAgICAgIGlmICh2YWx1ZSAmJiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5sZW5ndGggPiAwIDogdmFsdWUudG9TdHJpbmcoKS50cmltKCkubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgICAgIGxheWVyVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZG9jUXVlcnlPYnNlcnZlXCI6XG4gICAgICAgIHZhbHVlID0gb2JqLnF1ZXJ5U2VsZWN0b3Ioc2VhcmNoRWxlbWVudC5zZWxlY3Rvcik7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHNlYXJjaEVsZW1lbnQuaXNGb3VuZCA9IHRydWU7XG4gICAgICAgICAgLy8gdXBkYXRlIGZvdW5kIHN0YXR1cyBvZiB0aGUgZWxlbWVudHMgaW4gdGhlIGNoaWxkcmVuIGxpc3RcbiAgICAgICAgICBjb25zdCB0b0JlVXBkYXRlZCA9IFtdO1xuICAgICAgICAgIHNlYXJjaEVsZW1lbnQuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkRWxlbWVudHMgPSBzZWFyY2hQYXRocy5maWx0ZXIoKGVsZW1lbnQpID0+IGVsZW1lbnQubmFtZSA9PT0gY2hpbGQpO1xuICAgICAgICAgICAgLy8gYWRkIGNoaWxkRWxlbWVudHMgaW50byB0b0JlVXBkYXRlZFxuICAgICAgICAgICAgdG9CZVVwZGF0ZWQucHVzaCguLi5jaGlsZEVsZW1lbnRzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBydW4gb25seSBpZiB0aGUgZWxlbWVudCBoYXMgYWRkZWQgb3IgcmVtb3ZlZCBjaGlsZHJlblxuICAgICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyB1cGRhdGUgZm91bmQgc3RhdHVzIG9mIHRoZSBlbGVtZW50cyBpbiB0aGUgY2hpbGRyZW4gbGlzdFxuICAgICAgICAgICAgdG9CZVVwZGF0ZWQuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICBlbGVtZW50LmlzRm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgdHJpZ2dlclJlc3RhcnQgPSBwYXJzZVNlYXJjaFBhdGhzUmV0cnkgPj0gUEFSU0VTRUFSQ0hNQVhSRVRSWTtcbiAgICAgICAgICAgIHBhcnNlU2VhcmNoUGF0aHNEZWxheSA9IFBBUlNFU0VBUkNIU1RBUlRERUxBWTtcbiAgICAgICAgICAgIHBhcnNlU2VhcmNoUGF0aHNSZXRyeSA9IDA7XG4gICAgICAgICAgICBpZiAodHJpZ2dlclJlc3RhcnQpIHtcbiAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhcInNlYXJjaE9iajogdHJpZ2dlcmVkIGEgcmVzdGFydCBvZiBzZWFyY2hwYXRocyBkdWU6IFwiK3NlYXJjaEVsZW1lbnQubmFtZSk7XG4gICAgICAgICAgICAgIHBhcnNlckNhbGxlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUodmFsdWUsIHtzdWJ0cmVlOiB0cnVlLCBjaGlsZExpc3Q6IHRydWV9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJkb2NRdWVyeUlubmVyVGV4dFwiOlxuICAgICAgICB2YWx1ZSA9IG9iai5xdWVyeVNlbGVjdG9yKHNlYXJjaEVsZW1lbnQuc2VsZWN0b3IpO1xuICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUuaW5uZXJUZXh0ICYmIHZhbHVlLmlubmVyVGV4dC50cmltKCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGxheWVyVmFsdWUgPSB2YWx1ZS5pbm5lclRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZG9jUXVlcnlBdHRyaWJWYWx1ZUxpc3RcIjpcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IGF0dHJpYlZhbHVlTGlzdCA9IFtdO1xuICAgICAgICAgIHZhbHVlID0gb2JqLnF1ZXJ5U2VsZWN0b3JBbGwoc2VhcmNoRWxlbWVudC5zZWxlY3Rvcik7XG4gICAgICAgICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPT09IDApIGJyZWFrO1xuICAgICAgICAgIGZvciAoY29uc3QgdmFsdWVjaGlsZCBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgYXR0cmliVmFsdWUgPSB2YWx1ZWNoaWxkLmdldEF0dHJpYnV0ZShzZWFyY2hFbGVtZW50LnZhbHVlKTtcbiAgICAgICAgICAgIGlmIChhdHRyaWJWYWx1ZSkge1xuICAgICAgICAgICAgICBhdHRyaWJWYWx1ZUxpc3QucHVzaChhdHRyaWJWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGF0dHJpYlZhbHVlTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsYXllclZhbHVlID0gYXR0cmliVmFsdWVMaXN0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJkb2NRdWVyeUhhc0lubmVyVGV4dFwiOlxuICAgICAgICB2YWx1ZSA9IG9iai5xdWVyeVNlbGVjdG9yKHNlYXJjaEVsZW1lbnQuc2VsZWN0b3IpO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICBjb25zdCBzZXRWYWx1ZSA9IHZhbHVlLmlubmVyVGV4dC50cmltKCkubGVuZ3RoID4gMDtcbiAgICAgICAgICBsYXllclZhbHVlID0gc2V0VmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJkb2NRdWVyeUNvdW50RWx0c1wiOlxuICAgICAgICB2YWx1ZSA9IG9iai5xdWVyeVNlbGVjdG9yQWxsKHNlYXJjaEVsZW1lbnQuc2VsZWN0b3IpO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICBsYXllclZhbHVlID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImRvY1F1ZXJ5VmFsdWVJZkhhc0lubmVyVGV4dFwiOlxuICAgICAgICB2YWx1ZSA9IG9iai5xdWVyeVNlbGVjdG9yKHNlYXJjaEVsZW1lbnQuc2VsZWN0b3IpO1xuICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUuaW5uZXJUZXh0ICYmIHZhbHVlLmlubmVyVGV4dC50cmltKCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGxheWVyVmFsdWUgPSBzZWFyY2hFbGVtZW50LnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImRvY1F1ZXJ5U3VtTnVtSW5uZXJUZXh0XCI6XG4gICAgICAgIHtcbiAgICAgICAgICB2YWx1ZSA9IG9iai5xdWVyeVNlbGVjdG9yQWxsKHNlYXJjaEVsZW1lbnQuc2VsZWN0b3IpO1xuICAgICAgICAgIGlmICghdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09PSAwKSBicmVhaztcbiAgICAgICAgICBsZXQgc3VtUHJpY2UgPSAwO1xuICAgICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkVGV4dCA9IGNoaWxkLmlubmVyVGV4dC50cmltKCkucmVwbGFjZSgvXFxEL2csIFwiXCIpO1xuICAgICAgICAgICAgaWYgKGNoaWxkVGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHN1bVByaWNlKz1wYXJzZUludChjaGlsZFRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3VtUHJpY2UgPiAwKSB7XG4gICAgICAgICAgICBsYXllclZhbHVlID0gc3VtUHJpY2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImRvY1F1ZXJ5QXJyYXlJbm5lclRleHRcIjpcbiAgICAgICAge1xuICAgICAgICAgIHZhbHVlID0gb2JqLnF1ZXJ5U2VsZWN0b3JBbGwoc2VhcmNoRWxlbWVudC5zZWxlY3Rvcik7XG4gICAgICAgICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPT09IDApIGJyZWFrO1xuICAgICAgICAgIGNvbnN0IGFycmF5SW5uZXJUZXh0ID0gW107XG4gICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRUZXh0ID0gY2hpbGQuaW5uZXJUZXh0LnRyaW0oKTtcbiAgICAgICAgICAgIGlmIChjaGlsZFRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBhcnJheUlubmVyVGV4dC5wdXNoKGNoaWxkVGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhcnJheUlubmVyVGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsYXllclZhbHVlID0gYXJyYXlJbm5lclRleHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFsdWUgPSBqc29uR2V0KG9iaiwgc2VhcmNoRWxlbWVudC5zZWxlY3Rvcik7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmxlbmd0aCA+IDAgOiB2YWx1ZS50b1N0cmluZygpLnRyaW0oKS5sZW5ndGggPiAwKSkge1xuICAgICAgICAgIGxheWVyVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9IC8vIHN3aXRjaFxuXG4gICAgaWYgKGxheWVyVmFsdWUpIHtcbiAgICAgIGlmIChzZWFyY2hFbGVtZW50LmZvcm1hdHRlcikge1xuICAgICAgICBsYXllclZhbHVlID0gcHJvY2Vzc0Zvcm1hdHRlcihsYXllclZhbHVlLCBzZWFyY2hFbGVtZW50LmZvcm1hdHRlcik7XG4gICAgICB9XG4gICAgICBhZGRUb0JlYWdsZUluZm9MYXllcihzZWFyY2hFbGVtZW50Lm5hbWUsIGxheWVyVmFsdWUpO1xuICAgICAgc2VhcmNoRWxlbWVudC5pc0ZvdW5kID0gdHJ1ZTtcblxuICAgICAgaWYgKHNlYXJjaEVsZW1lbnQudHJpZ2dlcikge1xuICAgICAgICBwcm9jZXNzVHJpZ2dlcihzZWFyY2hFbGVtZW50LnRyaWdnZXIpO1xuICAgICAgfVxuICAgICAgLy8gbWFyayBleGNsdXNpdmUgZWxlbWVudHMgYXMgZm91bmRcbiAgICAgIGlmIChzZWFyY2hFbGVtZW50LmV4Y2x1c2l2ZSAmJiBBcnJheS5pc0FycmF5KHNlYXJjaEVsZW1lbnQuZXhjbHVzaXZlKSAmJiBzZWFyY2hFbGVtZW50LmV4Y2x1c2l2ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoY29uc3QgZXhjbHVzaXZlRWxlbWVudCBvZiBzZWFyY2hQYXRocykge1xuICAgICAgICAgIGlmIChzZWFyY2hFbGVtZW50LmV4Y2x1c2l2ZS5pbmNsdWRlcyhleGNsdXNpdmVFbGVtZW50Lm5hbWUpKSB7XG4gICAgICAgICAgICBleGNsdXNpdmVFbGVtZW50LmlzRm91bmQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2VhcmNoRWxlbWVudC5pc0ZvdW5kKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2dnZXIuZXJyb3IoXCJzZWFyY2hPYmogZXJyb3I6IFwiICsgZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuY29uc3QgcHJvY2Vzc1RyaWdnZXIgPSBhc3luYyAodHJpZ2dlcikgPT4ge1xuICBpZiAodHJpZ2dlcikge1xuICAgIHN3aXRjaCAodHJpZ2dlcikge1xuICAgICAgY2FzZSBcInBhZ2VDaGFuZ2VkXCI6XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCBjdXJyZW50UGFnZVR5cGUgPSBhd2FpdCBnZXRGcm9tQmVhZ2xlSW5mb0xheWVyKFwiUGFnZVR5cGVcIiwgdHJ1ZSwgNTAsIDEwMDAwKTtcbiAgICAgICAgICAvLyBwcmVtYXR1cmUgdHJpZ2dlclxuICAgICAgICAgIGlmIChjdXJyZW50UGFnZVR5cGUpIHtcbiAgICAgICAgICAgIC8vIHJlc2V0IHN0b3JlZCBiYXNrZXQgcHJpY2UgaWYgbWlzc2luZyBvciBwYWdldHlwZSBpcyBwdXJjaGFzZVxuICAgICAgICAgICAgY29uc3QgY2FCYXNrZXRQcmljZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShMT0NBTF9TVE9SQUdFX0tFWVMuQ09VUE9OX0FQUExJQ0FCTEVfQkFTS0VUX1BSSUNFKTtcbiAgICAgICAgICAgIGlmIChjYUJhc2tldFByaWNlID09PSBudWxsIHx8IGN1cnJlbnRQYWdlVHlwZSA9PT0gXCJwdXJjaGFzZVwiKSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShMT0NBTF9TVE9SQUdFX0tFWVMuQ09VUE9OX0FQUExJQ0FCTEVfQkFTS0VUX1BSSUNFLCAwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQYWdlVHlwZSA9PT0gXCJwdXJjaGFzZVwiKSB7XG4gICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oU0VTU0lPTl9TVE9SQUdFX0tFWVMuU0tVX0lORk9fQkFTS0VULCBcInt9XCIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UGFnZVR5cGUgIT09IFwiYmFza2V0XCIpIHtcbiAgICAgICAgICAgICAgLy8gYWRkIHRvIF9fU0tVc29uTGFzdEJhc2tldExvb2t1cCBoaXN0b3J5XG4gICAgICAgICAgICAgIGNvbnN0IGxhc3RCYXNrZXRQcm9kdWN0SW5mbyA9IEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShTRVNTSU9OX1NUT1JBR0VfS0VZUy5TS1VfSU5GT19CQVNLRVQpKTtcbiAgICAgICAgICAgICAgaWYgKGxhc3RCYXNrZXRQcm9kdWN0SW5mbykge1xuICAgICAgICAgICAgICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiX19TS1Vzb25MYXN0QmFza2V0TG9va3VwXCIsIGxhc3RCYXNrZXRQcm9kdWN0SW5mbyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJ1cGRhdGVDb3Vwb25BcHBsaWNhYmxlQW1vdW50XCI6XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCBjb3Vwb25BcHBsaWNhYmxlVG90YWxQcmljZSA9IGF3YWl0IGdldEZyb21CZWFnbGVJbmZvTGF5ZXIoXCJjYXJ0LmNvdXBvbkFwcGxpY2FibGVcIiwgdHJ1ZSwgNTAsIDUwMCk7XG5cbiAgICAgICAgICBpZiAoIWNvdXBvbkFwcGxpY2FibGVUb3RhbFByaWNlKSB7XG4gICAgICAgICAgICAvLyBQcmljZSBlbGVtZW50cyBub3QgZm91bmRcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShMT0NBTF9TVE9SQUdFX0tFWVMuQ09VUE9OX0FQUExJQ0FCTEVfQkFTS0VUX1BSSUNFLCAwKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY291cG9uQXBwbGljYWJsZVRvdGFsUHJpY2UgPj0gMCkge1xuICAgICAgICAgICAgLy8gc2V0IGNvdXBvbkFwcGxpY2FibGVUb3RhbFByaWNlIHRvIGxvY2FsU3RvcmFnZVxuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKExPQ0FMX1NUT1JBR0VfS0VZUy5DT1VQT05fQVBQTElDQUJMRV9CQVNLRVRfUFJJQ0UsIGNvdXBvbkFwcGxpY2FibGVUb3RhbFByaWNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcInVwZGF0ZUFjdGl2ZVNLVUxpc3RcIjpcbiAgICAgICAge1xuICAgICAgICAgIC8vIHVwZGF0ZSBhY3RpdmUgU0tVIGxpc3RcbiAgICAgICAgICBsZXQgbmV3U0tVTGlzdDtcbiAgICAgICAgICBjb25zdCBjdXJyZW50UGFnZVR5cGUgPSBhd2FpdCBnZXRGcm9tQmVhZ2xlSW5mb0xheWVyKFwiUGFnZVR5cGVcIiwgdHJ1ZSwgNTAsIDEwMDApO1xuICAgICAgICAgIC8vIExpc3RpbmcgcGFnZVxuICAgICAgICAgIGlmIChjdXJyZW50UGFnZVR5cGUgPT09IFwiTGlzdGluZ3BhZ2VcIikge1xuICAgICAgICAgICAgY29uc3Qgc2t1TGlzdCA9IGF3YWl0IGdldEZyb21CZWFnbGVJbmZvTGF5ZXIoXCJwbHAuc2t1c1wiLCB0cnVlLCA1MCwgMTAwMCk7XG4gICAgICAgICAgICBpZiAoc2t1TGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbmV3U0tVTGlzdCA9IHNrdUxpc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgLy8gUHJvZHVjdCBwYWdlXG4gICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UGFnZVR5cGUgPT09IFwiUHJvZHVjdHBhZ2VcIikge1xuICAgICAgICAgICAgY29uc3Qgc2t1ID0gYXdhaXQgZ2V0RnJvbUJlYWdsZUluZm9MYXllcihcInBkcC5za3VcIiwgdHJ1ZSwgNTAsIDEwMDApO1xuICAgICAgICAgICAgaWYgKHNrdSkge1xuICAgICAgICAgICAgICBuZXdTS1VMaXN0ID0gW3NrdV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UGFnZVR5cGUgPT09IFwiYmFza2V0XCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHNrdUxpc3QgPSBhd2FpdCBnZXRGcm9tQmVhZ2xlSW5mb0xheWVyKFwiY2FydC5za3VzXCIsIHRydWUsIDUwLCAxMDAwKTtcbiAgICAgICAgICAgIGlmIChza3VMaXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICBuZXdTS1VMaXN0ID0gc2t1TGlzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXdTS1VMaXN0ID0gbmV3U0tVTGlzdC5zb3J0KCk7XG4gICAgICAgICAgY29uc3QgcHJldlNLVUxpc3QgPSBhd2FpdCBnZXRGcm9tQmVhZ2xlSW5mb0xheWVyKFwiX19TS1Vzb25QYWdlXCIpO1xuICAgICAgICAgIC8vIHVwZGF0ZSBwcmV2U0tVTGlzdCBhbmQgbG9vayBpdCB1cCBpZiBjaGFuZ2VkXG4gICAgICAgICAgLy8gaWYgcHJldlNLVUxpc3QgaXMgZGlmZmVyZW50IGZyb20gbmV3U0tVTGlzdFxuICAgICAgICAgIGlmIChwcmV2U0tVTGlzdCAmJiBuZXdTS1VMaXN0ICYmIHByZXZTS1VMaXN0Lmxlbmd0aCA9PT0gbmV3U0tVTGlzdC5sZW5ndGggJiYgcHJldlNLVUxpc3Quam9pbihcInx8XCIpID09PSBuZXdTS1VMaXN0LmpvaW4oXCJ8fFwiKSkge1xuICAgICAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgICAgICAgIH0gZWxzZSBpZiAobmV3U0tVTGlzdCkge1xuICAgICAgICAgICAgLy8gbG9nIHRoZSBhcnJheSBvZiBwcmV2U0tVTGlzdCBpbiBzdHJpbmcgZm9ybWF0XG4gICAgICAgICAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcIl9fU0tVc29uUGFnZVwiLCBuZXdTS1VMaXN0KTtcbiAgICAgICAgICAgIGNvbnN0IHByb2R1Y3RJbmZvID0gYXdhaXQgcHJvZHVjdEluZm9Mb29rdXAobmV3U0tVTGlzdCk7XG4gICAgICAgICAgICBpZiAocHJvZHVjdEluZm8pIHtcbiAgICAgICAgICAgICAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJfX1NLVXNvblBhZ2VMb29rdXBcIiwgcHJvZHVjdEluZm8pO1xuICAgICAgICAgICAgICBpZiAoY3VycmVudFBhZ2VUeXBlID09PSBcImJhc2tldFwiKSB7XG4gICAgICAgICAgICAgICAgLy8gc3RvcmUgbGFzdCBiYXNrZXQgcHJvZHVjdCBpbmZvIHRvIHJlbWVtYmVyIGxhdGVyXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogbW92ZSB0aGlzIHRvIGhpc3RvcnkgdHJhY2tpbmcgbGF0ZXJcbiAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFNFU1NJT05fU1RPUkFHRV9LRVlTLlNLVV9JTkZPX0JBU0tFVCwgSlNPTi5zdHJpbmdpZnkocHJvZHVjdEluZm8pKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgcGFyc2VTZWFyY2hQYXRocyA9IGFzeW5jICgpID0+IHtcbiAgY29uc3QgZG9tU3RhdHVzID0gZG9jdW1lbnQucmVhZHlTdGF0ZTtcbiAgLy8gY2hlY2sgaWYgZG9jdW1lbnQgYW5kIGRvbSBpcyBsb2FkZWQgYW5kIHJlYWR5IGZvciBzY3JhcHBpbmdcbiAgbG9nZ2VyLmxvZyhcInBhcnNlU2VhcmNoUGF0aHMgaW5pdGlhbGl6ZWQgd2l0aCBkb20gc3RhdHVzOiAgXCIgKyBkb21TdGF0dXMpO1xuXG4gIGNvbnN0IHdpbnRvcCA9IHdpbmRvdy50b3A7XG4gIGNvbnN0IGRhdGFMYXllciA9IHdpbnRvcC5kYXRhTGF5ZXI7XG4gIGNvbnN0IHdpbmRvYyA9IHdpbnRvcC5kb2N1bWVudDtcbiAgbGV0IHNvcmdBcnJheUlubmVyO1xuXG4gIGNvbnN0IGZvdW5kTmFtZXMgPSBuZXcgU2V0KCk7XG4gIGNvbnN0IHByZXZGb3VuZE5hbWVzID0gbmV3IFNldCgpO1xuICBjb25zdCBub3RGb3VuZE5hbWVzID0gbmV3IFNldCgpO1xuXG4gIC8vIFBhZ2VUeXBlIGNhbiBiZSBpbmZlcnJlZCBmcm9tIFVSTCwgaWYgZm91bmQgdXNlIGl0IGZyb20gdGhlcmVcbiAgbGV0IGN1cnJlbnRQYWdlVHlwZSA9IGF3YWl0IGdldEZyb21CZWFnbGVJbmZvTGF5ZXIoXCJQYWdlVHlwZVwiKTtcblxuICBpZiAoY3VycmVudFBhZ2VUeXBlKSB7XG4gICAgcHJldkZvdW5kTmFtZXMuYWRkKFwiUGFnZVR5cGVcIik7XG4gIH1cblxuICAvLyBMb29wIHRocm91Z2ggc2VhcmNoIGxpc3RzIGFuZCBtYXJrIGZvdW5kIG5hbWVzXG4gIGZvciAoY29uc3Qgc2VhcmNoRWxlbWVudCBvZiBzZWFyY2hQYXRocykge1xuICAgIGlmIChzZWFyY2hFbGVtZW50LmlzRm91bmQpIHtcbiAgICAgIHByZXZGb3VuZE5hbWVzLmFkZChzZWFyY2hFbGVtZW50Lm5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3Qgc2VhcmNoRWxlbWVudCBvZiBzZWFyY2hQYXRocykge1xuICAgIGlmIChzZWFyY2hFbGVtZW50LmlzRm91bmQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChmb3VuZE5hbWVzLmhhcyhzZWFyY2hFbGVtZW50Lm5hbWUpIHx8IHByZXZGb3VuZE5hbWVzLmhhcyhzZWFyY2hFbGVtZW50Lm5hbWUpKSB7XG4gICAgICAvLyBoYWQgYWxyZWFkeSBmb3VuZCB0aGlzIGVsZW1lbnRcbiAgICAgIHNlYXJjaEVsZW1lbnQuaXNGb3VuZCA9IHRydWU7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoc2VhcmNoRWxlbWVudC5QYWdlVHlwZURlcGVuZCAhPT0gXCIqXCIpIHtcbiAgICAgIGlmICghY3VycmVudFBhZ2VUeXBlKSB7XG4gICAgICAgIGN1cnJlbnRQYWdlVHlwZSA9IGF3YWl0IGdldEZyb21CZWFnbGVJbmZvTGF5ZXIoXCJQYWdlVHlwZVwiKTtcbiAgICAgICAgaWYgKCFjdXJyZW50UGFnZVR5cGUpIHtcbiAgICAgICAgICBub3RGb3VuZE5hbWVzLmFkZChzZWFyY2hFbGVtZW50Lm5hbWUpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWFyY2hFbGVtZW50LlBhZ2VUeXBlRGVwZW5kLmluZGV4T2YoY3VycmVudFBhZ2VUeXBlKSA8IDApIHtcbiAgICAgICAgLy8gc2tpcCBzZWFyY2hFbGVtZW50IGJlY2F1c2Ugb2YgUGFnZVR5cGVEZXBlbmRcbiAgICAgICAgc2VhcmNoRWxlbWVudC5pc0ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlYXJjaEVsZW1lbnQubWV0aG9kID09PSBcIlNpbmdsZVdUXCIpIHsgLy8gU0NBTiBXaW5kb3cgZm9yIFNpbmdsZSBFbGVtZW50c1xuICAgICAgc2VhcmNoQW5kU2V0KHdpbnRvcCwgc2VhcmNoRWxlbWVudCwgZm91bmROYW1lcywgbm90Rm91bmROYW1lcyk7XG4gICAgfSBlbHNlIGlmIChzZWFyY2hFbGVtZW50Lm1ldGhvZCA9PT0gXCJHQURhdGFMYXllclwiKSB7IC8vIFNDQU4gR0EgREFUQSBMQVlFUlxuICAgICAgZm9yIChjb25zdCBkYXRhTGF5ZXJJdGVtIG9mIGRhdGFMYXllcikge1xuICAgICAgICBzZWFyY2hBbmRTZXQoZGF0YUxheWVySXRlbSwgc2VhcmNoRWxlbWVudCwgZm91bmROYW1lcywgbm90Rm91bmROYW1lcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzZWFyY2hFbGVtZW50Lm1ldGhvZCA9PT0gXCJEb2NTb3JnXCIpIHsgLy8gU0NBTiBTT1JHIEFSUkFZXG4gICAgICBpZiAoIXNvcmdBcnJheUlubmVyKSB7XG4gICAgICAgIHNvcmdBcnJheUlubmVyID0gZ2V0U09SR0FycmF5KCk7XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IHNvcmdJdGVtIG9mIHNvcmdBcnJheUlubmVyKSB7XG4gICAgICAgIHNlYXJjaEFuZFNldChzb3JnSXRlbSwgc2VhcmNoRWxlbWVudCwgZm91bmROYW1lcywgbm90Rm91bmROYW1lcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzZWFyY2hFbGVtZW50Lm1ldGhvZCA9PT0gXCJEb2NRdWVyeVwiKSB7IC8vIFNDQU4gRE9DVU1FTlRcbiAgICAgIHNlYXJjaEFuZFNldCh3aW5kb2MsIHNlYXJjaEVsZW1lbnQsIGZvdW5kTmFtZXMsIG5vdEZvdW5kTmFtZXMpO1xuICAgIH0gLy8gRE9DUVVFUlkgcGFyc2VcbiAgfVxuXG4gIGlmIChub3RGb3VuZE5hbWVzLnNpemUgPT09IDApIHtcbiAgICBwYXJzZVNlYXJjaFBhdGhzUmV0cnkgPSBQQVJTRVNFQVJDSE1BWFJFVFJZO1xuICAgIGxvZ2dlci5sb2coXCJwYXJzZVNlYXJjaFBhdGhzIGZvdW5kIGFsbCBlbGVtZW50cyAtIHNldHRpbmcgcmV0cnkgdG8gbWF4XCIpO1xuICB9IGVsc2UgaWYgKGZvdW5kTmFtZXMuc2l6ZSA9PT0gMCkge1xuICAgIC8vIHVwZGF0ZSByZXRyeSBjb3VudGVyIGFuZCBkZWxheSBvbmx5IGlmIGRvbSBpcyBhY3RpdmVcbiAgICBpZiAoZG9tU3RhdHVzID09PSBcImNvbXBsZXRlXCIgfHwgZG9tU3RhdHVzID09PSBcImludGVyYWN0aXZlXCIpIHtcbiAgICAgIHBhcnNlU2VhcmNoUGF0aHNEZWxheSAqPSAyO1xuICAgICAgcGFyc2VTZWFyY2hQYXRoc1JldHJ5ICs9IDE7XG4gICAgfVxuICAgIGxvZ2dlci5sb2coXCJwYXJzZVNlYXJjaFBhdGhzIHByb2Nlc3NlZCBidXQgbm90IGZvdW5kIGFueSwgc2V0dGluZyBkZWxheSBhbmQgcmV0cnkgdG8gXCIgK1xuICAgICAgcGFyc2VTZWFyY2hQYXRoc0RlbGF5ICsgXCIgYW5kIFwiICtcbiAgICAgIHBhcnNlU2VhcmNoUGF0aHNSZXRyeSArIFwiIGZvciBub3Rmb3VuZDogW1wiICtcbiAgICAgIEFycmF5LmZyb20obm90Rm91bmROYW1lcykuam9pbihcIiB8IFwiKSArIFwiXVwiLFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgbG9nZ2VyLmxvZyhcInBhcnNlU2VhcmNoUGF0aHMgcHJvY2Vzc2VkOiBub3Rmb3VuZDogW1wiICtcbiAgICAgIEFycmF5LmZyb20obm90Rm91bmROYW1lcykuam9pbihcIiB8IFwiKSArIFwiXSBhbmQgZm91bmQgXCIgK1xuICAgICAgZm91bmROYW1lcy5zaXplLFxuICAgICk7XG4gIH1cbn07XG5cbmNvbnN0IHNlYXJjaEFuZFNldCA9IChvYmosIHNlYXJjaEVsZW1lbnQsIGZvdW5kTmFtZXMsIG5vdEZvdW5kTmFtZXMpID0+IHtcbiAgaWYgKHNlYXJjaE9iaihvYmosIHNlYXJjaEVsZW1lbnQpKSB7XG4gICAgZm91bmROYW1lcy5hZGQoc2VhcmNoRWxlbWVudC5uYW1lKTtcbiAgfSBlbHNlIHtcbiAgICBub3RGb3VuZE5hbWVzLmFkZChzZWFyY2hFbGVtZW50Lm5hbWUpO1xuICB9XG59O1xuXG4vLyBwYXJzZSBzb3VyY2VcbmNvbnN0IHBhcnNlckNhbGxlciA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICBhd2FpdCBwYXJzZVNlYXJjaFBhdGhzKCk7XG4gIGlmIChwYXJzZVNlYXJjaFBhdGhzUmV0cnkgPCBQQVJTRVNFQVJDSE1BWFJFVFJZKSB7XG4gICAgbG9nZ2VyLmxvZyhcInBhcnNlU2VhcmNoUGF0aHM6IHNjaGVkdWxlZCB0byBiZSByZWNhbGxlZCBpbiBcIiArIHBhcnNlU2VhcmNoUGF0aHNEZWxheSArIFwibXNcIik7XG4gICAgc2V0VGltZW91dChwYXJzZXJDYWxsZXIsIHBhcnNlU2VhcmNoUGF0aHNEZWxheSk7XG4gIH0gZWxzZSB7XG4gICAgbG9nZ2VyLmxvZyhcInBhcnNlU2VhcmNoUGF0aHM6IHJlYWNoZWQgbWF4IHJldHJ5LCBjYWxsaW5nIHJlbWFpbmRlciBoaXN0b3JpY2FsIGRhdGFcIik7XG4gICAgdXBkYXRlUmVtYWluaW5nSGlzdG9yaWNhbERhdGEoKTtcbiAgfVxufTtcblxuLy8gRXh0cmFjdCB2YWx1ZSBmcm9tIGpzb24gb2JqZWN0IHVzaW5nIGdpdmVuIHBhdGhcbi8vIElmIGFuIGVsZW1lbnQgaXMgKiwgY29uY2F0ZW5hdGUgcmVjdXJzaXZlbHkgYWxsIHN1Yi1wYXRoIHZhbHVlcyBhcyBzdHJpbmdcbmNvbnN0IGpzb25HZXQgPSAob2JqLCBwYXRoKSA9PiB7XG4gIGlmICghb2JqKSByZXR1cm4gbnVsbDtcbiAgaWYgKCFwYXRoKSByZXR1cm4gbnVsbDtcblxuICB0cnkge1xuICAgIGNvbnN0IHBhdGhBcnJheSA9IHBhdGguc3BsaXQoXCIuXCIpO1xuICAgIGxldCBjdXJyZW50ID0gb2JqO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoY3VycmVudCA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICBpZiAocGF0aEFycmF5W2ldID09PSBcIipcIikge1xuICAgICAgICBjb25zdCBzdWJQYXRoID0gcGF0aEFycmF5LnNsaWNlKGkgKyAxKS5qb2luKFwiLlwiKTtcbiAgICAgICAgY29uc3Qgc3ViQXJyYXkgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBzdWJLZXkgaW4gY3VycmVudCkge1xuICAgICAgICAgIGlmIChjdXJyZW50W3N1YktleV0gIT09IHVuZGVmaW5lZCAmJiBjdXJyZW50W3N1YktleV0gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1YlZhbHVlID0ganNvbkdldChjdXJyZW50W3N1YktleV0sIHN1YlBhdGgpO1xuICAgICAgICAgICAgaWYgKHN1YlZhbHVlICE9PSBudWxsICYmIHN1YlZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgc3ViQXJyYXkucHVzaChzdWJWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJBcnJheTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50W3BhdGhBcnJheVtpXV07XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbmNvbnN0IHByZXBhcmVDb3JlRGF0YSA9IGFzeW5jICgpID0+IHtcbiAgY29uc3Qgd2luZG93UHRyID0gd2luZG93LnRvcDtcbiAgY29uc3QgbmF2UHRyID0gd2luZG93UHRyLm5hdmlnYXRvcjtcblxuICBjb25zdCB2aWV3SWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpO1xuICBjb25zdCBzZXNzaW9uSWQgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFNFU1NJT05fU1RPUkFHRV9LRVlTLlNFU1NJT05fSUQpO1xuICAvKiBCZWFnbGUgZGF0YSAqL1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcInZcIiwgXCIwLjAuMjlcIik7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiblwiLCBgYmVhZ2xlLXNlc3Npb25faWQtJHtzZXNzaW9uSWR9YCk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwidklkXCIsIHZpZXdJZCk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwic3JcIiwgU1BMSVRfUkFUSU8pO1xuXG4gIGNvbnN0IHBsYXRmb3JtID0gd2luZG93UHRyLm5hdmlnYXRvcj8udXNlckFnZW50RGF0YT8ucGxhdGZvcm0gfHxcbiAgICB3aW5kb3dQdHIubmF2aWdhdG9yPy5wbGF0Zm9ybSB8fFxuICAgIHdpbmRvd1B0ci5uYXZpZ2F0b3I/LnVzZXJBZ2VudDtcblxuICBhZGRUb0JlYWdsZUluZm9MYXllcihcImRldmljZS5uYXZQbGF0Zm9ybVwiLCBwbGF0Zm9ybSk7XG5cbiAgLyogd2luZG93IHZpZXcgYXJlYSAqL1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcImRldmljZS53aW5kb3dQUmF0aW9cIiwgd2luZG93UHRyLmRldmljZVBpeGVsUmF0aW8pO1xuXG4gIGNvbnN0IGF2YWlsV2luZG93ID0gd2luZG93UHRyLnNjcmVlbj8uYXZhaWxXaWR0aCArIFwieFwiICsgd2luZG93UHRyLnNjcmVlbj8uYXZhaWxIZWlnaHQ7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiZGV2aWNlLndpbmRvd0F2YWlsXCIsIGF2YWlsV2luZG93KTtcblxuICBjb25zdCB3aW5kb3dEZXB0aCA9IHdpbmRvd1B0ci5zY3JlZW4/LmNvbG9yRGVwdGggKyBcIi1cIiArIHdpbmRvd1B0ci5zY3JlZW4/LnBpeGVsRGVwdGg7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiZGV2aWNlLndpbmRvd0RlcHRoXCIsIHdpbmRvd0RlcHRoKTtcblxuICBjb25zdCB2cG9ydFNoYXBlID0gd2luZG93UHRyLnZpc3VhbFZpZXdwb3J0Py53aWR0aCArIFwieFwiICsgd2luZG93UHRyLnZpc3VhbFZpZXdwb3J0Py5oZWlnaHQ7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiZGV2aWNlLndpbmRvd1Zwb3J0XCIsIHZwb3J0U2hhcGUpO1xuXG4gIGlmIChzY3JlZW4ud2lkdGgpIHtcbiAgICBsZXQgd2lkdGggPSBwYXJzZUludChzY3JlZW4ud2lkdGgpO1xuICAgIGxldCBoZWlnaHQgPSAoc2NyZWVuLmhlaWdodCkgPyBwYXJzZUludChzY3JlZW4uaGVpZ2h0KSA6IDA7XG4gICAgaWYgKHdpZHRoICE9PSAwICYmIGhlaWdodCAhPT0gMCkge1xuICAgICAgY29uc3QgaU9TID0gL2lQYWR8aVBob25lfGlQb2QvLnRlc3QocGxhdGZvcm0pO1xuICAgICAgaWYgKGlPUyAmJiB3aW5kb3dQdHIuZGV2aWNlUGl4ZWxSYXRpbykge1xuICAgICAgICAvLyBpb3MgcHJvdmlkZXMgRFBJcywgbmVlZCB0byBtdWx0aXBseVxuICAgICAgICB3aWR0aCA9IE1hdGgucm91bmQod2lkdGggKiB3aW5kb3dQdHIuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICAgIGhlaWdodCA9IE1hdGgucm91bmQoaGVpZ2h0ICogd2luZG93UHRyLmRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKHdpbmRvd1B0ci5vcmllbnRhdGlvbikgPT09IDkwKSB7XG4gICAgICAgICAgLy8gd2UgaGF2ZSBsYW5kc2NhcGUgb3JpZW50YXRpb25cbiAgICAgICAgICAvLyBzd2l0Y2ggdmFsdWVzIGZvciBhbGwgZXhjZXB0IGlvc1xuICAgICAgICAgIGNvbnN0IHRlbXAgPSB3aWR0aDtcbiAgICAgICAgICB3aWR0aCA9IGhlaWdodDtcbiAgICAgICAgICBoZWlnaHQgPSB0ZW1wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcImRldmljZS53aW5kb3dcIiwgd2lkdGggKyBcInhcIiArIGhlaWdodCk7XG4gICAgfVxuICB9XG5cbiAgLyogbmF2aWdhdG9yICovXG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiZGV2aWNlLm5hdkhpc3RTaXplXCIsIHdpbmRvd1B0ci5oaXN0b3J5Py5sZW5ndGgpO1xuXG4gIC8vIGNoZWNrIGlmIHVzZXJBZ2VudERhdGEgaXMgc3VwcG9ydGVkIGFuZCB1c2VyQWdlbnQgaXMgbm90IGF2YWlsYWJsZSwgdXNlIGl0XG4gIGlmICghbmF2UHRyLnVzZXJBZ2VudCkge1xuICAgIGlmIChuYXZQdHIudXNlckFnZW50RGF0YSkge1xuICAgICAgLy8gdHVybiBicmFuZHMgYXJyYXkgaW50byBzdHJpbmdcbiAgICAgIGxldCBuYXZBZ2VudCA9IG5hdlB0cj8udXNlckFnZW50RGF0YT8uYnJhbmRzPy5tYXAoZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gZS5icmFuZCArIFwiOlwiICsgZS52ZXJzaW9uO1xuICAgICAgfSkuam9pbigpO1xuICAgICAgLy8gYWRkIG1vYmlsZSBpbmZvXG4gICAgICBuYXZBZ2VudCArPSAobmF2UHRyPy51c2VyQWdlbnREYXRhPy5tb2JpbGUgPyBcIm1vYmlcIiA6IFwiIFwiKTtcbiAgICAgIC8vIGFkZCBwbGF0Zm9ybSBpbmZvXG4gICAgICBuYXZBZ2VudCArPSBwbGF0Zm9ybTtcbiAgICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiZGV2aWNlLm5hdkFnZW50XCIsIG5hdkFnZW50KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJkZXZpY2UubmF2QWdlbnRcIiwgbmF2UHRyLnVzZXJBZ2VudCk7XG4gIH1cblxuICBhZGRUb0JlYWdsZUluZm9MYXllcihcImRldmljZS5uYXZIV0NvcmVzXCIsIG5hdlB0ci5oYXJkd2FyZUNvbmN1cnJlbmN5KTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJkZXZpY2UubmF2TGFuZ3VhZ2VcIiwgbmF2UHRyLmxhbmd1YWdlIHx8XG4gICAgICBuYXZQdHIuYnJvd3Nlckxhbmd1YWdlIHx8XG4gICAgICBuYXZQdHIuc3lzdGVtTGFuZ3VhZ2UgfHxcbiAgICAgIG5hdlB0ci51c2VyTGFuZ3VhZ2UsXG4gICk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiZGV2aWNlLm5hdlRvdWNoXCIsIG5hdlB0ci5tYXhUb3VjaFBvaW50cyk7XG4gIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiZGV2aWNlLm5hdlZlbmRvclwiLCBuYXZQdHIudmVuZG9yKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJkZXZpY2UuaW50ZXJuZXRTcGVlZFwiLCB3aW5kb3dQdHIubmF2aWdhdG9yPy5jb25uZWN0aW9uPy5kb3dubGluayk7XG5cbiAgLyogbWlzY2VsbGFuZW91cyAqL1xuICBjb25zdCBjdXJyZW50VVJMID0gbmV3IFVSTCh3aW5kb3cudG9wLmxvY2F0aW9uLmhyZWYpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcInVcIiwgY3VycmVudFVSTC5ocmVmKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJkXCIsIGN1cnJlbnRVUkwuaG9zdG5hbWUpO1xuICBhZGRUb0JlYWdsZUluZm9MYXllcihcImRvbnR0cmFja1wiLCBuYXZQdHIuZG9Ob3RUcmFjayB8fCB3aW5kb3dQdHIuZG9Ob3RUcmFjayB8fCBuYXZQdHIubXNEb05vdFRyYWNrKTtcblxuICBhZGRUb0JlYWdsZUluZm9MYXllcihcInJcIiwgd2luZG93UHRyLmRvY3VtZW50LnJlZmVycmVyKTtcbiAgY29uc3QgZmlyc3RTZXNzaW9uUmVmZXJyZXIgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFNFU1NJT05fU1RPUkFHRV9LRVlTLlNFU1NJT05fUkVGRVJSRVIpO1xuICBpZiAoIWZpcnN0U2Vzc2lvblJlZmVycmVyKSB7XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShTRVNTSU9OX1NUT1JBR0VfS0VZUy5TRVNTSU9OX1JFRkVSUkVSLCB3aW5kb3dQdHIuZG9jdW1lbnQucmVmZXJyZXIpO1xuICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiZnJcIiwgd2luZG93UHRyLmRvY3VtZW50LnJlZmVycmVyKTtcbiAgfSBlbHNlIHtcbiAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcImZyXCIsIGZpcnN0U2Vzc2lvblJlZmVycmVyKTtcbiAgfVxuXG4gIC8qIFZpdmVuc2Ugc3BlY2lmaWMgKi9cbiAgbGV0IHBhZ2VUeXBlO1xuICAvLyBpZiB1cmwgbGlrZSB4IHRoZW4gc2V0IFBhZ2VUeXBlID0geVxuICBpZiAoY3VycmVudFVSTC5wYXRobmFtZS5pbmRleE9mKFwiZmF2b3JpbGVyaW0uaHRtbFwiKSA+IC0xKSB7XG4gICAgcGFnZVR5cGUgPSBcImZhdm9yaXRlc1wiO1xuICB9IGVsc2UgaWYgKGN1cnJlbnRVUkwucGF0aG5hbWUuaW5kZXhPZihcInNpcGFyaXMtbGlzdGVzaS5odG1sXCIpID4gLTEpIHtcbiAgICBwYWdlVHlwZSA9IFwiYmFza2V0XCI7XG4gIH0gZWxzZSBpZiAoY3VycmVudFVSTC5wYXRobmFtZS5pbmRleE9mKFwic2lwYXJpcy1vemV0aS5odG1sXCIpID4gLTEpIHtcbiAgICBwYWdlVHlwZSA9IFwicHVyY2hhc2VcIjtcbiAgfSBlbHNlIGlmIChjdXJyZW50VVJMLnBhdGhuYW1lLmluZGV4T2YoXCJvZGVtZS5odG1sXCIpID4gLTEpIHtcbiAgICBwYWdlVHlwZSA9IFwicGF5bWVudFwiO1xuICB9IGVsc2UgaWYgKGN1cnJlbnRVUkwucGF0aG5hbWUuaW5kZXhPZihcImFkcmVzLWxpc3Rlc2kuaHRtbFwiKSA+IC0xKSB7XG4gICAgcGFnZVR5cGUgPSBcImFkZHJlc3NcIjtcbiAgfSBlbHNlIGlmIChjdXJyZW50VVJMLnBhdGhuYW1lLmluZGV4T2YoXCJzaXBhcmlzbGVyaW0uaHRtbFwiKSA+IC0xKSB7XG4gICAgcGFnZVR5cGUgPSBcInBhc3RvcmRlcnNcIjtcbiAgfSBlbHNlIGlmIChjdXJyZW50VVJMLnBhdGhuYW1lLmluZGV4T2YoXCJ1eWUta2F5aXQuaHRtbFwiKSA+IC0xKSB7XG4gICAgcGFnZVR5cGUgPSBcInJlZ2lzdGVyXCI7XG4gIH0gZWxzZSBpZiAoY3VycmVudFVSTC5wYXRobmFtZS5pbmRleE9mKFwidXllLWdpcmlzaS5odG1sXCIpID4gLTEpIHtcbiAgICBwYWdlVHlwZSA9IFwic2lnbmluXCI7XG4gIH0gZWxzZSBpZiAoY3VycmVudFVSTC5wYXRobmFtZS5pbmRleE9mKFwia3Vwb25sYXJpbS5odG1sXCIpID4gLTEpIHtcbiAgICBwYWdlVHlwZSA9IFwicHJvZmlsZV9jb3Vwb25zXCI7XG4gIH0gZWxzZSBpZiAoY3VycmVudFVSTC5wYXRobmFtZS5pbmRleE9mKFwicHJvZmlsLWd1bmNlbGxlLmh0bWxcIikgPiAtMSkge1xuICAgIHBhZ2VUeXBlID0gXCJwcm9maWxlX2luZm9cIjtcbiAgfSBlbHNlIGlmIChjdXJyZW50VVJMLnBhdGhuYW1lLmluZGV4T2YoXCJhZHJlc2xlcmltLmh0bWxcIikgPiAtMSkge1xuICAgIHBhZ2VUeXBlID0gXCJwcm9maWxlX2FkZHJlc3Nlc1wiO1xuICB9IGVsc2UgaWYgKGN1cnJlbnRVUkwucGF0aG5hbWUuaW5kZXhPZihcImR1eXVydS10ZXJjaWhsZXJpLmh0bWxcIikgPiAtMSkge1xuICAgIHBhZ2VUeXBlID0gXCJwcm9maWxlX25vdGlmaWNhdGlvbnNcIjtcbiAgfSBlbHNlIGlmIChjdXJyZW50VVJMLnBhdGhuYW1lLmluZGV4T2YoXCJpbmRpcmltbGktbW9iaWx5YS1rYW1wYW55YWxhcmkuaHRtbFwiKSA+IC0xKSB7XG4gICAgcGFnZVR5cGUgPSBcInNwZWNpYWxfY2FtcGFpZ25zXCI7XG4gIH1cblxuICBpZiAocGFnZVR5cGUpIHtcbiAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcIlBhZ2VUeXBlXCIsIHBhZ2VUeXBlKTtcbiAgfVxufTtcblxuY29uc3QgYWRkTWV0cmljcyA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCB3aW5kb3dQdHIgPSB3aW5kb3cudG9wO1xuICBjb25zdCBwZXJmTWV0cmljcyA9IHt9O1xuICBjb25zdCBwZXJmTmF2aWdhdGlvbk1ldHJpY3MgPSB3aW5kb3dQdHIucGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5VHlwZShcIm5hdmlnYXRpb25cIilbMF07XG4gIGlmICh3aW5kb3dQdHIucGVyZm9ybWFuY2UgJiYgcGVyZk5hdmlnYXRpb25NZXRyaWNzKSB7XG4gICAgcGVyZk1ldHJpY3MuY29ubmVjdCA9IE1hdGgucm91bmQocGVyZk5hdmlnYXRpb25NZXRyaWNzLmNvbm5lY3RFbmQgLSBwZXJmTmF2aWdhdGlvbk1ldHJpY3MuY29ubmVjdFN0YXJ0KTtcbiAgICBwZXJmTWV0cmljcy5yZXF1ZXN0ID0gTWF0aC5yb3VuZChwZXJmTmF2aWdhdGlvbk1ldHJpY3MucmVzcG9uc2VFbmQgLSBwZXJmTmF2aWdhdGlvbk1ldHJpY3MucmVxdWVzdFN0YXJ0KTtcbiAgICBwZXJmTWV0cmljcy5kb20gPSBNYXRoLnJvdW5kKHBlcmZOYXZpZ2F0aW9uTWV0cmljcy5kb21Db21wbGV0ZSAtIHBlcmZOYXZpZ2F0aW9uTWV0cmljcy5kb21JbnRlcmFjdGl2ZSk7XG4gICAgcGVyZk1ldHJpY3MubG9hZCA9IE1hdGgucm91bmQocGVyZk5hdmlnYXRpb25NZXRyaWNzLmxvYWRFdmVudEVuZCAtIHBlcmZOYXZpZ2F0aW9uTWV0cmljcy5sb2FkRXZlbnRTdGFydCk7XG4gICAgcGVyZk1ldHJpY3MuZHVyYXRpb24gPSBNYXRoLnJvdW5kKHBlcmZOYXZpZ2F0aW9uTWV0cmljcy5kdXJhdGlvbik7XG4gIH1cbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJtZXRyaWNzXCIsIHBlcmZNZXRyaWNzKTtcbn07XG5cbi8vIFRPRE86IG1vdmUgdGhpcyB0byBhbiBcImVsZW1lbnQgY29sbGVjdG9yXCIgbW9kdWxlLCB0aGVuIGRhdGEgaXMgZXh0cmFjdGVkIGZyb20gcHJlLWNvbGxlY3RlZCBlbGVtZW50c1xuY29uc3QgZ2V0U09SR0FycmF5ID0gKCkgPT4ge1xuICBjb25zdCBzY2hlbWFPcmdFbHRzID0gd2luZG93LnRvcC5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW3R5cGU9XFxcImFwcGxpY2F0aW9uL2xkK2pzb25cXFwiXVwiKTtcbiAgY29uc3Qgc29yZ0FycmF5ID0gW107XG5cbiAgZm9yIChjb25zdCBzVGFnIG9mIHNjaGVtYU9yZ0VsdHMpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY250bnQgPSBzVGFnLnRleHRDb250ZW50O1xuICAgICAgY29uc3QganNvbmNvbnRlbnQgPSBKU09OLnBhcnNlKGNudG50KTtcbiAgICAgIHNvcmdBcnJheS5wdXNoKGpzb25jb250ZW50KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNvcmdBcnJheTtcbn07XG5cbmxldCBwcm9kdWN0SW5mb0xvb2t1cEluUHJvZ3Jlc3MgPSBmYWxzZTtcblxuZXhwb3J0IGNvbnN0IHByb2R1Y3RJbmZvTG9va3VwID0gYXN5bmMgKHNrdWxpc3QpID0+IHtcbiAgaWYgKCFza3VsaXN0IHx8IHNrdWxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgbG9nZ2VyLmZhaWxlZChcInByb2R1Y3RJbmZvTG9va3VwOiBObyBza3UgZm91bmRcIik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAocHJvZHVjdEluZm9Mb29rdXBJblByb2dyZXNzKSB7XG4gICAgbG9nZ2VyLmZhaWxlZChcInByb2R1Y3RJbmZvTG9va3VwOiBBbHJlYWR5IGluIHByb2dyZXNzXCIpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbG9nZ2VyLmxvZyhcInByb2R1Y3RJbmZvTG9va3VwOiBTdGFydGluZyBwcm9kdWN0IGluZm8gbG9va3VwOiBcIitza3VsaXN0KTtcblxuICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgaGVhZGVycy5hcHBlbmQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuXG4gIHByb2R1Y3RJbmZvTG9va3VwSW5Qcm9ncmVzcyA9IHRydWU7XG4gIGxldCBwcm9kdWN0SW5mbyA9IG51bGw7XG4gIHRyeSB7XG4gICAgcHJvZHVjdEluZm8gPSBhd2FpdCBmZXRjaChMT09LVVBfQVBJX1VSTCwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHNrdWxpc3QpLFxuICAgICAgaGVhZGVycyxcbiAgICAgIG1vZGU6IFwiY29yc1wiLFxuICAgIH0pO1xuICAgIGlmIChwcm9kdWN0SW5mby5vaykge1xuICAgICAgcHJvZHVjdEluZm8gPSBhd2FpdCBwcm9kdWN0SW5mby5qc29uKCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyLndhcm4oXCJwcm9kdWN0SW5mb0xvb2t1cDogZmV0Y2ggJiBwYXJzZSBmYWlsZWRcIik7XG4gIH1cblxuICBwcm9kdWN0SW5mb0xvb2t1cEluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgcmV0dXJuIHByb2R1Y3RJbmZvO1xufTtcblxuIiwiLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuaW1wb3J0IHthZGRUb0JlYWdsZUluZm9MYXllcn0gZnJvbSBcIi4vQmVhZ2xlSW5mb0xheWVyXCI7XG5pbXBvcnQge1xuICBDT09LSUVfTkFNRSxcbiAgTE9DQUxfU1RPUkFHRV9LRVlTLFxuICBTRVNTSU9OX1NUT1JBR0VfS0VZUyxcbiAgU1RZTEVTSEVFVF9MT0NBVElPTixcbiAgVFJFQVRNRU5UU19MT0NBVElPTixcbiAgVFJFQVRNRU5UX1dFSUdIVFNfTE9DQVRJT04sXG59IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi9sb2dnZXJcIjtcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIkJlYWdsZSBVdGlsc1wiKTtcbmNvbnN0IG1vbnRocyA9IHtcbiAgXCJvY2FrXCI6IDAsXG4gIFwixZ91YmF0XCI6IDEsXG4gIFwibWFydFwiOiAyLFxuICBcIm5pc2FuXCI6IDMsXG4gIFwibWF5xLFzXCI6IDQsXG4gIFwiaGF6aXJhblwiOiA1LFxuICBcInRlbW11elwiOiA2LFxuICBcImHEn3VzdG9zXCI6IDcsXG4gIFwiZXlsw7xsXCI6IDgsXG4gIFwiZWtpbVwiOiA5LFxuICBcImthc8SxbVwiOiAxMCxcbiAgXCJhcmFsxLFrXCI6IDExLFxufTtcbmNvbnN0IHJhbmRvbVVVSURGYWxsYmFjayA9ICgpID0+IHtcbiAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIxMTc1MjMvMjgwMDIxOFxuICAvLyBMSUNFTlNFOiBodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnktc2EvNC4wL2xlZ2FsY29kZVxuICBjcnlwdG8ucmFuZG9tVVVJRCA9IGZ1bmN0aW9uIHJhbmRvbVVVSUQoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIFsxZTddICsgLTFlMyArIC00ZTMgKyAtOGUzICsgLTFlMTEpLnJlcGxhY2UoL1swMThdL2csXG4gICAgICAgIChjKSA9PiAoYyBeIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoMSkpWzBdICYgMTUgPj4gYyAvIDQpLnRvU3RyaW5nKDE2KSxcbiAgICApO1xuICB9O1xufTtcblxuaWYgKCFjcnlwdG8gfHwgdHlwZW9mIGNyeXB0by5yYW5kb21VVUlEICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgcmFuZG9tVVVJREZhbGxiYWNrKCk7XG59XG5cbmV4cG9ydCBjb25zdCByZW1vdmVEb2N1bWVudEhpZGUgPSAoKSA9PiB7XG4gIHdpbmRvdy50b3AuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJuZXh0RGF5LWhpZGVcIik7XG59O1xuXG5leHBvcnQgY29uc3QgZmV0Y2hUcmVhdG1lbnRzID0gYXN5bmMgKCkgPT4ge1xuICBsb2dnZXIubG9nKFwiRmV0Y2hpbmcgdHJlYXRtZW50c1wiKTtcbiAgY29uc3QgdHJlYXRtZW50cyA9IGF3YWl0IGZldGNoKFRSRUFUTUVOVFNfTE9DQVRJT04pO1xuICBjb25zdCBqc29uVHJlYXRtZW50ID0gYXdhaXQgdHJlYXRtZW50cy5qc29uKCk7XG4gIHJldHVybiBqc29uVHJlYXRtZW50O1xufTtcblxuZXhwb3J0IGNvbnN0IGZldGNoVHJlYXRtZW50V2VpZ2h0cyA9IGFzeW5jICgpID0+IHtcbiAgbG9nZ2VyLmxvZyhcIkZldGNoaW5nIHRyZWF0bWVudCB3ZWlnaHRzXCIpO1xuICBjb25zdCB0cmVhdG1lbnRXZWlnaHRzID0gYXdhaXQgZmV0Y2goVFJFQVRNRU5UX1dFSUdIVFNfTE9DQVRJT04pO1xuICBjb25zdCBqc29uVHJlYXRtZW50V2VpZ2h0cyA9IGF3YWl0IHRyZWF0bWVudFdlaWdodHMuanNvbigpO1xuICByZXR1cm4ganNvblRyZWF0bWVudFdlaWdodHM7XG59O1xuXG5leHBvcnQgY29uc3QgZXh0cmFjdENvb2tpZUlkZW50aWZpZXIgPSAoY29va2llU3RyaW5nLCBjb29raWVOYW1lKSA9PiB7XG4gIGlmICghY29va2llU3RyaW5nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBwYXJzZWQgPSBjb29raWVTdHJpbmdcbiAgICAgIC5zcGxpdChcIjtcIilcbiAgICAgIC5tYXAoKHYpID0+IHYuc3BsaXQoXCI9XCIpKVxuICAgICAgLnJlZHVjZSgoYWNjLCB2KSA9PiB7XG4gICAgICAgIGlmICh2WzBdICYmIHZbMV0pIHtcbiAgICAgICAgICBhY2NbZGVjb2RlVVJJQ29tcG9uZW50KHZbMF0udHJpbSgpKV0gPSBkZWNvZGVVUklDb21wb25lbnQodlsxXS50cmltKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7fSk7XG5cbiAgbGV0IGlkZW50aWZpZXIgPSBwYXJzZWRbY29va2llTmFtZV07XG4gIGlmICghaWRlbnRpZmllcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChjb29raWVOYW1lID09PSBcIl9nYVwiKSB7XG4gICAgLy8gZXh0cmFjdCB1bmlxdWUgaWRlbnRpZmllciBmcm9tIEdBIGNvb2tpZVxuICAgIGNvbnN0IGlkZW50aWZpZXJJbmRleCA9IDI7XG4gICAgaWRlbnRpZmllciA9IGlkZW50aWZpZXIuc3BsaXQoXCIuXCIpW2lkZW50aWZpZXJJbmRleF07XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXI7XG59O1xuXG5leHBvcnQgY29uc3QgZGV0ZXJtaW5lUGN0ID0gYXN5bmMgKGlkZW50aWZpZXIpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzdWJzdHJpbmdTdGFydFBvc2l0aW9uID0gOTtcbiAgICBjb25zdCBzdWJzdHJpbmdMZW5ndGggPSA4O1xuICAgIGNvbnN0IHN1YnN0cmluZ0VuZFBvc2l0aW9uID0gc3Vic3RyaW5nU3RhcnRQb3NpdGlvbiArIHN1YnN0cmluZ0xlbmd0aDtcbiAgICBpZiAoIWlkZW50aWZpZXIpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgY29uc3QgaGFzaFN0cmluZyA9IGF3YWl0IGNyZWF0ZUhhc2hTdHJpbmcoaWRlbnRpZmllcik7XG4gICAgLy8gTWFwIHRoZSBjb29raWUgaGFzaCB0byBhIG51bWJlciBiZXR3ZWVuIDAgLT4gOTksXG4gICAgLy8gdGhpcyBudW1iZXIgaXMgdGhlIG9uUmF0aW9uXG4gICAgY29uc3QgaGFzaE51bWJlciA9IHBhcnNlSW50KGhhc2hTdHJpbmcuc3Vic3RyaW5nKHN1YnN0cmluZ1N0YXJ0UG9zaXRpb24sIHN1YnN0cmluZ0VuZFBvc2l0aW9uKSwgMTYpO1xuXG4gICAgcmV0dXJuIGhhc2hOdW1iZXIgJSAxMDA7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZ2dlci5mYWlsZWQoXCJDb3VsZCBub3QgbWFwIGlkIHRvIGhhc2ggc3RyaW5nXCIsIGVyci5tZXNzYWdlKTtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVIYXNoU3RyaW5nID0gYXN5bmMgKHN0cmluZ1RvSGFzaCkgPT4ge1xuICAvLyBlbmNvZGUgc3RyaW5nIHRvIGFuIGFycmF5IG9mIDgtYml0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzXG4gIGNvbnN0IGVuY29kZWQgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyaW5nVG9IYXNoKTtcblxuICAvLyBoYXNoIHRoZSBlbmNvZGVkIGNvb2tpZSBpbnRvIGEgYnVmZmVyXG4gIGNvbnN0IGhhc2hCdWZmZXIgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdChcIlNIQS0xXCIsIGVuY29kZWQpO1xuXG4gIC8vIGNvbnZlcnQgYnVmZmVyIHRvIGJ5dGUgYXJyYXlcbiAgY29uc3QgaGFzaEFycmF5ID0gQXJyYXkuZnJvbShuZXcgVWludDhBcnJheShoYXNoQnVmZmVyKSk7XG5cbiAgLy8gY29udmVydCBieXRlcyB0byBoZXggc3RyaW5nIGFuZCByZXR1cm5cbiAgcmV0dXJuIGhhc2hBcnJheS5tYXAoKGIpID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSkuam9pbihcIlwiKTtcbn07XG5cbmV4cG9ydCBjb25zdCBleGl0U2Nyb2xsTGlzdGVuZXIgPSAoY2FsbEJhY2spID0+IHtcbiAgY29uc3QgbG9vcCA9ICgpID0+IHtcbiAgICBjb25zdCBzY3JvbGxUb3AgPSB3aW5kb3cudG9wLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XG4gICAgaWYgKGxhc3RTY3JvbGxUb3AgLSA0MDAgPiBzY3JvbGxUb3ApIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoZXhpdFNjcm9sbEludGVydmFsKTtcbiAgICAgIGNhbGxCYWNrKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3RTY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgfVxuICB9O1xuXG4gIGxldCBsYXN0U2Nyb2xsVG9wID0gd2luZG93LnRvcC5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICBjb25zdCBleGl0U2Nyb2xsSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChsb29wLCA1MDApO1xufTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGFwcGx5IHRyZWF0bWVudHMgdG8gdGhlIHBhZ2Ugb24gc3BlY2lmaWMgbWVkaWEgdHlwZS5cbiAqIEBwYXJhbSB7TWVkaWFRdWVyeUxpc3R9IG1lZGlhUXVlcnlDb25kaXRpb24gd2luZG93Lm1hdGNoTWVkaWEoXCIobWF4LXdpZHRoOiA1MDBweClcIilcbiAqIEBwYXJhbSB7RE9NTm9kZUxpc3QgfSBlbGVtZW50cyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiZGl2LnByb2R1Y3RfaW5mb1wiKVxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlQ2hhbmdlc01hcCB7IFwibWFyZ2luLXRvcFwiIDogXCIxMHJlbVwifVxuICogQHJldHVybnNcbiAqL1xuXG5leHBvcnQgY29uc3Qgc3R5bGVBcHBsaWNhdG9yID0gKGVsZW1lbnRzLCBzdHlsZUNoYW5nZXNNYXApID0+IHtcbiAgbG9nZ2VyLmxvZyhcIkFwcGx5aW5nIHN0eWxlIGNoYW5nZXNcIiwgc3R5bGVDaGFuZ2VzTWFwLCBcInRvIGVsZW1lbnRzXCIsIGVsZW1lbnRzKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzdHlsZUNoYW5nZXNNYXApKSB7XG4gICAgICBlbGVtZW50LnN0eWxlW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpbmplY3RTdHlsZVNoZWV0ID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCBzdHlsZVNoZWV0ID0gd2luZG93LnRvcC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiAgc3R5bGVTaGVldC5yZWwgPSBcInN0eWxlc2hlZXRcIjtcbiAgc3R5bGVTaGVldC50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuICBzdHlsZVNoZWV0LmhyZWYgPSBTVFlMRVNIRUVUX0xPQ0FUSU9OO1xuICB3aW5kb3cudG9wLmRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVTaGVldCk7XG59O1xuXG5leHBvcnQgY29uc3QgcHJlcGFyZUFjdGlvbnMgPSBhc3luYyAoaWRlbnRpZmllciwgYWN0aW9uc1RvUHJlcGFyZSwgYnVzaW5lc3NSdWxlSWQpID0+IHtcbiAgY29uc3QgYWN0aW9ucyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYWN0aW9uc1RvUHJlcGFyZSkpO1xuICBsZXQgdmFyaWFudCA9IG51bGw7XG4gIGZvciAoY29uc3QgYWN0aW9uIG9mIGFjdGlvbnMpIHtcbiAgICBjb25zdCB7YnVzaW5lc3NSdWxlVHJhbnNmb3JtYXRpb25zLCB2YXJpYW50c30gPSBhY3Rpb247XG4gICAgaWYgKCFidXNpbmVzc1J1bGVUcmFuc2Zvcm1hdGlvbnMgJiYgIXZhcmlhbnRzKSBjb250aW51ZTtcbiAgICBpZiAoYnVzaW5lc3NSdWxlSWQgJiYgYnVzaW5lc3NSdWxlVHJhbnNmb3JtYXRpb25zKSB7XG4gICAgICBmb3IgKGNvbnN0IGJ1c2luZXNzVHJhbnNmb3JtYXRpb24gb2YgYnVzaW5lc3NSdWxlVHJhbnNmb3JtYXRpb25zKSB7XG4gICAgICAgIGlmIChidXNpbmVzc1RyYW5zZm9ybWF0aW9uLmlkID09PSBidXNpbmVzc1J1bGVJZCkge1xuICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGJ1c2luZXNzVHJhbnNmb3JtYXRpb24pIHtcbiAgICAgICAgICAgIGlmIChrZXkgIT09IFwiaWRcIikge1xuICAgICAgICAgICAgICBhY3Rpb25ba2V5XSA9IGJ1c2luZXNzVHJhbnNmb3JtYXRpb25ba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHZhcmlhbnRzKSB7XG4gICAgICBmb3IgKGNvbnN0IHZhcmlhbnRLZXkgb2YgT2JqZWN0LmtleXModmFyaWFudHMpKSB7XG4gICAgICAgIGNvbnN0IHJhbmRvbVBjdCA9IGF3YWl0IGRldGVybWluZVBjdChpZGVudGlmaWVyICsgdmFyaWFudEtleSk7XG4gICAgICAgIGlmIChyYW5kb21QY3QgPCBhY3Rpb24udmFyaWFudHNbdmFyaWFudEtleV0ud2VpZ2h0KSB7XG4gICAgICAgICAgdmFyaWFudCA9IHZhcmlhbnRLZXk7XG4gICAgICAgICAgaWYgKGJ1c2luZXNzUnVsZUlkICYmIHZhcmlhbnRzW3ZhcmlhbnRLZXldLmJ1c2luZXNzUnVsZVRyYW5zZm9ybWF0aW9ucykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBidXNpbmVzc1RyYW5zZm9ybWF0aW9uIG9mIHZhcmlhbnRzW3ZhcmlhbnRLZXldLmJ1c2luZXNzUnVsZVRyYW5zZm9ybWF0aW9ucykge1xuICAgICAgICAgICAgICBpZiAoYnVzaW5lc3NUcmFuc2Zvcm1hdGlvbi5pZCA9PSBidXNpbmVzc1J1bGVJZCkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGJ1c2luZXNzVHJhbnNmb3JtYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSBcImlkXCIpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgYWN0aW9uW2tleV0gPSBidXNpbmVzc1RyYW5zZm9ybWF0aW9uW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHZhcmlhbnRzW3ZhcmlhbnRLZXldKSB7XG4gICAgICAgICAgICAgIGlmIChrZXkgIT09IFwid2VpZ2h0XCIgJiYga2V5ICE9PSBcImJ1c2luZXNzUnVsZVRyYW5zZm9ybWF0aW9uc1wiKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uW2tleV0gPSB2YXJpYW50c1t2YXJpYW50S2V5XVtrZXldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBbYWN0aW9ucywgdmFyaWFudF07XG59O1xuXG5leHBvcnQgY29uc3QgaW5pdGlhdGVTZXNzaW9uU3RvcmFnZXMgPSAoKSA9PiB7XG4gIGNvbnN0IHtQQUdFX1ZJRVdTLCBQT1BVUF9ESVNQTEFZX0ZMQUcsIFNFU1NJT05fSUQsIFNFU1NJT05fVElNRVNUQU1QLCBTRVNTSU9OX0hJU1RPUll9ID0gU0VTU0lPTl9TVE9SQUdFX0tFWVM7XG5cbiAgY29uc3QgcGFnZVZpZXdzID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQQUdFX1ZJRVdTKTtcbiAgY29uc3QgcG9wdXBEaXNwbGF5RmxhZyA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oUE9QVVBfRElTUExBWV9GTEFHKTtcbiAgY29uc3Qgc2Vzc2lvbklkID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShTRVNTSU9OX0lEKTtcbiAgY29uc3Qgc2Vzc2lvblRpbWVzdGFtcCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oU0VTU0lPTl9USU1FU1RBTVApO1xuICBjb25zdCBzZXNzaW9uSGlzdG9yeSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oU0VTU0lPTl9ISVNUT1JZKTtcblxuICBpZiAoIXBhZ2VWaWV3cykge1xuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oUEFHRV9WSUVXUywgMSk7XG4gIH0gZWxzZSB7XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQQUdFX1ZJRVdTLCBwYXJzZUludChwYWdlVmlld3MpICsgMSk7XG4gIH1cbiAgaWYgKHBvcHVwRGlzcGxheUZsYWcgPT09IG51bGwpIHtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBPUFVQX0RJU1BMQVlfRkxBRywgMCk7XG4gIH1cbiAgaWYgKCFzZXNzaW9uSWQpIHtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFNFU1NJT05fSUQsIGNyeXB0by5yYW5kb21VVUlEKCkpO1xuICB9XG4gIGlmICghc2Vzc2lvblRpbWVzdGFtcCkge1xuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oU0VTU0lPTl9USU1FU1RBTVAsIERhdGUubm93KCkpO1xuICB9XG4gIGlmICghc2Vzc2lvbkhpc3RvcnkpIHtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFNFU1NJT05fSElTVE9SWSwgW3dpbmRvdy5sb2NhdGlvbi5wYXRobmFtZV0pO1xuICB9IGVsc2Uge1xuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oU0VTU0lPTl9ISVNUT1JZLCBbd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLCBzZXNzaW9uSGlzdG9yeV0pO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgY29uZGl0aW9uQ2hlY2tlciA9IChydW5UaW1lVmFsdWUsIGNvbmRpdGlvbiwgdmFsdWUpID0+IHtcbiAgaWYgKGNvbmRpdGlvbiA9PT0gXCJub3RFeGlzdFwiKSB7XG4gICAgaWYgKCFydW5UaW1lVmFsdWUpIHtcbiAgICAgIGxvZ2dlci5zdWNjZXNzKFwiY29uZGl0aW9uQ2hlY2tlcjogLXNhdGlzZmllZC0gdGFyZ2V0IGRvZXMgbm90IGV4aXN0XCIpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGxvZ2dlci5mYWlsZWQoXCJjb25kaXRpb25DaGVja2VyOiAtbm90IHNhdGlzZmllZC0gdGFyZ2V0IGRvZXMgZXhpc3RcIik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChydW5UaW1lVmFsdWUgPT09IG51bGwgfHxcbiAgICBydW5UaW1lVmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgIGNvbmRpdGlvbiA9PT0gbnVsbCB8fFxuICAgIGNvbmRpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbG9nZ2VyLmZhaWxlZChcImNvbmRpdGlvbkNoZWNrZXI6IHJ1blRpbWVWYWx1ZSBvciBjb25kaXRpb24gaXMgbm90IGRlZmluZWRcIik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN3aXRjaCAoY29uZGl0aW9uKSB7XG4gICAgY2FzZSBcImV4aXN0XCI6XG4gICAgICBpZiAocnVuVGltZVZhbHVlKSB7XG4gICAgICAgIGxvZ2dlci5zdWNjZXNzKFwiY29uZGl0aW9uQ2hlY2tlcjogLXNhdGlzZmllZC0gdGFyZ2V0IGRvZXMgZXhpc3RcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmZhaWxlZChcImNvbmRpdGlvbkNoZWNrZXI6IC1ub3Qgc2F0aXNmaWVkLSB0YXJnZXQgZG9lcyBub3QgZXhpc3RcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImluY2x1ZGVzXCI6XG4gICAgY2FzZSBcImNvbnRhaW5zXCI6XG4gICAgICBpZiAocnVuVGltZVZhbHVlLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICBsb2dnZXIuc3VjY2VzcyhcImNvbmRpdGlvbkNoZWNrZXI6IC1zYXRpc2ZpZWQtIHRhcmdldCBjb250YWlucyB2YWx1ZVwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBsb2dnZXIuZmFpbGVkKFwiY29uZGl0aW9uQ2hlY2tlcjogLW5vdCBzYXRpc2ZpZWQtIHRhcmdldCBkb2VzIG5vdCBjb250YWluIHZhbHVlXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhc2UgXCJub3RJbmNsdWRlc1wiOlxuICAgIGNhc2UgXCJub3RDb250YWluc1wiOlxuICAgICAgaWYgKCFydW5UaW1lVmFsdWUuaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgIGxvZ2dlci5zdWNjZXNzKFwiY29uZGl0aW9uQ2hlY2tlcjogLXNhdGlzZmllZC0gdGFyZ2V0IGRvZXMgbm90IGNvbnRhaW4gdmFsdWVcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmZhaWxlZChcImNvbmRpdGlvbkNoZWNrZXI6IC1ub3Qgc2F0aXNmaWVkLSB0YXJnZXQgY29udGFpbnMgdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImVxdWFsXCI6XG4gICAgICBpZiAocnVuVGltZVZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICBsb2dnZXIuc3VjY2VzcyhcImNvbmRpdGlvbkNoZWNrZXI6IC1zYXRpc2ZpZWQtIHRhcmdldCBlcXVhbHMgdmFsdWVcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmZhaWxlZChcImNvbmRpdGlvbkNoZWNrZXI6IC1ub3Qgc2F0aXNmaWVkLSB0YXJnZXQgZG9lcyBub3QgZXF1YWwgdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcIm5vdEVxdWFsXCI6XG4gICAgICBpZiAocnVuVGltZVZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICBsb2dnZXIuc3VjY2VzcyhcImNvbmRpdGlvbkNoZWNrZXI6IC1zYXRpc2ZpZWQtIHRhcmdldCBkb2VzIG5vdCBlcXVhbCB2YWx1ZVwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBsb2dnZXIuZmFpbGVkKFwiY29uZGl0aW9uQ2hlY2tlcjogLW5vdCBzYXRpc2ZpZWQtIHRhcmdldCBlcXVhbHMgdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImdyZWF0ZXJUaGFuXCI6XG4gICAgICBpZiAocnVuVGltZVZhbHVlID4gdmFsdWUpIHtcbiAgICAgICAgbG9nZ2VyLnN1Y2Nlc3MoXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgaXMgZ3JlYXRlciB0aGFuIHZhbHVlXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5mYWlsZWQoXCJjb25kaXRpb25DaGVja2VyOiAtbm90IHNhdGlzZmllZC0gdGFyZ2V0IGlzIG5vdCBncmVhdGVyIHRoYW4gdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImxlc3NUaGFuXCI6XG4gICAgICBpZiAocnVuVGltZVZhbHVlIDwgdmFsdWUpIHtcbiAgICAgICAgbG9nZ2VyLnN1Y2Nlc3MoXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgaXMgbGVzcyB0aGFuIHZhbHVlXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5mYWlsZWQoXCJjb25kaXRpb25DaGVja2VyOiAtbm90IHNhdGlzZmllZC0gdGFyZ2V0IGlzIG5vdCBsZXNzIHRoYW4gdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImdyZWF0ZXJFcXVhbHNcIjpcbiAgICAgIGlmIChydW5UaW1lVmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbG9nZ2VyLnN1Y2Nlc3MoXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgaXMgZ3JlYXRlciBvciBlcXVhbCB0aGFuIHZhbHVlXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5mYWlsZWQoXCJjb25kaXRpb25DaGVja2VyOiAtbm90IHNhdGlzZmllZC0gdGFyZ2V0IGlzIG5vdCBncmVhdGVyIG9yIGVxdWFsIHRoYW4gdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImxlc3NFcXVhbHNcIjpcbiAgICAgIGlmIChydW5UaW1lVmFsdWUgPD0gdmFsdWUpIHtcbiAgICAgICAgbG9nZ2VyLnN1Y2Nlc3MoXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgaXMgbGVzcyBvciBlcXVhbCB0aGFuIHZhbHVlXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5mYWlsZWQoXCJjb25kaXRpb25DaGVja2VyOiAtbm90IHNhdGlzZmllZC0gdGFyZ2V0IGlzIG5vdCBsZXNzIG9yIGVxdWFsIHRoYW4gdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImJldHdlZW5cIjoge1xuICAgICAgbGV0IFttaW4sIG1heF0gPSB2YWx1ZS5zcGxpdChcIixcIik7XG4gICAgICBtaW4gPSBwYXJzZUludChtaW4pO1xuICAgICAgbWF4ID0gcGFyc2VJbnQobWF4KTtcbiAgICAgIGlmIChydW5UaW1lVmFsdWUgPj0gbWluICYmIHJ1blRpbWVWYWx1ZSA8PSBtYXgpIHtcbiAgICAgICAgbG9nZ2VyLnN1Y2Nlc3MoXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgaXMgYmV0d2VlbiBtaW4gYW5kIG1heFwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBsb2dnZXIuZmFpbGVkKFwiY29uZGl0aW9uQ2hlY2tlcjogLW5vdCBzYXRpc2ZpZWQtIHRhcmdldCBpcyBub3QgYmV0d2VlbiBtaW4gYW5kIG1heFwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY2FzZSBcInJlZ2V4XCI6IHtcbiAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cCh2YWx1ZSwgXCJpXCIpO1xuICAgICAgcmV0dXJuIHJlZ2V4LnRlc3QocnVuVGltZVZhbHVlKTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIGxvZ2dlci5mYWlsZWQoXCJjb25kaXRpb25DaGVja2VyOiBjb25kaXRpb24gaXMgbm90IGRlZmluZWQgXCIsIGNvbmRpdGlvbik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBnZXREZWJ1Z01vZGUgPSAob29zUmVhc29uKSA9PiB7XG4gIGNvbnN0IHtERUJVR19NT0RFLCBPVVRfT0ZfU0NPUEV9ID0gTE9DQUxfU1RPUkFHRV9LRVlTO1xuICBjb25zdCBxdWVyeVN0cmluZyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XG4gIGlmIChxdWVyeVN0cmluZy5pbmNsdWRlcyhcIm5kX2RlYnVnPTFcIikpIHtcbiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oREVCVUdfTU9ERSwgMSk7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKE9VVF9PRl9TQ09QRSwgb29zUmVhc29uKTtcbiAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcImRibVwiLCBcIm9uXCIpO1xuICAgIHJldHVybiAxO1xuICB9XG4gIGlmIChxdWVyeVN0cmluZy5pbmNsdWRlcyhcIm5kX2RlYnVnPTJcIikpIHtcbiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oREVCVUdfTU9ERSwgMik7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKE9VVF9PRl9TQ09QRSwgb29zUmVhc29uKTtcbiAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcImRibVwiLCBcIm9uXCIpO1xuICAgIHJldHVybiAyO1xuICB9XG4gIGlmIChxdWVyeVN0cmluZy5pbmNsdWRlcyhcIm5kX2RlYnVnPTBcIikpIHtcbiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oREVCVUdfTU9ERSk7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKE9VVF9PRl9TQ09QRSwgb29zUmVhc29uKTtcbiAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcImRibVwiLCBcIm9mZlwiKTtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCBjdXJyZW50ID0gcGFyc2VJbnQod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKERFQlVHX01PREUpKTtcbiAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJkYm1cIiwgKGN1cnJlbnQgPyBcIm9uXCIgOiBcIm9mZlwiKSk7XG4gIHJldHVybiAoY3VycmVudCB8fCAwKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRJZGVudGlmaWVyID0gYXN5bmMgKGNvb2tpZU5hbWUgPSBDT09LSUVfTkFNRSkgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBsZXQgaWQgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oTE9DQUxfU1RPUkFHRV9LRVlTLlVTRVJfSUQpO1xuICAgIGlmIChpZCkgcmVzb2x2ZShpZCk7XG4gICAgaWQgPSBleHRyYWN0Q29va2llSWRlbnRpZmllcih3aW5kb3cudG9wLmRvY3VtZW50LmNvb2tpZSwgY29va2llTmFtZSk7XG4gICAgaWYgKGlkKSB7XG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oTE9DQUxfU1RPUkFHRV9LRVlTLlVTRVJfSUQsIGlkKTtcbiAgICAgIHJlc29sdmUoaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBleHRyYWN0SWRlbnRpZmllckludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBpZCA9IGV4dHJhY3RDb29raWVJZGVudGlmaWVyKHdpbmRvdy50b3AuZG9jdW1lbnQuY29va2llLCBjb29raWVOYW1lKTtcbiAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChleHRyYWN0SWRlbnRpZmllckludGVydmFsKTtcbiAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oTE9DQUxfU1RPUkFHRV9LRVlTLlVTRVJfSUQsIGlkKTtcbiAgICAgICAgICByZXNvbHZlKGlkKTtcbiAgICAgICAgfVxuICAgICAgfSwgMTApO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoZXh0cmFjdElkZW50aWZpZXJJbnRlcnZhbCk7XG4gICAgICAgIGxvZ2dlci5mYWlsZWQoXCJDb3VsZCBub3QgZXh0cmFjdCBjb29raWUgaWRlbnRpZmllclwiKTtcbiAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgIH0sIDEwMDApO1xuICAgIH1cbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgZGVsYXkgPSAobXMpID0+IG5ldyBQcm9taXNlKChyZXMpID0+IHNldFRpbWVvdXQocmVzLCBtcykpO1xuXG5leHBvcnQgY29uc3QgZm9ybWF0RGVsaXZlcnlEYXRlID0gKGRhdGUpID0+IHtcbiAgaWYgKCFkYXRlIHx8IHR5cGVvZiBkYXRlICE9PSBcInN0cmluZ1wiKSByZXR1cm4gZGF0ZTtcblxuICBjb25zdCByZXN1bHQgPSB7XG4gICAgc3RhcnRNb250aEluZGV4OiB1bmRlZmluZWQsXG4gICAgZW5kTW9udGhJbmRleDogdW5kZWZpbmVkLFxuICAgIHN0YXJ0RGF5OiB1bmRlZmluZWQsXG4gICAgZW5kRGF5OiB1bmRlZmluZWQsXG4gIH07XG5cbiAgbGV0IG1hdGNoID0gZGF0ZS5tYXRjaChcIihbXFxcXGRdKyktKFtcXFxcZF0rKVxcXFxzPyhbXFxcXHfEscO8xJ/Fn8O2w6fEsMOWw4fEnsOcxZ5dKylcIik7XG4gIGlmIChtYXRjaCAmJiBtYXRjaC5sZW5ndGggPT09IDQpIHtcbiAgICByZXN1bHQuc3RhcnREYXkgPSBwYXJzZUludChtYXRjaFsxXSk7XG4gICAgcmVzdWx0LmVuZERheSA9IHBhcnNlSW50KG1hdGNoWzJdKTtcbiAgICByZXN1bHQuc3RhcnRNb250aEluZGV4ID0gbW9udGhzW21hdGNoWzNdLnRvTG93ZXJDYXNlKCldO1xuICAgIHJlc3VsdC5lbmRNb250aEluZGV4ID0gcmVzdWx0LnN0YXJ0TW9udGhJbmRleDtcbiAgfSBlbHNlIHtcbiAgICBtYXRjaCA9IGRhdGUubWF0Y2goXCIoW1xcXFxkXSspXFxcXHMrKFtcXFxcd8Sxw7zEn8Wfw7bDp8Sww5bDh8Sew5zFnl0rKS0oW1xcXFxkXSspXFxcXHMrKFtcXFxcd8Sxw7zEn8Wfw7bDp8Sww5bDh8Sew5zFnl0rKVwiKTtcbiAgICBpZiAoIW1hdGNoIHx8IG1hdGNoLmxlbmd0aCAhPT0gNSkgcmV0dXJuIGRhdGU7XG5cbiAgICByZXN1bHQuc3RhcnREYXkgPSBwYXJzZUludChtYXRjaFsxXSk7XG4gICAgcmVzdWx0LnN0YXJ0TW9udGhJbmRleCA9IG1vbnRoc1ttYXRjaFsyXS50b0xvd2VyQ2FzZSgpXTtcbiAgICByZXN1bHQuZW5kRGF5ID0gcGFyc2VJbnQobWF0Y2hbM10pO1xuICAgIHJlc3VsdC5lbmRNb250aEluZGV4ID0gbW9udGhzW21hdGNoWzRdLnRvTG93ZXJDYXNlKCldO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG5cbiAgICBpZiAoIXJlc3VsdC5zdGFydE1vbnRoSW5kZXggfHwgIXJlc3VsdC5lbmRNb250aEluZGV4KSByZXR1cm4gZGF0ZTtcblxuICAgIGNvbnN0IHN0YXJ0WWVhciA9IHJlc3VsdC5zdGFydE1vbnRoSW5kZXggPj0gdG9kYXkuZ2V0TW9udGgoKSA/IHRvZGF5LmdldEZ1bGxZZWFyKCkgOiB0b2RheS5nZXRGdWxsWWVhcigpICsgMTtcbiAgICBjb25zdCBlbmRZZWFyID0gcmVzdWx0LmVuZE1vbnRoSW5kZXggPj0gdG9kYXkuZ2V0TW9udGgoKSA/IHRvZGF5LmdldEZ1bGxZZWFyKCkgOiB0b2RheS5nZXRGdWxsWWVhcigpICsgMTtcblxuICAgIGNvbnN0IGVzdGltYXRlZFN0YXJ0ID0gbmV3IERhdGUoc3RhcnRZZWFyLCByZXN1bHQuc3RhcnRNb250aEluZGV4LCByZXN1bHQuc3RhcnREYXkpO1xuICAgIGNvbnN0IGVzdGltYXRlZEVuZCA9IG5ldyBEYXRlKGVuZFllYXIsIHJlc3VsdC5lbmRNb250aEluZGV4LCByZXN1bHQuZW5kRGF5KTtcblxuXG4gICAgY29uc3Qgc3RhcnREaWZmT3ZlckRheXMgPSBNYXRoLmNlaWwoTWF0aC5hYnMoZXN0aW1hdGVkU3RhcnQgLSB0b2RheSkgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpO1xuICAgIGNvbnN0IGVuZERpZmZPdmVyRGF5cyA9IE1hdGguY2VpbChNYXRoLmFicyhlc3RpbWF0ZWRFbmQgLSB0b2RheSkgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpO1xuXG4gICAgY29uc3Qgc3RhcnREaWZmT3ZlcldlZWtzID0gc3RhcnREaWZmT3ZlckRheXMgPCA3ID8gMCA6IE1hdGguY2VpbChzdGFydERpZmZPdmVyRGF5cyAvIDcpO1xuICAgIGNvbnN0IGVuZERpZmZPdmVyV2Vla3MgPSBlbmREaWZmT3ZlckRheXMgPCA3ID8gMCA6IE1hdGguY2VpbChlbmREaWZmT3ZlckRheXMgLyA3KTtcblxuICAgIGlmIChzdGFydERpZmZPdmVyV2Vla3MgPT09IDAgJiYgZW5kRGlmZk92ZXJXZWVrcyA9PT0gMCkge1xuICAgICAgcmV0dXJuIGAke3N0YXJ0RGlmZk92ZXJEYXlzfSAtICR7ZW5kRGlmZk92ZXJEYXlzfSBHw7xuYDtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnREaWZmT3ZlcldlZWtzID09PSAwICYmIGVuZERpZmZPdmVyV2Vla3MgPj0gMSkge1xuICAgICAgcmV0dXJuIGAke3N0YXJ0RGlmZk92ZXJEYXlzfSBHw7xuIC0gJHtlbmREaWZmT3ZlcldlZWtzfSBIYWZ0YWA7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0RGlmZk92ZXJXZWVrcyA9PT0gZW5kRGlmZk92ZXJXZWVrcykge1xuICAgICAgcmV0dXJuIGAke3N0YXJ0RGlmZk92ZXJXZWVrc30gSGFmdGFgO1xuICAgIH1cblxuICAgIHJldHVybiBgJHtzdGFydERpZmZPdmVyV2Vla3N9IC0gJHtlbmREaWZmT3ZlcldlZWtzfSBIYWZ0YWA7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBkYXRlO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgaWRsZVRpbWVyID0gYXN5bmMgKHRpbWVPdXQsIGNhbGxCYWNrKSA9PiB7XG4gIGxldCBpZGxlVGltZW91dCA9IHNldFRpbWVvdXQoY2FsbEJhY2ssIHRpbWVPdXQpO1xuXG4gIHdpbmRvdy50b3AuZG9jdW1lbnQub250b3VjaHN0YXJ0ID0gcmVzZXRUaW1lcjtcblxuICBmdW5jdGlvbiByZXNldFRpbWVyKCkge1xuICAgIGNsZWFyVGltZW91dChpZGxlVGltZW91dCk7XG4gICAgaWRsZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGNhbGxCYWNrLCB0aW1lT3V0KTtcbiAgfVxufTtcbiIsImltcG9ydCB7TE9HX0FQSV9VUkx9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7Y3JlYXRlSGFzaFN0cmluZ30gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmltcG9ydCB7Z2V0RnJvbUJlYWdsZUluZm9MYXllcn0gZnJvbSBcIi4uL0JlYWdsZUluZm9MYXllclwiO1xuXG5leHBvcnQgY2xhc3MgTW9uaXRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubG9nZ2VyID0gbmV3IExvZ2dlcihcIkJlYWdsZSBNb25pdG9yXCIpO1xuICAgIHRoaXMubG9nZ2VyLmxvZyhcIkluaXRpYWxpemluZyBtb25pdG9yXCIpO1xuXG4gICAgdGhpcy5hcHBsaWVkVHJlYXRtZW50c0hhc2ggPSBudWxsO1xuICAgIHRoaXMuYXBwbGllZFRyZWF0bWVudHNDaGFuZ2VzID0gZmFsc2U7XG4gICAgdGhpcy5lbGlnaWJsZU5vdEFwcGxpZWRUcmVhdG1lbnRzSGFzaCA9IG51bGw7XG4gICAgdGhpcy5lbGlnaWJsZU5vdEFwcGxpZWRUcmVhdG1lbnRzQ2hhbmdlcyA9IGZhbHNlO1xuICAgIHRoaXMuaGVhZGVycyA9IHtcbiAgICAgIHR5cGU6IFwidGV4dC9wbGFpblwiLFxuICAgIH07XG4gICAgdGhpcy5pc0xvZ2dlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5pbml0aWFsaXplRXhpdEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cblxuICBhc3luYyBzZW5kTG9ncyhtZXNzYWdlID0gbnVsbCwgaXNFcnJvciA9IGZhbHNlKSB7XG4gICAgY29uc3Qge2xvZ2dlcn0gPSB0aGlzO1xuICAgIGxvZ2dlci5sb2coXCJTZW5kaW5nIGxvZ3NcIik7XG5cbiAgICBpZiAod2luZG93LnRvcC5kb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgIGxvZ2dlci5sb2coXCJEb2N1bWVudCByZWFkeSBzdGF0ZSBpcyBub3QgY29tcGxldGVcIik7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKCkgPT4ge1xuICAgICAgICBsb2dnZXIubG9nKFwiSW4gb25sb2FkIGV2ZW50XCIpO1xuICAgICAgICB0aGlzLmhhbmRsZVF1ZXVlTG9ncyh0aGlzLnBhY2thZ2VMb2dEYXRhKG1lc3NhZ2UpLCBpc0Vycm9yKTtcbiAgICAgIH0sIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhhbmRsZVF1ZXVlTG9ncyh0aGlzLnBhY2thZ2VMb2dEYXRhKG1lc3NhZ2UpLCBpc0Vycm9yKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBoYW5kbGVRdWV1ZUxvZ3MocmVxdWVzdEJsb2IsIGlzRXJyb3IgPSBmYWxzZSkge1xuICAgIGlmICghaXNFcnJvciAmJiB0aGlzLmlzTG9nZ2VkKSByZXR1cm47XG4gICAgY29uc3Qge2xvZ2dlcn0gPSB0aGlzO1xuXG4gICAgaWYgKCFyZXF1ZXN0QmxvYikge1xuICAgICAgbG9nZ2VyLmZhaWxlZChcIkNvdWxkIG5vdCBjcmVhdGUgcmVxdWVzdCBibG9iXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsb2dnZXIubG9nKFwiUmVxdWVzdCBibG9iIHRvIHNlbmQ6IFwiLCByZXF1ZXN0QmxvYik7XG4gICAgdGhpcy5xdWV1ZUxvZ3MocmVxdWVzdEJsb2IpO1xuXG4gICAgdGhpcy5pc0xvZ2dlZCA9IHRydWU7XG4gICAgY29uc3QgYXBwbGllZCA9IGF3YWl0IGdldEZyb21CZWFnbGVJbmZvTGF5ZXIoXCJhXCIpO1xuICAgIGNvbnN0IGVsaWdpYmxlTm90QXBwbGllZCA9IGF3YWl0IGdldEZyb21CZWFnbGVJbmZvTGF5ZXIoXCJlXCIpO1xuICAgIHRoaXMuYXBwbGllZFRyZWF0bWVudHNIYXNoID0gYXdhaXQgY3JlYXRlSGFzaFN0cmluZyhhcHBsaWVkKTtcbiAgICB0aGlzLmVsaWdpYmxlTm90QXBwbGllZFRyZWF0bWVudHNIYXNoID0gYXdhaXQgY3JlYXRlSGFzaFN0cmluZyhlbGlnaWJsZU5vdEFwcGxpZWQpO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlTGF0ZXN0Q2hhbmdlcygpIHtcbiAgICBjb25zdCBhcHBsaWVkID0gYXdhaXQgZ2V0RnJvbUJlYWdsZUluZm9MYXllcihcImFcIik7XG4gICAgY29uc3QgZWxpZ2libGVOb3RBcHBsaWVkID0gYXdhaXQgZ2V0RnJvbUJlYWdsZUluZm9MYXllcihcImVcIik7XG4gICAgY29uc3QgYXBwbGllZFRyZWF0bWVudHNDdXJyZW50SGFzaCA9IGF3YWl0IGNyZWF0ZUhhc2hTdHJpbmcoYXBwbGllZCk7XG4gICAgY29uc3QgZWxpZ2libGVOb3RBcHBsaWVkVHJlYXRtZW50c0N1cnJlbnRIYXNoID0gYXdhaXQgY3JlYXRlSGFzaFN0cmluZyhlbGlnaWJsZU5vdEFwcGxpZWQpO1xuXG4gICAgaWYgKGFwcGxpZWRUcmVhdG1lbnRzQ3VycmVudEhhc2ggIT09IHRoaXMuYXBwbGllZFRyZWF0bWVudHNIYXNoKSB7XG4gICAgICB0aGlzLmFwcGxpZWRUcmVhdG1lbnRzQ2hhbmdlcyA9IHRydWU7XG4gICAgICB0aGlzLmFwcGxpZWRUcmVhdG1lbnRzSGFzaCA9IGFwcGxpZWRUcmVhdG1lbnRzQ3VycmVudEhhc2g7XG4gICAgfVxuICAgIGlmIChlbGlnaWJsZU5vdEFwcGxpZWRUcmVhdG1lbnRzQ3VycmVudEhhc2ggIT09IHRoaXMuZWxpZ2libGVOb3RBcHBsaWVkVHJlYXRtZW50c0hhc2gpIHtcbiAgICAgIHRoaXMuZWxpZ2libGVOb3RBcHBsaWVkVHJlYXRtZW50c0NoYW5nZXMgPSB0cnVlO1xuICAgICAgdGhpcy5lbGlnaWJsZU5vdEFwcGxpZWRUcmVhdG1lbnRzSGFzaCA9IGVsaWdpYmxlTm90QXBwbGllZFRyZWF0bWVudHNDdXJyZW50SGFzaDtcbiAgICB9XG4gIH1cblxuICBwYWNrYWdlTG9nRGF0YShtZXNzYWdlID0gbnVsbCkge1xuICAgIGNvbnN0IHtoZWFkZXJzfSA9IHRoaXM7XG4gICAgY29uc3QgYm9keSA9IHt9O1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHdpbmRvdy5iZWFnbGVJbmZvTGF5ZXIpKSB7XG4gICAgICBpZiAoIWtleS5zdGFydHNXaXRoKFwiX1wiKSkgYm9keVtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIGJvZHkudCA9IERhdGUubm93KCk7XG4gICAgaWYgKG1lc3NhZ2UpIHtcbiAgICAgIGlmIChtZXNzYWdlLnN0YXJ0c1dpdGgoXCJvbi1leGl0XCIpKSB7XG4gICAgICAgIGJvZHkubSA9IG1lc3NhZ2UgKyAoT2JqZWN0LmtleXMoYm9keS5hIHx8IHt9KS5sZW5ndGggPiAwID8gXCJ0cmVhdG1lbnRzIGFwcGxpZWRcIiA6IFwibm8gdHJlYXRtZW50cyBhcHBsaWVkXCIpO1xuICAgICAgfSBlbHNlIGJvZHkubSA9IG1lc3NhZ2U7XG4gICAgfSBlbHNlIGlmIChPYmplY3Qua2V5cyhib2R5LmEgfHwge30pLmxlbmd0aCA+IDApIHtcbiAgICAgIGJvZHkubSA9IFwiVHJlYXRtZW50cyBhcHBsaWVkXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvZHkubSA9IFwiTm8gdHJlYXRtZW50cyBhcHBsaWVkXCI7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQmxvYihbSlNPTi5zdHJpbmdpZnkoYm9keSldLCBoZWFkZXJzKTtcbiAgfVxuXG4gIHBhY2thZ2VVcGRhdGVMb2dEYXRhKCkge1xuICAgIGNvbnN0IHtoZWFkZXJzLCBhcHBsaWVkVHJlYXRtZW50c0NoYW5nZXMsIGVsaWdpYmxlTm90QXBwbGllZFRyZWF0bWVudHNDaGFuZ2VzfSA9IHRoaXM7XG4gICAgaWYgKCFhcHBsaWVkVHJlYXRtZW50c0NoYW5nZXMgJiYgIWVsaWdpYmxlTm90QXBwbGllZFRyZWF0bWVudHNDaGFuZ2VzKSByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgYm9keSA9IHtcbiAgICAgIHQ6IERhdGUubm93KCksXG4gICAgICBhOiBhcHBsaWVkVHJlYXRtZW50c0NoYW5nZXMgPyB3aW5kb3cuYmVhZ2xlSW5mb0xheWVyLmEgOiB7fSxcbiAgICAgIGU6IGVsaWdpYmxlTm90QXBwbGllZFRyZWF0bWVudHNDaGFuZ2VzID8gd2luZG93LmJlYWdsZUluZm9MYXllci5lIDoge30sXG4gICAgICB2SWQ6IHdpbmRvdy5iZWFnbGVJbmZvTGF5ZXIudklkLFxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBCbG9iKFtKU09OLnN0cmluZ2lmeShib2R5KV0sIGhlYWRlcnMpO1xuICB9XG5cbiAgaW5pdGlhbGl6ZUV4aXRFdmVudExpc3RlbmVycygpIHtcbiAgICBjb25zdCB7bG9nZ2VyfSA9IHRoaXM7XG4gICAgbGV0IGlzRXhpdEV2ZW50Q2FwdHVyZWQgPSBmYWxzZTtcbiAgICBsb2dnZXIubG9nKFwiSW5pdGlhbGl6aW5nIGV4aXQgZXZlbnQgbGlzdGVuZXJcIik7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFwiYmVmb3JldW5sb2FkXCIsXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICBpZiAoIXRoaXMuaXNMb2dnZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlUXVldWVMb2dzKHRoaXMucGFja2FnZUxvZ0RhdGEoXCJvbi1leGl0OiBcIikpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNFeGl0RXZlbnRDYXB0dXJlZCkgcmV0dXJuO1xuICAgICAgICAgIGlzRXhpdEV2ZW50Q2FwdHVyZWQgPSB0cnVlO1xuICAgICAgICAgIGxvZ2dlci5sb2coXCJJbiBiZWZvcmV1bmxvYWQgZXZlbnRcIik7XG4gICAgICAgICAgY29uc3QgbG9nRGF0YSA9IHRoaXMucGFja2FnZVVwZGF0ZUxvZ0RhdGEoKTtcbiAgICAgICAgICBpZiAoIWxvZ0RhdGEpIHtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coXCJObyBjaGFuZ2VzIHRvIGxvZ1wiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5xdWV1ZUxvZ3MobG9nRGF0YSk7XG4gICAgICAgIH0sXG4gICAgICAgIHtjYXB0dXJlOiB0cnVlfSxcbiAgICApO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICBcInBhZ2VoaWRlXCIsXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICBpZiAoIXRoaXMuaXNMb2dnZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlUXVldWVMb2dzKHRoaXMucGFja2FnZUxvZ0RhdGEoXCJvbi1leGl0OiBcIikpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNFeGl0RXZlbnRDYXB0dXJlZCkgcmV0dXJuO1xuICAgICAgICAgIGlzRXhpdEV2ZW50Q2FwdHVyZWQgPSB0cnVlO1xuICAgICAgICAgIGxvZ2dlci5sb2coXCJJbiBwYWdlaGlkZSBldmVudFwiKTtcbiAgICAgICAgICBjb25zdCBsb2dEYXRhID0gdGhpcy5wYWNrYWdlVXBkYXRlTG9nRGF0YSgpO1xuICAgICAgICAgIGlmICghbG9nRGF0YSkge1xuICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIk5vIGNoYW5nZXMgdG8gbG9nXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnF1ZXVlTG9ncyhsb2dEYXRhKTtcbiAgICAgICAgfSxcbiAgICAgICAge2NhcHR1cmU6IHRydWV9LFxuICAgICk7XG4gIH1cblxuICBxdWV1ZUxvZ3MobG9nRGF0YSkge1xuICAgIGNvbnN0IHtsb2dnZXJ9ID0gdGhpcztcblxuICAgIGlmICghbmF2aWdhdG9yLnNlbmRCZWFjb24gfHwgdHlwZW9mIG5hdmlnYXRvci5zZW5kQmVhY29uICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGZldGNoKExPR19BUElfVVJMLCBsb2dEYXRhKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgcXVldWVkID0gbmF2aWdhdG9yLnNlbmRCZWFjb24oTE9HX0FQSV9VUkwsIGxvZ0RhdGEpO1xuICAgIGNvbnN0IHF1ZXVlSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAoIXF1ZXVlZCkgcXVldWVkID0gbmF2aWdhdG9yLnNlbmRCZWFjb24oTE9HX0FQSV9VUkwsIGxvZ0RhdGEpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwocXVldWVJbnRlcnZhbCk7XG4gICAgICAgIGxvZ2dlci5sb2coXCJMb2dzIHF1ZXVlZCBzdWNjZXNzZnVsbHlcIik7XG4gICAgICB9XG4gICAgfSwgMTApO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY2xlYXJJbnRlcnZhbChxdWV1ZUludGVydmFsKTtcbiAgICAgIGlmICghcXVldWVkKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJMb2dzIG5vdCBxdWV1ZWRcIik7XG4gICAgICB9XG4gICAgfSwgMTAwMCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTW9uaXRvcjtcbiIsImltcG9ydCB7cmVwbGFjZUFsbH0gZnJvbSBcIi4uL3N0cmluZ1V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmltcG9ydCB7Z2V0RnJvbUJlYWdsZUluZm9MYXllcn0gZnJvbSBcIi4uL0JlYWdsZUluZm9MYXllclwiO1xuXG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFwiUmVwbGFjZVV0aWxzXCIpO1xuXG5jb25zdCByZXBsYWNlciA9IGFzeW5jICh2YWx1ZSwgcmVwbGFjZUZuKSA9PiB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGZvciAoY29uc3QgW2ksIHZhbF0gb2YgdmFsdWUuZW50cmllcygpKSB7XG4gICAgICBjb25zdCBjdXJyZW50UmVwbGFjZUZuID0gQXJyYXkuaXNBcnJheShyZXBsYWNlRm4pID8gcmVwbGFjZUZuW2ldIDogcmVwbGFjZUZuIHx8IFwiXCI7XG4gICAgICBpZiAodHlwZW9mIGN1cnJlbnRSZXBsYWNlRm4gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgY29uc3QgcmVwbGFjZVZhbCA9IGF3YWl0IHJlcGxhY2VPYmplY3RFeHRyYWN0b3IoY3VycmVudFJlcGxhY2VGbik7XG4gICAgICAgIHZhbHVlW2ldID0gcmVwbGFjZUFsbCh2YWwsIFwie3tSRVBMQUNFfX1cIiwgcmVwbGFjZVZhbCk7XG4gICAgICB9IGVsc2UgdmFsdWVbaV0gPSByZXBsYWNlRm5FeGVjdXRvcihjdXJyZW50UmVwbGFjZUZuLCB2YWwpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlcGxhY2VGbikpIHtcbiAgICBmb3IgKGNvbnN0IHJGbiBvZiByZXBsYWNlRm4pIHtcbiAgICAgIGlmICh0eXBlb2YgckZuID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGNvbnN0IHJlcGxhY2VWYWwgPSBhd2FpdCByZXBsYWNlT2JqZWN0RXh0cmFjdG9yKHJGbik7XG4gICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShcInt7UkVQTEFDRX19XCIsIHJlcGxhY2VWYWwpO1xuICAgICAgfSBlbHNlIHZhbHVlID0gcmVwbGFjZUZuRXhlY3V0b3IockZuLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgcmVwbGFjZUZuID09PSBcIm9iamVjdFwiKSB7XG4gICAgICBjb25zdCByZXBsYWNlVmFsID0gYXdhaXQgcmVwbGFjZU9iamVjdEV4dHJhY3RvcihyZXBsYWNlRm4pO1xuICAgICAgdmFsdWUgPSByZXBsYWNlQWxsKHZhbHVlLCBcInt7UkVQTEFDRX19XCIsIHJlcGxhY2VWYWwpO1xuICAgIH0gZWxzZSB2YWx1ZSA9IHJlcGxhY2VGbkV4ZWN1dG9yKHJlcGxhY2VGbiwgdmFsdWUpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmZ1bmN0aW9uIHJlcGxhY2VGbkV4ZWN1dG9yKHJlcGxhY2VGbiwgdmFsdWUsIHNpbmdsZSA9IGZhbHNlKSB7XG4gIGlmIChyZXBsYWNlRm4gJiYgdmFsdWUuaW5jbHVkZXMoXCJ7e1JFUExBQ0V9fVwiKSkge1xuICAgIGxvZ2dlci5sb2coXCJFeGVjdXRpbmcgcmVwbGFjZSBmdW5jdGlvbjogXCIsIHJlcGxhY2VGbik7XG4gICAgY29uc3QgcmVwbGFjZUZ1bmN0aW9uID0gRnVuY3Rpb24ocmVwbGFjZUZuKTtcbiAgICBpZiAoc2luZ2xlKSByZXR1cm4gdmFsdWUucmVwbGFjZShcInt7UkVQTEFDRX19XCIsIHJlcGxhY2VGdW5jdGlvbigpKTtcbiAgICByZXR1cm4gcmVwbGFjZUFsbCh2YWx1ZSwgXCJ7e1JFUExBQ0V9fVwiLCByZXBsYWNlRnVuY3Rpb24oKSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZXBsYWNlT2JqZWN0RXh0cmFjdG9yKHJlcGxhY2VGbikge1xuICBjb25zdCB7c3RvcmFnZSwga2V5LCBrZXlGYWxsYmFjaywgdHlwZX0gPSByZXBsYWNlRm47XG4gIHN3aXRjaCAoc3RvcmFnZSkge1xuICAgIGNhc2UgXCJzZXNzaW9uXCI6IHtcbiAgICAgIGxldCByZXBsYWNlVmFsID0gbnVsbDtcbiAgICAgIHJlcGxhY2VWYWwgPSB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgaWYgKCFyZXBsYWNlVmFsKSByZXBsYWNlVmFsID0gd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oa2V5RmFsbGJhY2spO1xuICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXBsYWNlVmFsID0gSlNPTi5wYXJzZShyZXBsYWNlVmFsKTtcbiAgICAgICAgICByZXBsYWNlVmFsID0gcmVwbGFjZVZhbFtyZXBsYWNlVmFsLmxlbmd0aCAtIDFdW3R5cGVdO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBsb2dnZXIuZmFpbGVkKGBDb3VsZCBub3QgcGFyc2UgJHtyZXBsYWNlVmFsfWApO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVwbGFjZVZhbDtcbiAgICB9XG4gICAgY2FzZSBcImluZm8tbGF5ZXJcIjoge1xuICAgICAgbGV0IHJlcGxhY2VWYWwgPSBhd2FpdCBnZXRGcm9tQmVhZ2xlSW5mb0xheWVyKGtleSk7XG4gICAgICBpZiAoIXJlcGxhY2VWYWwpIHJlcGxhY2VWYWwgPSBhd2FpdCBnZXRGcm9tQmVhZ2xlSW5mb0xheWVyKGtleUZhbGxiYWNrKTtcbiAgICAgIHJldHVybiByZXBsYWNlVmFsO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCByZXBsYWNlcjtcbiIsImltcG9ydCB7Y29uZGl0aW9uQ2hlY2tlcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJBY3Rpb25Db25kaXRpb25VdGlsc1wiKTtcblxuY29uc3QgY2hlY2tBY3Rpb25Db25kaXRpb24gPSAoY29uZGl0aW9uLCBwcm9kdWN0SW5mbykgPT4ge1xuICBjb25zdCB7YXR0cmlidXRlLCBpbm5lcl9jb25kaXRpb24sIG9wZXJhdG9yLCBzZWxlY3RvciwgdHlwZSwgdmFsdWV9ID0gY29uZGl0aW9uO1xuICBsb2dnZXIubG9nKFwiQWN0aW9uIGNvbmRpdGlvbiBmb3VuZDogXCIsIGNvbmRpdGlvbik7XG4gIGNvbnN0IGVsaWdpYmxlRWxlbWVudHMgPSBbXTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcInByb2R1Y3RJbmZvTG9va3VwXCI6IHtcbiAgICAgIGNvbnN0IGNvbmRpdGlvbkVsZW1lbnRzID0gQXJyYXkuZnJvbSh3aW5kb3cudG9wLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbiAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBjb25kaXRpb25FbGVtZW50cykge1xuICAgICAgICBjb25zdCBlbGVtZW50U2t1ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgICAgY29uc3QgcnVuVGltZVZhbHVlID0gcHJvZHVjdEluZm8/LltlbGVtZW50U2t1XT8uY2F0YWxvZz8uW29wZXJhdG9yXTtcbiAgICAgICAgaWYgKCFydW5UaW1lVmFsdWUpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIWNvbmRpdGlvbkNoZWNrZXIocnVuVGltZVZhbHVlLCBpbm5lcl9jb25kaXRpb24sIHZhbHVlKSkgY29udGludWU7XG4gICAgICAgIGVsaWdpYmxlRWxlbWVudHMucHVzaCgkKGVsZW1lbnQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZWxpZ2libGVFbGVtZW50cztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNoZWNrQWN0aW9uQ29uZGl0aW9uO1xuIiwiaW1wb3J0IHtzdHlsZUFwcGxpY2F0b3IsIGRlbGF5LCBpZGxlVGltZXJ9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHtyZXBsYWNlQWxsfSBmcm9tIFwiLi4vc3RyaW5nVXRpbHNcIjtcbmltcG9ydCB7TU9CSUxFX01FRElBX1FVRVJZLCBTRVNTSU9OX1NUT1JBR0VfS0VZUywgSURMRV9USU1FT1VUfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgcmVwbGFjZXIgZnJvbSBcIi4vcmVwbGFjZS11dGlsc1wiO1xuaW1wb3J0IGNoZWNrQWN0aW9uQ29uZGl0aW9uIGZyb20gXCIuL2FjdGlvbi1jb25kaXRpb24tdXRpbFwiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIGFwcGx5QWN0aW9ucyhhY3Rpb25zLCBiaW5kaW5ncykge1xuICBjb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFwiTmV4dGRheSBBcHBseSBBY3Rpb25zXCIpO1xuICBjb25zdCB7UE9QVVBfRElTUExBWV9GTEFHfSA9IFNFU1NJT05fU1RPUkFHRV9LRVlTO1xuICBjb25zdCB7cHJvZHVjdEluZm99ID0gYmluZGluZ3M7XG5cbiAgY29uc3QgdHJhbnNmb3JtZXIgPSBhc3luYyBmdW5jdGlvbiB0cmFuc2Zvcm1lcihhY3Rpb24sIGVsZW1lbnQgPSBudWxsKSB7XG4gICAgbG9nZ2VyLmxvZyhcIkFwcGx5aW5nIGFjdGlvbjogXCIsIEpTT04uc3RyaW5naWZ5KGFjdGlvbikpO1xuICAgIGNvbnN0IHtcbiAgICAgIG9wZXJhdG9yLFxuICAgICAgdHlwZSxcbiAgICAgIGFwcGx5RXZlbnQsXG4gICAgICBjb250ZW50U2VsZWN0b3IsXG4gICAgICBzZWxlY3RvcixcbiAgICAgIHNlbGVjdG9yRmFsbGJhY2ssXG4gICAgICBtZENvbmRpdGlvbixcbiAgICAgIG1vdmVfc2VsZWN0b3JfMSxcbiAgICAgIG1vdmVfc2VsZWN0b3JfMixcbiAgICAgIHJlcGxhY2VGbixcbiAgICAgIHBUeXBlLFxuICAgICAgYXR0cmlidXRlLFxuICAgIH0gPSBhY3Rpb247XG4gICAgaWYgKG9wZXJhdG9yID09PSBcIm5vb3BcIikge1xuICAgICAgbG9nZ2VyLmZhaWxlZChcIk5vb3AgT3BlcmF0b3I6IE5vIG9wZXJhdGlvbiBpcyBhcHBsaWVkIG9uIHRhcmdldCBcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB7dmFsdWV9ID0gYWN0aW9uO1xuICAgIC8vIElmIGFuIGVsZW1lbnQgaXMgcGFzc2VkIHRvIHRyYW5zZm9ybWVyLCBzZWxlY3RvciBpcyByZWxhdGl2ZSB0byBwYXNzZWQgZWxlbWVudFxuICAgIGVsZW1lbnQgPSBlbGVtZW50ID8gZWxlbWVudC5maW5kKHNlbGVjdG9yKSA6ICQoc2VsZWN0b3IpO1xuXG4gICAgY29uc3QgbWMgPSBtZENvbmRpdGlvbiA/IHdpbmRvdy5tYXRjaE1lZGlhKG1kQ29uZGl0aW9uKS5tYXRjaGVzIDogdHJ1ZTtcbiAgICBpZiAoIW1jKSB7XG4gICAgICBsb2dnZXIuZmFpbGVkKFwiTWVkaWEgY29uZGl0aW9uIG1pc21hdGNoOiBcIiwgbWRDb25kaXRpb24pO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAobW92ZV9zZWxlY3Rvcl8xICYmICFtb3ZlX3NlbGVjdG9yXzIpIHx8XG4gICAgICAobW92ZV9zZWxlY3Rvcl8yICYmICFtb3ZlX3NlbGVjdG9yXzEpXG4gICAgKSB7XG4gICAgICBsb2dnZXIuZmFpbGVkKFwiQm90aCBtb3ZlIHNlbGVjdG9ycyBhcmUgcmVxdWlyZWRcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChtb3ZlX3NlbGVjdG9yXzEgJiYgbW92ZV9zZWxlY3Rvcl8yKSB7XG4gICAgICBpZiAoISQobW92ZV9zZWxlY3Rvcl8xKS5sZW5ndGgpIHtcbiAgICAgICAgbG9nZ2VyLmZhaWxlZChcIk1vdmUgc2VsZWN0b3IgMSBub3QgZm91bmQ6IFwiLCBtb3ZlX3NlbGVjdG9yXzEpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoISQobW92ZV9zZWxlY3Rvcl8yKS5sZW5ndGgpIHtcbiAgICAgICAgbG9nZ2VyLmZhaWxlZChcIk1vdmUgc2VsZWN0b3IgMiBub3QgZm91bmQ6IFwiLCBtb3ZlX3NlbGVjdG9yXzIpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghc2VsZWN0b3IpIHtcbiAgICAgIGxvZ2dlci5mYWlsZWQoXCJTZWxlY3RvciBub3Qgc3BlY2lmaWVkXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWVsZW1lbnQubGVuZ3RoKSB7XG4gICAgICAgIGlmICghJChzZWxlY3RvckZhbGxiYWNrKS5sZW5ndGggJiYgb3BlcmF0b3IgPT09IFwicmVtb3ZlXCIpIHJldHVybjtcbiAgICAgICAgaWYgKHNlbGVjdG9yICE9PSBcIm5vLXNlbGVjdG9yXCIpIHtcbiAgICAgICAgICBsb2dnZXIuZmFpbGVkKFwiU2VsZWN0b3Igbm90IGZvdW5kOiBcIiwgc2VsZWN0b3IpO1xuICAgICAgICAgIGxvZ2dlci5sb2coXCJUcnlpbmcgZmFsbGJhY2sgc2VsZWN0b3I6IFwiLCBzZWxlY3RvckZhbGxiYWNrKTtcbiAgICAgICAgICBpZiAoc2VsZWN0b3JGYWxsYmFjaykgZWxlbWVudCA9ICQoc2VsZWN0b3JGYWxsYmFjayk7XG4gICAgICAgICAgaWYgKCFlbGVtZW50Lmxlbmd0aCkge1xuICAgICAgICAgICAgbG9nZ2VyLmZhaWxlZChcIkZhbGxiYWNrIHNlbGVjdG9yIG5vdCBmb3VuZFwiKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocmVwbGFjZUZuKSB7XG4gICAgICB2YWx1ZSA9IGF3YWl0IHJlcGxhY2VyKHZhbHVlLCByZXBsYWNlRm4sIHByb2R1Y3RJbmZvKTtcbiAgICB9XG4gICAgaWYgKG9wZXJhdG9yID09PSBcInJlbW92ZVwiKSB7XG4gICAgICBpZiAoZWxlbWVudC5sZW5ndGgpIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIlJlbW92aW5nOiBcIiwgc2VsZWN0b3IpO1xuICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xuICAgICAgfSBlbHNlIGxvZ2dlci5sb2coXCJDYW5ub3QgZm91bmQgZWxlbWVudCB3aXRoIHNlbGVjdG9yOiBcIiwgc2VsZWN0b3IpO1xuICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgPT09IFwiaW5zZXJ0XCIpIHtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwiYmVmb3JlXCI6XG4gICAgICAgICAgbG9nZ2VyLmxvZyhcIkluc2VydGluZyBiZWZvcmU6IFwiLCB2YWx1ZSk7XG4gICAgICAgICAgaWYgKFN0cmluZyh2YWx1ZSkuaW5jbHVkZXMoXCJuZC1hZGQtdG8td2luXCIpKSB7XG4gICAgICAgICAgICAkKFwiLm5kLWFkZC10by13aW5cIikucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsZW1lbnQuYmVmb3JlKHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImFmdGVyXCI6XG4gICAgICAgICAgbG9nZ2VyLmxvZyhcIkluc2VydGluZyBhZnRlcjogXCIsIHZhbHVlKTtcbiAgICAgICAgICBlbGVtZW50LmFmdGVyKHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImFwcGVuZFwiOlxuICAgICAgICAgIGxvZ2dlci5sb2coXCJBcHBlbmRpbmcgdmFsdWU6IFwiLCB2YWx1ZSk7XG4gICAgICAgICAgZWxlbWVudC5hcHBlbmQodmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibW9kYWxcIjpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlbGVtZW50Lm9mZihcImNsaWNrXCIpO1xuICAgICAgICAgICAgY3JlYXRlUG9wdXAodmFsdWUsIGNvbnRlbnRTZWxlY3RvciwgdHJ1ZSk7XG4gICAgICAgICAgICBjb25zdCBlbG0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgICAgICAgIGVsbS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICBpZiAoZWxtID09IGUudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBkaXNwbGF5TW9kYWwodmFsdWUsIGNvbnRlbnRTZWxlY3Rvcik7XG4gICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJwb3B1cFwiOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmIChwYXJzZUludChzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBPUFVQX0RJU1BMQVlfRkxBRykpICE9PSAwKSB7XG4gICAgICAgICAgICAgIGxvZ2dlci5sb2coXCJQb3B1cCBhbHJlYWR5IGRpc3BsYXllZCBpbiBzZXNzaW9uXCIpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZ2dlci5sb2coXCJDcmVhdGluZyBQb3B1cDogXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChwVHlwZSkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IGdldFByb2R1Y3RJbmZvKHByb2R1Y3RJbmZvLCBwVHlwZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3JlYXRlUG9wdXAodmFsdWUsIGNvbnRlbnRTZWxlY3Rvcik7XG5cbiAgICAgICAgICAgIGlmIChhcHBseUV2ZW50KSB7XG4gICAgICAgICAgICAgIGNvbnN0IG1vYmlsZSA9IHdpbmRvdy5tYXRjaE1lZGlhKE1PQklMRV9NRURJQV9RVUVSWSkubWF0Y2hlcztcbiAgICAgICAgICAgICAgZm9yIChjb25zdCBldmVudCBvZiBhcHBseUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSBcImV4aXRJbnRlbnRcIjpcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIkFkZGluZyBleGl0IGludGVudCBsaXN0ZW5lclwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vYmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy50b3AuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgZGlzcGxheVBvcHVwKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdpbmRvdy5iZWFnbGVJbmZvTGF5ZXI/LnIuaW5jbHVkZXMod2luZG93LmJlYWdsZUluZm9MYXllcj8uZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuaGlzdG9yeSAmJiB0eXBlb2Ygd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy50b3AuZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnRvcC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93Lmhpc3Rvcnkuc3RhdGUgIT09IFwiYmdfbGltYm9cIikgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKFwiYmdfbGltYm9cIiwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cudG9wLmFkZEV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLCBkaXNwbGF5UG9wdXAsIHtvbmNlOiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5oaXN0b3J5LnN0YXRlICE9PSBcImJnX2xpbWJvXCIpIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShcImJnX2xpbWJvXCIsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy50b3AuYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIGRpc3BsYXlQb3B1cCwge29uY2U6IHRydWV9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZGxlVGltZXIoSURMRV9USU1FT1VULCBkaXNwbGF5UG9wdXApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy50b3AuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIGRpc3BsYXlQb3B1cCwge29uY2U6IHRydWV9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJjb3B5SW50ZW50XCI6XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coXCJBZGRpbmcgY29weSBpbnRlbnQgbGlzdGVuZXJcIik7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy50b3AuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjb3B5XCIsIGRpc3BsYXlQb3B1cCwge29uY2U6IHRydWV9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBhcHBlbmQgcG9wdXAgdG8gYm9keSBhZnRlciB0aW1lb3V0IGV4cGlyZXNcbiAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgZGlzcGxheVBvcHVwKCk7XG4gICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBsb2dnZXIuZmFpbGVkKGBUeXBlOiAke3R5cGV9IG5vdCBmb3VuZCBmb3Igb3BlcmF0b3I6ICR7b3BlcmF0b3J9YCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gXCJlZGl0XCIpIHtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwidGV4dFwiOlxuICAgICAgICAgIGxvZ2dlci5sb2coXCJFZGl0aW5nIHRleHQ6IFwiLCB2YWx1ZSk7XG4gICAgICAgICAgZWxlbWVudC50ZXh0KHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImh0bWxcIjpcbiAgICAgICAgICBsb2dnZXIubG9nKFwiRWRpdGluZyBodG1sOiBcIiwgdmFsdWUpO1xuICAgICAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzdHlsZUFwcGxpY2F0b3JcIjpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKFwiQXBwbHlpbmcgc3R5bGU6IFwiLCB2YWx1ZSk7XG4gICAgICAgICAgICBjb25zdCBzdHlsZUNoYW5nZXNNYXAgPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coXCJTdHlsZSBDaGFuZ2VzIE1hcDogXCIsIHN0eWxlQ2hhbmdlc01hcCk7XG4gICAgICAgICAgICBzdHlsZUFwcGxpY2F0b3IoZWxlbWVudCwgc3R5bGVDaGFuZ2VzTWFwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJhZGRDbGFzc1wiOlxuICAgICAgICAgIGxvZ2dlci5sb2coYGFkZGRpbmcgY2xhc3MgdG8gJHtlbGVtZW50fSBuYW1lZCAke3ZhbHVlfWApO1xuICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3ModmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicmVtb3ZlQ2xhc3NcIjpcbiAgICAgICAgICBsb2dnZXIubG9nKGByZW1vdmUgY2xhc3MgZnJvbSAke2VsZW1lbnR9IG5hbWVkICR7dmFsdWV9YCk7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyh2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJkb2N1bWVudFRpdGxlXCI6XG4gICAgICAgICAgbG9nZ2VyLmxvZyhgY2hhbmdpbmcgZG9jdW1lbnQgdGl0bGUgZnJvbSAke2VsZW1lbnR9IHRvICR7dmFsdWV9YCk7XG4gICAgICAgICAgaWYgKGFwcGx5RXZlbnQpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZXZlbnQgb2YgYXBwbHlFdmVudCkge1xuICAgICAgICAgICAgICBpZiAoZXZlbnQgPT0gXCJ0YWJDaGFuZ2VcIikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coXCJjYXRjaGluZyBldmVudCB0YWJjaGFuZ2UuLlwiKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvcmlnaW5hbFRpdGxlID0gd2luZG93LnRvcC5kb2N1bWVudC50aXRsZTtcbiAgICAgICAgICAgICAgICB3aW5kb3cudG9wLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIChlKSA9PlxuICAgICAgICAgICAgICAgICAgaGFuZGxlRG9jdW1lbnRUaXRsZVRhYkNoYW5nZShlLCB2YWx1ZSwgb3JpZ2luYWxUaXRsZSksXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBsb2dnZXIubG9nKFwiVW5rbm93biBlZGl0IHR5cGU6IFwiLCB0eXBlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcInNldGF0dHJpYnV0ZVwiKSB7XG4gICAgICBsb2dnZXIubG9nKFwiU2V0dGluZyBhdHRyaWJ1dGU6IFwiLCBhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICAgIHN3aXRjaCAoYXR0cmlidXRlKSB7XG4gICAgICAgIGNhc2UgXCJzcmNcIjpcbiAgICAgICAgICBlbGVtZW50LmNzcyhcImNvbnRlbnRcIiwgYHVybCgke3ZhbHVlLnRyaW0oKX0pYCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jYXNlLWRlY2xhcmF0aW9uc1xuICAgICAgICAgIGNvbnN0IHByb3BlcnR5ID0gdmFsdWUuc3BsaXQoXCI6XCIpWzBdLnRyaW0oKTtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY2FzZS1kZWNsYXJhdGlvbnNcbiAgICAgICAgICBjb25zdCBwcm9wZXJ0eVZhbHVlID0gdmFsdWUuc3BsaXQoXCI6XCIpWzFdLnRyaW0oKTtcblxuICAgICAgICAgIGVsZW1lbnQuY3NzKHByb3BlcnR5LCBwcm9wZXJ0eVZhbHVlLCBcIiFpbXBvcnRhbnRcIik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKHZhbHVlLmluY2x1ZGVzKFwiZnVuY3Rpb25cIikpIHtcbiAgICAgICAgICAgIHZhbHVlID0gRnVuY3Rpb24odmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbGVtZW50W2F0dHJpYnV0ZV0gPSB2YWx1ZTtcbiAgICAgICAgICBsb2dnZXIubG9nKFwiVW5oYW5kbGVkIGF0dHJpYnV0ZTogU2V0dGluZyBhdHRyaWJ1dGU6IFwiLCBhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcInJlcGxhY2VcIikge1xuICAgICAgbG9nZ2VyLmxvZyhcIlJlcGxhY2luZzogXCIsIHZhbHVlKTtcbiAgICAgIGVsZW1lbnQucmVwbGFjZUFsbCh2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gXCJzd2FwXCIpIHtcbiAgICAgIGxvZ2dlci5sb2coXCJTd2FwcGluZzogXCIsIG1vdmVfc2VsZWN0b3JfMSwgbW92ZV9zZWxlY3Rvcl8yKTtcbiAgICAgIGNvbnN0IG4xID0gd2luZG93LnRvcC5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKG1vdmVfc2VsZWN0b3JfMSk7XG4gICAgICBjb25zdCBuMiA9IHdpbmRvdy50b3AuZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihtb3ZlX3NlbGVjdG9yXzIpO1xuICAgICAgc3dhcE5vZGVzKG4xLCBuMik7XG4gICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gXCJpbmplY3RzY3JpcHRcIikge1xuICAgICAgbG9nZ2VyLmxvZyhcIkluamVjdGluZyBzY3JpcHQ6IFwiLCB2YWx1ZSk7XG4gICAgICBlbGVtZW50LmFwcGVuZChgPHNjcmlwdD4ke3ZhbHVlfTwvc2NyaXB0PmApO1xuICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgPT09IFwibW92ZVwiKSB7XG4gICAgICBsb2dnZXIubG9nKGBNb3ZpbmcgJHttb3ZlX3NlbGVjdG9yXzF9IHRvICR7bW92ZV9zZWxlY3Rvcl8yfWApO1xuICAgICAgY29uc3Qgc291cmNlID0gd2luZG93LnRvcC5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKG1vdmVfc2VsZWN0b3JfMSk7XG4gICAgICBjb25zdCBkZXN0aW5hdGlvbiA9IHdpbmRvdy50b3AuZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihtb3ZlX3NlbGVjdG9yXzIpO1xuICAgICAgc291cmNlLnJlbW92ZSgpO1xuICAgICAgZGVzdGluYXRpb24ucHJlcGVuZChzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgPT09IFwicHJvZHVjdEluZm9Mb29rdXBcIikge1xuICAgICAgY29uc3QgcmVzID0gZ2V0UHJvZHVjdEluZm8ocHJvZHVjdEluZm8sIHBUeXBlLCB2YWx1ZSk7XG4gICAgICBlbGVtZW50LmJlZm9yZShyZXMpO1xuICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgPT09IFwidGV4dC10cmFuc2Zvcm1cIikge1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJjYXBpdGFsaXplXCI6IHtcbiAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgQXJyYXkuZnJvbShlbGVtZW50KSkge1xuICAgICAgICAgICAgaWYgKGUuaW5uZXJUZXh0Py5pbmNsdWRlcyhcIlxcblwiKSkge1xuICAgICAgICAgICAgICBlLmlubmVyVGV4dCA9IGUuaW5uZXJUZXh0LnRvTG93ZXJDYXNlKCkuc3BsaXQoXCJcXG5cIikubWFwKChzZW50ZW5jZSkgPT5cbiAgICAgICAgICAgICAgICBzZW50ZW5jZS5zcGxpdChcIiBcIikubWFwKCh3b3JkKSA9PiB3b3JkLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd29yZC5zbGljZSgxKSkuam9pbihcIiBcIiksXG4gICAgICAgICAgICAgICkuam9pbihcIlxcblwiKTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlLmlubmVyVGV4dCA9IGUuaW5uZXJUZXh0Py50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgLnNwbGl0KFwiIFwiKVxuICAgICAgICAgICAgICAgIC5tYXAoKHdvcmQpID0+IHdvcmQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB3b3JkLnNsaWNlKDEpKVxuICAgICAgICAgICAgICAgIC5qb2luKFwiIFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbG9nZ2VyLmZhaWxlZChcIk5vIHN1Y2ggb3BlcmF0b3IgZXhpc3RzIHlldFwiLCBvcGVyYXRvcik7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHJlcGxhY2VXaXRoVmFsID0gKHZhbHVlLCBodG1sU3RyKSA9PiB7XG4gICAgaWYgKHZhbHVlICYmIGh0bWxTdHIuaW5jbHVkZXMoXCJ7e1JFUExBQ0VfUFJPRFVDVElORk99fVwiKSkge1xuICAgICAgaHRtbFN0ciA9IHJlcGxhY2VBbGwoaHRtbFN0ciwgXCJ7e1JFUExBQ0VfUFJPRFVDVElORk99fVwiLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBodG1sU3RyO1xuICB9O1xuICBjb25zdCBnZXRQcm9kdWN0SW5mbyA9IChwcm9kdWN0SW5mbywgdHlwZSwgdmFsdWUpID0+IHtcbiAgICAvLyBnZXQga2V5cyBvZiBwcm9kdWN0SW5mb1xuICAgIGNvbnN0IHNrdUxpc3QgPSBPYmplY3Qua2V5cyhwcm9kdWN0SW5mbyk7XG4gICAgbGV0IHJlcyA9IG51bGw7XG4gICAgaWYgKCFza3VMaXN0IHx8IHNrdUxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICBsb2dnZXIubG9nKFwiTm8gc2t1IGZvdW5kXCIpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGVsZW1lbnRTa3UgPSBza3VMaXN0WzBdO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcInRyYW5zYWN0aW9uSW4yV2Vla3NcIjoge1xuICAgICAgICByZXMgPSByZXBsYWNlV2l0aFZhbChwcm9kdWN0SW5mb1tlbGVtZW50U2t1XS5jYXRhbG9nLnRyYW5zYWN0aW9uSW4yV2Vla3M/LnRvU3RyaW5nKClcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIi5cIiksIHZhbHVlKTtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIlJlcGxhY2luZyB0cmFuc2NhdGlvbkluMldlZWtzIFwiLCBwcm9kdWN0SW5mb1tlbGVtZW50U2t1XS5jYXRhbG9nLnRyYW5zYWN0aW9uSW4yV2Vla3MpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJhZGRUb0NhcnRJbjJXZWVrc1wiOiB7XG4gICAgICAgIHJlcyA9IHJlcGxhY2VXaXRoVmFsKHByb2R1Y3RJbmZvW2VsZW1lbnRTa3VdLmNhdGFsb2cuYWRkVG9DYXJ0SW4yV2Vla3M/LnRvU3RyaW5nKClcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIi5cIiksIHZhbHVlKTtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIlJlcGxhY2luZyBBZGRUb0NhcnRDb3VudCBcIiwgcHJvZHVjdEluZm9bZWxlbWVudFNrdV0uY2F0YWxvZy5hZGRUb0NhcnRJbjJXZWVrcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcInByb2R1Y3RWaWV3Q291bnRcIjoge1xuICAgICAgICByZXMgPSByZXBsYWNlV2l0aFZhbChwcm9kdWN0SW5mb1tlbGVtZW50U2t1XS5jYXRhbG9nLnByb2R1Y3RWaWV3Q291bnQ/LnRvU3RyaW5nKClcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIi5cIiksIHZhbHVlKTtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIlJlcGxhY2luZyBwcm9kdWN0Vmlld0NvdW50IGZvclwiLCBwcm9kdWN0SW5mb1tlbGVtZW50U2t1XS5jYXRhbG9nLnByb2R1Y3RWaWV3Q291bnQpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxvZ2dlci5mYWlsZWQoXCJubyBzdWNoIHR5cGUgZm91bmQgZm9yIHByb2R1Y3RJbmZvTG9va3VwIG9wZXJhdG9yOiBcIisgdHlwZSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG4gIGNvbnN0IGhhbmRsZURvY3VtZW50VGl0bGVUYWJDaGFuZ2UgPSBhc3luYyAoZXZlbnQsIHRpdGxlcywgb3JpZ2luYWxUaXRsZSkgPT4ge1xuICAgIGNvbnN0IHBhcnNlZFRpdGxlcyA9ICFBcnJheS5pc0FycmF5KHRpdGxlcykgPyBbdGl0bGVzXSA6IHRpdGxlcztcbiAgICBmb3IgKGNvbnN0IHBhcnNlZFRpdGxlIG9mIHBhcnNlZFRpdGxlcykge1xuICAgICAgaWYgKHdpbmRvdy50b3AuZG9jdW1lbnQuaGlkZGVuKSB7XG4gICAgICAgIHdpbmRvdy50b3AuZG9jdW1lbnQudGl0bGUgPSBwYXJzZWRUaXRsZTtcbiAgICAgICAgYXdhaXQgZGVsYXkoMjAwMCk7XG4gICAgICAgIHdpbmRvdy50b3AuZG9jdW1lbnQudGl0bGUgPSBvcmlnaW5hbFRpdGxlO1xuICAgICAgICBhd2FpdCBkZWxheSgyMDAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy50b3AuZG9jdW1lbnQudGl0bGUgPSBvcmlnaW5hbFRpdGxlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXdpbmRvdy50b3AuZG9jdW1lbnQuaGlkZGVuKSB7XG4gICAgICB3aW5kb3cudG9wLmRvY3VtZW50LnRpdGxlID0gb3JpZ2luYWxUaXRsZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFuZGxlRG9jdW1lbnRUaXRsZVRhYkNoYW5nZShldmVudCwgdGl0bGVzLCBvcmlnaW5hbFRpdGxlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlUG9wdXBDbGljayA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IGlkID0gZXZlbnQudGFyZ2V0LmlkO1xuICAgIGlmIChpZCAmJiBpZCA9PT0gXCJuZC1wb3B1cF9fd3JhcHBlclwiKSB7XG4gICAgICAkKFwiI25kLXBvcHVwX193cmFwcGVyXCIpLnJlbW92ZSgpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVQb3B1cENsaWNrLCB0cnVlKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgaGFuZGxlUG9wdXBDbGljaywgdHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGRpc3BsYXlQb3B1cCA9ICgpID0+IHtcbiAgICBpZiAod2luZG93LnRvcC5kb2N1bWVudC5oaWRkZW4pIHJldHVybjtcbiAgICBpZiAocGFyc2VJbnQoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQT1BVUF9ESVNQTEFZX0ZMQUcpKSA+IDApIHJldHVybjtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBPUFVQX0RJU1BMQVlfRkxBRywgMSk7XG4gICAgY29uc3QgcVBvcHVwID0gd2luZG93LnRvcC5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2dydC1zaGFkb3ctaG9zdFwiKTtcbiAgICBpZiAocVBvcHVwKSBxUG9wdXAuc3R5bGVbXCJkaXNwbGF5XCJdID0gXCJub25lXCI7XG4gICAgd2luZG93LnRvcC5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5kLXBvcHVwX193cmFwcGVyXCIpLnN0eWxlW1wiZGlzcGxheVwiXSA9IFwiYmxvY2tcIjtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZVBvcHVwQ2xpY2ssIHRydWUpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgaGFuZGxlUG9wdXBDbGljaywgdHJ1ZSk7XG5cbiAgICB3aW5kb3cudG9wLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCBkaXNwbGF5UG9wdXAsIHtcbiAgICAgIG9uY2U6IHRydWUsXG4gICAgfSk7XG4gICAgd2luZG93LnRvcC5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNvcHlcIiwgZGlzcGxheVBvcHVwLCB7XG4gICAgICBvbmNlOiB0cnVlLFxuICAgIH0pO1xuICAgIHdpbmRvdy50b3AucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgZGlzcGxheVBvcHVwKTtcbiAgICB3aW5kb3cudG9wLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLCBkaXNwbGF5UG9wdXAsIHtcbiAgICAgIG9uY2U6IHRydWUsXG4gICAgfSk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICQoXCIjbmQtcG9wdXBfX3dyYXBwZXJcIikucmVtb3ZlKCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZVBvcHVwQ2xpY2ssIHRydWUpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBoYW5kbGVQb3B1cENsaWNrLCB0cnVlKTtcbiAgICB9LCAxNTAwMCk7XG4gIH07XG5cbiAgY29uc3QgZGlzcGxheU1vZGFsID0gKHZhbHVlLCBjb250ZW50U2VsZWN0b3IpID0+IHtcbiAgICBpZiAod2luZG93LnRvcC5kb2N1bWVudC5oaWRkZW4pIHJldHVybjtcbiAgICBjb25zdCBxUG9wdXAgPSB3aW5kb3cudG9wLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZ3J0LXNoYWRvdy1ob3N0XCIpO1xuICAgIGlmIChxUG9wdXApIHFQb3B1cC5zdHlsZVtcImRpc3BsYXlcIl0gPSBcIm5vbmVcIjtcbiAgICBpZiAoIXdpbmRvdy50b3AuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuZC1wb3B1cF9fd3JhcHBlclwiKSkgY3JlYXRlUG9wdXAodmFsdWUsIGNvbnRlbnRTZWxlY3RvciwgdHJ1ZSk7XG4gICAgd2luZG93LnRvcC5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5kLXBvcHVwX193cmFwcGVyXCIpLnN0eWxlW1wiZGlzcGxheVwiXSA9IFwiYmxvY2tcIjtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlUG9wdXBDbGljaywgdHJ1ZSk7XG4gIH07XG5cbiAgY29uc3QgY3JlYXRlUG9wdXAgPSAodmFsdWUsIGNvbnRlbnRTZWxlY3RvciwgaXNNb2RhbD1mYWxzZSkgPT4ge1xuICAgIC8vIENyZWF0ZSBwb3B1cCB3cmFwcGVyXG4gICAgY29uc3QgcG9wdXBXcmFwcGVyID0gd2luZG93LnRvcC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgcG9wdXBXcmFwcGVyLmNsYXNzTGlzdC5hZGQoXCJuZC1wb3B1cF9fd3JhcHBlclwiKTtcbiAgICBwb3B1cFdyYXBwZXIuaWQgPSBcIm5kLXBvcHVwX193cmFwcGVyXCI7XG5cbiAgICAvLyBDcmVhdGUgcG9wdXAgY2xvc2UgYnV0dG9uXG4gICAgY29uc3QgcG9wdXBDbG9zZUJ1dHRvbiA9IHdpbmRvdy50b3AuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBjb25zdCBwb3B1cENsb3NlQnV0dG9uU3R5bGUgPSBpc01vZGFsID8gXCJuZC1wb3B1cF9fYnV0dG9uLWNsb3NlX19jb2xvcmVkXCIgOiBcIm5kLXBvcHVwX19idXR0b24tY2xvc2VcIjtcbiAgICBwb3B1cENsb3NlQnV0dG9uLmNsYXNzTGlzdC5hZGQocG9wdXBDbG9zZUJ1dHRvblN0eWxlKTtcbiAgICBwb3B1cENsb3NlQnV0dG9uLmlubmVyVGV4dCA9IFwiWFwiO1xuICAgIHBvcHVwQ2xvc2VCdXR0b24ub25jbGljayA9ICgpID0+IHtcbiAgICAgICQoXCIjbmQtcG9wdXBfX3dyYXBwZXJcIikucmVtb3ZlKCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZVBvcHVwQ2xpY2ssIHRydWUpO1xuICAgIH07XG5cbiAgICBpZiAoY29udGVudFNlbGVjdG9yKSB7XG4gICAgICBjb25zdCBjb250ZW50cyA9IEFycmF5LmZyb20od2luZG93LnRvcC5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGNvbnRlbnRTZWxlY3RvcikpO1xuICAgICAgd2hpbGUgKHZhbHVlLmluY2x1ZGVzKFwie3tSRVBMQUNFfX1cIikgJiYgY29udGVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoXCJ7e1JFUExBQ0V9fVwiLCBjb250ZW50cy5zaGlmdCgpLnNyYyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIHBvcHVwIGZyb20gYWN0aW9uIGFuZCBhcHBlbmQgY2xvc2UgYnV0dG9uXG4gICAgY29uc3QgdGVtcGxhdGUgPSB3aW5kb3cudG9wLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSB2YWx1ZS50cmltKCk7XG4gICAgY29uc3QgcG9wdXAgPSB0ZW1wbGF0ZS5jb250ZW50LmZpcnN0Q2hpbGQ7XG4gICAgcG9wdXAuYXBwZW5kQ2hpbGQocG9wdXBDbG9zZUJ1dHRvbik7XG4gICAgcG9wdXBXcmFwcGVyLmFwcGVuZENoaWxkKHBvcHVwKTtcblxuICAgIC8vIFJlbW92ZSBvbGQgcG9wdXAgaWYgZXhpc3RzIGJlZm9yZSBhcHBlbmRpbmcgbmV3IG9uZVxuICAgICQoXCIjbmQtcG9wdXBfX3dyYXBwZXJcIikucmVtb3ZlKCk7XG4gICAgd2luZG93LnRvcC5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHBvcHVwV3JhcHBlcik7XG4gIH07XG5cbiAgY29uc3Qgc3dhcE5vZGVzID0gZnVuY3Rpb24gc3dhcE5vZGVzKG4xLCBuMikge1xuICAgIGNvbnN0IHAxID0gbjEucGFyZW50Tm9kZTtcbiAgICBjb25zdCBwMiA9IG4yLnBhcmVudE5vZGU7XG4gICAgbGV0IGkxO1xuICAgIGxldCBpMjtcblxuICAgIGlmICghcDEgfHwgIXAyIHx8IHAxLmlzRXF1YWxOb2RlKG4yKSB8fCBwMi5pc0VxdWFsTm9kZShuMSkpIHJldHVybjtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcDEuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwMS5jaGlsZHJlbltpXS5pc0VxdWFsTm9kZShuMSkpIHtcbiAgICAgICAgaTEgPSBpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHAyLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocDIuY2hpbGRyZW5baV0uaXNFcXVhbE5vZGUobjIpKSB7XG4gICAgICAgIGkyID0gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocDEuaXNFcXVhbE5vZGUocDIpICYmIGkxIDwgaTIpIHtcbiAgICAgIGkyKys7XG4gICAgfVxuICAgIHAxLmluc2VydEJlZm9yZShuMiwgcDEuY2hpbGRyZW5baTFdKTtcbiAgICBwMi5pbnNlcnRCZWZvcmUobjEsIHAyLmNoaWxkcmVuW2kyXSk7XG4gIH07XG5cbiAgY29uc3QgYWN0aW9uQXBwbGljYXRvciA9IGFzeW5jIChhY3Rpb25zKSA9PiB7XG4gICAgaWYgKCF3aW5kb3cualF1ZXJ5KSB7XG4gICAgICBzZXRUaW1lb3V0KGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgICBhd2FpdCBhY3Rpb25BcHBsaWNhdG9yKGFjdGlvbnMpO1xuICAgICAgfSwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGNvbnN0IGFjdGlvbiBvZiBhY3Rpb25zKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGlmIChhY3Rpb24uY29uZGl0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBlbGlnaWJsZUVsZW1lbnRzID0gY2hlY2tBY3Rpb25Db25kaXRpb24oYWN0aW9uLmNvbmRpdGlvbiwgcHJvZHVjdEluZm8pO1xuICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsaWdpYmxlRWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gYXdhaXQgdHJhbnNmb3JtZXIoYWN0aW9uLCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgcmVzdWx0ID0gYXdhaXQgdHJhbnNmb3JtZXIoYWN0aW9uKTtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgbG9nZ2VyLmZhaWxlZChgQ291bGRuJ3QgYXBwbHkgYWN0aW9uICR7YWN0aW9ufSB3aXRoIGVycm9yICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgcmV0dXJuIGVycjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBBcHBseSBhY3Rpb25zXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFjdGlvbkFwcGxpY2F0b3IoYWN0aW9ucyk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgZGVmYXVsdCBhcHBseUFjdGlvbnM7XG4iLCJpbXBvcnQge1NFU1NJT05fU1RPUkFHRV9LRVlTLCBMT0NBTF9TVE9SQUdFX0tFWVN9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7Y29uZGl0aW9uQ2hlY2tlcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJCZWFnbGUgQ291bnRlciBDaGVja2VyXCIpO1xuXG5leHBvcnQgY29uc3QgY2hlY2tDb3VudGVyUnVsZSA9IChydWxlKSA9PntcbiAgbG9nZ2VyLmxvZyhcIkNoZWNraW5nIHJ1bGVcIiwgSlNPTi5zdHJpbmdpZnkocnVsZSkpO1xuICBjb25zdCB7b3BlcmF0b3IsIGNvbmRpdGlvbiwgdmFsdWV9ID0gcnVsZTtcbiAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgIGNhc2UgXCJwYWdlVmlld1wiOlxuICAgICAgcmV0dXJuIHBhZ2VWaWV3SGFuZGxlcihjb25kaXRpb24sIHZhbHVlKTtcbiAgICBjYXNlIFwiQ0FCYXNrZXRQcmljZVwiOlxuICAgICAgcmV0dXJuIGNhQmFza2V0UHJpY2VIYW5kbGVyKGNvbmRpdGlvbiwgdmFsdWUpO1xuICAgIGRlZmF1bHQ6XG4gICAgICBsb2dnZXIuZmFpbGVkKFwiTm8gc3VjaCBvcGVyYXRvclwiLCBvcGVyYXRvcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmNvbnN0IGdldENvdW50ZXIgPSAoY291bnRlciwgdHlwZSkgPT4ge1xuICB0cnkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcInNlc3Npb25cIjpcbiAgICAgICAgcmV0dXJuIHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oY291bnRlcik7XG4gICAgICBjYXNlIFwibG9jYWxcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKGNvdW50ZXIpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbG9nZ2VyLmZhaWxlZChcIk5vIHN1Y2ggdHlwZVwiLCB0eXBlKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2dnZXIuZmFpbGVkKGBDb3VsZCBub3QgZ2V0IGNvdW50ZXIgJHtjb3VudGVyfWAsIGVycik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbmNvbnN0IHBhZ2VWaWV3SGFuZGxlciA9IChjb25kaXRpb24sIHZhbHVlKSA9PiB7XG4gIGNvbnN0IHBhZ2VWaWV3cyA9IHBhcnNlSW50KGdldENvdW50ZXIoU0VTU0lPTl9TVE9SQUdFX0tFWVMuUEFHRV9WSUVXUywgXCJzZXNzaW9uXCIpKTtcbiAgbG9nZ2VyLmxvZyhcIlBhZ2Ugdmlld3MgY291bnRlciB2YWx1ZTogXCIsIHBhZ2VWaWV3cyk7XG4gIGlmIChwYWdlVmlld3MgPT09IG51bGwpIHtcbiAgICBsb2dnZXIuZmFpbGVkKFwiUGFnZXZpZXdzIGNvdW50ZXIgbm90IGZvdW5kIGluIHNlc3Npb24gc3RvcmFnZVwiKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIocGFnZVZpZXdzLCBjb25kaXRpb24sIHBhcnNlSW50KHZhbHVlKSk7XG59O1xuXG5jb25zdCBjYUJhc2tldFByaWNlSGFuZGxlciA9IChjb25kaXRpb24sIHZhbHVlKSA9PiB7XG4gIGNvbnN0IGNhQmFza2V0UHJpY2UgPSBwYXJzZUludChcbiAgICAgIGdldENvdW50ZXIoTE9DQUxfU1RPUkFHRV9LRVlTLkNPVVBPTl9BUFBMSUNBQkxFX0JBU0tFVF9QUklDRSwgXCJsb2NhbFwiKSk7XG4gIGxvZ2dlci5sb2coXCJDb3Vwb24gYXBwbGljYWJsZSBiYXNrZXQgcHJpY2UgY291bnRlciB2YWx1ZTogXCIsIGNhQmFza2V0UHJpY2UpO1xuICBpZiAoY2FCYXNrZXRQcmljZSA9PT0gbnVsbCkge1xuICAgIGxvZ2dlci5mYWlsZWQoXCJDb3Vwb24gYXBwbGljYWJsZSBiYXNrZXQgcHJpY2UgY291bnRlciBub3QgZm91bmQgaW4gbG9jYWwgc3RvcmFnZVwiKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIoY2FCYXNrZXRQcmljZSwgY29uZGl0aW9uLCBwYXJzZUludCh2YWx1ZSkpO1xufTtcblxuIiwiaW1wb3J0IHtjb25kaXRpb25DaGVja2VyfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7Z2V0RnJvbUJlYWdsZUluZm9MYXllcn0gZnJvbSBcIi4uL0JlYWdsZUluZm9MYXllclwiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFwiQmVhZ2xlIERhdGFMYXllciBDaGVja2VyXCIpO1xuXG5leHBvcnQgY29uc3QgY2hlY2tEYXRhTGF5ZXJSdWxlID0gYXN5bmMgKHJ1bGUpID0+e1xuICBsb2dnZXIubG9nKFwiQ2hlY2tpbmcgcnVsZVwiLCBKU09OLnN0cmluZ2lmeShydWxlKSk7XG4gIGNvbnN0IHtvcGVyYXRvciwgY29uZGl0aW9uLCB2YWx1ZX0gPSBydWxlO1xuICBjb25zdCBydW50aW1lVmFsdWUgPSBhd2FpdCBkYXRhTGF5ZXJGaW5kZXIob3BlcmF0b3IpO1xuICByZXR1cm4gY29uZGl0aW9uQ2hlY2tlcihydW50aW1lVmFsdWUsIGNvbmRpdGlvbiwgdmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGRhdGFMYXllckZpbmRlciA9IGFzeW5jIChrZXkpID0+IHtcbiAgbG9nZ2VyLmxvZyhcIlNlYXJjaGluZyBiZWFnbGVJbmZvTGF5ZXIgZm9yIGtleSBcIiwga2V5KTtcbiAgY29uc3QgcmVzID0gYXdhaXQgZ2V0RnJvbUJlYWdsZUluZm9MYXllcihrZXksIHRydWUsIDEwLCAxMDAwKTtcbiAgaWYgKHJlcykge1xuICAgIGxvZ2dlci5zdWNjZXNzKGBGb3VuZCBrZXkgJHtrZXl9IHdpdGggdmFsdWUgJHtyZXN9YCk7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICBsb2dnZXIuZmFpbGVkKGBLZXkgJHtrZXl9IG5vdCBmb3VuZCBpbiBiZWFnbGVJbmZvTGF5ZXJgKTtcbiAgcmV0dXJuIG51bGw7XG59O1xuIiwiaW1wb3J0IHtjb25kaXRpb25DaGVja2VyfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlclwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIkJlYWdsZSBFbGVtZW50IENoZWNrZXJcIik7XG5cbmV4cG9ydCBjb25zdCBjaGVja0VsZW1lbnRSdWxlID0gKHJ1bGUpID0+e1xuICBsb2dnZXIubG9nKFwiQ2hlY2tpbmcgcnVsZVwiLCBKU09OLnN0cmluZ2lmeShydWxlKSk7XG4gIGNvbnN0IHtvcGVyYXRvciwgY29uZGl0aW9uLCB2YWx1ZSwgc2VsZWN0b3IsIHNlbGVjdG9yQWxsLCBzZWxlY3RvckZhbGxiYWNrID0gbnVsbH0gPSBydWxlO1xuICBsZXQgbWFpblNlbGVjdG9yID0gc2VsZWN0b3I7XG4gIGlmIChtYWluU2VsZWN0b3IgJiYgIXdpbmRvdy50b3AuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihtYWluU2VsZWN0b3IpKSB7XG4gICAgbWFpblNlbGVjdG9yID0gc2VsZWN0b3JGYWxsYmFjayA/IHNlbGVjdG9yRmFsbGJhY2sgOiBtYWluU2VsZWN0b3I7XG4gIH1cblxuICBpZiAob3BlcmF0b3IgPT09IG51bGwpIHtcbiAgICByZXR1cm4gY29uZGl0aW9uQ2hlY2tlcih3aW5kb3cudG9wLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobWFpblNlbGVjdG9yKSwgY29uZGl0aW9uLCB2YWx1ZSk7XG4gIH1cbiAgaWYgKG1haW5TZWxlY3RvciAmJiAhd2luZG93LnRvcC5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKG1haW5TZWxlY3RvcikpIHtcbiAgICBsb2dnZXIuZmFpbGVkKFwiU2VsZWN0b3Igbm90IGZvdW5kIG9uIHBhZ2VcIik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChzZWxlY3RvckFsbCAmJiAhd2luZG93LnRvcC5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yQWxsKSkge1xuICAgIGxvZ2dlci5mYWlsZWQoXCJTZWxlY3RvciBub3QgZm91bmQgb24gcGFnZVwiKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBsZXQgZWxlbWVudDtcbiAgaWYgKG1haW5TZWxlY3RvcikgZWxlbWVudCA9IHdpbmRvdy50b3AuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihtYWluU2VsZWN0b3IpO1xuICBlbHNlIGlmIChzZWxlY3RvckFsbCkgZWxlbWVudCA9IEFycmF5LmZyb20od2luZG93LnRvcC5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yQWxsKSk7XG5cbiAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgIGNhc2UgXCJ0ZXh0LW51bWJlclwiOiB7XG4gICAgICBsZXQgdGVtcFZhbDtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGVsZW1lbnQpKSB7XG4gICAgICAgIHRlbXBWYWwgPSBlbGVtZW50LnJlZHVjZSgocmV0dXJuVmFsLCBlbGVtKSA9PiB7XG4gICAgICAgICAgcmV0dXJuVmFsICs9IHBhcnNlSW50KGVsZW0udGV4dENvbnRlbnQucmVwbGFjZShcIlRMXCIsIFwiXCIpLnJlcGxhY2UoXCIuXCIsIFwiXCIpKTtcbiAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRlbXBWYWwgPSBwYXJzZUludCh3aW5kb3cudG9wLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobWFpblNlbGVjdG9yKS50ZXh0Q29udGVudFxuICAgICAgICAgICAgLnJlcGxhY2UoXCJUTFwiLCBcIlwiKS5yZXBsYWNlKFwiLlwiLCBcIlwiKSk7XG4gICAgICB9XG4gICAgICBjb25zdCBydW5UaW1lVmFsdWUgPSBwYXJzZUludCh0ZW1wVmFsKTtcbiAgICAgIHJldHVybiBjb25kaXRpb25DaGVja2VyKHJ1blRpbWVWYWx1ZSwgY29uZGl0aW9uLCB2YWx1ZSk7XG4gICAgfVxuICAgIGNhc2UgXCJjbGFzc0xpc3RcIjpcbiAgICAgIHJldHVybiBjb25kaXRpb25DaGVja2VyKEFycmF5LmZyb20oZWxlbWVudC5jbGFzc0xpc3QpLCBjb25kaXRpb24sIHZhbHVlKTtcbiAgICBjYXNlIFwiY291bnRcIjoge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZWxlbWVudCkgJiYgZWxlbWVudC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBjb25kaXRpb25DaGVja2VyKGVsZW1lbnQubGVuZ3RoLCBjb25kaXRpb24sIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gY29uZGl0aW9uQ2hlY2tlcigxLCBjb25kaXRpb24sIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjb25kaXRpb25DaGVja2VyKDAsIGNvbmRpdGlvbiwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBjYXNlIFwic3R5bGVcIjoge1xuICAgICAgY29uc3QgZWxlbWVudFN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gICAgICBjb25zdCBzdHlsZUtleSA9IHZhbHVlLnNwbGl0KFwiOlwiKVswXS50cmltKCk7XG4gICAgICBjb25zdCBzdHlsZVZhbHVlID0gdmFsdWUuc3BsaXQoXCI6XCIpWzFdLnRyaW0oKTtcbiAgICAgIGNvbnN0IHJ1blRpbWVWYWx1ZSA9IGVsZW1lbnRTdHlsZXNbc3R5bGVLZXldO1xuICAgICAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIocnVuVGltZVZhbHVlLCBjb25kaXRpb24sIHN0eWxlVmFsdWUpO1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgbG9nZ2VyLmZhaWxlZChcIk9wZXJhdG9yIG5vdCBkZWZpbmVkXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuIiwiaW1wb3J0IHtjb25kaXRpb25DaGVja2VyfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlclwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIkJlYWdsZSBGdW5jdGlvbiBDaGVja2VyXCIpO1xuXG5leHBvcnQgY29uc3QgY2hlY2tGdW5jdGlvblJ1bGUgPSAocnVsZSwgb3B0cykgPT57XG4gIGxvZ2dlci5sb2coXCJDaGVja2luZyBydWxlXCIsIEpTT04uc3RyaW5naWZ5KHJ1bGUpKTtcbiAgY29uc3Qge3Byb2R1Y3RJbmZvfSA9IG9wdHM7XG4gIGNvbnN0IHtvcGVyYXRvciwgY29uZGl0aW9uLCB2YWx1ZSwgYmluZGluZ3N9ID0gcnVsZTtcbiAgaWYgKCFvcGVyYXRvcikge1xuICAgIGxvZ2dlci5mYWlsZWQoXCJSdWxlIGZ1bmN0aW9uIG5vdCBkZWZpbmVkXCIpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsZXQgY29udGV4dCA9IHt9O1xuICBpZiAoYmluZGluZ3MgPT0gXCJwcm9kdWN0SW5mb1wiKSB7XG4gICAgY29udGV4dCA9IHtcbiAgICAgIHByb2R1Y3RJbmZvLFxuICAgIH07XG4gIH1cbiAgY29uc3QgcnVsZUZ1bmN0aW9uID0gRnVuY3Rpb24ob3BlcmF0b3IpLmJpbmQoY29udGV4dCk7XG4gIGNvbnN0IHJ1bnRpbWVWYWx1ZSA9IHJ1bGVGdW5jdGlvbigpO1xuICByZXR1cm4gY29uZGl0aW9uQ2hlY2tlcihydW50aW1lVmFsdWUsIGNvbmRpdGlvbiwgdmFsdWUpO1xufTtcbiIsImltcG9ydCB7U0VTU0lPTl9TVE9SQUdFX0tFWVN9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7Y29uZGl0aW9uQ2hlY2tlcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJCZWFnbGUgU2Vzc2lvbiBDaGVja2VyXCIpO1xuXG5leHBvcnQgY29uc3QgY2hlY2tTZXNzaW9uUnVsZSA9IChydWxlKSA9PntcbiAgbG9nZ2VyLmxvZyhcIkNoZWNraW5nIHJ1bGVcIiwgSlNPTi5zdHJpbmdpZnkocnVsZSkpO1xuICBjb25zdCB7b3BlcmF0b3IsIGNvbmRpdGlvbiwgdmFsdWV9ID0gcnVsZTtcbiAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgIGNhc2UgXCJkdXJhdGlvblwiOlxuICAgICAgcmV0dXJuIGR1cmF0aW9uSGFuZGxlcihjb25kaXRpb24sIHZhbHVlKTtcbiAgICBjYXNlIFwiaGlzdG9yeVwiOlxuICAgICAgcmV0dXJuIGhpc3RvcnlIYW5kbGVyKGNvbmRpdGlvbiwgdmFsdWUpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuY29uc3QgZ2V0U2Vzc2lvblRpbWVzdGFtcCA9ICgpID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IERhdGUocGFyc2VJbnQod2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oU0VTU0lPTl9TVE9SQUdFX0tFWVMuU0VTU0lPTl9USU1FU1RBTVApKSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZ2dlci5mYWlsZWQoXCJDb3VsZCBub3QgZ2V0IHNlc3Npb24gdGltZXN0YW1wXCIsIGVycik7XG4gICAgcmV0dXJuIERhdGUubm93KCk7XG4gIH1cbn07XG5cbmNvbnN0IGR1cmF0aW9uSGFuZGxlciA9IChjb25kaXRpb24sIHZhbHVlKSA9PiB7XG4gIGNvbnN0IGR1cmF0aW9uID0gKERhdGUubm93KCkgLSBnZXRTZXNzaW9uVGltZXN0YW1wKCkpIC8gMTAwMDtcbiAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIoZHVyYXRpb24sIGNvbmRpdGlvbiwgcGFyc2VJbnQodmFsdWUpKTtcbn07XG5cbmNvbnN0IGhpc3RvcnlIYW5kbGVyID0gKGNvbmRpdGlvbiwgdmFsdWUpID0+IHtcbiAgY29uc3QgY3VycmVudEhpc3RvcnkgPSB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShTRVNTSU9OX1NUT1JBR0VfS0VZUy5TRVNTSU9OX0hJU1RPUlkpPy5zcGxpdChcIixcIik7XG4gIHJldHVybiBjb25kaXRpb25DaGVja2VyKGN1cnJlbnRIaXN0b3J5LCBjb25kaXRpb24sIHZhbHVlKTtcbn07XG4iLCJpbXBvcnQge2NvbmRpdGlvbkNoZWNrZXJ9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFwiQmVhZ2xlIFVybCBDaGVja2VyXCIpO1xuXG5leHBvcnQgY29uc3QgY2hlY2tVcmxSdWxlID0gKHJ1bGUpID0+e1xuICBsb2dnZXIubG9nKFwiQ2hlY2tpbmcgcnVsZVwiLCBKU09OLnN0cmluZ2lmeShydWxlKSk7XG4gIGNvbnN0IHtvcGVyYXRvciwgY29uZGl0aW9uLCB2YWx1ZX0gPSBydWxlO1xuXG4gIHN3aXRjaCAob3BlcmF0b3IpIHtcbiAgICBjYXNlIFwicGF0aFwiOiB7XG4gICAgICBjb25zdCByZXF1ZXN0VVJMPSB3aW5kb3cudG9wLmxvY2F0aW9uLmhyZWY7XG4gICAgICBjb25zdCBwYXRoID0gbmV3IFVSTChyZXF1ZXN0VVJMKS5wYXRobmFtZTtcbiAgICAgIGxvZ2dlci5sb2coYENoZWNraW5nIHBhdGggJHtwYXRofSBtYXRjaGVzIHJ1bGUgcGF0aCAke3ZhbHVlfWApO1xuICAgICAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIocGF0aCwgY29uZGl0aW9uLCB2YWx1ZSk7XG4gICAgfVxuICAgIGNhc2UgXCJQTEFDRUhPTERFUlwiOiB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuIiwiaW1wb3J0IHtjb25kaXRpb25DaGVja2VyfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7TU9CSUxFX01FRElBX1FVRVJZfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJCZWFnbGUgRW52IENoZWNrZXJcIik7XG5cbmV4cG9ydCBjb25zdCBjaGVja0VudlJ1bGUgPSAocnVsZSkgPT57XG4gIGxvZ2dlci5sb2coXCJDaGVja2luZyBydWxlXCIsIEpTT04uc3RyaW5naWZ5KHJ1bGUpKTtcbiAgY29uc3Qge29wZXJhdG9yLCBjb25kaXRpb24sIHZhbHVlfSA9IHJ1bGU7XG5cbiAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgIGNhc2UgXCJkZXZpY2VfdHlwZVwiOiB7XG4gICAgICBjb25zdCBpc01vYmlsZSA9IHdpbmRvdy5tYXRjaE1lZGlhKE1PQklMRV9NRURJQV9RVUVSWSkubWF0Y2hlcyA/IFwibW9iaWxlXCIgOiBcImRlc2t0b3BcIjtcbiAgICAgIHJldHVybiBjb25kaXRpb25DaGVja2VyKGlzTW9iaWxlLCBjb25kaXRpb24sIHZhbHVlKTtcbiAgICB9XG4gICAgY2FzZSBcIlBMQUNFSE9MREVSXCI6IHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG4iLCJpbXBvcnQge2NvbmRpdGlvbkNoZWNrZXIsIGRldGVybWluZVBjdCwgZ2V0SWRlbnRpZmllcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJCZWFnbGUgUmFuZG9tUGN0IENoZWNrZXJcIik7XG5cbmV4cG9ydCBjb25zdCBjaGVja1JhbmRvbU51bWJlclJ1bGUgPSBhc3luYyAocnVsZSkgPT57XG4gIGxvZ2dlci5sb2coXCJDaGVja2luZyBydWxlXCIsIEpTT04uc3RyaW5naWZ5KHJ1bGUpKTtcbiAgY29uc3Qge2NvbmRpdGlvbiwgdmFsdWUsIHNhbHR9ID0gcnVsZTtcbiAgaWYgKCFzYWx0KSB7XG4gICAgbG9nZ2VyLmZhaWxlZChcIlNhbHQgaXMgbm90IGRlZmluZWRcIik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGlkZW50aWZpZXIgPSBhd2FpdCBnZXRJZGVudGlmaWVyKCk7XG4gIGNvbnN0IHJhbmRvbVBjdCA9IGF3YWl0IGRldGVybWluZVBjdChpZGVudGlmaWVyICsgc2FsdCk7XG4gIGNvbnN0IHJ1bnRpbWVWYWx1ZSA9IHJhbmRvbVBjdDtcbiAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIocnVudGltZVZhbHVlLCBjb25kaXRpb24sIHZhbHVlKTtcbn07XG4iLCJpbXBvcnQge2NvbmRpdGlvbkNoZWNrZXJ9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyXCI7XG5cbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJCZWFnbGUgUHJvZHVjdEluZm8gQ2hlY2tlclwiKTtcblxuZXhwb3J0IGNvbnN0IGNoZWNrUHJvZHVjdEluZm9SdWxlID0gKHJ1bGUsIGJpbmRpbmdzKSA9PntcbiAgbG9nZ2VyLmxvZyhcIkNoZWNraW5nIHJ1bGVcIiwgSlNPTi5zdHJpbmdpZnkocnVsZSkpO1xuICBjb25zdCB7b3BlcmF0b3IsIGNvbmRpdGlvbiwgdmFsdWV9ID0gcnVsZTtcbiAgY29uc3Qge3Byb2R1Y3RJbmZvfSA9IGJpbmRpbmdzO1xuICBpZiAoIXByb2R1Y3RJbmZvIHx8ICh0eXBlb2YgcHJvZHVjdEluZm8gPT09IFwib2JqZWN0XCIgJiYgIU9iamVjdC5rZXlzKHByb2R1Y3RJbmZvKS5sZW5ndGgpKSByZXR1cm4gZmFsc2U7XG4gIGxldCBydW50aW1lVmFsdWUgPSBudWxsO1xuICBjb25zdCBza3UgPSBwcm9kdWN0SW5mb1tPYmplY3Qua2V5cyhwcm9kdWN0SW5mbylbMF1dPy5pZDtcbiAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgIGNhc2UgXCJ0cmFuc2FjdGlvbkluMldlZWtzXCI6IHtcbiAgICAgIGxvZ2dlci5sb2coXCJHZXR0aW5nIFRyYW5zYWN0aW9uQ291bnQgZm9yIHNrdSBcIiwgc2t1KTtcbiAgICAgIHJ1bnRpbWVWYWx1ZSA9IGdldFRyYW5zYWN0aW9uQ291bnQoc2t1LCBwcm9kdWN0SW5mbyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImFkZFRvQ2FydEluMldlZWtzXCI6IHtcbiAgICAgIGxvZ2dlci5sb2coXCJHZXR0aW5nIEFkZFRvQ2FydENvdW50IGZvciBza3UgXCIsIHNrdSk7XG4gICAgICBydW50aW1lVmFsdWUgPSBnZXRBZGRUb0NhcnRDb3VudChza3UsIHByb2R1Y3RJbmZvKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwicHJvZHVjdFZpZXdDb3VudFwiOiB7XG4gICAgICBsb2dnZXIubG9nKFwiR2V0dGluZyBwcm9kdWN0Vmlld0NvdW50IGZvciBza3UgXCIsIHNrdSk7XG4gICAgICBydW50aW1lVmFsdWUgPSBnZXRQcmV2aWV3Q291bnQoc2t1LCBwcm9kdWN0SW5mbyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIocnVudGltZVZhbHVlLCBjb25kaXRpb24sIHZhbHVlKTtcbn07XG5cbmNvbnN0IGdldFRyYW5zYWN0aW9uQ291bnQgPSAoc2t1LCBwcm9kdWN0SW5mbykgPT4ge1xuICBpZiAoc2t1ICYmIHByb2R1Y3RJbmZvICYmIHByb2R1Y3RJbmZvW3NrdV0pIHtcbiAgICByZXR1cm4gcHJvZHVjdEluZm9bc2t1XT8uY2F0YWxvZz8udHJhbnNhY3Rpb25JbjJXZWVrcztcbiAgfVxuICByZXR1cm4gLTE7XG59O1xuXG5jb25zdCBnZXRBZGRUb0NhcnRDb3VudCA9IChza3UsIHByb2R1Y3RJbmZvKSA9PiB7XG4gIGlmIChza3UgJiYgcHJvZHVjdEluZm8gJiYgcHJvZHVjdEluZm9bc2t1XSkge1xuICAgIHJldHVybiBwcm9kdWN0SW5mb1tza3VdPy5jYXRhbG9nPy5hZGRUb0NhcnRJbjJXZWVrcztcbiAgfVxuICByZXR1cm4gLTE7XG59O1xuXG5jb25zdCBnZXRQcmV2aWV3Q291bnQgPSAoc2t1LCBwcm9kdWN0SW5mbykgPT4ge1xuICBpZiAoc2t1ICYmIHByb2R1Y3RJbmZvICYmIHByb2R1Y3RJbmZvW3NrdV0pIHtcbiAgICByZXR1cm4gcHJvZHVjdEluZm9bc2t1XT8uY2F0YWxvZz8ucHJvZHVjdFZpZXdDb3VudDtcbiAgfVxuICByZXR1cm4gLTE7XG59O1xuIiwiaW1wb3J0IHtjaGVja0NvdW50ZXJSdWxlfSBmcm9tIFwiLi9jb3VudGVyQ2hlY2tlclwiO1xuaW1wb3J0IHtjaGVja0RhdGFMYXllclJ1bGV9IGZyb20gXCIuL2RhdGFMYXllckNoZWNrZXJcIjtcbmltcG9ydCB7Y2hlY2tFbGVtZW50UnVsZX0gZnJvbSBcIi4vZWxlbWVudENoZWNrZXJcIjtcbmltcG9ydCB7Y2hlY2tGdW5jdGlvblJ1bGV9IGZyb20gXCIuL2Z1bmN0aW9uQ2hlY2tlclwiO1xuaW1wb3J0IHtjaGVja1Nlc3Npb25SdWxlfSBmcm9tIFwiLi9zZXNzaW9uQ2hlY2tlclwiO1xuaW1wb3J0IHtjaGVja1VybFJ1bGV9IGZyb20gXCIuL3VybENoZWNrZXJcIjtcbmltcG9ydCB7Y2hlY2tFbnZSdWxlfSBmcm9tIFwiLi9lbnZDaGVja2VyXCI7XG5pbXBvcnQge2NoZWNrUmFuZG9tTnVtYmVyUnVsZX0gZnJvbSBcIi4vcmFuZG9tTnVtYmVyQ2hlY2tlclwiO1xuaW1wb3J0IHtjaGVja1Byb2R1Y3RJbmZvUnVsZX0gZnJvbSBcIi4vcHJvZHVjdEluZm9DaGVja2VyXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJCZWFnbGUgUnVsZSBFbmdpbmVcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJ1bGVFbmdpbmUge1xuICBjb25zdHJ1Y3Rvcihib2R5KSB7XG4gICAgY29uc3Qge2Jhc2VSdWxlU2V0LCBidXNpbmVzc1J1bGVTZXQsIGJpbmRpbmdzLCBjYWxsYmFjayA9IG51bGx9ID0gYm9keTtcbiAgICB0aGlzLmJhc2VSdWxlU2V0ID0gYmFzZVJ1bGVTZXQ7XG4gICAgdGhpcy5idXNpbmVzc1J1bGVTZXQgPSBidXNpbmVzc1J1bGVTZXQ7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuYmluZGluZ3MgPSBiaW5kaW5ncztcbiAgfVxuXG4gIGFzeW5jIGNoZWNrUnVsZXMoKSB7XG4gICAgZm9yIChjb25zdCBydWxlIG9mIHRoaXMuYmFzZVJ1bGVTZXQpIHtcbiAgICAgIGNvbnN0IHJ1bGVTYXRpc2ZpZWQgPSBhd2FpdCB0aGlzLmNoZWNrUnVsZShydWxlKTtcbiAgICAgIGlmICghcnVsZVNhdGlzZmllZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXN5bmMgY2hlY2tCdXNpbmVzc1J1bGVzKCkge1xuICAgIGZvciAoY29uc3QgcnVsZSBvZiB0aGlzLmJ1c2luZXNzUnVsZVNldCkge1xuICAgICAgY29uc3QgcnVsZVNhdGlzZmllZCA9IGF3YWl0IHRoaXMuY2hlY2tSdWxlKHJ1bGUpO1xuICAgICAgaWYgKHJ1bGVTYXRpc2ZpZWQpIHtcbiAgICAgICAgcmV0dXJuIHJ1bGUuYnVzaW5lc3NSdWxlSWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgYXN5bmMgY2hlY2tSdWxlKHJ1bGUpIHtcbiAgICBjb25zdCB7Y2hhaW4sIGNoYWluX2NvbmRpdGlvbiwgdHlwZX0gPSBydWxlO1xuICAgIGxldCBydWxlU2F0aXNmaWVkID0gbnVsbDtcbiAgICAvLyBjaGVjayBydWxlXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwic2Vzc2lvblwiOlxuICAgICAgICBydWxlU2F0aXNmaWVkID0gY2hlY2tTZXNzaW9uUnVsZShydWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiY291bnRlclwiOlxuICAgICAgICBydWxlU2F0aXNmaWVkID0gY2hlY2tDb3VudGVyUnVsZShydWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZWxlbWVudFwiOlxuICAgICAgICBydWxlU2F0aXNmaWVkID0gY2hlY2tFbGVtZW50UnVsZShydWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZGF0YUxheWVyXCI6XG4gICAgICAgIHJ1bGVTYXRpc2ZpZWQgPSBhd2FpdCBjaGVja0RhdGFMYXllclJ1bGUocnVsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInVybFwiOlxuICAgICAgICBydWxlU2F0aXNmaWVkID0gY2hlY2tVcmxSdWxlKHJ1bGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICBydWxlU2F0aXNmaWVkID0gY2hlY2tGdW5jdGlvblJ1bGUocnVsZSwgdGhpcy5iaW5kaW5ncyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImVudmlyb25tZW50XCI6XG4gICAgICAgIHJ1bGVTYXRpc2ZpZWQgPSBjaGVja0VudlJ1bGUocnVsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInJhbmRvbVwiOlxuICAgICAgICBydWxlU2F0aXNmaWVkID0gYXdhaXQgY2hlY2tSYW5kb21OdW1iZXJSdWxlKHJ1bGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJwcm9kdWN0SW5mb0xvb2t1cFwiOlxuICAgICAgICBydWxlU2F0aXNmaWVkID0gY2hlY2tQcm9kdWN0SW5mb1J1bGUocnVsZSwgdGhpcy5iaW5kaW5ncyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbG9nZ2VyLmZhaWxlZChgTm8gc3VjaCBydWxlIHR5cGU6ICR7dHlwZX1gKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGNoYWluKSB7XG4gICAgICBzd2l0Y2ggKGNoYWluX2NvbmRpdGlvbikge1xuICAgICAgICBjYXNlIFwiYW5kXCI6XG4gICAgICAgICAgcnVsZVNhdGlzZmllZCA9IHJ1bGVTYXRpc2ZpZWQgJiYgYXdhaXQgdGhpcy5jaGVja1J1bGUoY2hhaW4pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwib3JcIjpcbiAgICAgICAgICBydWxlU2F0aXNmaWVkID0gcnVsZVNhdGlzZmllZCB8fCBhd2FpdCB0aGlzLmNoZWNrUnVsZShjaGFpbik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ4b3JcIjpcbiAgICAgICAgICBydWxlU2F0aXNmaWVkID0gcnVsZVNhdGlzZmllZCAhPSBhd2FpdCB0aGlzLmNoZWNrUnVsZShjaGFpbik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgbG9nZ2VyLmZhaWxlZChcIk5vIHN1Y2ggY2hhaW4gY29uZGl0aW9uXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcnVsZVNhdGlzZmllZDtcbiAgfVxufVxuIiwiaW1wb3J0IHthZGRUb0JlYWdsZUluZm9MYXllcn0gZnJvbSBcIi4uL0JlYWdsZUluZm9MYXllclwiO1xuaW1wb3J0IFJ1bGVFbmdpbmUgZnJvbSBcIi4uL05leHRkYXlSdWxlRW5naW5lXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIlNlZ21lbnRhdGlvbkNvbXB1dGVyXCIpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29tcHV0ZVNlZ21lbnQodHJlYXRtZW50V2VpZ2h0cykge1xuICBsb2dnZXIubG9nKFwiRGV0ZXJtaW5pbmcgdXNlciBzZWdtZW50XCIpO1xuICBmb3IgKGNvbnN0IHNlZ21lbnQgb2YgT2JqZWN0LmtleXModHJlYXRtZW50V2VpZ2h0cykpIHtcbiAgICBjb25zdCBydWxlU2V0ID0gdHJlYXRtZW50V2VpZ2h0c1tzZWdtZW50XT8ucnVsZVNldDtcbiAgICBpZiAoIXJ1bGVTZXQpIGNvbnRpbnVlO1xuICAgIGNvbnN0IHNlZ21lbnRSdWxlRW5naW5lID0gbmV3IFJ1bGVFbmdpbmUoe2Jhc2VSdWxlU2V0OiBydWxlU2V0LCBidXNpbmVzc1J1bGVTZXQ6IFtdLCBiaW5kaW5nczogbnVsbH0pO1xuICAgIGlmIChhd2FpdCBzZWdtZW50UnVsZUVuZ2luZS5jaGVja1J1bGVzKCkpIHtcbiAgICAgIGxvZ2dlci5sb2coYFVzZXIgc2VnbWVudCBtYXRjaGVkOiAke3NlZ21lbnR9YCk7XG4gICAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcInNcIiwgc2VnbWVudCk7XG4gICAgICByZXR1cm4gc2VnbWVudDtcbiAgICB9XG4gIH1cblxuICBsb2dnZXIubG9nKFwiVXNlciBzZWdtZW50IG5vdCBtYXRjaGVkLCByZXR1cm5pbmcgZGVmYXVsdFwiKTtcbiAgcmV0dXJuIFwiZGVmYXVsdFwiO1xufVxuIiwiaW1wb3J0IHtTRVNTSU9OX1NUT1JBR0VfS0VZUywgVFJFQVRNRU5UU19EVVJBVElPTn0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHtmZXRjaFRyZWF0bWVudHMsIGZldGNoVHJlYXRtZW50V2VpZ2h0c30gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQge2NvbXB1dGVTZWdtZW50fSBmcm9tIFwiLi4vQmVhZ2xlSW5mb0xheWVyL3NlZ21lbnQtY29tcHV0ZXJcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlclwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIkJlYWdsZSBUcmVhdG1lbnQgUmVwb3NpdG9yeVwiKTtcblxuY2xhc3MgVHJlYXRtZW50UmVwb3NpdG9yeSB7XG4gIGNvbnN0cnVjdG9yKGJvZHkpIHtcbiAgICBjb25zdCB7dHJlYXRtZW50cywgdHJlYXRtZW50V2VpZ2h0c30gPSBib2R5O1xuICAgIHRoaXMudHJlYXRtZW50cyA9IHRyZWF0bWVudHM7XG5cbiAgICB0aGlzLnRyZWF0bWVudFdlaWdodHMgPSB0cmVhdG1lbnRXZWlnaHRzO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGdldFRyZWF0bWVudHMoKSB7XG4gICAgbG9nZ2VyLmxvZyhcIkxvYWRpbmcgdHJlYXRtZW50c1wiKTtcbiAgICBjb25zdCB7VFJFQVRNRU5UU30gPSBTRVNTSU9OX1NUT1JBR0VfS0VZUztcbiAgICBjb25zdCB0cmVhdG1lbnRzT2JqID0gSlNPTi5wYXJzZSh3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShUUkVBVE1FTlRTKSk7XG4gICAgbGV0IHRyZWF0bWVudHMgPSB0cmVhdG1lbnRzT2JqPy50cmVhdG1lbnRzO1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IHRyZWF0bWVudHNPYmo/LnRpbWVzdGFtcDtcbiAgICBpZiAoIXRyZWF0bWVudHMgfHwgIXRpbWVzdGFtcCkge1xuICAgICAgbG9nZ2VyLmZhaWxlZChcIlRyZWF0bWVudHMgbm90IGZvdW5kIGluIGxvY2FsIHN0b3JhZ2VcIik7XG4gICAgICB0cmVhdG1lbnRzID0gYXdhaXQgZmV0Y2hUcmVhdG1lbnRzKCk7XG4gICAgICBjb25zdCB0cmVhdG1lbnRXaXRoVGltZXN0YW1wID0ge1xuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgIHRyZWF0bWVudHMsXG4gICAgICB9O1xuICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oVFJFQVRNRU5UUywgSlNPTi5zdHJpbmdpZnkodHJlYXRtZW50V2l0aFRpbWVzdGFtcCkpO1xuICAgICAgcmV0dXJuIHRyZWF0bWVudHM7XG4gICAgfVxuICAgIGlmICh0aW1lc3RhbXApIHtcbiAgICAgIGNvbnN0IGVsYXBzZWREYXlzID0gKERhdGUubm93KCkgLSB0aW1lc3RhbXApIC8gKDEwMDAgKiAzNjAwICogMjQpO1xuICAgICAgaWYgKGVsYXBzZWREYXlzID4gVFJFQVRNRU5UU19EVVJBVElPTikge1xuICAgICAgICBsb2dnZXIuZmFpbGVkKFwiVHJlYXRtZW50cyBhcmUgZXhwaXJlZFwiKTtcbiAgICAgICAgdHJlYXRtZW50cyA9IGF3YWl0IGZldGNoVHJlYXRtZW50cygpO1xuICAgICAgICBjb25zdCB0cmVhdG1lbnRXaXRoVGltZXN0YW1wID0ge1xuICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgICB0cmVhdG1lbnRzLFxuICAgICAgICB9O1xuICAgICAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShUUkVBVE1FTlRTLCBKU09OLnN0cmluZ2lmeSh0cmVhdG1lbnRXaXRoVGltZXN0YW1wKSk7XG4gICAgICAgIHJldHVybiB0cmVhdG1lbnRzO1xuICAgICAgfVxuICAgIH1cbiAgICBsb2dnZXIuc3VjY2VzcyhcIlRyZWF0bWVudHMgYXJlIGxvYWRlZCBmcm9tIGxvY2FsIHN0b3JhZ2VcIik7XG4gICAgcmV0dXJuIHRyZWF0bWVudHM7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZ2V0VHJlYXRtZW50V2VpZ2h0cygpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IGZldGNoVHJlYXRtZW50V2VpZ2h0cygpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nZ2VyLndhcm4oZXJyLm1lc3NhZ2UpO1xuICAgICAgdGhpcy50cmVhdG1lbnRXZWlnaHRzID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRNYXRjaGVkVHJlYXRtZW50cygpIHtcbiAgICBjb25zdCB0cmVhdG1lbnRXZWlnaHRzID0gdGhpcy50cmVhdG1lbnRXZWlnaHRzO1xuICAgIGNvbnN0IHVzZXJHcm91cCA9IGF3YWl0IGNvbXB1dGVTZWdtZW50KHRyZWF0bWVudFdlaWdodHMpO1xuICAgIGNvbnN0IHRyZWF0bWVudHMgPSB0aGlzLnRyZWF0bWVudHM7XG4gICAgaWYgKHRyZWF0bWVudFdlaWdodHMpIHtcbiAgICAgIGNvbnN0IHVzZXJHcm91cFdlaWdodHMgPSAodXNlckdyb3VwICYmIHRyZWF0bWVudFdlaWdodHNbdXNlckdyb3VwXSkgP1xuICAgICAgdHJlYXRtZW50V2VpZ2h0c1t1c2VyR3JvdXBdIDogdHJlYXRtZW50V2VpZ2h0c1tcImRlZmF1bHRcIl07XG4gICAgICBmb3IgKGNvbnN0IHRyZWF0bWVudCBvZiB0cmVhdG1lbnRzKSB7XG4gICAgICAgIHRyZWF0bWVudC53ZWlnaHQgPSB1c2VyR3JvdXBXZWlnaHRzW3RyZWF0bWVudD8uaWRdPy53ZWlnaHQgfHwgMDtcbiAgICAgICAgaWYgKCF0cmVhdG1lbnQuYWN0aW9ucy5zb21lKChhKSA9PiBhLnZhcmlhbnRzKSkgY29udGludWU7XG4gICAgICAgIGZvciAoY29uc3QgYWN0aW9uIG9mIHRyZWF0bWVudC5hY3Rpb25zKSB7XG4gICAgICAgICAgaWYgKCFhY3Rpb24udmFyaWFudHMpIGNvbnRpbnVlO1xuICAgICAgICAgIGZvciAoY29uc3QgdmFyaWFudEtleSBvZiBPYmplY3Qua2V5cyhhY3Rpb24udmFyaWFudHMpKSB7XG4gICAgICAgICAgICBpZiAodXNlckdyb3VwV2VpZ2h0c1t0cmVhdG1lbnQuaWRdPy52YXJpYW50cyAmJiB1c2VyR3JvdXBXZWlnaHRzW3RyZWF0bWVudC5pZF0/LnZhcmlhbnRzW3ZhcmlhbnRLZXldKSB7XG4gICAgICAgICAgICAgIGFjdGlvbi52YXJpYW50c1t2YXJpYW50S2V5XS53ZWlnaHQgPSB1c2VyR3JvdXBXZWlnaHRzW3RyZWF0bWVudC5pZF0udmFyaWFudHNbdmFyaWFudEtleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbG9nZ2VyLmxvZyhgJHt0cmVhdG1lbnRzLmxlbmd0aH0gdHJlYXRtZW50cyB1c2VyIGdyb3VwIG1hdGNoZWRgKTtcbiAgICBpZiAoIXRyZWF0bWVudHMubGVuZ3RoKSByZXR1cm4gW107XG4gICAgcmV0dXJuIHRyZWF0bWVudHM7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVHJlYXRtZW50UmVwb3NpdG9yeTtcbiIsImltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlclwiO1xuaW1wb3J0IGFwcGx5QWN0aW9ucyBmcm9tIFwiLi4vTmV4dGRheUFwcGx5QWN0aW9ucy9pbmRleFwiO1xuaW1wb3J0IFRyZWF0bWVudFJlcG9zaXRvcnkgZnJvbSBcIi4uL05leHRkYXlUcmVhdG1lbnRSZXBvc2l0b3J5L2luZGV4XCI7XG5pbXBvcnQgUnVsZUVuZ2luZSBmcm9tIFwiLi4vTmV4dGRheVJ1bGVFbmdpbmVcIjtcbmltcG9ydCB7XG4gIGFkZFRyZWF0bWVudCxcbiAgZ2V0RnJvbUJlYWdsZUluZm9MYXllcixcbn0gZnJvbSBcIi4uL0JlYWdsZUluZm9MYXllclwiO1xuaW1wb3J0IHtcbiAgTU9CSUxFX01FRElBX1FVRVJZLFxuICBUUkVBVE1FTlRfUkFUSU8sXG59IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7XG4gIGluaXRpYXRlU2Vzc2lvblN0b3JhZ2VzLFxuICBpbmplY3RTdHlsZVNoZWV0LFxuICByZW1vdmVEb2N1bWVudEhpZGUsXG4gIGRldGVybWluZVBjdCxcbiAgcHJlcGFyZUFjdGlvbnMsXG59IGZyb20gXCIuLi91dGlsc1wiO1xuXG5cbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJCZWFnbGVPbkNvbXBvbmVudFwiKTtcblxuY29uc3QgYmVhZ2xlT24gPSBhc3luYyAoaWRlbnRpZmllciwgbW9uaXRvciwgZGVidWdNb2RlLCBwYWdlVHlwZSwgbWFpblByb2R1Y3RJbmZvKSA9PiB7XG4gIGNvbnN0IHRyZWF0bWVudHNQcm9taXNlID0gVHJlYXRtZW50UmVwb3NpdG9yeS5nZXRUcmVhdG1lbnRzKCk7XG4gIGNvbnN0IHRyZWF0bWVudFdlaWdodHNQcm9taXNlID0gVHJlYXRtZW50UmVwb3NpdG9yeS5nZXRUcmVhdG1lbnRXZWlnaHRzKCk7XG5cbiAgaW5qZWN0U3R5bGVTaGVldCgpO1xuICBpbml0aWF0ZVNlc3Npb25TdG9yYWdlcygpO1xuXG4gIGNvbnN0IHNlYXJjaFBhcmFtcyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XG4gIGxldCBkZWJ1Z0ZpbHRlcmVkVHJlYXRtZW50cyA9IG51bGw7XG4gIGlmIChkZWJ1Z01vZGUgJiYgc2VhcmNoUGFyYW1zLmluY2x1ZGVzKFwiZmlsdGVyPVwiKSkge1xuICAgIGRlYnVnRmlsdGVyZWRUcmVhdG1lbnRzID0gc2VhcmNoUGFyYW1zLnNsaWNlKFxuICAgICAgICBzZWFyY2hQYXJhbXMuaW5kZXhPZihcIltcIikgKyAxLFxuICAgICAgICBzZWFyY2hQYXJhbXMubGFzdEluZGV4T2YoXCJdXCIpLFxuICAgICkuc3BsaXQoXCIsXCIpLm1hcCgoaXRlbSkgPT4gcGFyc2VJbnQoaXRlbSwgMTApKTtcbiAgfVxuXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIHJlbW92ZURvY3VtZW50SGlkZSgpO1xuICB9LCAyMDAwKTtcblxuICBjb25zdCBpc01vYmlsZSA9IHdpbmRvdy5tYXRjaE1lZGlhKE1PQklMRV9NRURJQV9RVUVSWSkubWF0Y2hlcztcbiAgY29uc3QgT0JTRVJWRVJfQ09ORklHID0ge3N1YnRyZWU6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgYXR0cmlidXRlczogdHJ1ZX07XG5cbiAgY29uc3QgW3RyZWF0bWVudHMsIHRyZWF0bWVudFdlaWdodHNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW3RyZWF0bWVudHNQcm9taXNlLCB0cmVhdG1lbnRXZWlnaHRzUHJvbWlzZV0pO1xuXG4gIGxvZ2dlci5zdWNjZXNzKFwiRm91bmQgdHJlYXRtZW50czogXCIsIHRyZWF0bWVudHMpO1xuXG4gIGNvbnN0IHRyZWF0bWVudFJlcG9zaXRvcnkgPSBuZXcgVHJlYXRtZW50UmVwb3NpdG9yeSh7XG4gICAgdHJlYXRtZW50cyxcbiAgICB0cmVhdG1lbnRXZWlnaHRzLFxuICB9KTtcblxuICBjb25zdCBtYXRjaGVkVHJlYXRtZW50cyA9IGF3YWl0IHRyZWF0bWVudFJlcG9zaXRvcnkuZ2V0TWF0Y2hlZFRyZWF0bWVudHMoKTtcbiAgaWYgKCFtYXRjaGVkVHJlYXRtZW50cy5sZW5ndGgpIHtcbiAgICBsb2dnZXIubG9nKFwiTm8gdHJlYXRtZW50cyBtYXRjaGVkLCByZXR1cm5pbmcgd2l0aG91dCBmdXJ0aGVyIGFjdGlvblwiKTtcbiAgICByZW1vdmVEb2N1bWVudEhpZGUoKTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcmVBcHBseVRyZWF0bWVudHNNYXAgPSB7fTtcbiAgZm9yIChjb25zdCB0cmVhdG1lbnQgb2YgbWF0Y2hlZFRyZWF0bWVudHMpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgZW5nYWdlVHJlYXRtZW50KHRyZWF0bWVudCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2dnZXIuZmFpbGVkKFwiRXJyb3IgZXhlY3V0aW5nIHJ1bGVzXCIsIGVycik7XG4gICAgfVxuICB9XG4gIHJlbW92ZURvY3VtZW50SGlkZSgpO1xuXG4gIGxvZ2dlci5zdWNjZXNzKFwiQXBwbGllZCB0cmVhdG1lbnRzOiBcIiwgYXdhaXQgZ2V0RnJvbUJlYWdsZUluZm9MYXllcihcImFcIikpO1xuXG4gIHNldEludGVydmFsKCgpID0+IHtcbiAgICBtb25pdG9yLnVwZGF0ZUxhdGVzdENoYW5nZXMoKTtcbiAgfSwgMTAwMCk7XG5cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMocmVBcHBseVRyZWF0bWVudHNNYXApKSB7XG4gICAgY29uc3QgdHJlYXRtZW50SWRzID0gcmVBcHBseVRyZWF0bWVudHNNYXBba2V5XTtcbiAgICBjb25zdCByZUFwcGx5VHJlYXRtZW50cyA9IG1hdGNoZWRUcmVhdG1lbnRzLmZpbHRlcigodCkgPT4gdHJlYXRtZW50SWRzLmluY2x1ZGVzKHQuaWQpKTtcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgY2FzZSBcImluZmluaXRlX3Njcm9sbFwiOiB7XG4gICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGZvciAoY29uc3QgdHJlYXRtZW50IG9mIHJlQXBwbHlUcmVhdG1lbnRzKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKGBSZXRyeWluZyB0cmVhdG1lbnQgJHt0cmVhdG1lbnQuaWR9IGZyb20gaW5maW5pdGVfc2Nyb2xsYCk7XG4gICAgICAgICAgICBlbmdhZ2VUcmVhdG1lbnQodHJlYXRtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKHdpbmRvdy50b3AuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcbiAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwidGltZW91dFwiOiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGZvciAoY29uc3QgdHJlYXRtZW50IG9mIHJlQXBwbHlUcmVhdG1lbnRzKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKGBSZXRyeWluZyB0cmVhdG1lbnQgJHt0cmVhdG1lbnQuaWR9IGZyb20gdGltZW91dGApO1xuICAgICAgICAgICAgZW5nYWdlVHJlYXRtZW50KHRyZWF0bWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCA1MDApO1xuICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJlbGVtZW50X2NoYW5nZVwiOiB7XG4gICAgICAgIGZvciAoY29uc3QgdHJlYXRtZW50IG9mIHJlQXBwbHlUcmVhdG1lbnRzKSB7XG4gICAgICAgICAgY29uc3QgcmVhcHBseVNlbGVjdG9yTGlzdCA9IEFycmF5LmlzQXJyYXkodHJlYXRtZW50LnJlYXBwbHlfc2VsZWN0b3IpID9cbiAgICAgICAgICAgIHRyZWF0bWVudC5yZWFwcGx5X3NlbGVjdG9yIDogW3RyZWF0bWVudC5yZWFwcGx5X3NlbGVjdG9yXTtcbiAgICAgICAgICBmb3IgKGNvbnN0IHNlbGVjdG9yIG9mIHJlYXBwbHlTZWxlY3Rvckxpc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB3aW5kb3cudG9wLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIubG9nKGBSZXRyeWluZyB0cmVhdG1lbnQgJHt0cmVhdG1lbnQuaWR9IGZyb20gZWxlbWVudF9jaGFuZ2VgKTtcbiAgICAgICAgICAgICAgICBlbmdhZ2VUcmVhdG1lbnQodHJlYXRtZW50KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUoZWxlbWVudCwgT0JTRVJWRVJfQ09ORklHKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwib25fc2Nyb2xsXCI6IHtcbiAgICAgICAgd2luZG93Lm9uc2Nyb2xsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZm9yIChjb25zdCB0cmVhdG1lbnQgb2YgcmVBcHBseVRyZWF0bWVudHMpIHtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coYFJldHJ5aW5nIHRyZWF0bWVudCAke3RyZWF0bWVudC5pZH0gZnJvbSBvbl9zY3JvbGxgKTtcbiAgICAgICAgICAgIGVuZ2FnZVRyZWF0bWVudCh0cmVhdG1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwicXVlcnlfc2VhcmNoX2NoYW5nZVwiOiB7XG4gICAgICAgIGxldCBxdWVyeVN0cmluZyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XG4gICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggIT09IHF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgICAgICBxdWVyeVN0cmluZyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRyZWF0bWVudCBvZiByZUFwcGx5VHJlYXRtZW50cykge1xuICAgICAgICAgICAgICBsb2dnZXIubG9nKGBSZXRyeWluZyB0cmVhdG1lbnQgJHt0cmVhdG1lbnQuaWR9IGZyb20gcXVlcnlfc2VhcmNoX2NoYW5nZWApO1xuICAgICAgICAgICAgICBlbmdhZ2VUcmVhdG1lbnQodHJlYXRtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LCBPQlNFUlZFUl9DT05GSUcpO1xuICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJpbnRlcnZhbFwiOlxuICAgICAgICBmb3IgKGNvbnN0IHRyZWF0bWVudCBvZiByZUFwcGx5VHJlYXRtZW50cykge1xuICAgICAgICAgIGNvbnN0IHJlYXBwbHlJbnRlcnZhbCA9IHNldEludGVydmFsKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coYFJldHJ5aW5nIHRyZWF0bWVudCAke3RyZWF0bWVudC5pZH0gZnJvbSBpbnRlcnZhbGApO1xuICAgICAgICAgICAgYXdhaXQgZW5nYWdlVHJlYXRtZW50KHRyZWF0bWVudCk7XG4gICAgICAgICAgICBjb25zdCBhcHBsaWVkID0gYXdhaXQgZ2V0RnJvbUJlYWdsZUluZm9MYXllcihcImFcIiwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoYXBwbGllZD8uW3RyZWF0bWVudC5pZF0pIHtcbiAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChyZWFwcGx5SW50ZXJ2YWwpO1xuICAgICAgICAgICAgICByZUFwcGx5VHJlYXRtZW50c01hcC5pbnRlcnZhbCA9IHJlQXBwbHlUcmVhdG1lbnRzTWFwLmludGVydmFsLmZpbHRlcigoaWQpID0+IGlkICE9PSB0cmVhdG1lbnQuaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxvZ2dlci5mYWlsZWQoXCJSZWFwcGx5IGV2ZW50IG5vdCBmb3VuZDogXCIsIGtleSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGVuZ2FnZVRyZWF0bWVudCh0cmVhdG1lbnQpIHtcbiAgICBjb25zdCB7XG4gICAgICBpZCxcbiAgICAgIGFjdGlvbnMsXG4gICAgICBiYXNlUnVsZVNldCxcbiAgICAgIGRldmljZSxcbiAgICAgIGRlcGVuZGFudF9vbl90cmVhdG1lbnQsXG4gICAgICByZWFwcGx5X2V2ZW50LFxuICAgICAgcmVhcHBseV9ldmVudF9wYWdlX3R5cGUsXG4gICAgICBidXNpbmVzc1J1bGVTZXQsXG4gICAgICB3ZWlnaHQsXG4gICAgICBkZWxheSxcbiAgICAgIHByb2R1Y3RJbmZvU3RvcmFnZSxcbiAgICB9ID0gdHJlYXRtZW50O1xuICAgIGlmIChkZWJ1Z01vZGUgIT09IDEgJiYgIXdlaWdodCkgcmV0dXJuO1xuICAgIGlmIChkZWJ1Z01vZGUgJiYgZGVidWdGaWx0ZXJlZFRyZWF0bWVudHMgJiYgIWRlYnVnRmlsdGVyZWRUcmVhdG1lbnRzLmluY2x1ZGVzKGlkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZGV2aWNlID09PSBcIm1vYmlsZVwiICYmICFpc01vYmlsZSkge1xuICAgICAgbG9nZ2VyLmZhaWxlZChcIlRyZWF0bWVudCBkZXZpY2UgJ21vYmlsZScgbWlzbWF0Y2hcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChkZXZpY2UgPT09IFwiZGVza3RvcFwiICYmIGlzTW9iaWxlKSB7XG4gICAgICBsb2dnZXIuZmFpbGVkKFwiVHJlYXRtZW50IGRldmljZSAnZGVza3RvcCcgbWlzbWF0Y2hcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChyZWFwcGx5X2V2ZW50KSB7XG4gICAgICBpZiAoIXJlYXBwbHlfZXZlbnRfcGFnZV90eXBlIHx8IHJlYXBwbHlfZXZlbnRfcGFnZV90eXBlID09PSBwYWdlVHlwZSkge1xuICAgICAgICBsZXQgcmVhcHBseV9ldmVudF9hcnJheSA9IHJlYXBwbHlfZXZlbnQ7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZWFwcGx5X2V2ZW50KSkgcmVhcHBseV9ldmVudF9hcnJheSA9IFtyZWFwcGx5X2V2ZW50XTtcbiAgICAgICAgbG9nZ2VyLmxvZyhgUmVhcHBseSBldmVudCAnJHtyZWFwcGx5X2V2ZW50fScgZm91bmQgZm9yIHRyZWF0bWVudDogJHtpZH1gKTtcbiAgICAgICAgZm9yIChjb25zdCByZWFwcGx5RXZlbnQgb2YgcmVhcHBseV9ldmVudF9hcnJheSkge1xuICAgICAgICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSByZUFwcGx5VHJlYXRtZW50c01hcFtyZWFwcGx5RXZlbnRdID9cbiAgICAgICAgICAgIHJlQXBwbHlUcmVhdG1lbnRzTWFwW3JlYXBwbHlFdmVudF0gOiBbXTtcbiAgICAgICAgICBpZiAocHJldmlvdXNWYWx1ZS5pbmNsdWRlcyhpZCkpIHtcbiAgICAgICAgICAgIGxvZ2dlci5sb2coXCJUcmVhdG1lbnQgYWxyZWFkeSBhZGRlZCBmb3IgcmVhcHBseSBldmVudFwiKTtcbiAgICAgICAgICB9IGVsc2UgcmVBcHBseVRyZWF0bWVudHNNYXBbcmVhcHBseUV2ZW50XSA9IFsuLi5wcmV2aW91c1ZhbHVlLCBpZF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcHJvZHVjdEluZm8gPSBtYWluUHJvZHVjdEluZm87XG4gICAgaWYgKHBhZ2VUeXBlICE9PSBcImJhc2tldFwiICYmIHByb2R1Y3RJbmZvU3RvcmFnZSA9PT0gXCJiYXNrZXRcIikge1xuICAgICAgcHJvZHVjdEluZm8gPSBhd2FpdCBnZXRGcm9tQmVhZ2xlSW5mb0xheWVyKFwiX19TS1Vzb25MYXN0QmFza2V0TG9va3VwXCIsIHRydWUsIDUsIDI1MCk7XG4gICAgfVxuXG4gICAgY29uc3QgYmluZGluZ3MgPSB7cHJvZHVjdEluZm99O1xuICAgIGNvbnN0IHJ1bGVFbmdpbmUgPSBuZXcgUnVsZUVuZ2luZSh7YmFzZVJ1bGVTZXQsIGJ1c2luZXNzUnVsZVNldCwgYmluZGluZ3N9KTtcbiAgICBsb2dnZXIubG9nKFwiU3RhcnRpbmcgYmFzZSBydWxlIHNldCBjaGVjayBmb3IgdHJlYXRtZW50OiBcIiArIGlkKTtcbiAgICBpZiAoIWJhc2VSdWxlU2V0IHx8IGF3YWl0IHJ1bGVFbmdpbmUuY2hlY2tSdWxlcygpKSB7XG4gICAgICBsZXQgdHJlYXRtZW50U2tpcFJhdGlvID0gd2VpZ2h0ID09PSAxMDAgPyAwIDogKDEwMCAtIHdlaWdodCB8fCBUUkVBVE1FTlRfUkFUSU8pO1xuICAgICAgaWYgKGRlcGVuZGFudF9vbl90cmVhdG1lbnQpIHtcbiAgICAgICAgLy8gSWYgZGVwZW5kYW50IG9uIHRyZWF0bWVudCBpcyBmb3VuZCBhbmQgaGFzIHdlaWdodDsgdXNlIGl0cyBza2lwIHJhdGlvXG4gICAgICAgIGNvbnN0IGRlcGVuZGFudE9uVHJlYXRtZW50V2VpZ2h0ID0gbWF0Y2hlZFRyZWF0bWVudHMuZmluZCgodCkgPT4gdC5pZCA9PT0gZGVwZW5kYW50X29uX3RyZWF0bWVudCk/LndlaWdodDtcbiAgICAgICAgdHJlYXRtZW50U2tpcFJhdGlvID0gZGVwZW5kYW50T25UcmVhdG1lbnRXZWlnaHQgPT09IDEwMCA/IDAgOiAoMTAwIC0gZGVwZW5kYW50T25UcmVhdG1lbnRXZWlnaHQgfHxcbiAgICAgICAgICBUUkVBVE1FTlRfUkFUSU8pO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmxvZyhcIlRyZWF0bWVudCBza2lwIHJhdGlvOiBcIiArIHRyZWF0bWVudFNraXBSYXRpbyk7XG4gICAgICAvLyBEZXRlcm1pbmluZyBpZGVudGlmaWVyIGZvciBjYWxjdWxhdGluZyB0cmVhdG1lbnQgcGVyY2VudGFnZSAodHJlYXRtZW50UGN0KVxuICAgICAgY29uc3QgZGV0ZXJtaW5pbmdJZGVudGlmaWVyID0gZGVwZW5kYW50X29uX3RyZWF0bWVudCB8fCBpZDtcblxuICAgICAgLy8gdHJlYXRtZW50UGN0IGlzIHRoZSBwZXJjZW50YWdlIHZhbHVlIGZvciB0aGUgdHJlYXRtZW50IHVzZWQgdG8gZGV0ZXJtaW5lIGlmIGl0IHNob3VsZCBiZSBza2lwcGVkIG9yIG5vdFxuICAgICAgLy8gdHJlYXRtZW50UGN0IGlzIDEwMCB3aGVuIGRlYnVnIG1vZGUgaXMgMSwgZW5zdXJpbmcgbm8gdHJlYXRtZW50cyBhcmUgc2tpcHBlZFxuICAgICAgY29uc3QgdHJlYXRtZW50UGN0ID0gZGVidWdNb2RlID09PSAxID8gMTAwIDogYXdhaXQgZGV0ZXJtaW5lUGN0KGlkZW50aWZpZXIgKyBkZXRlcm1pbmluZ0lkZW50aWZpZXIpO1xuICAgICAgbG9nZ2VyLmxvZyhcIlRyZWF0bWVudFBjdDogXCIgKyB0cmVhdG1lbnRQY3QgKyBgIHdpdGggZGVidWcgbW9kZSAke2RlYnVnTW9kZSA/IFwib25cIiA6IFwib2ZmXCJ9YCk7XG4gICAgICBsZXQgYnVzaW5lc3NSdWxlSWQgPSBudWxsO1xuICAgICAgaWYgKGJ1c2luZXNzUnVsZVNldCkge1xuICAgICAgICBsb2dnZXIubG9nKFwiU3RhcnRpbmcgc3ViIHZhcmlhbnQgcnVsZSBzZXQgY2hlY2sgZm9yIHRyZWF0bWVudDogXCIgKyBpZCk7XG4gICAgICAgIGJ1c2luZXNzUnVsZUlkID0gYXdhaXQgcnVsZUVuZ2luZS5jaGVja0J1c2luZXNzUnVsZXMoKTtcbiAgICAgICAgaWYgKGJ1c2luZXNzUnVsZUlkKSB7XG4gICAgICAgICAgbG9nZ2VyLmxvZyhcIkFwcGx5aW5nIGJ1c2luZXNzIHJ1bGUgdHJhbnNmb3JtYXRpb24gd2l0aCBpZDogXCIsIGJ1c2luZXNzUnVsZUlkKTtcbiAgICAgICAgfSBlbHNlIGxvZ2dlci5sb2coXCJBcHBseWluZyB0cmVhdG1lbnQgd2l0aCBkZWZhdWx0IHZhbHVlc1wiKTtcbiAgICAgIH1cbiAgICAgIGlmICh0cmVhdG1lbnRQY3QgPCB0cmVhdG1lbnRTa2lwUmF0aW8pIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhgVHJlYXRtZW50ICR7aWR9IHNraXBwZWQgZHVlIHRvIHRyZWF0bWVudCBzcGxpdCByYXRpb2ApO1xuICAgICAgICBhZGRUcmVhdG1lbnQoaWQsIGJ1c2luZXNzUnVsZUlkLCBudWxsLCBcInNraXBwZWRcIiwgZGVwZW5kYW50X29uX3RyZWF0bWVudCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghZGVsYXkpIGF3YWl0IHByZXBhcmVBbmRBcHBseShpZCwgaWRlbnRpZmllciwgYWN0aW9ucywgYnVzaW5lc3NSdWxlSWQsIGJpbmRpbmdzKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBwcmVwYXJlQW5kQXBwbHkoaWQsIGlkZW50aWZpZXIsIGFjdGlvbnMsIGJ1c2luZXNzUnVsZUlkLCBiaW5kaW5ncyk7XG4gICAgICAgIH0sIGRlbGF5KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgbG9nZ2VyLmZhaWxlZChcIlJ1bGUgY2hlY2sgZmFpbGVkIGZvciB0cmVhdG1lbnQ6IFwiLCBpZCk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGJlYWdsZU9uO1xuXG5hc3luYyBmdW5jdGlvbiBwcmVwYXJlQW5kQXBwbHkoaWQsIGlkZW50aWZpZXIsIGFjdGlvbnMsIGJ1c2luZXNzUnVsZUlkLCBiaW5kaW5ncykge1xuICBjb25zdCBbcHJlcGFyZWQsIHZhcmlhbnRdID0gYXdhaXQgcHJlcGFyZUFjdGlvbnMoaWRlbnRpZmllciwgYWN0aW9ucywgYnVzaW5lc3NSdWxlSWQpO1xuICBjb25zdCByZXMgPSBhd2FpdCBhcHBseUFjdGlvbnMocHJlcGFyZWQsIGJpbmRpbmdzKTtcbiAgaWYgKHJlcyA9PT0gZmFsc2UpIHtcbiAgICBhZGRUcmVhdG1lbnQoaWQsIGJ1c2luZXNzUnVsZUlkLCB2YXJpYW50LCBcImZhaWxlZFwiKTtcbiAgfSBlbHNlIHtcbiAgICBhZGRUcmVhdG1lbnQoaWQsIGJ1c2luZXNzUnVsZUlkLCB2YXJpYW50LCBcImFwcGxpZWRcIik7XG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlclwiO1xuaW1wb3J0IE1vbml0b3IgZnJvbSBcIi4uL05leHRkYXlNb25pdG9yL2luZGV4XCI7XG5pbXBvcnQgYmVhZ2xlT24gZnJvbSBcIi4uL0JlYWdsZU9uXCI7XG5pbXBvcnQge1xuICBnZXRGcm9tQmVhZ2xlSW5mb0xheWVyLFxuICBhZGRUb0JlYWdsZUluZm9MYXllcixcbiAgaW5pdGlhbGl6ZUJlYWdsZUluZm9MYXllcixcbn0gZnJvbSBcIi4uL0JlYWdsZUluZm9MYXllclwiO1xuaW1wb3J0IHtcbiAgU1BMSVRfUkFUSU8sXG4gIFNFU1NJT05fU1RPUkFHRV9LRVlTLFxuICBMT0NBTF9TVE9SQUdFX0tFWVMsXG4gIE1BWF9USU1FT1VUX1BFUl9TRVNTSU9OLFxufSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQge1xuICBnZXRJZGVudGlmaWVyLFxuICByZW1vdmVEb2N1bWVudEhpZGUsXG4gIGRldGVybWluZVBjdCxcbiAgZ2V0RGVidWdNb2RlLFxufSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuKGFzeW5jIGZ1bmN0aW9uKCkge1xuICBsZXQgbW9uaXRvciA9IG51bGw7XG4gIGNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoKTtcbiAgbG9nZ2VyLmluZm8oXCJCZWFnbGUgaW5pdGlhbGl6aW5nXCIpO1xuICB3aW5kb3cuZGF0YUxheWVyID0gd2luZG93LmRhdGFMYXllciB8fCBbXTtcblxuICB0cnkge1xuICAgIC8vIGFzeW5jIHN0YXJ0IGluZm9MYXllciBwb3B1bGF0aW9uXG4gICAgaW5pdGlhbGl6ZUJlYWdsZUluZm9MYXllcigpO1xuXG4gICAgbW9uaXRvciA9IG5ldyBNb25pdG9yKCk7XG5cbiAgICBjb25zdCBpZGVudGlmaWVyID0gYXdhaXQgZ2V0SWRlbnRpZmllcigpO1xuICAgIGxvZ2dlci5sb2coXCJGb3VuZCBjb29raWUgaWRlbnRpZmllcjogXCIsIGlkZW50aWZpZXIpO1xuICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiY29va2llR2FJZFwiLCBpZGVudGlmaWVyKTtcbiAgICBjb25zdCBjb29raWVQY3QgPSBhd2FpdCBkZXRlcm1pbmVQY3QoaWRlbnRpZmllcik7XG4gICAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJvbkhhc2hQY3RcIiwgY29va2llUGN0KTtcblxuICAgIGNvbnN0IG9vc1JlYXNvbiA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShMT0NBTF9TVE9SQUdFX0tFWVMuT1VUX09GX1NDT1BFKTtcblxuICAgIC8vIGlmIGNhbm5vdCBnZXQgY3JpdGljYWwgaW5mbywgbWFrZSBvdXQgb2Ygc2NvcGUgYW5kIHVuc3VwcG9ydGVkXG4gICAgaWYgKFxuICAgICAgY29va2llUGN0ID09PSAtMSB8fFxuICAgICAgIW5hdmlnYXRvci5zZW5kQmVhY29uIHx8XG4gICAgICB0eXBlb2YgbmF2aWdhdG9yLnNlbmRCZWFjb24gIT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICAgdHlwZW9mIFN0cmluZz8ucHJvdG90eXBlPy5wYWRTdGFydCAhPT0gXCJmdW5jdGlvblwiIHx8XG4gICAgICAob29zUmVhc29uICYmIG9vc1JlYXNvbiA9PT0gXCJ1bnN1cHBvcnRlZFwiKVxuICAgICkge1xuICAgICAgd2luZG93LmRhdGFMYXllci5wdXNoKHtldmVudDogXCJHTE9WXCIsIEdMT1ZfT046IFwidW5zdXBwb3J0ZWRcIn0pO1xuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKExPQ0FMX1NUT1JBR0VfS0VZUy5PVVRfT0ZfU0NPUEUsIFwidW5zdXBwb3J0ZWRcIik7XG4gICAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcIkdMT1ZfT05cIiwgXCJ1bnN1cHBvcnRlZCB8IGRldmljZVwiKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkRldmljZSBkb2VzIG5vdCBoYXZlIHJlcXVpcmVkIGNhcGFiaWxpdGllc1wiKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0xhYmVsU2VudCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShMT0NBTF9TVE9SQUdFX0tFWVMuSVNfTEFCRUxfU0VOVCk7XG4gICAgY29uc3QgdGltZW91dENvdW50ZXIgPSBwYXJzZUludChzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFNFU1NJT05fU1RPUkFHRV9LRVlTLlRJTUVPVVRfQ09VTlQpKSB8fCAwO1xuXG4gICAgLy8gY2hlY2sgaWYgZGVidWcgbW9kZSBpcyBvbiwgYWxzbyBhZGRzIGRibSB0byBiZWFnbGVJbmZvTGF5ZXIgYW5kIHNldHMgb29zUmVhc29uXG4gICAgY29uc3QgZGVidWdNb2RlID0gZ2V0RGVidWdNb2RlKFwiZW1wbG95ZWVcIik7XG5cbiAgICAvLyBpZiB0aW1lZC1vdXQgdG9vIG1hbnkgdGltZXMgZm9yIHZlcnkgZmlyc3QgaW50ZXJhY3RzaW9ucywgbWFrZSBvdXQgb2Ygc2NvcGUgZm9yIHRoZSBzZXNzaW9uXG4gICAgaWYgKCFkZWJ1Z01vZGUgJiYgIW9vc1JlYXNvbiAmJiAhaXNMYWJlbFNlbnQgJiYgdGltZW91dENvdW50ZXIgPiBNQVhfVElNRU9VVF9QRVJfU0VTU0lPTlxuICAgICkge1xuICAgICAgd2luZG93LmRhdGFMYXllci5wdXNoKHtldmVudDogXCJHTE9WXCIsIEdMT1ZfT046IFwidW5zdXBwb3J0ZWRcIn0pO1xuICAgICAgYWRkVG9CZWFnbGVJbmZvTGF5ZXIoXCJHTE9WX09OXCIsIFwidW5zdXBwb3J0ZWQgfCB0aW1lb3V0XCIpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQmVhZ2xlIHRpbWVvdXQgdGhyZXNob2xkIHJlYWNoZWRcIik7XG4gICAgfVxuXG4gICAgLy8gVml2ZW5zZSBzcGVjaWZpYzogQ2hlY2sgaWYgdXNlciBpcyBhZG1pbiwgbWFraW5nIHRoZW0gb3V0IG9mIHNjb3BlXG4gICAgLy8gVGhpcyBuZWVkcyB0byB3YWl0IGZvciBpbml0aWFsaXplQmVhZ2xlSW5mb0xheWVyIHRvIHNldCB0aGUgdnZzSXNTaG93cm9vbSB2YWx1ZVxuICAgIGNvbnN0IGlzU2hvd3Jvb20gPSBhd2FpdCBnZXRGcm9tQmVhZ2xlSW5mb0xheWVyKFwidnZzSXNTaG93cm9vbVwiLCB0cnVlKTtcbiAgICBpZiAoaXNTaG93cm9vbSAmJiBpc1Nob3dyb29tID09PSBcInRydWVcIikge1xuICAgICAgd2luZG93LmRhdGFMYXllci5wdXNoKHtldmVudDogXCJHTE9WXCIsIEdMT1ZfT046IFwiZW1wbG95ZWVcIn0pO1xuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKExPQ0FMX1NUT1JBR0VfS0VZUy5PVVRfT0ZfU0NPUEUsIFwiZW1wbG95ZWVcIik7XG4gICAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcIkdMT1ZfT05cIiwgXCJlbXBsb3llZSB8IHNob3dyb29tXCIpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVXNlciBpcyBmcm9tIFZWUyBzaG93cm9vbS9jYWxsY2VudGVyXCIpO1xuICAgIH0gZWxzZSBpZiAoaXNTaG93cm9vbSA9PT0gbnVsbCB8fCBpc1Nob3dyb29tID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiR0xPVl9PTlwiLCBcIm5vdC1zZW50IHwgdGltZW91dFwiKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBkZXRlcm1pbmUgaWYgdXNlciBpcyBmcm9tIFZWUyBzaG93cm9vbS9jYWxsY2VudGVyXCIpO1xuICAgIH1cblxuICAgIGlmICghd2luZG93LnRvcC5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibmV4dERheS1oaWRlXCIpKSB7XG4gICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFNFU1NJT05fU1RPUkFHRV9LRVlTLlRJTUVPVVRfQ09VTlQsIHRpbWVvdXRDb3VudGVyICsgMSk7XG4gICAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcIkdMT1ZfT05cIiwgXCJub3Qtc2VudCB8IHRpbWVvdXRcIik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCZWFnbGUgc2NyaXB0IHRpbWVkIG91dFwiKTtcbiAgICB9XG5cbiAgICAvLyBpc09uIGNhbiBiZSB0cnVlIChPTiksIGZhbHNlIChPRkYpLCBvciBudWxsIChERUJVRylcbiAgICBsZXQgaXNPbiA9IG51bGw7XG5cbiAgICBpZiAoZGVidWdNb2RlKSB7XG4gICAgICBsb2dnZXIuaW5mbyhcIkRlYnVnIG1vZGUgb246IGFsbCBhcHBsaWNhYmxlIHRyZWF0bWVudHMgd2lsbCBiZSBhcHBsaWVkXCIpO1xuICAgICAgaXNPbiA9IHRydWU7XG4gICAgICB3aW5kb3cuZGF0YUxheWVyLnB1c2goe2V2ZW50OiBcIkdMT1ZcIiwgR0xPVl9PTjogXCJlbXBsb3llZVwifSk7XG4gICAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcIkdMT1ZfT05cIiwgXCJlbXBsb3llZSB8IHRlc3RlclwiKTtcbiAgICB9IGVsc2UgaWYgKG9vc1JlYXNvbiAmJiBvb3NSZWFzb24gPT09IFwiZW1wbG95ZWVcIikge1xuICAgICAgbG9nZ2VyLndhcm4oXCJVc2VyIGlzIG91dCBvZiBzY29wZVwiKTtcbiAgICAgIC8vIHNldCBpc09uIHRvIHRydWUvZmFsc2Ugd2hlbiBub3QgZGVidWdNb2RlIGJ1dCBvdXQgb2Ygc2NvcGUgaS5lLiBuZF9kZWJ1Zz0wIGZvciB0ZXN0YWJpbGl0eVxuICAgICAgaXNPbiA9IGNvb2tpZVBjdCA+PSBTUExJVF9SQVRJTztcbiAgICAgIHdpbmRvdy5kYXRhTGF5ZXIucHVzaCh7ZXZlbnQ6IFwiR0xPVlwiLCBHTE9WX09OOiBcImVtcGxveWVlXCJ9KTtcbiAgICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiR0xPVl9PTlwiLCBcImVtcGxveWVlIHwgdGVzdGVyXCIpO1xuICAgIH0gZWxzZSBpZiAob29zUmVhc29uKSB7XG4gICAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcIkdMT1ZfT05cIiwgXCJ1bmtub3duXCIpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBvdXQgb2Ygc2NvcGUgcmVhc29uXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBncmVhdGVyIHRoYW4gU1BMSVRfUkFUSU8sIHRoZW4gaW4gT04gbW9kZVxuICAgICAgaXNPbiA9IGNvb2tpZVBjdCA+PSBTUExJVF9SQVRJTztcbiAgICAgIGFkZFRvQmVhZ2xlSW5mb0xheWVyKFwiaXNPblwiLCBpc09uKTtcbiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShMT0NBTF9TVE9SQUdFX0tFWVMuSVNfTEFCRUxfU0VOVCwgdHJ1ZSk7XG4gICAgICB3aW5kb3cuZGF0YUxheWVyLnB1c2goe2V2ZW50OiBcIkdMT1ZcIiwgR0xPVl9PTjogaXNPbi50b1N0cmluZygpfSk7XG4gICAgICBhZGRUb0JlYWdsZUluZm9MYXllcihcIkdMT1ZfT05cIiwgaXNPbi50b1N0cmluZygpKTtcbiAgICB9XG5cbiAgICBpZiAoaXNPbiA9PT0gZmFsc2UpIHRocm93IG5ldyBFcnJvcihcIkNvbnRyb2wgZ3JvdXA6IG5vIHRyZWF0bWVudHMgYXBwbGllZFwiKTtcblxuICAgIGxvZ2dlci5sb2coXCJGb3VuZCBjb29raWUgcGVyY2VudGFnZTogXCIsIGNvb2tpZVBjdCk7XG4gICAgbG9nZ2VyLmxvZyhcIlNwbGl0X3JhdGlvOiBcIiwgU1BMSVRfUkFUSU8pO1xuICAgIGxvZ2dlci5sb2coXCJjb29raWVQY3QgPCBTUExJVF9SQVRJT1wiLCBjb29raWVQY3QgPCBTUExJVF9SQVRJTyk7XG4gICAgbG9nZ2VyLmluZm8oYENvbnRyb2wgZ3JvdXAgcmF0aW86ICR7U1BMSVRfUkFUSU99JWApO1xuXG4gICAgLy8gVE9ETzogcHVzaCBPTiAvIE9GRiBsb2dpYyBpbnRvIGJlYWdsZU9uIGFuZCBiZWFnbGVPZmYgZnVuY3Rpb25zIHRvIG1ha2UgbWFpbiBlbnRyeSBnZW5lcmljXG5cbiAgICAvLyBhd2FpdCBjcml0aWNhbCBpbmZvIGJlZm9yZSBzZW5kaW5nIE9GRiBsb2dzIGZvciBwcm9wZXIgYW5hbHl0aWNzIG1lYXN1cmVtZW50c1xuICAgIGNvbnN0IHBhZ2VUeXBlID0gYXdhaXQgZ2V0RnJvbUJlYWdsZUluZm9MYXllcihcIlBhZ2VUeXBlXCIsIHRydWUpO1xuICAgIGlmIChwYWdlVHlwZSA9PT0gXCJwdXJjaGFzZVwiKSB7XG4gICAgICBhd2FpdCBnZXRGcm9tQmVhZ2xlSW5mb0xheWVyKFwicHVyY2hhc2UucmV2ZW51ZVwiLCB0cnVlLCAxMCwgNTAwKTtcbiAgICAgIGF3YWl0IGdldEZyb21CZWFnbGVJbmZvTGF5ZXIoXCJwdXJjaGFzZS5wYXltZW50VHlwZVwiLCB0cnVlLCAxMCwgNTAwKTtcbiAgICB9XG4gICAgbW9uaXRvci5zZW5kTG9ncygpO1xuXG4gICAgLy8gYXdhaXQgY3JpdGljYWwgaW5mbyBwb3B1bGF0aW9uIHRvIGFwcGx5IHRyZWF0bWVudHMsIHNpbmNlIHRoZXkgYXJlIGRlcGVuZGVudCBhbmQgdGFpbG9yZWQgdG8gcGFnZVR5cGVcbiAgICBsZXQgcHJvZHVjdEluZm8gPSBudWxsO1xuICAgIGlmIChbXCJMaXN0aW5ncGFnZVwiLCBcIlByb2R1Y3RwYWdlXCIsIFwiYmFza2V0XCIsIFwicHVyY2hhc2VcIl0uaW5jbHVkZXMocGFnZVR5cGUpKSB7XG4gICAgICBwcm9kdWN0SW5mbyA9IGF3YWl0IGdldEZyb21CZWFnbGVJbmZvTGF5ZXIoXCJfX1NLVXNvblBhZ2VMb29rdXBcIiwgdHJ1ZSwgMTAsIDUwMCk7XG4gICAgfVxuICAgIGJlYWdsZU9uKGlkZW50aWZpZXIsIG1vbml0b3IsIGRlYnVnTW9kZSwgcGFnZVR5cGUsIHByb2R1Y3RJbmZvKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nZ2VyLndhcm4oXCJCZWFnbGUgYWx0ZXJuYXRlIHBhdGg6IFwiLCBlcnIubWVzc2FnZSk7XG5cbiAgICAvLyBhd2FpdCBjcml0aWNhbCBpbmZvIGJlZm9yZSBzZW5kaW5nIE9GRiBsb2dzIGZvciBwcm9wZXIgYW5hbHl0aWNzIG1lYXN1cmVtZW50c1xuICAgIGNvbnN0IHBhZ2VUeXBlID0gYXdhaXQgZ2V0RnJvbUJlYWdsZUluZm9MYXllcihcIlBhZ2VUeXBlXCIsIHRydWUpO1xuICAgIGlmIChwYWdlVHlwZSA9PT0gXCJwdXJjaGFzZVwiKSB7XG4gICAgICBhd2FpdCBnZXRGcm9tQmVhZ2xlSW5mb0xheWVyKFwicHVyY2hhc2UucmV2ZW51ZVwiLCB0cnVlLCAxMCwgNTAwKTtcbiAgICAgIGF3YWl0IGdldEZyb21CZWFnbGVJbmZvTGF5ZXIoXCJwdXJjaGFzZS5wYXltZW50VHlwZVwiLCB0cnVlLCAxMCwgNTAwKTtcbiAgICB9XG4gICAgbW9uaXRvci5zZW5kTG9ncyhlcnIubWVzc2FnZSwgdHJ1ZSk7XG5cbiAgICByZW1vdmVEb2N1bWVudEhpZGUoKTtcbiAgfVxufSkoKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicnVudGltZSIsInVuZGVmaW5lZCIsIk9wIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCIkU3ltYm9sIiwiU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsIm9iaiIsImtleSIsInZhbHVlIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJlcnIiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJzZWxmIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsImNyZWF0ZSIsImNvbnRleHQiLCJDb250ZXh0IiwiX2ludm9rZSIsInN0YXRlIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIm1ldGhvZCIsImFyZyIsIkdlblN0YXRlRXhlY3V0aW5nIiwiRXJyb3IiLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwidHlwZSIsImRvbmUiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsImZuIiwiY2FsbCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsInRoaXMiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJ2YWx1ZXMiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsImZvckVhY2giLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVzdWx0IiwiX19hd2FpdCIsInRoZW4iLCJ1bndyYXBwZWQiLCJlcnJvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiVHlwZUVycm9yIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInB1c2giLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImlzTmFOIiwibGVuZ3RoIiwiaSIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsIml0ZXIiLCJrZXlzIiwib2JqZWN0IiwicmV2ZXJzZSIsInBvcCIsInNraXBUZW1wUmVzZXQiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsIm8iLCJnZXQiLCJwcm9wIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwiX25leHQiLCJfdGhyb3ciLCJfYXN5bmNUb0dlbmVyYXRvciIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsIl90eXBlb2YiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJyZXBsYWNlQWxsIiwic3RyIiwiZmluZCIsInJlcGxhY2UiLCJpbmRleCIsImluZGV4T2YiLCJzdWJzdHJpbmciLCJUUkVBVE1FTlRfV0VJR0hUU19MT0NBVElPTiIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsImluY2x1ZGVzIiwiU1RZTEVTSEVFVF9MT0NBVElPTiIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsIkxPR19BUElfVVJMIiwiTU9CSUxFX01FRElBX1FVRVJZIiwiU1BMSVRfUkFUSU8iLCJJRExFX1RJTUVPVVQiLCJTRVNTSU9OX1NUT1JBR0VfS0VZUyIsIkxPQ0FMX1NUT1JBR0VfS0VZUyIsIkxvZ2dlciIsIm9yaWdpbiIsIkRFQlVHIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImNvbnNvbGUiLCJsb2ciLCJtZXNzYWdlQ29uZmlnIiwiYXJndW1lbnQiLCJ3YXJuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJtaW5MZW4iLCJ0b1N0cmluZyIsImZyb20iLCJ0ZXN0IiwiX3NsaWNlZFRvQXJyYXkiLCJpc0FycmF5IiwiX2kiLCJfcyIsIl9lIiwiX2FyciIsIl9uIiwiX2QiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJpbmRleGVzIiwiZmllbGRzIiwib3B0aW9ucyIsImtleVBhdGgiLCJhdXRvSW5jcmVtZW50IiwiX3dpbmRvdyIsIkJlYWdsZURhdGFDb2xsZWN0aW9uV3JhcHBlciIsImluaXRpYWxpemVkIiwiY2h1bmsiLCJNYXRoIiwiZmxvb3IiLCJnZXRDb2xsZWN0aW9uRGF0YVNpemUiLCJjb25maWciLCJpZGIiLCJnZXRJbmRleGVkRGIiLCJvcGVuIiwiaW5pdCIsImNhdGNoIiwicGFyc2VJbnQiLCJpc1N1cHBvcnRlZCIsIm9udXBncmFkZW5lZWRlZCIsImRlbGV0ZU9iamVjdFN0b3JlIiwic3RvcmUiLCJjcmVhdGVPYmplY3RTdG9yZSIsImlkeCIsImNyZWF0ZUluZGV4Iiwib25zdWNjZXNzIiwiZSIsImRhdGFOYW1lIiwic2F2ZSIsImRhdGFWYWx1ZSIsImluaXRUcmFuc2FjdGlvbiIsInNlc3Npb25JZCIsImdldEN1cnJlbnRTZXNzaW9uSWQiLCJ0aW1lIiwicm91bmQiLCJub3ciLCJwYXlsb2FkIiwicHV0Iiwic2V0SXRlbSIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwic2V0VGltZW91dCIsInF1ZXJ5IiwiaWQiLCJnZXRDb25uZWN0aW9uIiwidHgiLCJ0cmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlIiwib3AiLCJzdG9yZWQiLCJnZXRDdXJzb3IiLCJldmVudCIsImN1cnNvciIsImNvbnRpbnVlIiwibWlubWF4IiwibWFwIiwiTWFwIiwiaGFzIiwic2V0IiwiZ3JvdXBCeSIsImRhdGEiLCJtYXgiLCJjb3VudCIsInRvdGFsIiwicGFyc2VGbG9hdCIsInRvRml4ZWQiLCJvcGVuQ3Vyc29yIiwiSURCS2V5UmFuZ2UiLCJvbmx5Iiwic3VtIiwic2l6ZSIsInNldEhvdXJzIiwiZ2V0SG91cnMiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwicGFkU3RhcnQiLCJnZXREYXRlIiwiaW5kZXhlZERCIiwibG9nZ2VyIiwiY29sbGVjdG9yQXBpIiwiQ29sbGVjdG9yQXBpIiwicXVlcnlJbkNvbGxlY3RvciIsImJhc2VGZWF0dXJlTmFtZSIsInF1ZXJ5TWV0aG9kIiwibWluIiwicXVlcnlQcm9taXNlIiwiYXZnIiwibW9kZSIsIm1hdGNoIiwibGFzdCIsImZhaWxlZCIsInVwZGF0ZUluQ29sbGVjdG9yIiwiYmFzZUZlYXR1cmVWYWx1ZSIsInVwZGF0ZU1ldGhvZCIsImJlYWdsZUluZm9MYXllciIsImYiLCJhZGRUb0JlYWdsZUluZm9MYXllciIsImluZm9MYXllciIsInRvcCIsInR5cGVkVmFsdWUiLCJ0cmltIiwic3BsaXQiLCJsYXN0S2V5IiwidXBkYXRlSGlzdG9yaWNhbERhdGFTY2FuIiwiZ2V0RnJvbUJlYWdsZUluZm9MYXllciIsImJsb2NraW5nIiwicG9sbEludGVydmFsIiwidGltZW91dCIsImdldEFueUZyb21CZWFnbGVJbmZvTGF5ZXIiLCJvYnRhaW5EYXRhIiwianNvbkdldCIsImFkZFRyZWF0bWVudCIsImJ1c2luZXNzUnVsZUlkIiwidmFyaWFudCIsInN0YXR1cyIsImRlcGVuZGFudF9vbl90cmVhdG1lbnQiLCJwYXJzZVNlYXJjaFBhdGhzRGVsYXkiLCJwYXJzZVNlYXJjaFBhdGhzUmV0cnkiLCJpbml0aWFsaXplQmVhZ2xlSW5mb0xheWVyIiwicHJlcGFyZUNvcmVEYXRhIiwicGFyc2VyQ2FsbGVyIiwicHJvY2Vzc1RyaWdnZXIiLCJhZGRNZXRyaWNzIiwiZmVhdHVyZUVuZ2luZWVyaW5nVXBkYXRlcyIsImZlYXR1cmVFbmdpbmVlcmluZ1F1ZXJpZXMiLCJmZWF0dXJlTmFtZSIsInVwZGF0ZVJlbWFpbmluZ0hpc3RvcmljYWxEYXRhIiwicXVlcmllZEZlYXR1cmVOYW1lcyIsInF1ZXJ5RW50cnkiLCJpc1VwZGF0ZWQiLCJxdWVyeVJlc3BvbnNlIiwiRkVEYXRhIiwiRkVPcCIsInVwZGF0ZUhpc3RvcmljYWxEYXRhIiwiZmVhdHVyZUVuZ2luZWVyaW5nT3AiLCJzZWFyY2hQYXRocyIsIlBhZ2VUeXBlRGVwZW5kIiwic2VsZWN0b3IiLCJmb3JtYXR0ZXIiLCJ0cmlnZ2VyIiwib3BlcmFuZCIsImV4Y2x1c2l2ZSIsIm9ic2VydmVyIiwiY2hpbGRyZW4iLCJjdXJyZW50UGFnZVR5cGUiLCJzZXNzaW9uU3RvcmFnZSIsImxhc3RCYXNrZXRQcm9kdWN0SW5mbyIsIkpTT04iLCJwYXJzZSIsImNvdXBvbkFwcGxpY2FibGVUb3RhbFByaWNlIiwic2t1TGlzdCIsIm5ld1NLVUxpc3QiLCJza3UiLCJzb3J0IiwicHJldlNLVUxpc3QiLCJqb2luIiwicHJvZHVjdEluZm9Mb29rdXAiLCJwcm9kdWN0SW5mbyIsInN0cmluZ2lmeSIsInBhcnNlU2VhcmNoUGF0aHMiLCJkb21TdGF0dXMiLCJkb2N1bWVudCIsInJlYWR5U3RhdGUiLCJ3aW50b3AiLCJkYXRhTGF5ZXIiLCJ3aW5kb2MiLCJmb3VuZE5hbWVzIiwiU2V0IiwicHJldkZvdW5kTmFtZXMiLCJub3RGb3VuZE5hbWVzIiwiYWRkIiwic2VhcmNoRWxlbWVudCIsImlzRm91bmQiLCJzZWFyY2hBbmRTZXQiLCJkYXRhTGF5ZXJJdGVtIiwic29yZ0FycmF5SW5uZXIiLCJnZXRTT1JHQXJyYXkiLCJzb3JnSXRlbSIsImxheWVyVmFsdWUiLCJmaWx0ZXJQYXJhbXMiLCJmaWx0ZXJOYW1lIiwiZmlsdGVyVmFsdWUiLCJmaWx0ZXJNYXRjaCIsInF1ZXJ5U2VsZWN0b3IiLCJ0b0JlVXBkYXRlZCIsImNoaWxkIiwiY2hpbGRFbGVtZW50cyIsImZpbHRlciIsImVsZW1lbnQiLCJNdXRhdGlvbk9ic2VydmVyIiwidHJpZ2dlclJlc3RhcnQiLCJvYnNlcnZlIiwic3VidHJlZSIsImNoaWxkTGlzdCIsImlubmVyVGV4dCIsImF0dHJpYlZhbHVlTGlzdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJhdHRyaWJWYWx1ZSIsImdldEF0dHJpYnV0ZSIsInN1bVByaWNlIiwiY2hpbGRUZXh0IiwiYXJyYXlJbm5lclRleHQiLCJ0b1VwcGVyQ2FzZSIsImZvcm1hdERlbGl2ZXJ5RGF0ZSIsInRvTG93ZXJDYXNlIiwicHJvY2Vzc0Zvcm1hdHRlciIsImV4Y2x1c2l2ZUVsZW1lbnQiLCJzZWFyY2hPYmoiLCJwYXRoIiwicGF0aEFycmF5IiwiY3VycmVudCIsInN1YlBhdGgiLCJzdWJBcnJheSIsInN1YktleSIsInN1YlZhbHVlIiwid2luZG93UHRyIiwibmF2UHRyIiwibmF2aWdhdG9yIiwidmlld0lkIiwiY3J5cHRvIiwicmFuZG9tVVVJRCIsInBsYXRmb3JtIiwidXNlckFnZW50RGF0YSIsInVzZXJBZ2VudCIsImRldmljZVBpeGVsUmF0aW8iLCJhdmFpbFdpbmRvdyIsInNjcmVlbiIsImF2YWlsV2lkdGgiLCJhdmFpbEhlaWdodCIsIndpbmRvd0RlcHRoIiwiY29sb3JEZXB0aCIsInBpeGVsRGVwdGgiLCJ2cG9ydFNoYXBlIiwidmlzdWFsVmlld3BvcnQiLCJ3aWR0aCIsImhlaWdodCIsImFicyIsIm9yaWVudGF0aW9uIiwidGVtcCIsImhpc3RvcnkiLCJuYXZBZ2VudCIsImJyYW5kcyIsImJyYW5kIiwidmVyc2lvbiIsIm1vYmlsZSIsImhhcmR3YXJlQ29uY3VycmVuY3kiLCJsYW5ndWFnZSIsImJyb3dzZXJMYW5ndWFnZSIsInN5c3RlbUxhbmd1YWdlIiwidXNlckxhbmd1YWdlIiwibWF4VG91Y2hQb2ludHMiLCJ2ZW5kb3IiLCJjb25uZWN0aW9uIiwiZG93bmxpbmsiLCJjdXJyZW50VVJMIiwiVVJMIiwiaG9zdG5hbWUiLCJkb05vdFRyYWNrIiwibXNEb05vdFRyYWNrIiwicmVmZXJyZXIiLCJmaXJzdFNlc3Npb25SZWZlcnJlciIsInBhdGhuYW1lIiwicGFnZVR5cGUiLCJwZXJmTWV0cmljcyIsInBlcmZOYXZpZ2F0aW9uTWV0cmljcyIsInBlcmZvcm1hbmNlIiwiZ2V0RW50cmllc0J5VHlwZSIsImNvbm5lY3QiLCJjb25uZWN0RW5kIiwiY29ubmVjdFN0YXJ0IiwicmVxdWVzdCIsInJlc3BvbnNlRW5kIiwicmVxdWVzdFN0YXJ0IiwiZG9tIiwiZG9tQ29tcGxldGUiLCJkb21JbnRlcmFjdGl2ZSIsImxvYWQiLCJsb2FkRXZlbnRFbmQiLCJsb2FkRXZlbnRTdGFydCIsImR1cmF0aW9uIiwic29yZ0FycmF5Iiwic1RhZyIsImNudG50IiwidGV4dENvbnRlbnQiLCJqc29uY29udGVudCIsInByb2R1Y3RJbmZvTG9va3VwSW5Qcm9ncmVzcyIsInNrdWxpc3QiLCJoZWFkZXJzIiwiSGVhZGVycyIsImFwcGVuZCIsImZldGNoIiwiYm9keSIsIm9rIiwianNvbiIsIm1vbnRocyIsImMiLCJnZXRSYW5kb21WYWx1ZXMiLCJVaW50OEFycmF5IiwicmVtb3ZlRG9jdW1lbnRIaWRlIiwiZG9jdW1lbnRFbGVtZW50IiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiZmV0Y2hUcmVhdG1lbnRzIiwidHJlYXRtZW50cyIsImpzb25UcmVhdG1lbnQiLCJmZXRjaFRyZWF0bWVudFdlaWdodHMiLCJ0cmVhdG1lbnRXZWlnaHRzIiwianNvblRyZWF0bWVudFdlaWdodHMiLCJleHRyYWN0Q29va2llSWRlbnRpZmllciIsImNvb2tpZVN0cmluZyIsImNvb2tpZU5hbWUiLCJpZGVudGlmaWVyIiwidiIsInJlZHVjZSIsImFjYyIsImRlY29kZVVSSUNvbXBvbmVudCIsImRldGVybWluZVBjdCIsInN1YnN0cmluZ0VuZFBvc2l0aW9uIiwic3Vic3RyaW5nU3RhcnRQb3NpdGlvbiIsImNyZWF0ZUhhc2hTdHJpbmciLCJoYXNoU3RyaW5nIiwiaGFzaE51bWJlciIsIm1lc3NhZ2UiLCJzdHJpbmdUb0hhc2giLCJlbmNvZGVkIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJzdWJ0bGUiLCJkaWdlc3QiLCJoYXNoQnVmZmVyIiwiaGFzaEFycmF5IiwiYiIsInN0eWxlQXBwbGljYXRvciIsImVsZW1lbnRzIiwic3R5bGVDaGFuZ2VzTWFwIiwiZW50cmllcyIsInN0eWxlIiwiaW5qZWN0U3R5bGVTaGVldCIsInN0eWxlU2hlZXQiLCJjcmVhdGVFbGVtZW50IiwicmVsIiwiaGVhZCIsImFwcGVuZENoaWxkIiwicHJlcGFyZUFjdGlvbnMiLCJhY3Rpb25zVG9QcmVwYXJlIiwiYWN0aW9ucyIsImFjdGlvbiIsImJ1c2luZXNzUnVsZVRyYW5zZm9ybWF0aW9ucyIsInZhcmlhbnRzIiwiYnVzaW5lc3NUcmFuc2Zvcm1hdGlvbiIsInZhcmlhbnRLZXkiLCJ3ZWlnaHQiLCJjb25kaXRpb25DaGVja2VyIiwicnVuVGltZVZhbHVlIiwiY29uZGl0aW9uIiwic3VjY2VzcyIsIlJlZ0V4cCIsImdldERlYnVnTW9kZSIsIm9vc1JlYXNvbiIsIkRFQlVHX01PREUiLCJPVVRfT0ZfU0NPUEUiLCJxdWVyeVN0cmluZyIsInNlYXJjaCIsInJlbW92ZUl0ZW0iLCJnZXRJZGVudGlmaWVyIiwiY29va2llIiwiZXh0cmFjdElkZW50aWZpZXJJbnRlcnZhbCIsImRlbGF5IiwibXMiLCJyZXMiLCJkYXRlIiwic3RhcnRNb250aEluZGV4IiwiZW5kTW9udGhJbmRleCIsInN0YXJ0RGF5IiwiZW5kRGF5IiwidG9kYXkiLCJzdGFydFllYXIiLCJlbmRZZWFyIiwiZXN0aW1hdGVkU3RhcnQiLCJlc3RpbWF0ZWRFbmQiLCJzdGFydERpZmZPdmVyRGF5cyIsImNlaWwiLCJlbmREaWZmT3ZlckRheXMiLCJzdGFydERpZmZPdmVyV2Vla3MiLCJlbmREaWZmT3ZlcldlZWtzIiwiaWRsZVRpbWVyIiwidGltZU91dCIsImNhbGxCYWNrIiwicmVzZXRUaW1lciIsImNsZWFyVGltZW91dCIsImlkbGVUaW1lb3V0Iiwib250b3VjaHN0YXJ0IiwiTW9uaXRvciIsImFwcGxpZWRUcmVhdG1lbnRzSGFzaCIsImFwcGxpZWRUcmVhdG1lbnRzQ2hhbmdlcyIsImVsaWdpYmxlTm90QXBwbGllZFRyZWF0bWVudHNIYXNoIiwiZWxpZ2libGVOb3RBcHBsaWVkVHJlYXRtZW50c0NoYW5nZXMiLCJpc0xvZ2dlZCIsImluaXRpYWxpemVFeGl0RXZlbnRMaXN0ZW5lcnMiLCJpc0Vycm9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZVF1ZXVlTG9ncyIsInBhY2thZ2VMb2dEYXRhIiwicmVxdWVzdEJsb2IiLCJxdWV1ZUxvZ3MiLCJhcHBsaWVkIiwiZWxpZ2libGVOb3RBcHBsaWVkIiwiYXBwbGllZFRyZWF0bWVudHNDdXJyZW50SGFzaCIsImVsaWdpYmxlTm90QXBwbGllZFRyZWF0bWVudHNDdXJyZW50SGFzaCIsInN0YXJ0c1dpdGgiLCJ0IiwibSIsIkJsb2IiLCJ2SWQiLCJpc0V4aXRFdmVudENhcHR1cmVkIiwibG9nRGF0YSIsInBhY2thZ2VVcGRhdGVMb2dEYXRhIiwiY2FwdHVyZSIsInNlbmRCZWFjb24iLCJxdWV1ZWQiLCJxdWV1ZUludGVydmFsIiwicmVwbGFjZXIiLCJyZXBsYWNlRm4iLCJ2YWwiLCJjdXJyZW50UmVwbGFjZUZuIiwicmVwbGFjZU9iamVjdEV4dHJhY3RvciIsInJlcGxhY2VWYWwiLCJyZXBsYWNlRm5FeGVjdXRvciIsInJGbiIsInNpbmdsZSIsInJlcGxhY2VGdW5jdGlvbiIsInN0b3JhZ2UiLCJrZXlGYWxsYmFjayIsImF0dHJpYnV0ZSIsImlubmVyX2NvbmRpdGlvbiIsIm9wZXJhdG9yIiwiZWxpZ2libGVFbGVtZW50cyIsImVsZW1lbnRTa3UiLCJjYXRhbG9nIiwiJCIsImJpbmRpbmdzIiwiUE9QVVBfRElTUExBWV9GTEFHIiwidHJhbnNmb3JtZXIiLCJhcHBseUV2ZW50IiwiY29udGVudFNlbGVjdG9yIiwic2VsZWN0b3JGYWxsYmFjayIsIm1kQ29uZGl0aW9uIiwibW92ZV9zZWxlY3Rvcl8xIiwibW92ZV9zZWxlY3Rvcl8yIiwicFR5cGUiLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsIlN0cmluZyIsImJlZm9yZSIsImFmdGVyIiwib2ZmIiwiY3JlYXRlUG9wdXAiLCJlbG0iLCJzdG9wUHJvcGFnYXRpb24iLCJkaXNwbGF5TW9kYWwiLCJnZXRQcm9kdWN0SW5mbyIsImRpc3BsYXlQb3B1cCIsInIiLCJwdXNoU3RhdGUiLCJvbmNlIiwidGV4dCIsImh0bWwiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwib3JpZ2luYWxUaXRsZSIsInRpdGxlIiwiaGFuZGxlRG9jdW1lbnRUaXRsZVRhYkNoYW5nZSIsImNzcyIsInByb3BlcnR5IiwicHJvcGVydHlWYWx1ZSIsIm4xIiwibjIiLCJzd2FwTm9kZXMiLCJzb3VyY2UiLCJkZXN0aW5hdGlvbiIsInByZXBlbmQiLCJzZW50ZW5jZSIsIndvcmQiLCJyZXBsYWNlV2l0aFZhbCIsImh0bWxTdHIiLCJ0cmFuc2FjdGlvbkluMldlZWtzIiwiYWRkVG9DYXJ0SW4yV2Vla3MiLCJwcm9kdWN0Vmlld0NvdW50IiwidGl0bGVzIiwicGFyc2VkVGl0bGVzIiwicGFyc2VkVGl0bGUiLCJoaWRkZW4iLCJoYW5kbGVQb3B1cENsaWNrIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInFQb3B1cCIsImdldEVsZW1lbnRCeUlkIiwiaXNNb2RhbCIsInBvcHVwV3JhcHBlciIsInBvcHVwQ2xvc2VCdXR0b24iLCJwb3B1cENsb3NlQnV0dG9uU3R5bGUiLCJvbmNsaWNrIiwiY29udGVudHMiLCJzaGlmdCIsInNyYyIsInRlbXBsYXRlIiwiaW5uZXJIVE1MIiwicG9wdXAiLCJjb250ZW50IiwiZmlyc3RDaGlsZCIsImkxIiwiaTIiLCJwMSIsInBhcmVudE5vZGUiLCJwMiIsImlzRXF1YWxOb2RlIiwiaW5zZXJ0QmVmb3JlIiwiYWN0aW9uQXBwbGljYXRvciIsImpRdWVyeSIsImNoZWNrQWN0aW9uQ29uZGl0aW9uIiwiYXBwbHlBY3Rpb25zIiwiY2hlY2tDb3VudGVyUnVsZSIsInJ1bGUiLCJwYWdlVmlld0hhbmRsZXIiLCJjYUJhc2tldFByaWNlSGFuZGxlciIsImdldENvdW50ZXIiLCJjb3VudGVyIiwicGFnZVZpZXdzIiwiY2FCYXNrZXRQcmljZSIsImNoZWNrRGF0YUxheWVyUnVsZSIsImRhdGFMYXllckZpbmRlciIsInJ1bnRpbWVWYWx1ZSIsImNoZWNrRWxlbWVudFJ1bGUiLCJzZWxlY3RvckFsbCIsIm1haW5TZWxlY3RvciIsInRlbXBWYWwiLCJyZXR1cm5WYWwiLCJlbGVtIiwiZWxlbWVudFN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJzdHlsZUtleSIsInN0eWxlVmFsdWUiLCJjaGVja0Z1bmN0aW9uUnVsZSIsIm9wdHMiLCJiaW5kIiwicnVsZUZ1bmN0aW9uIiwiY2hlY2tTZXNzaW9uUnVsZSIsImR1cmF0aW9uSGFuZGxlciIsImhpc3RvcnlIYW5kbGVyIiwiZ2V0U2Vzc2lvblRpbWVzdGFtcCIsImN1cnJlbnRIaXN0b3J5IiwiY2hlY2tVcmxSdWxlIiwicmVxdWVzdFVSTCIsImNoZWNrRW52UnVsZSIsImlzTW9iaWxlIiwiY2hlY2tSYW5kb21OdW1iZXJSdWxlIiwic2FsdCIsInJhbmRvbVBjdCIsImNoZWNrUHJvZHVjdEluZm9SdWxlIiwiZ2V0VHJhbnNhY3Rpb25Db3VudCIsImdldEFkZFRvQ2FydENvdW50IiwiZ2V0UHJldmlld0NvdW50IiwiUnVsZUVuZ2luZSIsImJhc2VSdWxlU2V0IiwiYnVzaW5lc3NSdWxlU2V0IiwiY2FsbGJhY2siLCJjaGVja1J1bGUiLCJjaGFpbiIsImNoYWluX2NvbmRpdGlvbiIsInJ1bGVTYXRpc2ZpZWQiLCJjb21wdXRlU2VnbWVudCIsInNlZ21lbnQiLCJydWxlU2V0Iiwic2VnbWVudFJ1bGVFbmdpbmUiLCJjaGVja1J1bGVzIiwiVHJlYXRtZW50UmVwb3NpdG9yeSIsInVzZXJHcm91cCIsInVzZXJHcm91cFdlaWdodHMiLCJ0cmVhdG1lbnQiLCJzb21lIiwiVFJFQVRNRU5UUyIsInRyZWF0bWVudHNPYmoiLCJ0aW1lc3RhbXAiLCJ0cmVhdG1lbnRXaXRoVGltZXN0YW1wIiwiYmVhZ2xlT24iLCJtb25pdG9yIiwiZGVidWdNb2RlIiwibWFpblByb2R1Y3RJbmZvIiwiZW5nYWdlVHJlYXRtZW50IiwiZGV2aWNlIiwicmVhcHBseV9ldmVudCIsInJlYXBwbHlfZXZlbnRfcGFnZV90eXBlIiwicHJvZHVjdEluZm9TdG9yYWdlIiwiZGVidWdGaWx0ZXJlZFRyZWF0bWVudHMiLCJyZWFwcGx5X2V2ZW50X2FycmF5IiwicmVhcHBseUV2ZW50IiwicHJldmlvdXNWYWx1ZSIsInJlQXBwbHlUcmVhdG1lbnRzTWFwIiwicnVsZUVuZ2luZSIsInRyZWF0bWVudFNraXBSYXRpbyIsImRlcGVuZGFudE9uVHJlYXRtZW50V2VpZ2h0IiwibWF0Y2hlZFRyZWF0bWVudHMiLCJkZXRlcm1pbmluZ0lkZW50aWZpZXIiLCJ0cmVhdG1lbnRQY3QiLCJjaGVja0J1c2luZXNzUnVsZXMiLCJwcmVwYXJlQW5kQXBwbHkiLCJ0cmVhdG1lbnRzUHJvbWlzZSIsInRyZWF0bWVudFdlaWdodHNQcm9taXNlIiwiUEFHRV9WSUVXUyIsIlNFU1NJT05fSUQiLCJTRVNTSU9OX1RJTUVTVEFNUCIsIlNFU1NJT05fSElTVE9SWSIsInBvcHVwRGlzcGxheUZsYWciLCJzZXNzaW9uVGltZXN0YW1wIiwic2Vzc2lvbkhpc3RvcnkiLCJzZWFyY2hQYXJhbXMiLCJsYXN0SW5kZXhPZiIsIml0ZW0iLCJPQlNFUlZFUl9DT05GSUciLCJhdHRyaWJ1dGVzIiwiYWxsIiwidHJlYXRtZW50UmVwb3NpdG9yeSIsImdldE1hdGNoZWRUcmVhdG1lbnRzIiwidXBkYXRlTGF0ZXN0Q2hhbmdlcyIsInRyZWF0bWVudElkcyIsInJlQXBwbHlUcmVhdG1lbnRzIiwiUmVzaXplT2JzZXJ2ZXIiLCJyZWFwcGx5X3NlbGVjdG9yIiwib25zY3JvbGwiLCJyZWFwcGx5SW50ZXJ2YWwiLCJwcmVwYXJlZCIsImNvb2tpZVBjdCIsIkdMT1ZfT04iLCJpc0xhYmVsU2VudCIsInRpbWVvdXRDb3VudGVyIiwiaXNTaG93cm9vbSIsImNvbnRhaW5zIiwiaXNPbiIsInNlbmRMb2dzIl0sInNvdXJjZVJvb3QiOiIifQ==
