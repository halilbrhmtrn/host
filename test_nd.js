!function(){var e={757:function(e,t,n){e.exports=n(666)},666:function(e){var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function l(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,a=Object.create(o.prototype),i=new _(r||[]);return a._invoke=function(e,t,n){var r=d;return function(o,a){if(r===p)throw new Error("Generator is already running");if(r===g){if("throw"===o)throw a;return P()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var c=C(i,n);if(c){if(c===h)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=g,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var u=s(e,t,n);if("normal"===u.type){if(r=n.done?g:f,u.arg===h)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=g,n.method="throw",n.arg=u.arg)}}}(e,n,i),a}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var d="suspendedStart",f="suspendedYield",p="executing",g="completed",h={};function v(){}function m(){}function y(){}var b={};u(b,a,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(E([])));k&&k!==n&&r.call(k,a)&&(b=k);var S=y.prototype=v.prototype=Object.create(b);function x(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function I(e,t){function n(o,a,i,c){var u=s(e[o],e,a);if("throw"!==u.type){var l=u.arg,d=l.value;return d&&"object"==typeof d&&r.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,i,c)}),(function(e){n("throw",e,i,c)})):t.resolve(d).then((function(e){l.value=e,i(l)}),(function(e){return n("throw",e,i,c)}))}c(u.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function C(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,C(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=s(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function A(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(A,this),this.reset(!0)}function E(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:P}}function P(){return{value:t,done:!0}}return m.prototype=y,u(S,"constructor",y),u(y,"constructor",m),m.displayName=u(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,u(e,c,"GeneratorFunction")),e.prototype=Object.create(S),e},e.awrap=function(e){return{__await:e}},x(I.prototype),u(I.prototype,i,(function(){return this})),e.AsyncIterator=I,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new I(l(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},x(S),u(S,c,"Generator"),u(S,a,(function(){return this})),u(S,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=E,_.prototype={constructor:_,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(L),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return c.type="throw",c.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],c=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),l=r.call(i,"finallyLoc");if(u&&l){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;L(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:E(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){"use strict";function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function r(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}}(e,t)||r(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e){return function(e){if(Array.isArray(e))return t(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||r(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t,n,r,o,a,i){try{var c=e[a](i),u=c.value}catch(e){return void n(e)}c.done?t(u):Promise.resolve(u).then(r,o)}function c(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function c(e){i(a,r,o,c,u,"next",e)}function u(e){i(a,r,o,c,u,"throw",e)}c(void 0)}))}}var u=n(757),l=n.n(u),s="https://europe-west3-nextday-34eb3.cloudfunctions.net/api/logResponse",d="(max-width: 440px)",f="__nextday_session_id",p="ND_SessionTimestamp",g="ND_PageViews",h="ND_PopupDisplayFlag",v="ND_CABasketPrice",m="ND_Debug";function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(e,t,n){return t&&b(e.prototype,t),n&&b(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var k=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Nextday Client SDK";y(this,e),this.origin=t,this.DEBUG=window.localStorage.getItem(m)}return w(e,[{key:"info",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).info.apply(e,["[".concat(t,"]")].concat(r))}},{key:"log",value:function(){var e=this.DEBUG,t=this.origin;if(e){for(var n,r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];(n=console).log.apply(n,["[".concat(t,"]")].concat(o))}}},{key:"error",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).error.apply(e,["[".concat(t,"]")].concat(r))}}]),e}(),S=k;function x(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var I=new S("Nextday DataLayer Checker"),C=function(e){I.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value,o=A(t);return F(o,n,r)},A=function(e){I.log("Searching dataLayer for key",e);var t,n=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return x(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?x(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}(window.dataLayer);try{for(n.s();!(t=n.n()).done;){var r=t.value;if(Object.keys(r).includes(e))return I.log("Found key ".concat(e," with value ").concat(r[e])),r[e]}}catch(e){n.e(e)}finally{n.f()}return I.log("Key ".concat(e," not found in dataLayer")),null},L=new S("Nextday Url Checker"),_=function(e){L.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("path"===t){var o=window.location.href,a=o.includes("ajax/mobile-search/loadOtherPages.php")?decodeURIComponent(new URL(o).search.replace("?originalPath=","")):new URL(o).pathname;return L.log("Checking path ".concat(a," matches rule path ").concat(r)),F(a,n,r)}};function E(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return P(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?P(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function P(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var O=new S("Nextday Utils");"randomUUID"in crypto||M();var N=function(){document.documentElement.classList.remove("nextDay-hide")},T=function(){var e=c(l().mark((function e(){var t;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return O.log("Fetching treatments"),e.next=3,fetch("https://host-b96.pages.dev/treatments.json");case 3:return t=e.sent,e.next=6,t.json();case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),j=function(e,t){if(!e)return null;var n=e.split(";").map((function(e){return e.split("=")})).reduce((function(e,t){return t[0]&&t[1]&&(e[decodeURIComponent(t[0].trim())]=decodeURIComponent(t[1].trim())),e}),{})[t];return n?("_ga"===t&&(n=n.split(".")[2]),n):null},R=function(){var e=c(l().mark((function e(t){var n,r,o,a,i,c,u,s,d=arguments;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=d.length>1&&void 0!==d[1]?d[1]:8,o=(r=9)+n,t){e.next=5;break}return e.abrupt("return",-1);case 5:return a=(new TextEncoder).encode(t),e.next=8,crypto.subtle.digest("SHA-1",a);case 8:return i=e.sent,c=Array.from(new Uint8Array(i)),u=c.map((function(e){return e.toString(16).padStart(2,"0")})).join(""),s=parseInt(u.substring(r,o),16),e.abrupt("return",s%100);case 13:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),q=function(e){var t=document.documentElement.scrollTop,n=setInterval((function(){var r=document.documentElement.scrollTop;t-400>r?(clearInterval(n),e()):t=r}),500)},D=function(e,t){O.log("Applying style changes",t,"to elements",e);for(var n=0;n<e.length;n++)for(var r=e[n],a=0,i=Object.entries(t);a<i.length;a++){var c=o(i[a],2),u=c[0],l=c[1];r.style[u]=l}},U=function(){var e=c(l().mark((function e(){var t;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(t=document.createElement("link")).rel="stylesheet",t.type="text/css",t.href="https://host-b96.pages.dev/nd-styles.css",document.head.appendChild(t);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),V=function(e,t){var n,r=JSON.parse(JSON.stringify(e)),o=E(r);try{for(o.s();!(n=o.n()).done;){var a=n.value,i=a.subVariants;if(i){var c,u=E(i);try{for(u.s();!(c=u.n()).done;){var l=c.value;if(l.id===t){for(var s in l)"id"!==s&&(a[s]=l[s]);return r}}}catch(e){u.e(e)}finally{u.f()}}}}catch(e){o.e(e)}finally{o.f()}return r},F=function(e,t,n){if("notExist"===t)return e?(O.log("conditionChecker: -not satisfied- target does exist"),!1):(O.log("conditionChecker: -satisfied- target does not exist"),!0);if(null==e||null==t)return O.log("conditionChecker: runTimeValue or condition is not defined"),!1;switch(t){case"exist":return e?(O.log("conditionChecker: -satisfied- target does exist"),!0):(O.log("conditionChecker: -not satisfied- target does not exist"),!1);case"contains":return e.includes(n)?(O.log("conditionChecker: -satisfied- target contains value"),!0):(O.log("conditionChecker: -not satisfied- target does not contain value"),!1);case"notContains":return e.includes(n)?(O.log("conditionChecker: -not satisfied- target contains value"),!1):(O.log("conditionChecker: -satisfied- target does not contain value"),!0);case"equal":return e===n?(O.log("conditionChecker: -satisfied- target equals value"),!0):(O.log("conditionChecker: -not satisfied- target does not equal value"),!1);case"notEqual":return e!==n?(O.log("conditionChecker: -satisfied- target does not equal value"),!0):(O.log("conditionChecker: -not satisfied- target equals value"),!1);case"greaterThan":return e>n?(O.log("conditionChecker: -satisfied- target is greater than value"),!0):(O.log("conditionChecker: -not satisfied- target is not greater than value"),!1);case"lessThan":return e<n?(O.log("conditionChecker: -satisfied- target is less than value"),!0):(O.log("conditionChecker: -not satisfied- target is not less than value"),!1);case"greaterEquals":return e>=n?(O.log("conditionChecker: -satisfied- target is greater or equal than value"),!0):(O.log("conditionChecker: -not satisfied- target is not greater or equal than value"),!1);case"lessEquals":return e<=n?(O.log("conditionChecker: -satisfied- target is less or equal than value"),!0):(O.log("conditionChecker: -not satisfied- target is not less or equal than value"),!1);case"between":var r=o(n.split(","),2),a=r[0],i=r[1];return a=parseInt(a),i=parseInt(i),e>=a&&e<=i?(O.log("conditionChecker: -satisfied- target is between min and max"),!0):(O.log("conditionChecker: -not satisfied- target is not between min and max"),!1);default:return O.log("conditionChecker: condition is not defined ",t),!1}},M=function(){crypto.randomUUID=function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(e){return(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)}))}},B=function t(n,r){if(n===r)return!0;if("object"!==e(n)||"object"!==e(r)||null==n||null==r)return!1;var o=Object.keys(n),a=Object.keys(r);if(o.length!==a.length)return!1;var i=!0;return o.forEach((function(e){a.includes(e)||(i=!1),"function"!=typeof n[e]&&"function"!=typeof r[e]||n[e].toString()!==r[e].toString()&&(i=!1),t(n[e],r[e])||(i=!1)})),i},J=function(e){return new Promise((function(t){return setTimeout(t,e)}))},G=function(){var e=[],t={operator:"PageType",condition:"equal",value:"Homepage"};if(C(t))return null;if(t.value="Listingpage",C(t))return Array.from(document.querySelectorAll(".product-card")).forEach((function(t){e.push(t.getAttribute("data-product-sku"))})),e.length?e:(O.log("Product SKUs not found on Listingpage"),null);if(t.value="Productpage",C(t)){var n=document.querySelector(".product-sku");return n?(e.push(n.getAttribute("data-sku")),e):(O.log("Product SKU not found on Productpage"),null)}return t.operator="path",t.value="/siparis-listesi.html",_(t)?(Array.from(document.querySelectorAll(".cart-inside")).forEach((function(t){e.push(t.getAttribute("data-sku"))})),e.length?e:(O.log("Product SKUs not found on basket page"),null)):(O.log("Unidentified page type"),null)},z='<div class="top-left-badge"><div class="super-price-badge"><img src="//cdn.vivense.com/images/badges/superfiyat_badge_final.svg" width="45" class="super-price-icon"></div></div>';function K(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Q(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Q(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function Q(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function H(){return H=c(l().mark((function e(t,n){var r,o,a,i,u,s,f,p,g=arguments;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:g.length>2&&void 0!==g[2]&&g[2],r=new S("Nextday Apply Treatments"),o=h,a=function(e){r.log("Applying treatment: ",JSON.stringify(e));var t=e.badgeSelector,a=e.operator,c=e.type,u=e.applyEvent,l=e.contentSelector,g=e.selector,h=e.selectorFallback,v=e.mdCondition,m=e.move_selector_1,y=e.move_selector_2,b=e.replaceFn,w=e.value,k=$(g);if(!v||window.matchMedia(v).matches)if(m&&!y||y&&!m)r.log("Both move selectors are required");else{if(m&&y){if(!$(m).length)return void r.log("Move selector 1 not found: ",m);if(!$(y).length)return void r.log("Move selector 2 not found: ",y)}else{if(!g)return void r.log("Selector not specified");if(!k.length&&"no-selector"!==g&&(r.log("Selector not found: ",g),r.log("Trying fallback selector: ",h),h&&(k=$(h)),!k.length))return void r.log("Fallback selector not found")}var S=function(e,t){if(e&&t.includes("{{REPLACE}}")){r.log("Executing replace function: ",e);var n={dataLayerFinder:A},o=Function(e).bind(n);t=t.replaceAll("{{REPLACE}}",o())}return t};if(Array.isArray(w)?w.forEach((function(e,t){var n=b?b[t]||b:"";w[t]=S(n,e)})):w=S(b,w),"remove"===a)k&&(r.log("Removing: ",g),k.remove()),r.log("Cannot found element with selector: ",g);else if("insert"===a)switch(c){case"before":r.log("Inserting before: ",w),String(w).includes("nd-add-to-win")&&$(".nd-add-to-win").remove(),k.before(w);break;case"after":r.log("Inserting after: ",w),k.after(w);break;case"popup":if(0!==parseInt(sessionStorage.getItem(o))){r.log("Popup already displayed in session");break}if(r.log("Creating Popup: ",w),f(w,l),u){var x,I=window.matchMedia(d).matches,C=K(u);try{for(C.s();!(x=C.n()).done;)switch(x.value){case"exitIntent":r.log("Adding exit intent listener"),I?q(s):document.documentElement.addEventListener("mouseleave",s,{once:!0});break;case"copyIntent":r.log("Adding copy intent listener"),document.documentElement.addEventListener("copy",s,{once:!0})}}catch(e){C.e(e)}finally{C.f()}}else setTimeout((function(){s()}),timeout)}else if("edit"===a)switch(c){case"text":r.log("Editing text: ",w),k.text(w);break;case"styleApplicator":r.log("Applying style: ",w);var L=document.querySelectorAll(g),_=JSON.parse(w);r.log("Style Changes Map: ",_),D(L,_);break;case"addClass":r.log("addding class to ".concat(k," named ").concat(w)),k.addClass(w);break;case"removeClass":r.log("remove class from ".concat(k," named ").concat(w)),k.removeClass(w);break;case"documentTitle":if(r.log("changing document title from ".concat(k," to ").concat(w)),u){var E,P=K(u);try{for(P.s();!(E=P.n()).done;)"tabChange"==E.value&&function(){r.log("catching event tabchange..");var e=document.title;document.addEventListener("visibilitychange",(function(t){return i(t,w,e)}))}()}catch(e){P.e(e)}finally{P.f()}}break;case"updateBadge":if(!n){r.log("Product info unavailable");break}r.log("Updating badges: ",w);for(var O=0,N=Array.from(k);O<N.length;O++){var T=N[O],j=T.attr("data-product-sku");j||(j=T.attr("data-sku")),j?(T.find(t).remove(),Object.keys(n).includes(j)&&n[j].badges.includes(w)&&"superPrice"===w&&T.find(".hover-element-area").before(z)):r.log("Could not find product sku")}break;case"addBanner":if(!n){r.log("Product info unavailable");break}r.log("Adding banner: ",w);var R=el.attr("data-product-sku");R||(R=k.attr("data-sku")),R||r.log("Could not find product sku"),Object.keys(n).includes(R)&&n[R].catalog.mostViewedLevel<3&&k.find(g).before(w);break;default:r.log("Unknown edit type: ",c)}else if("setattribute"===a)switch(r.log("Setting attribute: ",attribute,w),attribute){case"src":k.css("content","url(".concat(w.trim(),")"));break;case"style":var U=w.split(":")[0].trim(),V=w.split(":")[1].trim();k.css(U,V,"!important")}else if("replace"===a)r.log("Replacing: ",w),k.replaceAll(w);else if("swap"===a){r.log("Swapping: ",m,y);var F=document.querySelector(m),M=document.querySelector(y);p(F,M)}else if("injectscript"===a)r.log("Injecting script: ",w),k.append("<script>".concat(w,"<\/script>"));else if("move"===a){r.log("Moving ".concat(m," to ").concat(y));var B=document.querySelector(m),J=document.querySelector(y);B.remove(),J.prepend(B)}else"noop"===a?r.log("Noop Operator: No operation is applied on target "):r.log("No such operator exists yet",a)}else r.log("Media condition mismatch: ",v)},i=function(){var e=c(l().mark((function e(t,n,r){var o,a;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:o=Array.isArray(n)?n:[n],a=0;case 2:if(!(a<o.length)){e.next=16;break}if(!document.hidden){e.next=12;break}return document.title=o[a],e.next=7,J(3e3);case 7:return document.title=r,e.next=10,J(3e3);case 10:e.next=13;break;case 12:document.title=r;case 13:a++,e.next=2;break;case 16:if(document.hidden){e.next=21;break}return document.title=r,e.abrupt("return");case 21:i(t,n,r);case 22:case"end":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}(),u=function e(t){var n=t.target.id;n&&"nd-popup__wrapper"===n&&($("#nd-popup__wrapper").remove(),window.removeEventListener("click",e,!0))},s=function e(){sessionStorage.setItem(o,1);var t=document.querySelector("#grt-shadow-host");t&&(t.style.display="none"),document.getElementById("nd-popup__wrapper").style.display="block",window.addEventListener("click",u,!0),document.documentElement.removeEventListener("mouseleave",e,{once:!0}),document.documentElement.removeEventListener("copy",e,{once:!0}),setTimeout((function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",u,!0)}),15e3)},f=function(e,t){var n=document.createElement("div");n.classList.add("nd-popup__wrapper"),n.id="nd-popup__wrapper";var r=document.createElement("button");if(r.classList.add("nd-popup__button-close"),r.innerText="X",r.onclick=function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",u,!0)},t)for(var o=Array.from(document.querySelectorAll(t));e.includes("{{REPLACE}}")&&o.length>0;)e=e.replace("{{REPLACE}}",o.shift().src);var a=document.createElement("template");a.innerHTML=e.trim();var i=a.content.firstChild;i.appendChild(r),n.appendChild(i),$("#nd-popup__wrapper").remove(),document.body.appendChild(n)},p=function(e,t){var n,r,o=e.parentNode,a=t.parentNode;if(o&&a&&!o.isEqualNode(t)&&!a.isEqualNode(e)){for(var i=0;i<o.children.length;i++)o.children[i].isEqualNode(e)&&(n=i);for(var c=0;c<a.children.length;c++)a.children[c].isEqualNode(t)&&(r=c);o.isEqualNode(a)&&n<r&&r++,o.insertBefore(t,o.children[n]),a.insertBefore(e,a.children[r])}},function e(t){if(window.jQuery){var n,o=K(t);try{for(o.s();!(n=o.n()).done;){var i=n.value;try{a(i)}catch(e){r.log("Couldn't apply treatment ".concat(i.id," with error ").concat(e.message));continue}}}catch(e){o.e(e)}finally{o.f()}}else setTimeout((function(){e(t)}),10)}(t);case 11:case"end":return e.stop()}}),e)}))),H.apply(this,arguments)}var W=function(e,t){return H.apply(this,arguments)};function Y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function X(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Z(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?X(Object(n),!0).forEach((function(t){Y(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):X(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ee(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return te(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?te(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function te(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ne=function(){function e(){y(this,e),this.logger=new S("Nextday Monitor"),this.logger.log("Initializing monitor"),this.appliedTreatmentIds=null,this.eligibleNotAppliedTreatments=null,this.latestChanges=null,this.eligibleNotAppliedChanges=null,this.sessionId=sessionStorage.getItem(f),this.viewId=crypto.randomUUID(),this.headers={type:"application/json"},this.logger.log("Initializing with session id: "+this.sessionId),this.debugMode=window.localStorage.getItem(m)?"on":"off",this.initializeExitEventListener(),this.isLogged=!1}var t;return w(e,[{key:"updateTreatments",value:function(e,t){this.appliedTreatmentIds=e,this.eligibleNotAppliedTreatments=t}},{key:"sendLogs",value:(t=c(l().mark((function e(t){var n,r,o,a=this,i=arguments;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=i.length>1&&void 0!==i[1]?i[1]:null,r=i.length>2&&void 0!==i[2]&&i[2],(o=this.logger).log("Sending logs"),"complete"!==document.readyState?(o.log("Document ready state is not complete"),window.addEventListener("beforeunload",(function(){o.log("In beforeunload event"),a.handleQueueLogs(a.packageLogData(t,n,r))}),!0),window.addEventListener("pagehide",(function(){o.log("In onpagehide event"),a.handleQueueLogs(a.packageLogData(t,n,r))}),!0),window.addEventListener("load",(function(){o.log("In onload event"),a.handleQueueLogs(a.packageLogData(t,n,r))}),!0)):this.handleQueueLogs(this.packageLogData(t,n,r));case 5:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"handleQueueLogs",value:function(e){if(!this.isLogged){var t=this.logger;e?(t.log("Request blob to send: ",e),this.queueLogs(e),this.isLogged=!0):t.log("Could not create request blob")}}},{key:"updateLatestChanges",value:function(e,t){var n=this.appliedTreatmentIds,r=this.eligibleNotAppliedTreatments,o=this.logger;o.log("Updating latest changes");var a=this.latestChanges||n;B(a,e)||(o.log("Changes detected"),o.log("Changes: ",e),this.latestChanges=e),a=this.eligibleNotAppliedChanges||r,B(a,t)||(o.log("Changes detected"),o.log("Changes: ",e),this.eligibleNotAppliedChanges=t)}},{key:"packageLogData",value:function(e,t,n){var r=this.appliedTreatmentIds,o=this.eligibleNotAppliedTreatments,a=this.debugMode,i=this.headers,c=this.viewId,u=t||(Object.keys(r).length?"Treatments applied":"No treatments applied"),l=this.prepareLogBody();return l.vId=n?null:c,l.m=u,l.dbm=a,l.isOn=e,l.a=n?{}:r,l.e=n?{}:o,new Blob([JSON.stringify(l)],i)}},{key:"packageUpdateLogData",value:function(){var e=this.headers,t=this.eligibleNotAppliedChanges,n=this.latestChanges,r=this.viewId;if(!n&&!t)return!1;var o={t:Date.now(),a:n||{},e:t||{},vId:r};return new Blob([JSON.stringify(o)],e)}},{key:"prepareLogBody",value:function(){var e,t=new URL(window.location.href),n={},r=ee(window.dataLayer);try{for(r.s();!(e=r.n()).done;){var o=e.value;n=Z(Z({},n),o)}}catch(e){r.e(e)}finally{r.f()}var a=JSON.parse(j(document.cookie,"VL_CM_0")),i={};if(a&&a.Items){var c,u=ee(a.Items);try{for(u.s();!(c=u.n()).done;){var l=c.value;i[l.K]=decodeURIComponent(l.V)}}catch(e){u.e(e)}finally{u.f()}}var s={};return s.cookieVLIsNew=i.OM_INW,s.cookieVLPVinVisit=i.VL_PVCountInVisit,s.cookieVLVisitDuration=i.VL_TotalDuration,s.cookieVLTotalPV=i.VL_TotalPV,s.cookieVLTotalVisit=i.VL_TotalVisit,s.gaPageType=n.PageType,s.gaProductName=n.content_name,s.gaViewType=n.content_type,s.gaProductCategory=n.content_category,s.gaProductID=n.content_ids,s.vvsProductCategory=n.vivense_category,s.gaListingName=function(){try{return n.ecommerce.detail.actionField.list}catch(e){return null}}(),s.vvsIsShowroom=n.isAdmin,s.vvsProductGroup=n.productGroup,s.vvsUserEmail=n.userEmail,s.vvsUserId=n.userId,s.vvsCategory=n.vivense_category,s.gaAction=n.Action,s.gaActionLabel=n.Label,s.gaCategoryProductCont=n.category_product_count,s.gaActionStep=function(){try{return n.ecommerce.checkout.actionField.step}catch(e){return null}}(),s.gaActionUser=function(){try{return n.ecommerce.checkout.actionField.dimension14}catch(e){return null}}()||function(){try{return n.ecommerce.purchase.actionField.dimension14}catch(e){return null}}(),s.gaCartProducts=function(){try{return n.ecommerce.checkout.products}catch(e){return null}}()||function(){try{return n.ecommerce.purchase.products}catch(e){return null}}(),s.vvsPDPProduct=function(){try{return n.vivenseProducts[0]}catch(e){return null}}(),s.gaPurchaseId=function(){try{return n.ecommerce.purchase.actionField.id}catch(e){return null}}(),s.gaPurchaseAffiliation=function(){try{return n.ecommerce.purchase.actionField.affiliation}catch(e){return null}}(),s.gaPurchaseCoupon=function(){try{return n.ecommerce.purchase.actionField.coupon}catch(e){return null}}(),s.gaPurchaseRevenue=function(){try{return n.ecommerce.purchase.actionField.revenue}catch(e){return null}}(),s.gaPurchaseShipping=function(){try{return n.ecommerce.purchase.actionField.shipping}catch(e){return null}}(),s.gaPurchaseTax=function(){try{return n.ecommerce.purchase.actionField.tax}catch(e){return null}}(),s.gaPurchasePayType=function(){try{return n.ecommerce.purchase.actionField.dimension15}catch(e){return null}}(),s.windowParams=window.location.search,s.windowScreen=window.screen,s.windowVPort=window.visualViewport,s.windowPRatio=window.devicePixelRatio,s.navAgent=navigator.userAgent,s.navHWCores=navigator.hardwareConcurrency,s.navLanguage=navigator.language,s.navTouch=navigator.maxTouchPoints,s.navPlatform=navigator.platform,s.navVendor=navigator.vendor,s.pClickSegment=window.localStorage.getItem("personaClick_segment"),s.cookieGaId=j(document.cookie,"_ga"),s.cookieLastBreadCrumb=j(document.cookie,"lastbreadcrumb"),s.cookieLastCategory=j(document.cookie,"lastcategory"),s.cookieFirstEntry=decodeURIComponent(j(document.cookie,"vivensefirst")),s.v="0.0.23",s.n="nextday-session_id-".concat(this.sessionId),s.t=Date.now(),s.sr=80,s.u=t.href,s.d=t.hostname,s.r=document.referrer,s.w=window.innerWidth,s.c=document.cookie,s.wdl=window.dataLayer,s.vvsPurcPriceElt=function(){try{var e=document.querySelector("div.basket_inner_right > div.basket_summary > div.basket_summary_total > span:nth-child(2)");return e||(e=document.querySelector("#main > div > div.general-container > div.col-md-12 > div > div:nth-child(1) > div > div.row.order_final_row.total_row > div.order-final-number")),e&&e.textContent?e.textContent:null}catch(e){return null}}(),s.vvsPurcTypeElt=function(){try{var e=document.querySelector("body > div.main-custom-container > div.general-container > div > div > div > div.cart-header > div.payment_type_final_text > div");return e||(e=document.querySelector("#main > div > div.general-container > div:nth-child(2) > div > div > div.cart-header > div.cart-title-info > span")),e&&e.textContent?e.textContent:null}catch(e){return null}}(),s}},{key:"initializeExitEventListener",value:function(){var e=this,t=this.logger,n=!1;t.log("Initializing exit event listener"),window.addEventListener("beforeunload",(function(){if(!n){n=!0,t.log("In beforeunload event");var r=e.packageUpdateLogData();r?e.queueLogs(r):t.log("No changes to log")}}),{capture:!0}),window.addEventListener("pagehide",(function(){if(!n){n=!0,t.log("In pagehide event");var r=e.packageUpdateLogData();r?e.queueLogs(r):t.log("No changes to log")}}),{capture:!0})}},{key:"queueLogs",value:function(e){var t=this.logger,n=navigator.sendBeacon(s,e),r=setInterval((function(){n?(clearInterval(r),t.log("Logs queued successfully")):n=navigator.sendBeacon(s,e)}),10);setTimeout((function(){clearInterval(r),n||t.log("Logs not queued")}),1e3)}}]),e}(),re=ne,oe=new S("Nextday Treatment Repository"),ae=function(){function e(t){y(this,e);var n=t.cookiePct,r=t.treatments;this.treatments=r,this.cookiePct=n}var t;return w(e,[{key:"getMatchedTreatments",value:function(){var e=this.getUserSegment(),t=this.treatments.filter((function(t){return t.apply_on_user_segment==e||"*"===t.apply_on_user_segment}));return oe.log("".concat(t.length," treatments segment matched")),t.length?t:[]}},{key:"getUserSegment",value:function(){if(-1===this.cookiePct)throw oe.log("New user has no segment"),new Error("New User");return this.cookiePct<50?"A":"B"}}],[{key:"getTreatments",value:(t=c(l().mark((function e(){var t,n,r,o,a,i;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(oe.log("Loading treatments"),t="ND_Treatments",n=JSON.parse(window.sessionStorage.getItem(t)),r=null==n?void 0:n.treatments,o=null==n?void 0:n.timestamp,r&&o){e.next=13;break}return oe.log("Treatments not found in local storage"),e.next=9,T();case 9:return r=e.sent,a={timestamp:Date.now(),treatments:r},window.sessionStorage.setItem(t,JSON.stringify(a)),e.abrupt("return",r);case 13:if(!o){e.next=23;break}if(!((Date.now()-o)/864e5>1)){e.next=23;break}return oe.log("Treatments are expired"),e.next=19,T();case 19:return r=e.sent,i={timestamp:Date.now(),treatments:r},window.sessionStorage.setItem(t,JSON.stringify(i)),e.abrupt("return",r);case 23:return oe.log("Treatments are loaded from local storage"),e.abrupt("return",r);case 25:case"end":return e.stop()}}),e)}))),function(){return t.apply(this,arguments)})}]),e}(),ie=ae,ce=new S("Nextday Counter Checker"),ue=function(e,t){try{switch(t){case"session":return sessionStorage.getItem(e);case"local":return localStorage.getItem(e);default:return ce.log("No such type",t),null}}catch(t){return ce.log("Could not get counter ".concat(e),t),null}},le=new S("Nextday Element Checker"),se=new S("Nextday Function Checker"),de=new S("Nextday Session Checker"),fe=new S("Nextday Env Checker");function pe(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return ge(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ge(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function ge(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var he=new S("Nextday Rule Engine"),ve=function(){function e(t){y(this,e);var n=t.baseRuleSet,r=t.subVariantRuleSet,o=t.callback,a=void 0===o?null:o;this.baseRuleSet=n,this.subVariantRuleSet=r,this.callback=a}return w(e,[{key:"checkRules",value:function(){var e,t=pe(this.baseRuleSet);try{for(t.s();!(e=t.n()).done;){var n=e.value;if(!this.checkRule(n))return!1}}catch(e){t.e(e)}finally{t.f()}return!0}},{key:"checkSubVariantRules",value:function(){var e,t=pe(this.subVariantRuleSet);try{for(t.s();!(e=t.n()).done;){var n=e.value;if(this.checkRule(n))return n.subVariantId}}catch(e){t.e(e)}finally{t.f()}return null}},{key:"checkRule",value:function(e){var t=e.chain,n=e.chain_condition,r=e.type,o=null;switch(r){case"session":o=function(e){de.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;return"duration"===t?function(e,t){var n=(Date.now()-function(){try{return new Date(parseInt(sessionStorage.getItem(p)))}catch(e){return de.log("Could not get session timestamp",e),Date.now()}}())/1e3;return F(n,e,parseInt(t))}(n,r):null}(e);break;case"counter":o=function(e){ce.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"pageView":return function(e,t){var n=parseInt(ue(g,"session"));return ce.log("Page views counter value: ",n),null===n?(ce.log("Pageviews counter not found in session storage"),!1):F(n,e,parseInt(t))}(n,r);case"CABasketPrice":return function(e,t){var n=parseInt(ue(v,"local"));return ce.log("Coupon applicable basket price counter value: ",n),null===n?(ce.log("Coupon applicable basket price counter not found in local storage"),!1):F(n,e,parseInt(t))}(n,r);default:return ce.log("No such operator",t),!1}}(e);break;case"element":o=function(e){le.log("Checking rule",JSON.stringify(e));var t,n=e.operator,r=e.condition,o=e.value,a=e.selector,i=e.selectorAll,c=e.selectorFallback,u=void 0===c?null:c,l=a;if(l&&!document.querySelector(l)&&(l=u||l),null===n)return F(document.querySelector(l),r,o);if(l&&!document.querySelector(l))return le.log("Selector not found on page"),!1;if(i&&!document.querySelectorAll(i))return le.log("Selector not found on page"),!1;switch(l?t=document.querySelector(l):i&&(t=Array.from(document.querySelectorAll(i))),n){case"text-number":var s;s=Array.isArray(t)?t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0):parseInt(document.querySelector(l).textContent.replace("TL","").replace(".",""));var d=parseInt(s);return F(d,r,o);case"classList":return F(Array.from(t.classList),r,o);case"count":var f=Array.isArray(t)?t.length:t?1:0;return F(f,r,o);default:return le.log("Operator not defined"),!1}}(e);break;case"dataLayer":o=C(e);break;case"url":o=_(e);break;case"function":o=function(e){se.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if(!t)return se.log("Rule function not defined"),!1;var o=Function(t)();return F(o,n,r)}(e);break;case"environment":o=function(e){fe.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("device_type"===t){var o=window.matchMedia(d).matches?"mobile":"desktop";return F(o,n,r)}}(e);break;default:return he.log("No such rule type: ".concat(r)),null}if(t)switch(n){case"and":o=o&&this.checkRule(t);break;case"or":o=o||this.checkRule(t);break;case"xor":o=o!=this.checkRule(t);break;default:he.log("No such chain condition")}return o}}]),e}(),me=new S("Nextday Api"),ye=function(){var e=c(l().mark((function e(){var t,n,r;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(me.log("Starting product info lookup"),t=G()){e.next=5;break}return me.log("No sku found"),e.abrupt("return",null);case 5:return(n=new Headers).append("Content-Type","application/json"),e.next=9,fetch("https://catalog-api.adoraai.com",{method:"POST",body:JSON.stringify(t),headers:n,mode:"cors"});case 9:if((r=e.sent).ok){e.next=13;break}return me.log("Product info lookup failed"),e.abrupt("return",null);case 13:return e.next=15,r.json();case 15:if(r=e.sent){e.next=19;break}return me.log("Product info extraction from response failed"),e.abrupt("return",null);case 19:return me.log("Product info lookup successful"),e.abrupt("return",r);case 21:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();function be(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return we(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?we(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function we(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}c(l().mark((function t(){var n,r,i,u,s;return l().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=null,r=ye();try{(new S).info("Nextday initiated"),(i=window.location.search).includes("nd_debug=1")?window.localStorage.setItem(m,1):i.includes("nd_debug=2")?window.localStorage.setItem(m,2):i.includes("nd_debug=0")&&window.localStorage.removeItem(m)}catch(e){console.log("Could not determine if debug mode is on or off")}return u=new re,t.prev=4,t.delegateYield(l().mark((function e(){var t,i,s,y,b,w,k,x,I,C,A,L,_,E,P,O,T,q,D,F,M,B,J,$,G,z;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(t=new S).info("Nextday initiated"),i=function(){var e=c(l().mark((function e(){return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e,t){var n=j(document.cookie,"_ga");if(n)e(n);else{var r=setInterval((function(){(n=j(document.cookie,"_ga"))&&(clearInterval(r),e(n))}),10);setTimeout((function(){clearInterval(r),t(new Error("Could not extract cookie identifier"))}),1e3)}})));case 1:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),e.next=5,i();case 5:return s=e.sent,t.log("Found cookie identifier: ",s),e.next=9,R(s);case 9:if(y=e.sent,window.localStorage.getItem(m)){e.next=20;break}if(!(y<80)){e.next=17;break}if(-1!==y){e.next=14;break}throw new Error("Could not determine cookie pct");case 14:n=!1,e.next=18;break;case 17:n=!0;case 18:e.next=21;break;case 20:t.info("Debug mode on: all applicable treatments will be applied");case 21:if(document.documentElement.classList.contains("nextDay-hide")){e.next=23;break}throw new Error("Nextday script timed out");case 23:if(window.dataLayer=window.dataLayer||[],window.dataLayer.push({event:"GLOV",GLOV_ON:n?"true":"false"}),!1!==n){e.next=27;break}throw new Error("Control group: no treatments applied");case 27:return U(),void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,K=g,Q=h,H=f,Y=p,X=sessionStorage.getItem(K),Z=sessionStorage.getItem(Q),ee=sessionStorage.getItem(H),te=sessionStorage.getItem(Y),X?sessionStorage.setItem(K,parseInt(X)+1):sessionStorage.setItem(K,1),null===Z&&sessionStorage.setItem(Q,0),ee||sessionStorage.setItem(H,crypto.randomUUID()),te||sessionStorage.setItem(Y,Date.now()),setTimeout((function(){N()}),2e3),b=ie.getTreatments(),w=window.matchMedia(d).matches,k={subtree:!0,childList:!0,attributes:!0},x=function(){var e=c(l().mark((function e(n){var r,o,i,c,u,d,f,p,g,h,v,y,b,k,S,x,I,C,A,L;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=n.id,o=n.actions,i=n.baseRuleSet,c=n.device,u=n.dependant_on_treatment,d=n.reapply_event,f=n.subVariantRuleSet,p=n.weight,"mobile"!==c||w){e.next=4;break}return t.log("Treatment device 'mobile' mismatch"),e.abrupt("return");case 4:if("desktop"!==c||!w){e.next=7;break}return t.log("Treatment device 'desktop' mismatch"),e.abrupt("return");case 7:if(d){g=d,Array.isArray(d)||(g=[d]),t.log("Reapply event '".concat(d,"' found for treatment: ").concat(r)),h=be(g);try{for(h.s();!(v=h.n()).done;)y=v.value,(b=F[y]?F[y]:[]).includes(r)?t.log("Treatment already added for reapply event"):F[y]=[].concat(a(b),[r])}catch(e){h.e(e)}finally{h.f()}}if(k=new ve({baseRuleSet:i,subVariantRuleSet:f}),t.log("Starting base rule set check for treatment: "+r),i&&!k.checkRules()){e.next=32;break}return S=100-p||50,u&&(S=100-(null===(x=T.find((function(e){return e.id===u})))||void 0===x?void 0:x.weight)||50),t.log("Treatment skip ratio: "+S),I=u||r,e.next=17,R(s+I,7);case 17:if(C=e.sent,window.localStorage.getItem(m)&&"1"===window.localStorage.getItem(m)&&(C=100),t.log("TreatmentPct: "+C),A=null,L=o,f&&(t.log("Starting sub variant rule set check for treatment: "+r),(A=k.checkSubVariantRules())?(t.log("Applying sub variant with id: ",A),L=V(o,A)):t.log("Applying treatment with default values")),!(C<S)){e.next=29;break}return t.log("Treatment ".concat(r," skipped due to treatment split ratio")),D[r]={dependant_on_treatment:u||null,subVariantId:A,actions:L},e.abrupt("return");case 29:return W(L,P),q[r]={subVariantId:A,actions:L},e.abrupt("return");case 32:t.log("Rule check failed for treatment: ",r);case 33:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),(I=function(){var e=v;if(window.location.href.includes("/siparis-listesi.html")){var n=Array.from(document.querySelectorAll(".price"));if(n.push.apply(n,a(Array.from(document.querySelectorAll(".new-price")))),!n.length)return t.log("Price elements not found"),void window.localStorage.setItem(e,0);t.log("Price elements: ",n);var r=n.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0);t.log("Coupon applicable total price: ",r),r>=0&&window.localStorage.setItem(e,r)}else(window.location.href.includes("/siparis-ozeti.html")||null===window.localStorage.getItem(e))&&window.localStorage.setItem(e,0)})(),window.location.href.includes("/siparis-listesi.html")&&(C=new MutationObserver((function(){t.log("Mutation observed, calling collectCABasketPrice"),I()})),(A=document.querySelector("#checkoutForm"))&&C.observe(A,k)),e.next=39,Promise.all([b,r]);case 39:if(L=e.sent,_=o(L,2),E=_[0],P=_[1],t.log("Found treatments: ",E),t.log("Found cookie percentage: ",y),t.log("Split_ratio: ",80),t.log("cookiePct < SPLIT_RATIO",y<80),t.info("Control group ratio: ".concat(80,"%")),O=new ie({treatments:E,cookiePct:y}),(T=O.getMatchedTreatments()).length){e.next=55;break}return t.log("No treatments matched, returning without further action"),N(),u.sendLogs(n,"No treatments matched",!0),e.abrupt("return",{v:void 0});case 55:q={},D={},F={},M=be(T),e.prev=59,M.s();case 61:if((B=M.n()).done){e.next=73;break}return J=B.value,e.prev=63,e.next=66,x(J);case 66:e.next=71;break;case 68:e.prev=68,e.t0=e.catch(63),t.log("Error executing rules",e.t0);case 71:e.next=61;break;case 73:e.next=78;break;case 75:e.prev=75,e.t1=e.catch(59),M.e(e.t1);case 78:return e.prev=78,M.f(),e.finish(78);case 81:for(t.info("Treatments applied"),N(),t.log("Applied treatments: ",q),u.updateTreatments(q,D),u.sendLogs(n),setInterval((function(){u.updateLatestChanges(q,D)}),1e3),$=function(){var e=z[G],n=F[e],r=T.filter((function(e){return n.includes(e.id)}));switch(e){case"infinite_scroll":var o=new ResizeObserver((function(){var e,n=be(r);try{for(n.s();!(e=n.n()).done;){var o=e.value;t.log("Retrying treatment ".concat(o.id," from infinite_scroll")),x(o)}}catch(e){n.e(e)}finally{n.f()}}));o.observe(document.documentElement);break;case"timeout":setTimeout((function(){var e,n=be(r);try{for(n.s();!(e=n.n()).done;){var o=e.value;t.log("Retrying treatment ".concat(o.id," from timeout")),x(o)}}catch(e){n.e(e)}finally{n.f()}}),500);break;case"element_change":var a,i=be(r);try{var c=function(){var e,n=a.value,r=be(Array.isArray(n.reapply_selector)?n.reapply_selector:[n.reapply_selector]);try{for(r.s();!(e=r.n()).done;){var o=e.value,i=document.querySelector(o);i&&new MutationObserver((function(){t.log("Retrying treatment ".concat(n.id," from element_change")),x(n)})).observe(i,k)}}catch(e){r.e(e)}finally{r.f()}};for(i.s();!(a=i.n()).done;)c()}catch(e){i.e(e)}finally{i.f()}break;case"on_scroll":window.onscroll=function(){var e,n=be(r);try{for(n.s();!(e=n.n()).done;){var o=e.value;t.log("Retrying treatment ".concat(o.id," from on_scroll")),x(o)}}catch(e){n.e(e)}finally{n.f()}};break;default:t.log("Reapply event not found: ",e)}},G=0,z=Object.keys(F);G<z.length;G++)$();case 89:case"end":return e.stop()}var K,Q,H,Y,X,Z,ee,te}),e,null,[[59,75,78,81],[63,68]])}))(),"t0",6);case 6:if("object"!==e(s=t.t0)){t.next=9;break}return t.abrupt("return",s.v);case 9:t.next=16;break;case 11:t.prev=11,t.t1=t.catch(4),N(),console.warn("Nextday: ",t.t1.message),u.sendLogs(n,t.t1.message,!0);case 16:case"end":return t.stop()}}),t,null,[[4,11]])})))()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
