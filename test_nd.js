/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 63:
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var _regeneratorRuntime3=__webpack_require__(687);var _slicedToArray3=__webpack_require__(424);var _classCallCheck3=__webpack_require__(690);var _createClass3=__webpack_require__(728);var _typeof3=__webpack_require__(698);/******/(function(){// webpackBootstrap
/******/var __webpack_modules__={/***/63:/***/function _(__unused_webpack_module,__unused_webpack_exports,__nested_webpack_require_465__){var _regeneratorRuntime2=__nested_webpack_require_465__(687);var _slicedToArray2=__nested_webpack_require_465__(424);var _classCallCheck2=__nested_webpack_require_465__(690);var _createClass2=__nested_webpack_require_465__(728);var _typeof2=__nested_webpack_require_465__(698);/******/(function(){// webpackBootstrap
/******/var __webpack_modules__={/***/61:/***/function _(module,__unused_webpack_exports,__nested_webpack_require_448__){var _typeof=__nested_webpack_require_448__(698)["default"];function _regeneratorRuntime(){"use strict";/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */module.exports=_regeneratorRuntime=function _regeneratorRuntime(){return exports;},module.exports.__esModule=true,module.exports["default"]=module.exports;var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,defineProperty=Object.defineProperty||function(obj,key,desc){obj[key]=desc.value;},$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key];}try{define({},"");}catch(err){define=function define(obj,key,value){return obj[key]=value;};}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return defineProperty(generator,"_invoke",{value:makeInvokeMethod(innerFn,self,context)}),generator;}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)};}catch(err){return{type:"throw",arg:err};}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,function(){return this;});var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){["next","throw","return"].forEach(function(method){define(prototype,method,function(arg){return this._invoke(method,arg);});});}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"!==record.type){var result=record.arg,value=result.value;return value&&"object"==_typeof(value)&&hasOwn.call(value,"__await")?PromiseImpl.resolve(value.__await).then(function(value){invoke("next",value,resolve,reject);},function(err){invoke("throw",err,resolve,reject);}):PromiseImpl.resolve(value).then(function(unwrapped){result.value=unwrapped,resolve(result);},function(error){return invoke("throw",error,resolve,reject);});}reject(record.arg);}var previousPromise;defineProperty(this,"_invoke",{value:function value(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl(function(resolve,reject){invoke(method,arg,resolve,reject);});}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg();}});}function makeInvokeMethod(innerFn,self,context){var state="suspendedStart";return function(method,arg){if("executing"===state)throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult();}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult;}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg);}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done};}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg);}};}function maybeInvokeDelegate(delegate,context){var methodName=context.method,method=delegate.iterator[methodName];if(undefined===method)return context.delegate=null,"throw"===methodName&&delegate.iterator["return"]&&(context.method="return",context.arg=undefined,maybeInvokeDelegate(delegate,context),"throw"===context.method)||"return"!==methodName&&(context.method="throw",context.arg=new TypeError("The iterator does not provide a '"+methodName+"' method")),ContinueSentinel;var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=undefined),context.delegate=null,ContinueSentinel):info:(context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel);}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry);}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record;}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0);}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;){if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;}return next.value=undefined,next.done=!0,next;};return next.next=next;}}return{next:doneResult};}function doneResult(){return{value:undefined,done:!0};}return GeneratorFunction.prototype=GeneratorFunctionPrototype,defineProperty(Gp,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),defineProperty(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,"GeneratorFunction"),exports.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name));},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,"GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun;},exports.awrap=function(arg){return{__await:arg};},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,function(){return this;}),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then(function(result){return result.done?result.value:iter.next();});},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,"Generator"),define(Gp,iteratorSymbol,function(){return this;}),define(Gp,"toString",function(){return"[object Generator]";}),exports.keys=function(val){var object=Object(val),keys=[];for(var key in object){keys.push(key);}return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next;}return next.done=!0,next;};},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=undefined,this.done=!1,this.delegate=null,this.method="next",this.arg=undefined,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this){"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=undefined);}},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval;},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=undefined),!!caught;}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break;}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record);},complete:function complete(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel;},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel;}},"catch":function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry);}return thrown;}}throw new Error("illegal catch attempt");},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=undefined),ContinueSentinel;}},exports;}module.exports=_regeneratorRuntime,module.exports.__esModule=true,module.exports["default"]=module.exports;/***/},/***/698:/***/function _(module){function _typeof(obj){"@babel/helpers - typeof";return(module.exports=_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj;}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;},module.exports.__esModule=true,module.exports["default"]=module.exports),_typeof(obj);}module.exports=_typeof,module.exports.__esModule=true,module.exports["default"]=module.exports;/***/},/***/687:/***/function _(module,__unused_webpack_exports,__nested_webpack_require_12125__){// TODO(Babel 8): Remove this file.
var runtime=__nested_webpack_require_12125__(61)();module.exports=runtime;// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try{regeneratorRuntime=runtime;}catch(accidentalStrictMode){if((typeof globalThis==="undefined"?"undefined":_typeof2(globalThis))==="object"){globalThis.regeneratorRuntime=runtime;}else{Function("r","regeneratorRuntime = r")(runtime);}}/***/}/******/};/************************************************************************/ /******/ // The module cache
/******/var __webpack_module_cache__={};/******/ /******/ // The require function
/******/function __nested_webpack_require_12788__(moduleId){/******/ // Check if module is in cache
/******/var cachedModule=__webpack_module_cache__[moduleId];/******/if(cachedModule!==undefined){/******/return cachedModule.exports;/******/}/******/ // Create a new module (and put it into the cache)
/******/var module=__webpack_module_cache__[moduleId]={/******/ // no module.id needed
/******/ // no module.loaded needed
/******/exports:{}/******/};/******/ /******/ // Execute the module function
/******/__webpack_modules__[moduleId](module,module.exports,__nested_webpack_require_12788__);/******/ /******/ // Return the exports of the module
/******/return module.exports;/******/}/******/ /************************************************************************/ /******/ /* webpack/runtime/compat get default export */ /******/!function(){/******/ // getDefaultExport function for compatibility with non-harmony modules
/******/__nested_webpack_require_12788__.n=function(module){/******/var getter=module&&module.__esModule?/******/function(){return module['default'];}:/******/function(){return module;};/******/__nested_webpack_require_12788__.d(getter,{a:getter});/******/return getter;/******/};/******/}();/******/ /******/ /* webpack/runtime/define property getters */ /******/!function(){/******/ // define getter functions for harmony exports
/******/__nested_webpack_require_12788__.d=function(exports,definition){/******/for(var key in definition){/******/if(__nested_webpack_require_12788__.o(definition,key)&&!__nested_webpack_require_12788__.o(exports,key)){/******/Object.defineProperty(exports,key,{enumerable:true,get:definition[key]});/******/}/******/}/******/};/******/}();/******/ /******/ /* webpack/runtime/hasOwnProperty shorthand */ /******/!function(){/******/__nested_webpack_require_12788__.o=function(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop);};/******/}();/******/ /************************************************************************/var __webpack_exports__={};// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function(){"use strict";;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{Promise.resolve(value).then(_next,_throw);}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err);}_next(undefined);});};}// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator=__nested_webpack_require_12788__(687);var regenerator_default=/*#__PURE__*/__nested_webpack_require_12788__.n(regenerator);;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj;}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;},_typeof(obj);};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function _toPrimitive(input,hint){if(_typeof(input)!=="object"||input===null)return input;var prim=input[Symbol.toPrimitive];if(prim!==undefined){var res=prim.call(input,hint||"default");if(_typeof(res)!=="object")return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return(hint==="string"?String:Number)(input);};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function _toPropertyKey(arg){var key=_toPrimitive(arg,"string");return _typeof(key)==="symbol"?key:String(key);};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,_toPropertyKey(descriptor.key),descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);Object.defineProperty(Constructor,"prototype",{writable:false});return Constructor;};// CONCATENATED MODULE: ./src/stringUtils.js
var replaceAll=function replaceAll(str,find){var replace=arguments.length>2&&arguments[2]!==undefined?arguments[2]:"";if(!str)return"";var index=str.indexOf(find);if(index<0)return str;while(str.indexOf(find)>=0){var _index=str.indexOf(find);str=(_index>0?str.substring(0,_index):"")+replace+str.substring(_index+find.length);}return str;};var turkishToLower=function turkishToLower(str){if(!str||typeof str!=="string")return str;var string=str;var letters={"İ":"i","I":"ı","Ş":"ş","Ğ":"ğ","Ü":"ü","Ö":"ö","Ç":"ç"};string=string.replace(/(([İIŞĞÜÇÖ]))/g,function(letter){return letters[letter];});return string.toLowerCase();};;// CONCATENATED MODULE: ./src/constants.js
/* eslint-disable max-len */var isStaging=typeof window!=="undefined"?window.location.href.includes("staging.vivense"):true;var VERSION="0.0.39.5";var COOKIE_NAME="_ga";// TODO revert the following staging env check after moving to new branch structure
var TREATMENTS_LOCATION="https://host-b96.pages.dev/treatments.json";var TREATMENT_WEIGHTS_LOCATION="https://host-b96.pages.dev/weights.json";var STYLESHEET_LOCATION=isStaging?"https://ndvivense.glov.ai/nd-styles_staging.css":"https://ndvivense.glov.ai/nd-styles.css?id=".concat(replaceAll(new Date().toISOString().substring(0,13).replace("T",""),"-",""));var E_RULES_LOCATION=isStaging?"https://ndvivense.glov.ai/eligibility_rules_staging.json":"https://ndvivense.glov.ai/eligibility_rules.json";var PRODUCT_INFO_LOCATION="https://ndvivense.glov.ai/social-proof-v2-staging.json";var LOG_API_URL="https://europe-west3-nextday-34eb3.cloudfunctions.net/api/log";var LOOKUP_API_URL="https://catalog-api.adoraai.com";var MOBILE_MEDIA_QUERY="(max-width: 440px)";// Control group percentage
var SPLIT_RATIO=50;// Skipped treatment percentage
var TREATMENT_RATIO=50;var LOCAL_STORAGE_TTL_HOURS=2;var MAX_TIMEOUT_PER_SESSION=1;var LIST_MODE_BEAGLE_KEYS=/* unused pure expression or super */null&&0;var IDLE_TIMEOUT=15000;var SESSION_STORAGE_KEYS={SESSION_TIMESTAMP:"BG_SessionTimestamp",SESSION_HISTORY:"BG_SessionHistory",POPUP_DISPLAY_FLAG:"BG_PopupDisplayFlag",SKU_INFO_BASKET:"BG_ProductInfoBasket",TIMEOUT_COUNT:"BG_TimeoutCount",SESSION_REFERRER:"BG_SessionReferrer",MATCHED_TREATMENTS:"GLV_Matched"};var LOCAL_STORAGE_KEYS={TREATMENTS:"BG_Treatments",WEIGHTS:"BG_Weights",ELIGIBILITY_RULES:"BG_E_Rules",DEBUG_MODE:"BG_Debug",OUT_OF_SCOPE:"BG_OutOfScope",IS_LABEL_SENT:"BG_LabelSent",USER_ID:"BG_UserId_00",DATA_COLLECTION_DATA_SIZE:"BG_CollectionDataSize",IS_ADMIN:"GLV_IsAdmin"};var CUSTOM_STORAGE_PREFIX="BG_Seg_";;// CONCATENATED MODULE: ./src/logger.js
var Logger=/*#__PURE__*/function(){function Logger(){var origin=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"Beagle Client SDK";var testing=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;_classCallCheck(this,Logger);this.origin=origin;if(testing){this.DEBUG=1;}else{this.DEBUG=window.localStorage.getItem(LOCAL_STORAGE_KEYS.DEBUG_MODE);}}_createClass(Logger,[{key:"info",value:function info(){var _console;var origin=this.origin;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}(_console=console).info.apply(_console,["[".concat(origin,"]")].concat(args));}},{key:"log",value:function log(){var DEBUG=this.DEBUG,origin=this.origin;if(DEBUG){var _console2;for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}(_console2=console).log.apply(_console2,["[".concat(origin,"]")].concat(args));}}},{key:"failed",value:function failed(){var _console3;var DEBUG=this.DEBUG,origin=this.origin;if(!DEBUG)return;var messageConfig="%c%s   ";for(var _len3=arguments.length,args=new Array(_len3),_key3=0;_key3<_len3;_key3++){args[_key3]=arguments[_key3];}args.forEach(function(argument){var type=_typeof(argument);switch(type){case"bigint":case"number":case"boolean":messageConfig+="%d   ";break;case"string":messageConfig+="%s   ";break;case"object":case"undefined":default:messageConfig+="%o   ";}});(_console3=console).log.apply(_console3,[messageConfig,"color: red","[".concat(origin,"]")].concat(args));}},{key:"success",value:function success(){var _console4;var DEBUG=this.DEBUG,origin=this.origin;if(!DEBUG)return;var messageConfig="%c%s   ";for(var _len4=arguments.length,args=new Array(_len4),_key4=0;_key4<_len4;_key4++){args[_key4]=arguments[_key4];}args.forEach(function(argument){var type=_typeof(argument);switch(type){case"bigint":case"number":case"boolean":messageConfig+="%d   ";break;case"string":messageConfig+="%s   ";break;case"object":case"undefined":default:messageConfig+="%o   ";}});(_console4=console).log.apply(_console4,[messageConfig,"color: green","[".concat(origin,"]")].concat(args));}},{key:"warn",value:function warn(){var _console5;var origin=this.origin;for(var _len5=arguments.length,args=new Array(_len5),_key5=0;_key5<_len5;_key5++){args[_key5]=arguments[_key5];}(_console5=console).warn.apply(_console5,["[".concat(origin,"]")].concat(args));}},{key:"error",value:function error(){var _console6;var origin=this.origin;for(var _len6=arguments.length,args=new Array(_len6),_key6=0;_key6<_len6;_key6++){args[_key6]=arguments[_key6];}(_console6=console).error.apply(_console6,["[".concat(origin,"]")].concat(args));}}]);return Logger;}();/* harmony default export */var src_logger=Logger;;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(arr){if(Array.isArray(arr))return arr;};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null!=_i){var _s,_e,_x,_r,_arr=[],_n=!0,_d=!1;try{if(_x=(_i=_i.call(arr)).next,0===i){if(Object(_i)!==_i)return;_n=!1;}else for(;!(_n=(_s=_x.call(_i)).done)&&(_arr.push(_s.value),_arr.length!==i);_n=!0){;}}catch(err){_d=!0,_e=err;}finally{try{if(!_n&&null!=_i["return"]&&(_r=_i["return"](),Object(_r)!==_r))return;}finally{if(_d)throw _e;}}return _arr;}};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js
function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest();};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr);};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(iter){if(typeof Symbol!=="undefined"&&iter[Symbol.iterator]!=null||iter["@@iterator"]!=null)return Array.from(iter);};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_unsupportedIterableToArray(arr)||_nonIterableSpread();};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj,key,value){key=_toPropertyKey(key);if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;};// CONCATENATED MODULE: ./src/utils.js
function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=utils_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function utils_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return utils_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return utils_arrayLikeToArray(o,minLen);}function utils_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}/* eslint-disable max-len */var logger=new src_logger("BeagleUtils");var months={"ocak":0,"şubat":1,"mart":2,"nisan":3,"mayıs":4,"haziran":5,"temmuz":6,"ağustos":7,"eylül":8,"ekim":9,"kasım":10,"aralık":11};var removeDocumentHide=function removeDocumentHide(){window.top.document.documentElement.classList.remove("glov-ease");window.top.document.documentElement.classList.remove("glov-hide");};var switchToEaseOut=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(){var el;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(window.top.document.documentElement.classList.contains("glov-hide")){_context.next=2;break;}return _context.abrupt("return");case 2:el=document.createElement("style");el.textContent=".glov-ease {\n    -webkit-animation: smooth 2s ease-in;\n    -moz-animation: smooth 2s ease-in;\n    -o-animation: smooth 2s ease-in;\n    -ms-animation: smooth 2s ease-in;\n    animation: smooth 2s ease-in;\n  }\n  \n  @keyframes smooth {\n    0% { opacity: 0;}\n    25% { opacity: 0.25;}\n    50% { opacity: 0.5;}\n    75% { opacity: 0.75;}\n    100% { opacity: 1;}\n  }\n  @-webkit-keyframes smooth {\n    0% { opacity: 0;}\n    25% { opacity: 0.25;}\n    50% { opacity: 0.5;}\n    75% { opacity: 0.75;}\n    100% { opacity: 1;}\n  }";window.top.document.documentElement.prepend(el);window.top.document.documentElement.classList.add("glov-ease");window.top.document.documentElement.classList.remove("glov-hide");case 7:case"end":return _context.stop();}}},_callee);}));return function switchToEaseOut(){return _ref.apply(this,arguments);};}();var fetchTreatments=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(){var treatments,jsonTreatment;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;logger.log("Fetching treatments");_context2.next=4;return fetchPlus(TREATMENTS_LOCATION);case 4:treatments=_context2.sent;if(treatments){_context2.next=7;break;}throw new Error();case 7:_context2.next=9;return treatments.json();case 9:jsonTreatment=_context2.sent;return _context2.abrupt("return",jsonTreatment);case 13:_context2.prev=13;_context2.t0=_context2["catch"](0);logger.failed("Could not fetch treatments",_context2.t0.message);return _context2.abrupt("return",null);case 17:case"end":return _context2.stop();}}},_callee2,null,[[0,13]]);}));return function fetchTreatments(){return _ref2.apply(this,arguments);};}();var fetchTreatmentWeights=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(){var treatmentWeights,jsonTreatmentWeights;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;logger.log("Fetching treatment weights");_context3.next=4;return fetchPlus(TREATMENT_WEIGHTS_LOCATION);case 4:treatmentWeights=_context3.sent;if(treatmentWeights){_context3.next=7;break;}throw new Error();case 7:_context3.next=9;return treatmentWeights.json();case 9:jsonTreatmentWeights=_context3.sent;return _context3.abrupt("return",jsonTreatmentWeights);case 13:_context3.prev=13;_context3.t0=_context3["catch"](0);logger.failed("Could not fetch treatment weights",_context3.t0.message);return _context3.abrupt("return",null);case 17:case"end":return _context3.stop();}}},_callee3,null,[[0,13]]);}));return function fetchTreatmentWeights(){return _ref3.apply(this,arguments);};}();var fetchEligibilityRules=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee4(){var eligibilityRules,jsonEligibilityRules;return regenerator_default().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;logger.log("Fetching eligibility rules");_context4.next=4;return fetchPlus(E_RULES_LOCATION);case 4:eligibilityRules=_context4.sent;if(eligibilityRules){_context4.next=7;break;}throw new Error();case 7:_context4.next=9;return eligibilityRules.json();case 9:jsonEligibilityRules=_context4.sent;return _context4.abrupt("return",jsonEligibilityRules);case 13:_context4.prev=13;_context4.t0=_context4["catch"](0);logger.failed("Could not fetch eligibility rules",_context4.t0.message);return _context4.abrupt("return",null);case 17:case"end":return _context4.stop();}}},_callee4,null,[[0,13]]);}));return function fetchEligibilityRules(){return _ref4.apply(this,arguments);};}();var fetchProductInfo=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee5(){var productInfo,productInfoJson;return regenerator_default().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;logger.log("Fetching product info");_context5.next=4;return fetchPlus(PRODUCT_INFO_LOCATION);case 4:productInfo=_context5.sent;if(productInfo){_context5.next=7;break;}throw new Error();case 7:_context5.next=9;return productInfo.json();case 9:productInfoJson=_context5.sent;return _context5.abrupt("return",productInfoJson);case 13:_context5.prev=13;_context5.t0=_context5["catch"](0);logger.failed("Could not fetch product info",_context5.t0.message);return _context5.abrupt("return",null);case 17:case"end":return _context5.stop();}}},_callee5,null,[[0,13]]);}));return function fetchProductInfo(){return _ref5.apply(this,arguments);};}();var utils_timeout=function timeout(time){var controller=new AbortController();setTimeout(function(){return controller.abort();},time);return controller;};var fetchPlus=function fetchPlus(url){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var retries=arguments.length>2&&arguments[2]!==undefined?arguments[2]:5;return fetch(url,_objectSpread(_objectSpread({},options),{},{signal:utils_timeout(5000).signal})).then(function(res){if(res.ok){return res;}if(retries>0){return fetchPlus(url,options,retries-1);}throw new Error(res.status);}).catch(function(error){if(retries>0){logger.failed("Fetch timed out Retrying...: ",error.message);return fetchPlus(url,options,retries-1);}logger.failed("Fetch failed: ",error.message);return null;});};var extractCookieIdentifier=function extractCookieIdentifier(cookieString,cookieName){if(!cookieString){return null;}var parsed=cookieString.split(";").map(function(v){return v.split("=");}).reduce(function(acc,v){if(v[0]&&v[1]){acc[decodeURIComponent(v[0].trim())]=decodeURIComponent(v[1].trim());}return acc;},{});var identifier=parsed[cookieName];if(!identifier){return null;}if(cookieName==="_ga"){// extract unique identifier from GA cookie
var identifierIndex=2;identifier=identifier.split(".")[identifierIndex];}return identifier;};var determinePct=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee6(identifier){var hash,pct;return regenerator_default().wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.prev=0;if(identifier){_context6.next=3;break;}return _context6.abrupt("return",null);case 3:hash=getUnsecureHash(identifier);if(!(hash===null)){_context6.next=6;break;}return _context6.abrupt("return",null);case 6:pct=hash%100;if(!(pct>=0&&pct<100)){_context6.next=9;break;}return _context6.abrupt("return",pct);case 9:return _context6.abrupt("return",null);case 12:_context6.prev=12;_context6.t0=_context6["catch"](0);logger.error(_context6.t0);return _context6.abrupt("return",null);case 16:case"end":return _context6.stop();}}},_callee6,null,[[0,12]]);}));return function determinePct(_x){return _ref6.apply(this,arguments);};}();var exitScrollListener=function exitScrollListener(callBack){var loop=function loop(){var scrollTop=window.top.document.documentElement.scrollTop;if(lastScrollTop-400>scrollTop){clearInterval(exitScrollInterval);callBack();}else{lastScrollTop=scrollTop;}};var lastScrollTop=window.top.document.documentElement.scrollTop;var exitScrollInterval=setInterval(loop,500);};/**
 * @description This function is used to apply treatments to the page on specific media type.
 * @param {MediaQueryList} mediaQueryCondition window.matchMedia("(max-width: 500px)")
 * @param {DOMNodeList } elements document.querySelectorAll("div.product_info")
 * @param {Object} styleChangesMap { "margin-top" : "10rem"}
 * @returns
 */var styleApplicator=function styleApplicator(elements,styleChangesMap){logger.log("Applying style changes",styleChangesMap,"to elements",elements);for(var i=0;i<elements.length;i++){var element=elements[i];for(var _i=0,_Object$entries=Object.entries(styleChangesMap);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),key=_Object$entries$_i[0],value=_Object$entries$_i[1];element.style[key]=value;}}};var injectStyleSheet=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee7(){var styleSheet;return regenerator_default().wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:styleSheet=window.top.document.createElement("link");styleSheet.rel="stylesheet";styleSheet.type="text/css";styleSheet.href=STYLESHEET_LOCATION;window.top.document.head.appendChild(styleSheet);case 5:case"end":return _context7.stop();}}},_callee7);}));return function injectStyleSheet(){return _ref7.apply(this,arguments);};}();var prepareActions=/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee8(identifier,actionsToPrepare,businessRuleId,debugMode){var actions,variant,_iterator,_step,action,businessRuleTransformations,variants,_iterator2,_step2,businessTransformation,key,_iterator3,_step3,_step3$value,index,variantKey,randomPct,_iterator4,_step4,_businessTransformation,_i2,_Object$keys,_key,_key2;return regenerator_default().wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:actions=JSON.parse(JSON.stringify(actionsToPrepare));variant=null;_iterator=_createForOfIteratorHelper(actions);_context8.prev=3;_iterator.s();case 5:if((_step=_iterator.n()).done){_context8.next=65;break;}action=_step.value;businessRuleTransformations=action.businessRuleTransformations,variants=action.variants;if(!(!businessRuleTransformations&&!variants)){_context8.next=10;break;}return _context8.abrupt("continue",63);case 10:if(businessRuleId!==null&&businessRuleTransformations){_iterator2=_createForOfIteratorHelper(businessRuleTransformations);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){businessTransformation=_step2.value;if(businessTransformation.id===businessRuleId){for(key in businessTransformation){if(key!=="id"){action[key]=businessTransformation[key];}}}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}if(!variants){_context8.next=63;break;}_iterator3=_createForOfIteratorHelper(Object.keys(variants).entries());_context8.prev=13;_iterator3.s();case 15:if((_step3=_iterator3.n()).done){_context8.next=55;break;}_step3$value=_slicedToArray(_step3.value,2),index=_step3$value[0],variantKey=_step3$value[1];_context8.next=19;return determinePct(identifier+variantKey);case 19:randomPct=_context8.sent;if(debugMode&&!action.variants[variantKey].weight){action.variants[variantKey].weight=Math.floor(100/Object.keys(variants).length)*(index+1);}if(!(randomPct<action.variants[variantKey].weight)){_context8.next=53;break;}variant=variantKey;if(!(businessRuleId!==null&&variants[variantKey].businessRuleTransformations)){_context8.next=51;break;}_iterator4=_createForOfIteratorHelper(variants[variantKey].businessRuleTransformations);_context8.prev=25;_iterator4.s();case 27:if((_step4=_iterator4.n()).done){_context8.next=41;break;}_businessTransformation=_step4.value;if(!(_businessTransformation.id==businessRuleId)){_context8.next=39;break;}_i2=0,_Object$keys=Object.keys(_businessTransformation);case 31:if(!(_i2<_Object$keys.length)){_context8.next=39;break;}_key=_Object$keys[_i2];if(!(_key==="id")){_context8.next=35;break;}return _context8.abrupt("continue",36);case 35:action[_key]=_businessTransformation[_key];case 36:_i2++;_context8.next=31;break;case 39:_context8.next=27;break;case 41:_context8.next=46;break;case 43:_context8.prev=43;_context8.t0=_context8["catch"](25);_iterator4.e(_context8.t0);case 46:_context8.prev=46;_iterator4.f();return _context8.finish(46);case 49:_context8.next=52;break;case 51:for(_key2 in variants[variantKey]){if(_key2!=="weight"&&_key2!=="businessRuleTransformations"){action[_key2]=variants[variantKey][_key2];}}case 52:return _context8.abrupt("break",55);case 53:_context8.next=15;break;case 55:_context8.next=60;break;case 57:_context8.prev=57;_context8.t1=_context8["catch"](13);_iterator3.e(_context8.t1);case 60:_context8.prev=60;_iterator3.f();return _context8.finish(60);case 63:_context8.next=5;break;case 65:_context8.next=70;break;case 67:_context8.prev=67;_context8.t2=_context8["catch"](3);_iterator.e(_context8.t2);case 70:_context8.prev=70;_iterator.f();return _context8.finish(70);case 73:return _context8.abrupt("return",[actions,variant]);case 74:case"end":return _context8.stop();}}},_callee8,null,[[3,67,70,73],[13,57,60,63],[25,43,46,49]]);}));return function prepareActions(_x2,_x3,_x4,_x5){return _ref8.apply(this,arguments);};}();var initiateSessionStorages=function initiateSessionStorages(){var POPUP_DISPLAY_FLAG=SESSION_STORAGE_KEYS.POPUP_DISPLAY_FLAG,SESSION_TIMESTAMP=SESSION_STORAGE_KEYS.SESSION_TIMESTAMP,SESSION_HISTORY=SESSION_STORAGE_KEYS.SESSION_HISTORY;var popupDisplayFlag=sessionStorage.getItem(POPUP_DISPLAY_FLAG);var sessionTimestamp=sessionStorage.getItem(SESSION_TIMESTAMP);var sessionHistory=sessionStorage.getItem(SESSION_HISTORY);if(popupDisplayFlag===null){sessionStorage.setItem(POPUP_DISPLAY_FLAG,0);}if(!sessionTimestamp){sessionStorage.setItem(SESSION_TIMESTAMP,Date.now());}if(!sessionHistory){sessionStorage.setItem(SESSION_HISTORY,[window.location.pathname]);}else{sessionStorage.setItem(SESSION_HISTORY,[window.location.pathname,sessionHistory]);}};var conditionChecker=function conditionChecker(runTimeValue,condition,value){if(condition==="notExist"){if(!runTimeValue){logger.success("conditionChecker: -satisfied- target does not exist");return true;}logger.failed("conditionChecker: -not satisfied- target does exist");return false;}if(runTimeValue===null||runTimeValue===undefined||condition===null||condition===undefined){logger.failed("conditionChecker: runTimeValue or condition is not defined");return false;}switch(condition){case"exist":if(runTimeValue){logger.success("conditionChecker: -satisfied- target does exist");return true;}logger.failed("conditionChecker: -not satisfied- target does not exist");return false;case"includes":case"contains":if(runTimeValue.includes(value)){logger.success("conditionChecker: -satisfied- target contains value");return true;}logger.failed("conditionChecker: -not satisfied- target does not contain value");return false;case"notIncludes":case"notContains":if(!runTimeValue.includes(value)){logger.success("conditionChecker: -satisfied- target does not contain value");return true;}logger.failed("conditionChecker: -not satisfied- target contains value");return false;case"equal":if(runTimeValue===value){logger.success("conditionChecker: -satisfied- target equals value");return true;}logger.failed("conditionChecker: -not satisfied- target does not equal value");return false;case"notEqual":if(runTimeValue!==value){logger.success("conditionChecker: -satisfied- target does not equal value");return true;}logger.failed("conditionChecker: -not satisfied- target equals value");return false;case"greaterThan":if(runTimeValue>value){logger.success("conditionChecker: -satisfied- target is greater than value");return true;}logger.failed("conditionChecker: -not satisfied- target is not greater than value");return false;case"lessThan":if(runTimeValue<value){logger.success("conditionChecker: -satisfied- target is less than value");return true;}logger.failed("conditionChecker: -not satisfied- target is not less than value");return false;case"greaterEquals":if(runTimeValue>=value){logger.success("conditionChecker: -satisfied- target is greater or equal than value");return true;}logger.failed("conditionChecker: -not satisfied- target is not greater or equal than value");return false;case"lessEquals":if(runTimeValue<=value){logger.success("conditionChecker: -satisfied- target is less or equal than value");return true;}logger.failed("conditionChecker: -not satisfied- target is not less or equal than value");return false;case"between":{var _value$split=value.split(","),_value$split2=_slicedToArray(_value$split,2),min=_value$split2[0],max=_value$split2[1];min=parseInt(min);max=parseInt(max);if(runTimeValue>=min&&runTimeValue<=max){logger.success("conditionChecker: -satisfied- target is between min and max");return true;}logger.failed("conditionChecker: -not satisfied- target is not between min and max");return false;}case"regex":{var regex=new RegExp(value,"i");return regex.test(runTimeValue);}default:logger.failed("conditionChecker: condition is not defined ",condition);return false;}};var getDebugMode=function getDebugMode(oosReason){var DEBUG_MODE=LOCAL_STORAGE_KEYS.DEBUG_MODE,OUT_OF_SCOPE=LOCAL_STORAGE_KEYS.OUT_OF_SCOPE;var queryString=window.location.search;if(queryString.includes("nd_debug=")){window.localStorage.setItem(OUT_OF_SCOPE,oosReason);}if(queryString.includes("nd_debug=1")){window.localStorage.setItem(DEBUG_MODE,1);addToBeagleInfoLayer("dbm","on");return 1;}if(queryString.includes("nd_debug=2")){window.localStorage.setItem(DEBUG_MODE,2);addToBeagleInfoLayer("dbm","on");return 2;}if(queryString.includes("nd_debug=0")){window.localStorage.removeItem(DEBUG_MODE);addToBeagleInfoLayer("dbm","off");return 0;}var current=parseInt(window.localStorage.getItem(DEBUG_MODE));addToBeagleInfoLayer("dbm",current?"on":"off");return current||0;};// get GA client id using ga.getAll()
var getGaClientId=function getGaClientId(){var ga=window.ga;// if ga and ga.getAll() is not defined, return null
if(ga&&ga.getAll){var trackers=ga.getAll();if(trackers&&trackers.length){return trackers[0].get("clientId");}}return null;};// get deterministic numeric hash from string that conatins only numbers
var getUnsecureHash=function getUnsecureHash(str){var hash=0;if(str.length===0){return null;}for(var i=0;i<str.length;i++){var char=str.charCodeAt(i);hash=(hash<<5)-hash+char;hash=hash&hash;}// return absolute value
return Math.abs(hash);};// generate a 32-bit random integer
var getRandomInt=function getRandomInt(){return Math.floor(Math.random()*0x100000000);};// get current unix epoch time in seconds
var getUnixTime=function getUnixTime(){return Math.floor(Date.now()/1000);};var getIdentifier=function getIdentifier(){return new Promise(function(resolve){try{var id=window.localStorage.getItem(LOCAL_STORAGE_KEYS.USER_ID);if(id!==null&&id!==undefined){logger.log("getIdentifier: got identifier from local storage",id);resolve(id);return;}id=getGaClientId();if(id!==null&&id!==undefined){logger.log("getIdentifier: got identifier from ga in first attempt",id);window.localStorage.setItem(LOCAL_STORAGE_KEYS.USER_ID,id);resolve(id);return;}else{var extractIdentifierInterval=setInterval(function(){id=getGaClientId();if(id!==null&&id!==undefined){logger.log("getIdentifier: got identifier from ga",id);clearInterval(extractIdentifierInterval);window.localStorage.setItem(LOCAL_STORAGE_KEYS.USER_ID,id);resolve(id);}},10);setTimeout(function(){clearInterval(extractIdentifierInterval);if(id===null||id===undefined){logger.failed("Could not read GA client id");resolve(null);}},2000);}}catch(e){logger.failed("Error in getIdentifier",e);resolve(null);}});};var delay=function delay(ms){return new Promise(function(res){return setTimeout(res,ms);});};var formatDeliveryDate=function formatDeliveryDate(date){if(!date||typeof date!=="string")return date;var result={startMonthIndex:undefined,endMonthIndex:undefined,startDay:undefined,endDay:undefined};var match=date.match("([\\d]+)-([\\d]+)\\s?([\\wıüğşöçİÖÇĞÜŞ]+)");if(match&&match.length===4){result.startDay=parseInt(match[1]);result.endDay=parseInt(match[2]);result.startMonthIndex=months[match[3].toLowerCase()];result.endMonthIndex=result.startMonthIndex;}else{match=date.match("([\\d]+)\\s+([\\wıüğşöçİÖÇĞÜŞ]+)-([\\d]+)\\s+([\\wıüğşöçİÖÇĞÜŞ]+)");if(!match||match.length!==5)return date;result.startDay=parseInt(match[1]);result.startMonthIndex=months[match[2].toLowerCase()];result.endDay=parseInt(match[3]);result.endMonthIndex=months[match[4].toLowerCase()];}try{var today=new Date();if(!result.startMonthIndex||!result.endMonthIndex)return date;var startYear=result.startMonthIndex>=today.getMonth()?today.getFullYear():today.getFullYear()+1;var endYear=result.endMonthIndex>=today.getMonth()?today.getFullYear():today.getFullYear()+1;var estimatedStart=new Date(startYear,result.startMonthIndex,result.startDay);var estimatedEnd=new Date(endYear,result.endMonthIndex,result.endDay);var startDiffOverDays=Math.ceil(Math.abs(estimatedStart-today)/(1000*60*60*24));var endDiffOverDays=Math.ceil(Math.abs(estimatedEnd-today)/(1000*60*60*24));var startDiffOverWeeks=startDiffOverDays<7?0:Math.ceil(startDiffOverDays/7);var endDiffOverWeeks=endDiffOverDays<7?0:Math.ceil(endDiffOverDays/7);if(startDiffOverWeeks===0&&endDiffOverWeeks===0){return"".concat(startDiffOverDays," - ").concat(endDiffOverDays," G\xFCn");}if(startDiffOverWeeks===0&&endDiffOverWeeks>=1){return"".concat(startDiffOverDays," G\xFCn - ").concat(endDiffOverWeeks," Hafta");}if(startDiffOverWeeks===endDiffOverWeeks){return"".concat(startDiffOverWeeks," Hafta");}return"".concat(startDiffOverWeeks," - ").concat(endDiffOverWeeks," Hafta");}catch(err){return date;}};var idleTimer=/*#__PURE__*/function(){var _ref9=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee9(timeOut,callBack){var idleTimeout,resetTimer;return regenerator_default().wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:resetTimer=function _resetTimer(){clearTimeout(idleTimeout);idleTimeout=setTimeout(callBack,timeOut);};idleTimeout=setTimeout(callBack,timeOut);window.top.document.ontouchstart=resetTimer;case 3:case"end":return _context9.stop();}}},_callee9);}));return function idleTimer(_x6,_x7){return _ref9.apply(this,arguments);};}();var getBrowserType=function getBrowserType(){var userAgent=navigator.userAgent;if(userAgent.match(/chrome|chromium|crios/i)){return"chrome";}if(userAgent.match(/firefox|fxios/i)){return"firefox";}if(userAgent.match(/safari/i)){return"safari";}if(userAgent.match(/opr\//i)){return"opera";}if(userAgent.match(/edg/i)){return"edge";}return null;};var isOwnMutation=function isOwnMutation(mutationList){var nodes=[].concat(_toConsumableArray(Array.from(mutationList[0].addedNodes)),_toConsumableArray(Array.from(mutationList[0].removedNodes)));return nodes.some(function(n){var _n$id;return n.tagName&&(((_n$id=n.id)===null||_n$id===void 0?void 0:_n$id.includes("bn-"))||Array.from(n.classList).some(function(c){return c.includes("bn-")||c.includes("nd-");}));});};;// CONCATENATED MODULE: ./src/BeagleDataCollection/store.config.js
var config={dbName:"beagle",version:1,maintenanceOperationCount:1000,// affects version
store:{name:"data",indexes:[{name:"ix_dataName",fields:["data_name"]},{name:"ix_dataName_session",fields:["data_name","session_id"]},{name:"ix_dataName_dataValue",fields:["data_name","data_value"]},{name:"ix_dataName_dataValue_session",fields:["data_name","data_value","session_id"]}],options:{keyPath:"id",autoIncrement:true}}};/* harmony default export */var store_config=config;;// CONCATENATED MODULE: ./src/BeagleDataCollection/api.js
function api_createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=api_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function api_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return api_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return api_arrayLikeToArray(o,minLen);}function api_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}var api_logger=new src_logger("BeagleDataCollectionWrapper");var _window={alltime:"alltime",session:"session"};var BeagleDataCollectionWrapper=/*#__PURE__*/function(){function BeagleDataCollectionWrapper(){_classCallCheck(this,BeagleDataCollectionWrapper);this.indexedDB=null;try{this.init();}catch(err){api_logger.failed("Failed to initialized db with: ",err.message);}}_createClass(BeagleDataCollectionWrapper,[{key:"init",value:function init(){var _window$top$indexedDB,_this=this;api_logger.log("Initializing indexedDB");// TODO, uncomment next line once existing stale dbs are purged
// const openRequest = window.top.indexedDB?.open(config.dbName, config.version);
var openRequest=(_window$top$indexedDB=window.top.indexedDB)===null||_window$top$indexedDB===void 0?void 0:_window$top$indexedDB.open(store_config.dbName);if(!openRequest){throw new Error("indexeddb is not supported");}openRequest.onupgradeneeded=function(event){switch(event.oldVersion){case 0:break;default:// TODO upgrade existing db instead of delete and create from scratch
try{openRequest.result.deleteObjectStore(store_config.store.name);}catch(err){api_logger.failed("Could not delete outdated database",err.message);}break;}try{var _config$store$indexes;var store=openRequest.result.createObjectStore(store_config.store.name,store_config.store.options);if(((_config$store$indexes=store_config.store.indexes)===null||_config$store$indexes===void 0?void 0:_config$store$indexes.length)>0){var _iterator=api_createForOfIteratorHelper(store_config.store.indexes),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var idx=_step.value;store.createIndex(idx.name,idx.fields);}}catch(err){_iterator.e(err);}finally{_iterator.f();}}}catch(err){api_logger.failed("Could not create object store on database",err.message);}};openRequest.onerror=function(){throw new Error("Error initializing beagle indexed DB",openRequest.error);};openRequest.onsuccess=function(){var db=openRequest.result;if(db.version!==1){// TODO, remove delete request once existing stale dbs are purged
var deleteRequest=window.indexedDB.deleteDatabase(store_config.dbName);deleteRequest.onsuccess=function(){_this.init();};}else _this.indexedDB=db;};}},{key:"getConnection",value:function getConnection(){var _this2=this;return new Promise(function(resolve,reject){var interval=setInterval(function(){if(_this2.indexedDB){clearInterval(interval);resolve();}},25);setTimeout(function(){if(!_this2.indexedDB){clearInterval(interval);reject(new Error("IndexedDB not initialized within the allotted time"));}},1000);});}},{key:"initTransaction",value:function(){var _initTransaction=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(){var readwrite,tx,store,_args=arguments;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:readwrite=_args.length>0&&_args[0]!==undefined?_args[0]:false;_context.next=3;return this.getConnection();case 3:tx=this.indexedDB.transaction(store_config.store.name,readwrite?"readwrite":"readonly");store=tx.objectStore(store_config.store.name);return _context.abrupt("return",store);case 6:case"end":return _context.stop();}}},_callee,this);}));function initTransaction(){return _initTransaction.apply(this,arguments);}return initTransaction;}()},{key:"save",value:function(){var _save=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(dataName,dataValue){var store,sessionId,time,payload;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return this.initTransaction(true);case 2:store=_context2.sent;sessionId=this.getCurrentSessionId();// date current -2 saat  yil-ay-gun
time=Math.round(Date.now()/1000);payload={"data_name":dataName,"data_value":dataValue,"session_id":sessionId,time:time};store.put(payload);case 7:case"end":return _context2.stop();}}},_callee2,this);}));function save(_x,_x2){return _save.apply(this,arguments);}return save;}()},{key:"minmax",value:function minmax(dataName,op){var _this3=this;var window=arguments.length>2&&arguments[2]!==undefined?arguments[2]:_window.alltime;return new Promise(function(resolve){_this3.initTransaction().then(function(store){var stored=undefined;_this3.getCursor(store,dataName,window).onsuccess=function(event){var cursor=event.target.result;if(cursor){var value=cursor.value;if("data_value"in value){if(stored===undefined||op==="min"&&value["data_value"]<stored||op==="max"&&value["data_value"]>stored){stored=value["data_value"];}}else{console.warn("key not found in cursor values "+dataName);}cursor.continue();}else{resolve(stored);}};});});}},{key:"min",value:function min(dataName){var window=arguments.length>1&&arguments[1]!==undefined?arguments[1]:_window.alltime;return this.minmax(dataName,"min",window);}},{key:"max",value:function max(dataName){var window=arguments.length>1&&arguments[1]!==undefined?arguments[1]:_window.alltime;return this.minmax(dataName,"max",window);}},{key:"groupBy",value:function groupBy(dataName){var _this4=this;var window=arguments.length>1&&arguments[1]!==undefined?arguments[1]:_window.alltime;return new Promise(function(resolve){_this4.initTransaction().then(function(store){var map=new Map();_this4.getCursor(store,dataName,window).onsuccess=function(event){var cursor=event.target.result;if(cursor){var value=cursor.value;if("data_value"in value){if(!map.has(value["data_value"]))map.set(value["data_value"],0);map.set(value["data_value"],map.get(value["data_value"])+1);}else{console.warn("key not found in cursor values "+dataName);}cursor.continue();}else{resolve(map);}};});});}},{key:"mode",value:function(){var _mode=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(dataName){var window,data,max,_iterator2,_step2,_step2$value,key,value,_args3=arguments;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:window=_args3.length>1&&_args3[1]!==undefined?_args3[1]:_window.alltime;_context3.next=3;return this.groupBy(dataName,window);case 3:data=_context3.sent;if(!(data.keys().length===0)){_context3.next=6;break;}return _context3.abrupt("return",null);case 6:max={name:undefined,value:-1};_iterator2=api_createForOfIteratorHelper(data);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){_step2$value=_slicedToArray(_step2.value,2),key=_step2$value[0],value=_step2$value[1];if(max.value<value){max.name=key;max.value=value;}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return _context3.abrupt("return",max);case 10:case"end":return _context3.stop();}}},_callee3,this);}));function mode(_x3){return _mode.apply(this,arguments);}return mode;}()},{key:"count",value:function count(dataName){var _this5=this;var window=arguments.length>1&&arguments[1]!==undefined?arguments[1]:_window.alltime;return new Promise(function(resolve){_this5.initTransaction().then(function(store){var count=0;_this5.getCursor(store,dataName,window).onsuccess=function(event){var cursor=event.target.result;if(cursor){count++;cursor.continue();}else{resolve(count);}};});});}},{key:"sum",value:function sum(dataName){var _this6=this;var window=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"alltime";return new Promise(function(resolve){_this6.initTransaction().then(function(store){var total=0.00;_this6.getCursor(store,dataName,window).onsuccess=function(event){var cursor=event.target.result;if(cursor){var value=cursor.value;if("data_value"in value){total+=parseFloat(value["data_value"]);}else{console.warn("key not found in cursor values "+dataName);}cursor.continue();}else{resolve(total.toFixed(2));}};});});}},{key:"getCursor",value:function getCursor(store,dataName){var window=arguments.length>2&&arguments[2]!==undefined?arguments[2]:_window.alltime;var dataValue=arguments.length>3&&arguments[3]!==undefined?arguments[3]:undefined;if(dataValue){if(window===_window.session){return store.index("ix_dataName_dataValue_session").openCursor(IDBKeyRange.only([dataName,dataValue,this.getCurrentSessionId().toString()]));}return store.index("ix_dataName_dataValue").openCursor(IDBKeyRange.only([dataName,dataValue]));}if(window===_window.session){return store.index("ix_dataName_session").openCursor(IDBKeyRange.only([dataName,this.getCurrentSessionId().toString()]));}var indexValue=getBrowserType()==="safari"?dataName:[dataName];return store.index("ix_dataName").openCursor(IDBKeyRange.only(indexValue));}},{key:"avg",value:function(){var _avg=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee4(dataName){var window,total,count,_args4=arguments;return regenerator_default().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:window=_args4.length>1&&_args4[1]!==undefined?_args4[1]:_window.alltime;_context4.next=3;return this.sum(dataName,window);case 3:total=_context4.sent;_context4.next=6;return this.count(dataName,window);case 6:count=_context4.sent;if(!(!total||!count)){_context4.next=9;break;}return _context4.abrupt("return",0);case 9:return _context4.abrupt("return",(total/count).toFixed(2));case 10:case"end":return _context4.stop();}}},_callee4,this);}));function avg(_x4){return _avg.apply(this,arguments);}return avg;}()},{key:"last",value:function(){var _last=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee5(dataName){var _this7=this;var size,window,_args5=arguments;return regenerator_default().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:size=_args5.length>1&&_args5[1]!==undefined?_args5[1]:1;window=_args5.length>2&&_args5[2]!==undefined?_args5[2]:_window.alltime;return _context5.abrupt("return",new Promise(function(resolve){_this7.initTransaction().then(function(store){var cursor=store.index("ix_dataName").openCursor([dataName],"prev");if(window===_window.session){cursor=store.index("ix_dataName_session").openCursor([dataName,_this7.getCurrentSessionId()],"prev");}var index=0;var values=[];cursor.onsuccess=function(event){var result=event.target.result;if(result&&index<size){index++;values.push(result.value);result.continue();}else{resolve(values);}};});}));case 3:case"end":return _context5.stop();}}},_callee5);}));function last(_x5){return _last.apply(this,arguments);}return last;}()},{key:"getCurrentSessionId",value:function getCurrentSessionId(){var d=new Date();d.setHours(d.getHours()-2);return d.getFullYear()+"-"+(d.getMonth()+1).toString().padStart(2,"0")+"-"+d.getDate().toString().padStart(2,"0");}}]);return BeagleDataCollectionWrapper;}();;// CONCATENATED MODULE: ./src/BeagleDataCollection/index.js
function BeagleDataCollection_createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=BeagleDataCollection_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function BeagleDataCollection_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return BeagleDataCollection_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return BeagleDataCollection_arrayLikeToArray(o,minLen);}function BeagleDataCollection_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}/* eslint-disable max-len */var BeagleDataCollection_logger=new src_logger("BeagleDataCollection");var collectorApi=new BeagleDataCollectionWrapper();// keep a table in indexdb the format [session_id, data_name, data_value, stored_value]
var queryInCollector=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(baseFeatureName,queryMethod,window){var queryPromise,_queryPromise,_queryPromise2,data,count,_iterator,_step,_step$value,value,_data,match,_queryPromise3,dataValues;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:BeagleDataCollection_logger.log("queryInCollector",baseFeatureName,queryMethod,window);if(collectorApi){_context.next=4;break;}BeagleDataCollection_logger.failed("IndexedDB no supported/Initialized");return _context.abrupt("return",null);case 4:if(!(queryMethod==="min")){_context.next=11;break;}_context.next=7;return collectorApi.min(baseFeatureName,window);case 7:queryPromise=_context.sent;return _context.abrupt("return",queryPromise);case 11:if(!(queryMethod==="max")){_context.next=18;break;}_context.next=14;return collectorApi.max(baseFeatureName,window);case 14:_queryPromise=_context.sent;return _context.abrupt("return",_queryPromise);case 18:if(!(queryMethod==="avg")){_context.next=25;break;}_context.next=21;return collectorApi.avg(baseFeatureName,window);case 21:_queryPromise2=_context.sent;return _context.abrupt("return",_queryPromise2);case 25:if(!(queryMethod==="cd")){_context.next=31;break;}_context.next=28;return collectorApi.groupBy(baseFeatureName,window);case 28:return _context.abrupt("return",_context.sent.size);case 31:if(!(queryMethod==="cv")){_context.next=39;break;}_context.next=34;return collectorApi.groupBy(baseFeatureName,window);case 34:data=_context.sent;count=0;_iterator=BeagleDataCollection_createForOfIteratorHelper(data);try{for(_iterator.s();!(_step=_iterator.n()).done;){_step$value=_slicedToArray(_step.value,2),value=_step$value[1];count+=value;}}catch(err){_iterator.e(err);}finally{_iterator.f();}return _context.abrupt("return",count);case 39:if(!(queryMethod==="mode")){_context.next=46;break;}_context.next=42;return collectorApi.mode(baseFeatureName,window);case 42:_data=_context.sent;if(_data){_context.next=45;break;}return _context.abrupt("return",null);case 45:return _context.abrupt("return",_data.name);case 46:if(!(queryMethod.indexOf("last")>=0)){_context.next=55;break;}match=queryMethod.match("last\\(([\\d]+)\\)");if(!(!match||!match.length===2||parseInt(match[1])<1)){_context.next=50;break;}return _context.abrupt("return",null);case 50:_context.next=52;return collectorApi.last(baseFeatureName,match[1],window);case 52:_queryPromise3=_context.sent;dataValues=_queryPromise3.map(function(obj){return obj.data_value;});return _context.abrupt("return",dataValues);case 55:/**
              {"Listingpage" => 21}
              {"Homepage" => 12}
              -- example will have:
              mode: Listingpage
              cd: 2
              cv: 21+12
              last(3) (n, n-1, n-2)
            */ // 1000lik temizlenecek (maintOpCount -> version)
// queryMethod can be "mode", "cd" (count distint) for string/categorical data types
// queryMethod can be "cv" (sum of count values), "current", or "prev" for any data type (stored via last)
BeagleDataCollection_logger.failed("unknown queryMethod=".concat(queryMethod," in BeagleDataCollection"));return _context.abrupt("return",null);case 57:case"end":return _context.stop();}}},_callee);}));return function queryInCollector(_x,_x2,_x3){return _ref.apply(this,arguments);};}();var updateInCollector=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(baseFeatureName,baseFeatureValue,updateMethod){return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:BeagleDataCollection_logger.log("updateInCollector",baseFeatureName,baseFeatureValue,updateMethod);if(collectorApi){_context2.next=4;break;}BeagleDataCollection_logger.failed("IndexedDB no supported/Initialized");return _context2.abrupt("return",null);case 4:_context2.next=6;return collectorApi.save(baseFeatureName,baseFeatureValue);case 6:case"end":return _context2.stop();}}},_callee2);}));return function updateInCollector(_x4,_x5,_x6){return _ref2.apply(this,arguments);};}();;// CONCATENATED MODULE: ./src/BeagleInfoLayer/index.js
function BeagleInfoLayer_createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=BeagleInfoLayer_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function BeagleInfoLayer_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return BeagleInfoLayer_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return BeagleInfoLayer_arrayLikeToArray(o,minLen);}function BeagleInfoLayer_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}/* eslint-disable max-len */window.beagleInfoLayer=window.beagleInfoLayer||{a:{},e:{},f:{},__hwm:0};var BeagleInfoLayer_logger=new src_logger("BeagleInfoLayer");// TODO: convert to name --> array of selectors
var searchPaths=[// ----------------------------------------------------------------------------------------------------------------------------------------------
// GA Data Layer Queries
{PageTypeDepend:"*",method:"GADataLayer",selector:"PageType",name:"PageType"},{PageTypeDepend:"*",method:"GADataLayer",selector:"isAdmin",name:"vvsIsShowroom"},{PageTypeDepend:"*",method:"GADataLayer",selector:"userId",name:"vvsUserId"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"content_name",name:"pdp.name"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"productgroup",name:"pdp.group"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivense_category",name:"pdp.class"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"content_ids",name:"pdp.sku",formatter:"upperCaseTR"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"ProductID",name:"pdp.sku"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"content_category",name:"pdp.category"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"ecommerce.detail.actionField.list",name:"pdp.listalias"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivenseProducts.*.sku",name:"pdp.sku",formatter:"dearray"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivenseProducts.*.category",name:"pdp.category",formatter:"dearray"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivenseProducts.*.discountRate",name:"pdp.discountRate",formatter:"dearray"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivenseProducts.*.fastDelivery",name:"pdp.fastDelivery",formatter:"dearray"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivenseProducts.*.isInShowroom",name:"pdp.isInShowroom",formatter:"dearray"},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"search_success",name:"plp.searchSuccess",exclusive:["plp.id","plp.approximateCount","plp.name","plp.group","plp.class"]},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"content_ids",name:"plp.id",exclusive:["plp.searchSuccess"]},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"category_product_count",name:"plp.approximateCount",exclusive:["plp.searchSuccess"]},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"content_name",name:"plp.name",exclusive:["plp.searchSuccess"]},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"productgroup",name:"plp.group",exclusive:["plp.searchSuccess"]},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"vivense_category",name:"plp.class",exclusive:["plp.searchSuccess"]},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.products.*.id",name:"purchase.skus"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.products.*.price",name:"purchase.prices"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.products.*.quantity",name:"purchase.quantities"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.products.*.category",name:"purchase.categories"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.actionField.id",name:"purchase.orderId"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.actionField.revenue",name:"purchase.revenue"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.actionField.dimension15",name:"purchase.paymentType"},// ----------------------------------------------------------------------------------------------------------------------------------------------
// Document Queries
{PageTypeDepend:"*",method:"DocQuery",selector:"[class*=\"page_preview_wrapper_production\"]",name:"PageType",operand:"docQueryValueIfHasInnerText",value:"Homepage"},{PageTypeDepend:"*",method:"DocQuery",selector:"[class*=\"category_page_wrapper\"]",name:"PageType",operand:"docQueryValueIfHasInnerText",value:"Listingpage"},{PageTypeDepend:"*",method:"DocQuery",selector:"[class*=\"product-main-details\"]",name:"PageType",operand:"docQueryValueIfHasInnerText",value:"Productpage"},{PageTypeDepend:"*",method:"DocQuery",selector:"[class*=\"product\"]",name:"PageType",operand:"docQueryValueIfHasInnerText",value:"Productpage"},{PageTypeDepend:"Homepage|Productpage|Listingpage",method:"DocQuery",selector:"[class*=\"welcome_username\"]",name:"view.isLoggedIn",operand:"docQueryHasInnerText"},{PageTypeDepend:"Homepage|Productpage|Listingpage",method:"DocQuery",selector:"[class*=\"empty_basket_text\"]",name:"cart.isempty",operand:"docQueryHasInnerText",exclusive:["cart.totalBasePrice","cart.skucount","cart.couponNotApplicable"]},{PageTypeDepend:"Homepage|Productpage|Listingpage",method:"DocQuery",selector:"body > .desktop_layout_wrapper .not-allowed-coupon",name:"cart.couponNotApplicable",operand:"docQuerySumNumInnerText",exclusive:["cart.isempty"]},// Note that sequential search will mark copuonNotApplicable as found
{PageTypeDepend:"Homepage|Productpage|Listingpage",method:"DocQuery",selector:"[class*=\"basket_total_price\"]",name:"cart.totalBasePrice",operand:"docQueryInnerText",exclusive:["cart.isempty","cart.couponNotApplicable"],formatter:"numericOnly"},{PageTypeDepend:"Homepage|Productpage|Listingpage",method:"DocQuery",selector:"[id*=\"cart_quantity\"], [class*=\"basket_length\"]",name:"cart.skucount",operand:"docQueryInnerText",exclusive:["cart.isempty"]},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"[class*=\"delivery-date\"]",name:"pdp.deliveryDate",operand:"docQueryInnerText"},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"[class*=\"delivery-date\"]",name:"pdp.deliveryDateFormatted",operand:"docQueryInnerText",formatter:"formatDeliveryDate"},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"[class*=\"product-title\"], [class*=\"header-bottom\"]",name:"pdp.name",operand:"docQueryInnerText"},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"[class*=\"vivense-showrooms\"] > *",name:"pdp.showroomcount",operand:"docQueryCountElts",exclusive:["pdp.hasNoShowrooms"]},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"#vivense-showroom-tab p:not(.vivense-showrooms)",name:"pdp.hasNoShowrooms",operand:"docQueryHasInnerText",exclusive:["pdp.showroomcount"]},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"span.price",name:"pdp.price",operand:"docQueryInnerText",formatter:"numericOnly"},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"#sales-price",name:"pdp.price",operand:"docQueryInnerText",formatter:"numericOnly"},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"div.product-price-box",name:"__priceObserver",children:["pdp.price"],operand:"docQueryObserve"},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"#mobile-product-sticky",name:"__priceObserver",children:["pdp.price"],operand:"docQueryObserve"},{PageTypeDepend:"Listingpage",method:"DocQuery",selector:"[class*=\"count-of-product\"]",name:"plp.itemCount",operand:"docQueryInnerText",formatter:"numericOnly"},{PageTypeDepend:"Listingpage",method:"DocQuery",selector:"[class*=\"subcategories-title\"]",name:"plp.name",operand:"docQueryInnerText"},{PageTypeDepend:"Listingpage",method:"DocQuery",selector:".product-card[data-product-sku]",name:"__features.SKUsonPage",operand:"docQueryAttribValueList",value:"data-product-sku"},{PageTypeDepend:"Listingpage",method:"DocQuery",selector:".product-list",name:"__listingItemBlockObserver",children:["__features.SKUsonPage"],operand:"docQueryObserve"},{PageTypeDepend:"basket",method:"DocQuery",selector:".empty-cart-container, .empty-cart",name:"cart.isempty",operand:"docQueryHasInnerText",exclusive:["cart.skucount","cart.totalPrice","cart.totalPriceFinal","cart.couponNotApplicable","cart.skus","cart.prices","cart.quantities","cart.categories","__checkoutFormObserver"]},{PageTypeDepend:"basket",method:"DocQuery",selector:".bracket-text, .product-count",name:"cart.skucount",operand:"docQueryInnerText",exclusive:["cart.isempty"],formatter:"numericOnly"},{PageTypeDepend:"basket",method:"DocQuery",selector:".cartItemQuantity",name:"cart.quantities",operand:"docQueryAttribValueList",value:"data-previous",exclusive:["cart.isempty"]},{PageTypeDepend:"basket",method:"DocQuery",selector:"#bill_total",name:"cart.totalPrice",operand:"docQueryInnerText",exclusive:["cart.isempty"],formatter:"numericOnly"},{PageTypeDepend:"basket",method:"DocQuery",selector:"[class*=\"order-final-number\"]",name:"cart.totalPriceFinal",operand:"docQueryInnerText",exclusive:["cart.isempty"],formatter:"numericOnly"},{PageTypeDepend:"basket",method:"DocQuery",selector:"[class*=\"cart-price\"] .not-allowed-coupon",name:"cart.couponNotApplicable",operand:"docQuerySumNumInnerText",exclusive:["cart.isempty"]},// Note that sequential search will mark couponApplicable as found
{PageTypeDepend:"basket",method:"DocQuery",selector:".cart-inside",name:"cart.skus",operand:"docQueryAttribValueList",value:"data-sku",exclusive:["cart.isempty","cart.couponNotApplicable"]},{PageTypeDepend:"basket",method:"DocQuery",selector:".cart-inside",name:"cart.categories",operand:"docQueryAttribValueList",value:"data-last-breadcrumb",exclusive:["cart.isempty","cart.couponNotApplicable"]},{PageTypeDepend:"basket",method:"DocQuery",selector:".cart-inside",name:"cart.prices",operand:"docQueryAttribValueList",value:"data-price",exclusive:["cart.isempty","cart.couponNotApplicable"]},// Desktop observer for the right panel, as it is the one changing
{PageTypeDepend:"basket",method:"DocQuery",selector:".cart-right-container",name:"__checkoutFormObserver",children:["cart.skucount","cart.totalPrice","cart.totalPriceFinal","cart.couponNotApplicable","cart.skus","cart.prices","cart.quantities","cart.categories","cart.isempty","cart.couponApplicableAmount"],operand:"docQueryObserve"},// Mobile observer for the full form block as it is completely replaced
{PageTypeDepend:"basket",method:"DocQuery",selector:"#checkoutForm",name:"__checkoutFormObserver",children:["cart.skucount","cart.totalPrice","cart.totalPriceFinal","cart.couponNotApplicable","cart.skus","cart.prices","cart.quantities","cart.categories","cart.isempty","cart.couponApplicableAmount"],operand:"docQueryObserve"},{PageTypeDepend:"purchase",method:"DocQuery",selector:"[class*=\"basket_summary_total\"], [class*=\"total_row\"]",name:"purchase.revenue",operand:"docQueryInnerText",formatter:"numericOnly"},{PageTypeDepend:"purchase",method:"DocQuery",selector:"[class*=\"order_follow_numb\"], [class*=\"cart-title-bottom\"]",name:"purchase.vvsTxnId",operand:"docQueryInnerText"},{PageTypeDepend:"purchase",method:"DocQuery",selector:".payment_type_title, .cart-title-info",name:"purchase.paymentType",operand:"docQueryInnerText",formatter:"lowerCaseTRFirstWord"},{PageTypeDepend:"purchase",method:"DocQuery",selector:"[class*=\"product_sku_code\"]",name:"purchase.skus",operand:"docQueryArrayInnerText"},{PageTypeDepend:"purchase",method:"DocQuery",selector:".cart-inside",name:"purchase.skus",operand:"docQueryAttribValueList",value:"data-sku"},// ----------------------------------------------------------------------------------------------------------------------------------------------
// SORG Elements
{PageTypeDepend:"Productpage",method:"DocSorg",selector:"sku",name:"pdp.sku"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"mpn",name:"pdp.mpn"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"name",name:"pdp.name",operand:"JSONFilterOther",value:"@type=Product"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"offers.priceValidUntil",name:"pdp.priceValidUntil"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"itemListElement.*.name",name:"view.breadcrumb"},{PageTypeDepend:"Listingpage",method:"DocSorg",selector:"mainEntity.name",name:"plp.name"},{PageTypeDepend:"Listingpage",method:"DocSorg",selector:"mainEntity.numberOfItems",name:"plp.itemCount"},{PageTypeDepend:"Listingpage",method:"DocSorg",selector:"breadcrumb.itemListElement.*.item.name",name:"view.breadcrumb"},// ----------------------------------------------------------------------------------------------------------------------------------------------
// Window custom elements
{PageTypeDepend:"*",method:"SingleWT",selector:"favoriteProducts",name:"view.favoritedMPNs"},{PageTypeDepend:"*",method:"SingleWT",selector:"isAdmin",name:"vvsIsShowroom",formatter:"toString"},{PageTypeDepend:"*",method:"SingleWT",selector:"userId",name:"vvsUserId"}];var featureEngineeringOps={"view_epoch":[{updateMethod:"min"},{queryMethod:"min",window:"session",featureName:"history.view_epoch_min"}],"PageType":[{updateMethod:"count_values"},{queryMethod:"cv",window:"session",featureName:"history.PageType_count_session"},{queryMethod:"cv",window:"alltime",featureName:"history.PageType_count_alltime"}],"cart.couponApplicableAmount":[{updateMethod:"last"},{queryMethod:"last(1)",window:"session",featureName:"__features.lastCartCouponApplicable"}],"pdp.category":[{updateMethod:"count_values"},{updateMethod:"last"},{queryMethod:"mode",window:"session",featureName:"history.pdp_category_mode_session"},{queryMethod:"last(1)",window:"session",featureName:"history.pdp_category_last_session"}],"cart.skus":[{updateMethod:"last"},{queryMethod:"last(1)",window:"session",featureName:"__features.SKUsonLastCartView"}]};var increaseBeagleInfoLayerHWM=function increaseBeagleInfoLayerHWM(){var infoLayer=window.top.beagleInfoLayer;// update hwm to indicate change
infoLayer.__hwm+=1;};var addToBeagleInfoLayer=function addToBeagleInfoLayer(key,value){var infoLayer=window.top.beagleInfoLayer;if(key===null||key===undefined)return;// if value is string, add as a clean string, if object add the same
var typedValue=typeof value==="string"?value.toString().trim():value;// if key contains . create nested object
if(key.indexOf(".")>-1){var keys=key.split(".");var lastKey=keys.pop();var obj=infoLayer;keys.forEach(function(key){if(!obj[key])obj[key]={};obj=obj[key];});obj[lastKey]=typedValue;}else{infoLayer[key]=typedValue;}// update hwm to indicate change
increaseBeagleInfoLayerHWM();// process dependent historical data for scan-found elements
if(typedValue!==undefined&&typedValue!==null){updateDerivationsInCollector(key,typedValue);passValueToListeners(key,typedValue);}};var DATA_LISTENERS={};var addDataListener=function addDataListener(key,listener){if(!DATA_LISTENERS[key]){DATA_LISTENERS[key]=[];}DATA_LISTENERS[key].push(listener);};var passValueToListeners=function passValueToListeners(key,value){var listeners=DATA_LISTENERS[key];if(listeners&&Array.isArray(listeners)&&listeners.length>0){for(var i=0;i<listeners.length;i+=1){var listener=listeners[i];if(typeof listener==="function"){BeagleInfoLayer_logger.log("passValueToListeners --> value ".concat(value," to listener ").concat(i," of key ").concat(key));listener(value);}}}};var getFromBeagleInfoLayer=function getFromBeagleInfoLayer(key){var blocking=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var pollInterval=arguments.length>2&&arguments[2]!==undefined?arguments[2]:50;var timeout=arguments.length>3&&arguments[3]!==undefined?arguments[3]:10000;// TODO: check featureEngineering and search list if all marked as found but value is missing
var infoLayer=window.top.beagleInfoLayer;// return null if key is missing or not an array or has no elements
if(!key)return null;var obtainData=jsonGet(infoLayer,key);if(obtainData!==null&&obtainData!==undefined){// found data for key
return Promise.resolve(obtainData);}var _iterator=BeagleInfoLayer_createForOfIteratorHelper(searchPaths),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var searchElement=_step.value;if(key===searchElement.name&&(searchElement.isFound||searchElement.isIgnore)){// data is missing but element is marked as found or ignored
return Promise.resolve(null);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}if(blocking){return new Promise(function(resolve){var interval=setInterval(function(){obtainData=jsonGet(infoLayer,key);if(obtainData!==null&&obtainData!==undefined){// found data for key, clear interval and resolve
clearInterval(interval);resolve(obtainData);}var _iterator2=BeagleInfoLayer_createForOfIteratorHelper(searchPaths),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var searchElement=_step2.value;if(key===searchElement.name&&(searchElement.isFound||searchElement.isIgnore)){// data is missing but element is marked as found or ignored
clearInterval(interval);resolve(null);}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}},pollInterval);// add timeout
setTimeout(function(){clearInterval(interval);resolve(null);},timeout);// wait blocking for "timeout" msecs
});}return Promise.resolve(null);};var removeFromBeagleInfoLayer=function removeFromBeagleInfoLayer(key){var infoLayer=window.top.beagleInfoLayer;if(key===null||key===undefined)return;// remove key from infoLayer
if(key.indexOf(".")>-1){var keys=key.split(".");var lastKey=keys.pop();var obj=infoLayer;keys.forEach(function(key){if(!obj[key])return;obj=obj[key];});BeagleInfoLayer_logger.log("removeFromBeagleInfoLayer","Removing ".concat(lastKey," from ").concat(JSON.stringify(obj)));delete obj[lastKey];}else{delete infoLayer[key];}increaseBeagleInfoLayerHWM();// process dependent historical data for scan-found elements
updateDerivationsInCollector(key,null);passValueToListeners(key,null);};var addTreatment=function addTreatment(id,businessRuleId,variant,status){var dependant_on_treatment=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var value={};var infoLayer=window.top.beagleInfoLayer;if(businessRuleId!==null&&businessRuleId!==undefined)value.businessRuleId=businessRuleId;if(variant)value.variant=variant;switch(status){case"applied":infoLayer.a[id]=value;break;case"skipped":value.dependant_on_treatment=dependant_on_treatment;infoLayer.e[id]=value;break;case"failed":infoLayer.f[id]=value;break;}increaseBeagleInfoLayerHWM();};var PARSESEARCHMAXRETRY=10;var PARSESEARCHSTARTDELAY=10;var parseSearchPathsDelay=PARSESEARCHSTARTDELAY;var parseSearchPathsRetry=0;var initializeBeagleInfoLayer=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(){return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// Collect core data
prepareCoreData();// Trigger-start the parser loop
parserCaller();// Add metrics
addMetrics();case 3:case"end":return _context.stop();}}},_callee);}));return function initializeBeagleInfoLayer(){return _ref.apply(this,arguments);};}();var collectDerivationsFromCollector=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(){var baseFeatureNames,_i,_baseFeatureNames,baseFeatureName,FEData,_iterator3,_step3,FEOp,queryResponse;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:baseFeatureNames=Object.keys(featureEngineeringOps);_i=0,_baseFeatureNames=baseFeatureNames;case 2:if(!(_i<_baseFeatureNames.length)){_context2.next=30;break;}baseFeatureName=_baseFeatureNames[_i];FEData=featureEngineeringOps[baseFeatureName];if(!(FEData&&Array.isArray(FEData)&&FEData.length>0)){_context2.next=27;break;}_iterator3=BeagleInfoLayer_createForOfIteratorHelper(FEData);_context2.prev=7;_iterator3.s();case 9:if((_step3=_iterator3.n()).done){_context2.next=19;break;}FEOp=_step3.value;if(!(FEOp.queryMethod===null||FEOp.queryMethod===undefined)){_context2.next=13;break;}return _context2.abrupt("continue",17);case 13:_context2.next=15;return queryInCollector(baseFeatureName,FEOp.queryMethod,FEOp.window);case 15:queryResponse=_context2.sent;addToBeagleInfoLayer(FEOp.featureName,queryResponse);case 17:_context2.next=9;break;case 19:_context2.next=24;break;case 21:_context2.prev=21;_context2.t0=_context2["catch"](7);_iterator3.e(_context2.t0);case 24:_context2.prev=24;_iterator3.f();return _context2.finish(24);case 27:_i++;_context2.next=2;break;case 30:case"end":return _context2.stop();}}},_callee2,null,[[7,21,24,27]]);}));return function collectDerivationsFromCollector(){return _ref2.apply(this,arguments);};}();var updateDerivationsInCollector=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(baseFeatureName,baseFeatureValue){var FEData,_iterator4,_step4,FEOp;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:// process dependent historical data for scan-found elements
FEData=featureEngineeringOps[baseFeatureName];if(!(FEData&&Array.isArray(FEData)&&FEData.length>0)){_context3.next=21;break;}_iterator4=BeagleInfoLayer_createForOfIteratorHelper(FEData);_context3.prev=3;_iterator4.s();case 5:if((_step4=_iterator4.n()).done){_context3.next=13;break;}FEOp=_step4.value;if(!(FEOp.updateMethod===null||FEOp.updateMethod===undefined)){_context3.next=9;break;}return _context3.abrupt("continue",11);case 9:_context3.next=11;return updateInCollector(baseFeatureName,baseFeatureValue,FEOp.updateMethod);case 11:_context3.next=5;break;case 13:_context3.next=18;break;case 15:_context3.prev=15;_context3.t0=_context3["catch"](3);_iterator4.e(_context3.t0);case 18:_context3.prev=18;_iterator4.f();return _context3.finish(18);case 21:case"end":return _context3.stop();}}},_callee3,null,[[3,15,18,21]]);}));return function updateDerivationsInCollector(_x,_x2){return _ref3.apply(this,arguments);};}();var processFormatter=function processFormatter(value,formatter){if(value===null||value===undefined||!formatter){return null;}switch(formatter){case"upperCaseTR":return value.toString().toUpperCase("tr-TR");case"formatDeliveryDate":return formatDeliveryDate(value);case"numericOnly":return value.replace(/\D/g,"");case"lowerCaseTRFirstWord":return value.toString().toLowerCase("tr-TR").split(" ")[0];case"dearray":if(Array.isArray(value)&&value.length>0){return value[0];}return value;case"toString":return value.toString().trim();default:return value;}};var searchObj=function searchObj(obj,searchElement){var value;var layerValue;try{switch(searchElement.operand){case"JSONFilterOther":{value=jsonGet(obj,searchElement.selector);if(value===null||value===undefined){break;}var filterParams=searchElement.value.split("=");if(filterParams.length!==2)break;var filterName=filterParams[0];var filterValue=filterParams[1];if(!filterName||!filterValue)break;var filterMatch=jsonGet(obj,filterName);if(!filterMatch||filterMatch!==filterValue)break;if(value&&(Array.isArray(value)?value.length>0:value.toString().trim().length>0)){layerValue=value;}}break;case"docQueryObserve":value=obj.querySelector(searchElement.selector);if(value!==null&&value!==undefined){searchElement.isFound=true;// update found status of the elements in the children list
var toBeUpdated=[];searchElement.children.forEach(function(child){var childElements=searchPaths.filter(function(element){return element.name===child;});// add childElements into toBeUpdated
toBeUpdated.push.apply(toBeUpdated,_toConsumableArray(childElements));});// run only if the element has added or removed children
var observer=new MutationObserver(/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee4(mutationList){var triggerRestart;return regenerator_default().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!isOwnMutation(mutationList)){_context4.next=2;break;}return _context4.abrupt("return");case 2:toBeUpdated.forEach(function(element){element.isFound=false;removeFromBeagleInfoLayer(element.name);});triggerRestart=parseSearchPathsRetry>=PARSESEARCHMAXRETRY;parseSearchPathsDelay=PARSESEARCHSTARTDELAY;parseSearchPathsRetry=0;if(triggerRestart){BeagleInfoLayer_logger.log("searchObj: triggered a restart of searchpaths due: ",searchElement.name);parserCaller();}case 7:case"end":return _context4.stop();}}},_callee4);}));return function(_x3){return _ref4.apply(this,arguments);};}());observer.observe(value,{subtree:true,childList:true});}break;case"docQueryInnerText":value=obj.querySelector(searchElement.selector);if(value!==null&&value!==undefined&&value.innerText&&value.innerText.trim().length>0){layerValue=value.innerText;}break;case"docQueryAttribValueList":{var attribValueList=[];value=obj.querySelectorAll(searchElement.selector);if(value===null||value===undefined||value.length===0)break;var _iterator5=BeagleInfoLayer_createForOfIteratorHelper(value),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var valuechild=_step5.value;var attribValue=valuechild.getAttribute(searchElement.value);if(attribValue){attribValueList.push(attribValue);}}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}if(attribValueList.length>0){layerValue=attribValueList;}}break;case"docQueryHasInnerText":value=obj.querySelector(searchElement.selector);if(value!==null&&value!==undefined){var setValue=value.innerText.trim().length>0;layerValue=setValue.toString();}break;case"docQueryCountElts":value=obj.querySelectorAll(searchElement.selector);if(value!==null&&value!==undefined){layerValue=value.length;}break;case"docQueryValueIfHasInnerText":value=obj.querySelector(searchElement.selector);if(value&&value.innerText&&value.innerText.trim().length>0){layerValue=searchElement.value;}break;case"docQuerySumNumInnerText":{value=obj.querySelectorAll(searchElement.selector);if(value===null||value===undefined||value.length===0)break;var sumPrice=0;var _iterator6=BeagleInfoLayer_createForOfIteratorHelper(value),_step6;try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var child=_step6.value;var childText=child.innerText.trim().replace(/\D/g,"");if(childText.length>0){sumPrice+=parseInt(childText);}}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}if(sumPrice>0){layerValue=sumPrice;}}break;case"docQueryArrayInnerText":{value=obj.querySelectorAll(searchElement.selector);if(value===null||value===undefined||value.length===0)break;var arrayInnerText=[];var _iterator7=BeagleInfoLayer_createForOfIteratorHelper(value),_step7;try{for(_iterator7.s();!(_step7=_iterator7.n()).done;){var _child=_step7.value;var _childText=_child.innerText.trim();if(_childText.length>0){arrayInnerText.push(_childText);}}}catch(err){_iterator7.e(err);}finally{_iterator7.f();}if(arrayInnerText.length>0){layerValue=arrayInnerText;}}break;default:value=jsonGet(obj,searchElement.selector);if(value!==null&&value!==undefined&&(Array.isArray(value)?value.length>0:value.toString().trim().length>0)){layerValue=value;}break;}// switch
if(layerValue!==undefined&&layerValue!==null){if(searchElement.formatter){layerValue=processFormatter(layerValue,searchElement.formatter);}addToBeagleInfoLayer(searchElement.name,layerValue);searchElement.isFound=true;// mark exclusive elements as found
if(searchElement.exclusive&&Array.isArray(searchElement.exclusive)&&searchElement.exclusive.length>0){var _iterator8=BeagleInfoLayer_createForOfIteratorHelper(searchPaths),_step8;try{for(_iterator8.s();!(_step8=_iterator8.n()).done;){var exclusiveElement=_step8.value;if(searchElement.exclusive.includes(exclusiveElement.name)){exclusiveElement.isFound=true;}}}catch(err){_iterator8.e(err);}finally{_iterator8.f();}}}if(searchElement.isFound){return true;}}catch(e){BeagleInfoLayer_logger.error("searchObj error: "+e);}return false;};var customDataDerivations=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee5(){var currentPageType,_yield$Promise$all,_yield$Promise$all2,isCartEmpty,totalBasePrice,couponNotApplicable,prices,quantities,totalPrice,i,couponApplicableAmount,sku,skuList;return regenerator_default().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return getFromBeagleInfoLayer("PageType",true,50,1000);case 2:currentPageType=_context5.sent;_context5.prev=3;_context5.next=6;return Promise.all([getFromBeagleInfoLayer("cart.isempty"),getFromBeagleInfoLayer("cart.totalBasePrice"),getFromBeagleInfoLayer("cart.couponNotApplicable"),getFromBeagleInfoLayer("cart.prices"),getFromBeagleInfoLayer("cart.quantities")]);case 6:_yield$Promise$all=_context5.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,5);isCartEmpty=_yield$Promise$all2[0];totalBasePrice=_yield$Promise$all2[1];couponNotApplicable=_yield$Promise$all2[2];prices=_yield$Promise$all2[3];quantities=_yield$Promise$all2[4];totalPrice=0;if(!totalBasePrice&&prices&&Array.isArray(prices)&&prices.length>0&&quantities&&Array.isArray(quantities)&&quantities.length>0&&prices.length===quantities.length){for(i=0;i<prices.length;i++){totalPrice+=parseInt(prices[i])*parseInt(quantities[i]);}}else{totalPrice=parseInt(totalBasePrice);}couponApplicableAmount=0;if(!isCartEmpty&&totalPrice&&couponNotApplicable){couponApplicableAmount=totalPrice-parseInt(couponNotApplicable);}else if(!isCartEmpty&&totalPrice){couponApplicableAmount=parseInt(totalPrice);}else{couponApplicableAmount=0;}addToBeagleInfoLayer("cart.couponApplicableAmount",couponApplicableAmount);if(isCartEmpty){addToBeagleInfoLayer("cart.totalPrice",0);addToBeagleInfoLayer("cart.couponNotApplicable",0);}_context5.next=24;break;case 21:_context5.prev=21;_context5.t0=_context5["catch"](3);BeagleInfoLayer_logger.error("customDataDerivations cannot compute couponApplicablePrice: "+_context5.t0);case 24:if(!(currentPageType==="Productpage")){_context5.next=33;break;}_context5.next=27;return getFromBeagleInfoLayer("pdp.sku");case 27:sku=_context5.sent;if(!(sku!==null&&sku!==undefined)){_context5.next=31;break;}_context5.next=31;return addToBeagleInfoLayer("__features.SKUsonPage",[sku]);case 31:_context5.next=40;break;case 33:if(!(currentPageType==="basket")){_context5.next=40;break;}_context5.next=36;return getFromBeagleInfoLayer("cart.skus");case 36:skuList=_context5.sent;if(!(skuList!==null&&Array.isArray(skuList)&&skuList.length)){_context5.next=40;break;}_context5.next=40;return addToBeagleInfoLayer("__features.SKUsonPage",skuList);case 40:case"end":return _context5.stop();}}},_callee5,null,[[3,21]]);}));return function customDataDerivations(){return _ref5.apply(this,arguments);};}();var parseSearchPaths=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee6(){var domStatus,wintop,dataLayer,windoc,sorgArrayInner,foundNames,prevFoundNames,notFoundNames,currentPageType,_iterator9,_step9,searchElement,_iterator10,_step10,_searchElement,_iterator11,_step11,dataLayerItem,_iterator12,_step12,sorgItem;return regenerator_default().wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:domStatus=document.readyState;// check if document and dom is loaded and ready for scrapping
BeagleInfoLayer_logger.log("parseSearchPaths initialized with dom status:  "+domStatus);wintop=window.top;dataLayer=wintop.dataLayer;windoc=wintop.document;foundNames=new Set();prevFoundNames=new Set();notFoundNames=new Set();// PageType can be inferred from URL, if found use it from there
_context6.next=10;return getFromBeagleInfoLayer("PageType");case 10:currentPageType=_context6.sent;if(currentPageType){prevFoundNames.add("PageType");}// Loop through search lists and mark found names
_iterator9=BeagleInfoLayer_createForOfIteratorHelper(searchPaths);try{for(_iterator9.s();!(_step9=_iterator9.n()).done;){searchElement=_step9.value;if(searchElement.isFound){prevFoundNames.add(searchElement.name);}}}catch(err){_iterator9.e(err);}finally{_iterator9.f();}_iterator10=BeagleInfoLayer_createForOfIteratorHelper(searchPaths);_context6.prev=15;_iterator10.s();case 17:if((_step10=_iterator10.n()).done){_context6.next=38;break;}_searchElement=_step10.value;if(!(_searchElement.isFound||_searchElement.isIgnore)){_context6.next=21;break;}return _context6.abrupt("continue",36);case 21:if(!(foundNames.has(_searchElement.name)||prevFoundNames.has(_searchElement.name))){_context6.next=24;break;}// had already found this element on another parse item
_searchElement.isFound=true;return _context6.abrupt("continue",36);case 24:if(!(_searchElement.PageTypeDepend!=="*")){_context6.next=35;break;}if(currentPageType){_context6.next=32;break;}_context6.next=28;return getFromBeagleInfoLayer("PageType");case 28:currentPageType=_context6.sent;if(currentPageType){_context6.next=32;break;}notFoundNames.add(_searchElement.name);return _context6.abrupt("continue",36);case 32:if(!(_searchElement.PageTypeDepend.indexOf(currentPageType)<0)){_context6.next=35;break;}// skip searchElement because of PageTypeDepend
_searchElement.isIgnore=true;return _context6.abrupt("continue",36);case 35:if(_searchElement.method==="SingleWT"){// SCAN Window for Single Elements
searchAndSet(wintop,_searchElement,foundNames,notFoundNames);}else if(_searchElement.method==="GADataLayer"){// SCAN GA DATA LAYER
_iterator11=BeagleInfoLayer_createForOfIteratorHelper(dataLayer);try{for(_iterator11.s();!(_step11=_iterator11.n()).done;){dataLayerItem=_step11.value;searchAndSet(dataLayerItem,_searchElement,foundNames,notFoundNames);}}catch(err){_iterator11.e(err);}finally{_iterator11.f();}}else if(_searchElement.method==="DocSorg"){// SCAN SORG ARRAY
if(!sorgArrayInner){sorgArrayInner=getSORGArray();}_iterator12=BeagleInfoLayer_createForOfIteratorHelper(sorgArrayInner);try{for(_iterator12.s();!(_step12=_iterator12.n()).done;){sorgItem=_step12.value;searchAndSet(sorgItem,_searchElement,foundNames,notFoundNames);}}catch(err){_iterator12.e(err);}finally{_iterator12.f();}}else if(_searchElement.method==="DocQuery"){// SCAN DOCUMENT
searchAndSet(windoc,_searchElement,foundNames,notFoundNames);}// DOCQUERY parse
case 36:_context6.next=17;break;case 38:_context6.next=43;break;case 40:_context6.prev=40;_context6.t0=_context6["catch"](15);_iterator10.e(_context6.t0);case 43:_context6.prev=43;_iterator10.f();return _context6.finish(43);case 46:if(notFoundNames.size===0){parseSearchPathsRetry=PARSESEARCHMAXRETRY;BeagleInfoLayer_logger.log("parseSearchPaths found all elements - setting retry to max");}else if(foundNames.size===0){// update retry counter and delay only if dom is active
if(domStatus==="complete"||domStatus==="interactive"){parseSearchPathsDelay*=2;parseSearchPathsRetry+=1;}BeagleInfoLayer_logger.log("parseSearchPaths processed but not found any, setting delay and retry to "+parseSearchPathsDelay+" and "+parseSearchPathsRetry+" for notfound: ["+Array.from(notFoundNames).join(" | ")+"]");}else{BeagleInfoLayer_logger.log("parseSearchPaths processed: notfound: ["+Array.from(notFoundNames).join(" | ")+"] and found "+foundNames.size);}case 47:case"end":return _context6.stop();}}},_callee6,null,[[15,40,43,46]]);}));return function parseSearchPaths(){return _ref6.apply(this,arguments);};}();var searchAndSet=function searchAndSet(obj,searchElement,foundNames,notFoundNames){if(searchObj(obj,searchElement)){foundNames.add(searchElement.name);}else{notFoundNames.add(searchElement.name);}};// parse source
var parserCaller=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee8(){return regenerator_default().wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.next=2;return parseSearchPaths();case 2:if(!(parseSearchPathsRetry<PARSESEARCHMAXRETRY)){_context8.next=7;break;}BeagleInfoLayer_logger.log("parseSearchPaths: scheduled to be recalled in "+parseSearchPathsDelay+"ms");setTimeout(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee7(){return regenerator_default().wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return parserCaller();case 2:case"end":return _context7.stop();}}},_callee7);})),parseSearchPathsDelay);_context8.next=13;break;case 7:BeagleInfoLayer_logger.log("parseSearchPaths: reached max retry, calling remainder historical data");_context8.next=10;return customDataDerivations();case 10:_context8.next=12;return collectDerivationsFromCollector();case 12:addToBeagleInfoLayer("__CompletedScraping",true);case 13:case"end":return _context8.stop();}}},_callee8);}));return function parserCaller(){return _ref7.apply(this,arguments);};}();// Extract value from json object using given path
// If an element is *, concatenate recursively all sub-path values as string
var jsonGet=function jsonGet(obj,path){if(!obj)return null;if(!path)return null;try{var pathArray=path.split(".");var current=obj;for(var i=0;i<pathArray.length;i++){if(current===null)return null;if(pathArray[i]==="*"){var subPath=pathArray.slice(i+1).join(".");var subArray=[];for(var subKey in current){if(current[subKey]!==undefined&&current[subKey]!==null){var subValue=jsonGet(current[subKey],subPath);if(subValue!==null&&subValue!==undefined){subArray.push(subValue);}}}return subArray;}current=current[pathArray[i]];}return current;}catch(e){return null;}};var prepareCoreData=/*#__PURE__*/function(){var _ref9=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee9(){var _windowPtr$navigator,_windowPtr$navigator$,_windowPtr$navigator2,_windowPtr$navigator3,_windowPtr$screen,_windowPtr$screen2,_windowPtr$screen3,_windowPtr$screen4,_windowPtr$visualView,_windowPtr$visualView2,_windowPtr$history,_windowPtr$navigator4,_windowPtr$navigator5;var windowPtr,navPtr,platform,availWindow,windowDepth,vportShape,width,height,iOS,_windowPtr$screen5,_windowPtr$screen5$or,orientationAngle,temp,_navPtr$userAgentData,_navPtr$userAgentData2,_navPtr$userAgentData3,navAgent,currentURL,firstSessionReferrer,pageType;return regenerator_default().wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:windowPtr=window.top;navPtr=windowPtr.navigator;platform=((_windowPtr$navigator=windowPtr.navigator)===null||_windowPtr$navigator===void 0?void 0:(_windowPtr$navigator$=_windowPtr$navigator.userAgentData)===null||_windowPtr$navigator$===void 0?void 0:_windowPtr$navigator$.platform)||((_windowPtr$navigator2=windowPtr.navigator)===null||_windowPtr$navigator2===void 0?void 0:_windowPtr$navigator2.platform)||((_windowPtr$navigator3=windowPtr.navigator)===null||_windowPtr$navigator3===void 0?void 0:_windowPtr$navigator3.userAgent);addToBeagleInfoLayer("device.navPlatform",platform);/* window view area */addToBeagleInfoLayer("device.windowPRatio",windowPtr.devicePixelRatio);availWindow=((_windowPtr$screen=windowPtr.screen)===null||_windowPtr$screen===void 0?void 0:_windowPtr$screen.availWidth)+"x"+((_windowPtr$screen2=windowPtr.screen)===null||_windowPtr$screen2===void 0?void 0:_windowPtr$screen2.availHeight);addToBeagleInfoLayer("device.windowAvail",availWindow);windowDepth=((_windowPtr$screen3=windowPtr.screen)===null||_windowPtr$screen3===void 0?void 0:_windowPtr$screen3.colorDepth)+"-"+((_windowPtr$screen4=windowPtr.screen)===null||_windowPtr$screen4===void 0?void 0:_windowPtr$screen4.pixelDepth);addToBeagleInfoLayer("device.windowDepth",windowDepth);vportShape=((_windowPtr$visualView=windowPtr.visualViewport)===null||_windowPtr$visualView===void 0?void 0:_windowPtr$visualView.width)+"x"+((_windowPtr$visualView2=windowPtr.visualViewport)===null||_windowPtr$visualView2===void 0?void 0:_windowPtr$visualView2.height);addToBeagleInfoLayer("device.windowVport",vportShape);if(screen.width){width=parseInt(screen.width);height=screen.height?parseInt(screen.height):0;if(width!==0&&height!==0){iOS=/iPad|iPhone|iPod/.test(platform);if(iOS&&windowPtr.devicePixelRatio){// ios provides DPIs, need to multiply
width=Math.round(width*windowPtr.devicePixelRatio);height=Math.round(height*windowPtr.devicePixelRatio);}else{orientationAngle=(_windowPtr$screen5=windowPtr.screen)===null||_windowPtr$screen5===void 0?void 0:(_windowPtr$screen5$or=_windowPtr$screen5.orientation)===null||_windowPtr$screen5$or===void 0?void 0:_windowPtr$screen5$or.angle;if(Math.abs(orientationAngle)===90||Math.abs(orientationAngle)===270){// we have landscape orientation switch values for all except ios
temp=width;width=height;height=temp;}}addToBeagleInfoLayer("device.window",width+"x"+height);}}/* navigator */addToBeagleInfoLayer("device.navHistSize",(_windowPtr$history=windowPtr.history)===null||_windowPtr$history===void 0?void 0:_windowPtr$history.length);// check if userAgentData is supported and userAgent is not available, use it
if(!navPtr.userAgent){if(navPtr.userAgentData){// turn brands array into string
navAgent=navPtr===null||navPtr===void 0?void 0:(_navPtr$userAgentData=navPtr.userAgentData)===null||_navPtr$userAgentData===void 0?void 0:(_navPtr$userAgentData2=_navPtr$userAgentData.brands)===null||_navPtr$userAgentData2===void 0?void 0:_navPtr$userAgentData2.map(function(e){return e.brand+":"+e.version;}).join();// add mobile info
navAgent+=navPtr!==null&&navPtr!==void 0&&(_navPtr$userAgentData3=navPtr.userAgentData)!==null&&_navPtr$userAgentData3!==void 0&&_navPtr$userAgentData3.mobile?"mobi":" ";// add platform info
navAgent+=platform;addToBeagleInfoLayer("device.navAgent",navAgent);}}else{addToBeagleInfoLayer("device.navAgent",navPtr.userAgent);}addToBeagleInfoLayer("device.navHWCores",navPtr.hardwareConcurrency);addToBeagleInfoLayer("device.navLanguage",navPtr.language||navPtr.browserLanguage||navPtr.systemLanguage||navPtr.userLanguage);addToBeagleInfoLayer("device.navTouch",navPtr.maxTouchPoints);addToBeagleInfoLayer("device.navVendor",navPtr.vendor);addToBeagleInfoLayer("device.internetSpeed",(_windowPtr$navigator4=windowPtr.navigator)===null||_windowPtr$navigator4===void 0?void 0:(_windowPtr$navigator5=_windowPtr$navigator4.connection)===null||_windowPtr$navigator5===void 0?void 0:_windowPtr$navigator5.downlink);/* miscellaneous */currentURL=new URL(window.top.location.href);addToBeagleInfoLayer("u",currentURL.href);addToBeagleInfoLayer("d",currentURL.hostname);addToBeagleInfoLayer("donttrack",navPtr.doNotTrack||windowPtr.doNotTrack||navPtr.msDoNotTrack);addToBeagleInfoLayer("r",windowPtr.document.referrer);firstSessionReferrer=sessionStorage.getItem(SESSION_STORAGE_KEYS.SESSION_REFERRER);if(!firstSessionReferrer){sessionStorage.setItem(SESSION_STORAGE_KEYS.SESSION_REFERRER,windowPtr.document.referrer);addToBeagleInfoLayer("fr",windowPtr.document.referrer);}else{addToBeagleInfoLayer("fr",firstSessionReferrer);}/* Vivense specific */ // if url like x then set PageType = y
if(currentURL.pathname.indexOf("favorilerim.html")>-1){pageType="favorites";}else if(currentURL.pathname.indexOf("siparis-listesi.html")>-1){pageType="basket";}else if(currentURL.pathname.indexOf("siparis-ozeti.html")>-1){pageType="purchase";}else if(currentURL.pathname.indexOf("odeme.html")>-1){pageType="payment";}else if(currentURL.pathname.indexOf("adres-listesi.html")>-1){pageType="address";}else if(currentURL.pathname.indexOf("siparislerim.html")>-1){pageType="pastorders";}else if(currentURL.pathname.indexOf("uye-kayit.html")>-1){pageType="register";}else if(currentURL.pathname.indexOf("uye-girisi.html")>-1){pageType="signin";}else if(currentURL.pathname.indexOf("kuponlarim.html")>-1){pageType="profile_coupons";}else if(currentURL.pathname.indexOf("profil-guncelle.html")>-1){pageType="profile_info";}else if(currentURL.pathname.indexOf("adreslerim.html")>-1){pageType="profile_addresses";}else if(currentURL.pathname.indexOf("duyuru-tercihleri.html")>-1){pageType="profile_notifications";}else if(currentURL.pathname.indexOf("indirimli-mobilya-kampanyalari.html")>-1){pageType="special_campaigns";}if(pageType){addToBeagleInfoLayer("PageType",pageType);}case 28:case"end":return _context9.stop();}}},_callee9);}));return function prepareCoreData(){return _ref9.apply(this,arguments);};}();var addMetrics=function addMetrics(){var windowPtr=window.top;var perfMetrics={};var perfNavigationMetrics=windowPtr.performance.getEntriesByType("navigation")[0];if(windowPtr.performance&&perfNavigationMetrics){perfMetrics.connect=Math.round(perfNavigationMetrics.connectEnd-perfNavigationMetrics.connectStart);perfMetrics.request=Math.round(perfNavigationMetrics.responseEnd-perfNavigationMetrics.requestStart);perfMetrics.dom=Math.round(perfNavigationMetrics.domInteractive-perfNavigationMetrics.domComplete);perfMetrics.load=Math.round(perfNavigationMetrics.loadEventEnd-perfNavigationMetrics.loadEventStart);perfMetrics.duration=Math.round(perfNavigationMetrics.duration);}addToBeagleInfoLayer("metrics",perfMetrics);};// TODO: move this to an "element collector" module, then data is extracted from pre-collected elements
var getSORGArray=function getSORGArray(){var schemaOrgElts=window.top.document.querySelectorAll("[type=\"application/ld+json\"]");var sorgArray=[];var _iterator13=BeagleInfoLayer_createForOfIteratorHelper(schemaOrgElts),_step13;try{for(_iterator13.s();!(_step13=_iterator13.n()).done;){var sTag=_step13.value;try{var cntnt=sTag.textContent;var jsoncontent=JSON.parse(cntnt);sorgArray.push(jsoncontent);}catch(err){// do nothing
}}}catch(err){_iterator13.e(err);}finally{_iterator13.f();}return sorgArray;};;// CONCATENATED MODULE: ./src/BeagleMonitor/index.js
var BeagleMonitor_logger=new src_logger("BeagleMonitor");var HEADERS={type:"text/plain"};var Monitor=/*#__PURE__*/function(){function Monitor(){_classCallCheck(this,Monitor);BeagleMonitor_logger.log("Initializing monitor");this.hasArrivalLogSent=false;this.hasMainLogSent=false;this.hasUpdatesSent=false;this.highWaterMark=null;this.initializeExitEventListeners();}// Attempts to send the initial log body (beagleInfoLayer's initial population) immediately
_createClass(Monitor,[{key:"sendLogs",value:function(){var _sendLogs=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(immediate){return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!immediate){_context.next=6;break;}BeagleMonitor_logger.log("In immediate sending block");_context.next=4;return this.packAndQueueMainLog();case 4:_context.next=12;break;case 6:BeagleMonitor_logger.log("In non-critical send path - awaiting scraping");_context.next=9;return getFromBeagleInfoLayer("__CompletedScraping",true,50,1000);case 9:BeagleMonitor_logger.log("In non-critical send path - sending logs");_context.next=12;return this.packAndQueueMainLog();case 12:case"end":return _context.stop();}}},_callee,this);}));function sendLogs(_x){return _sendLogs.apply(this,arguments);}return sendLogs;}()// Send initial log body and incremental update logs on close
},{key:"handleCloseEvent",value:function(){var _handleCloseEvent=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(){return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return this.packAndQueueMainLog();case 2:_context2.next=4;return this.packAndQueueIncrementalLog();case 4:case"end":return _context2.stop();}}},_callee2,this);}));function handleCloseEvent(){return _handleCloseEvent.apply(this,arguments);}return handleCloseEvent;}()},{key:"packAndQueueMainLog",value:function(){var _packAndQueueMainLog=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(){var requestBlob;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!this.hasMainLogSent){_context3.next=2;break;}return _context3.abrupt("return");case 2:_context3.next=4;return this.packageMainLogData();case 4:requestBlob=_context3.sent;if(!requestBlob){_context3.next=11;break;}_context3.next=8;return this.checkForLatestChanges();case 8:BeagleMonitor_logger.log("Request blob to send: ",requestBlob);this.hasMainLogSent=true;this.queueLogs(requestBlob);case 11:case"end":return _context3.stop();}}},_callee3,this);}));function packAndQueueMainLog(){return _packAndQueueMainLog.apply(this,arguments);}return packAndQueueMainLog;}()},{key:"packAndQueueIncrementalLog",value:function(){var _packAndQueueIncrementalLog=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee4(){var hasChanged,logData;return regenerator_default().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!(!this.hasMainLogSent||this.hasUpdatesSent)){_context4.next=2;break;}return _context4.abrupt("return");case 2:_context4.next=4;return this.checkForLatestChanges();case 4:hasChanged=_context4.sent;BeagleMonitor_logger.log("Update logs change status: ",hasChanged);if(hasChanged){_context4.next=8;break;}return _context4.abrupt("return");case 8:_context4.next=10;return this.packageIncrementalLogData();case 10:logData=_context4.sent;if(logData){BeagleMonitor_logger.log("Sending incremental logs",logData);this.hasUpdatesSent=true;this.queueLogs(logData);}case 12:case"end":return _context4.stop();}}},_callee4,this);}));function packAndQueueIncrementalLog(){return _packAndQueueIncrementalLog.apply(this,arguments);}return packAndQueueIncrementalLog;}()},{key:"packAndQueueArrivalLog",value:function(){var _packAndQueueArrivalLog=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee5(){var requestBlob;return regenerator_default().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(!(this.hasMainLogSent||this.hasArrivalLogSent)){_context5.next=2;break;}return _context5.abrupt("return");case 2:_context5.next=4;return this.packageArrivalLogData();case 4:requestBlob=_context5.sent;if(requestBlob){// prepare change detection hashes at the time of main log preparation
BeagleMonitor_logger.log("Arrival blob to send: ",requestBlob);this.hasArrivalLogSent=true;this.queueLogs(requestBlob);}case 6:case"end":return _context5.stop();}}},_callee5,this);}));function packAndQueueArrivalLog(){return _packAndQueueArrivalLog.apply(this,arguments);}return packAndQueueArrivalLog;}()},{key:"checkForLatestChanges",value:function(){var _checkForLatestChanges=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee6(){var hwm;return regenerator_default().wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return getFromBeagleInfoLayer("__hwm");case 2:hwm=_context6.sent;if(!(this.highWaterMark!==hwm)){_context6.next=6;break;}this.highWaterMark=hwm;return _context6.abrupt("return",true);case 6:return _context6.abrupt("return",false);case 7:case"end":return _context6.stop();}}},_callee6,this);}));function checkForLatestChanges(){return _checkForLatestChanges.apply(this,arguments);}return checkForLatestChanges;}()},{key:"packageArrivalLogData",value:function(){var _packageArrivalLogData=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee7(){var _yield$Promise$all,_yield$Promise$all2,url,hash,cookieGaId,view_epoch,body;return regenerator_default().wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return Promise.all([getFromBeagleInfoLayer("u"),getFromBeagleInfoLayer("onHashPct"),getFromBeagleInfoLayer("cookieGaId"),getFromBeagleInfoLayer("view_epoch")]);case 2:_yield$Promise$all=_context7.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,4);url=_yield$Promise$all2[0];hash=_yield$Promise$all2[1];cookieGaId=_yield$Promise$all2[2];view_epoch=_yield$Promise$all2[3];body={cookieGaId:cookieGaId,lc:0,view_epoch:view_epoch,u:url,onHashPct:hash};BeagleMonitor_logger.log("Arrival log data: ",body);return _context7.abrupt("return",new Blob([JSON.stringify(body)],HEADERS));case 11:case"end":return _context7.stop();}}},_callee7);}));function packageArrivalLogData(){return _packageArrivalLogData.apply(this,arguments);}return packageArrivalLogData;}()},{key:"packageMainLogData",value:function(){var _packageMainLogData=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee8(){var body,_i,_Object$entries,_Object$entries$_i,key,value;return regenerator_default().wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:body={};if(window.beagleInfoLayer){_context8.next=3;break;}return _context8.abrupt("return",null);case 3:for(_i=0,_Object$entries=Object.entries(window.beagleInfoLayer);_i<_Object$entries.length;_i++){_Object$entries$_i=_slicedToArray(_Object$entries[_i],2),key=_Object$entries$_i[0],value=_Object$entries$_i[1];if(!key.startsWith("_")&&value!==null)body[key]=value;}body.lc=1;return _context8.abrupt("return",new Blob([JSON.stringify(body)],HEADERS));case 6:case"end":return _context8.stop();}}},_callee8);}));function packageMainLogData(){return _packageMainLogData.apply(this,arguments);}return packageMainLogData;}()},{key:"packageIncrementalLogData",value:function(){var _packageIncrementalLogData=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee9(){var _yield$Promise$all3,_yield$Promise$all4,a,e,f,s,m,cookieGaId,view_epoch,body;return regenerator_default().wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:_context9.next=2;return Promise.all([getFromBeagleInfoLayer("a"),getFromBeagleInfoLayer("e"),getFromBeagleInfoLayer("f"),getFromBeagleInfoLayer("s"),getFromBeagleInfoLayer("m"),getFromBeagleInfoLayer("cookieGaId"),getFromBeagleInfoLayer("view_epoch")]);case 2:_yield$Promise$all3=_context9.sent;_yield$Promise$all4=_slicedToArray(_yield$Promise$all3,7);a=_yield$Promise$all4[0];e=_yield$Promise$all4[1];f=_yield$Promise$all4[2];s=_yield$Promise$all4[3];m=_yield$Promise$all4[4];cookieGaId=_yield$Promise$all4[5];view_epoch=_yield$Promise$all4[6];body={cookieGaId:cookieGaId,lc:2,view_epoch:view_epoch,a:a,e:e,f:f,s:s,m:m};BeagleMonitor_logger.log("Update log data: ",body);return _context9.abrupt("return",new Blob([JSON.stringify(body)],HEADERS));case 14:case"end":return _context9.stop();}}},_callee9);}));function packageIncrementalLogData(){return _packageIncrementalLogData.apply(this,arguments);}return packageIncrementalLogData;}()},{key:"initializeExitEventListeners",value:function initializeExitEventListeners(){var _this=this;var visibilityChangeTimeout=null;BeagleMonitor_logger.log("Initializing exit event listener");window.addEventListener("beforeunload",/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee10(){return regenerator_default().wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:BeagleMonitor_logger.log("In beforeunload event");clearTimeout(visibilityChangeTimeout);_context10.next=4;return _this.handleCloseEvent();case 4:case"end":return _context10.stop();}}},_callee10);})),{capture:true});window.addEventListener("pagehide",/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee11(){return regenerator_default().wrap(function _callee11$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:BeagleMonitor_logger.log("In pagehide event");clearTimeout(visibilityChangeTimeout);_context11.next=4;return _this.handleCloseEvent();case 4:case"end":return _context11.stop();}}},_callee11);})),{capture:true});window.addEventListener("visibilitychange",function(){if(window.top.document.visibilityState==="hidden"){// If page is not visible and doesn't become visible within 30 seconds, send logs
visibilityChangeTimeout=setTimeout(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee12(){return regenerator_default().wrap(function _callee12$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:BeagleMonitor_logger.log("In timeout");_context12.next=3;return _this.handleCloseEvent();case 3:case"end":return _context12.stop();}}},_callee12);})),30000);return;}// Clear timeout when page is visible to make sure we send the latest logs possible
clearTimeout(visibilityChangeTimeout);visibilityChangeTimeout=null;},{capture:true});}},{key:"queueLogs",value:function queueLogs(logData){if(!navigator.sendBeacon||typeof navigator.sendBeacon!=="function"){fetch(LOG_API_URL,logData);return;}var queued=navigator.sendBeacon(LOG_API_URL,logData);var queueInterval=setInterval(function(){if(!queued)queued=navigator.sendBeacon(LOG_API_URL,logData);else{clearInterval(queueInterval);BeagleMonitor_logger.log("Logs queued successfully");}},10);if(queued)return;setTimeout(function(){clearInterval(queueInterval);if(!queued){BeagleMonitor_logger.log("Logs not queued");}},1000);}}]);return Monitor;}();/* harmony default export */var BeagleMonitor=Monitor;;// CONCATENATED MODULE: ./src/BeagleTreatmentRepository/index.js
function BeagleTreatmentRepository_createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=BeagleTreatmentRepository_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function BeagleTreatmentRepository_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return BeagleTreatmentRepository_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return BeagleTreatmentRepository_arrayLikeToArray(o,minLen);}function BeagleTreatmentRepository_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}var BeagleTreatmentRepository_logger=new src_logger("BeagleTreatmentRepository");var TreatmentRepository=/*#__PURE__*/function(){function TreatmentRepository(body){_classCallCheck(this,TreatmentRepository);var treatments=body.treatments,treatmentWeights=body.treatmentWeights;this.treatments=treatments;this.treatmentWeights=treatmentWeights;this.currentPageType=null;}_createClass(TreatmentRepository,[{key:"getMatchedTreatments",value:function(){var _getMatchedTreatments=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(debugMode){var _CPT,_this=this;var CPT,matchedTreatments,treatments,treatmentWeights,userSegment,userSegmentWeights,_iterator,_step,_userSegmentWeights$t,treatment,segmentedWeight,_userSegmentWeights$t2,_iterator2,_step2,action,_i,_Object$keys,_userSegmentWeights$t3,_userSegmentWeights$t4,variantKey;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getFromBeagleInfoLayer("__eRules.PageType",true);case 2:CPT=_context.sent;CPT=((_CPT=CPT)===null||_CPT===void 0?void 0:_CPT[0])||null;if(CPT){_context.next=6;break;}return _context.abrupt("return",[]);case 6:this.currentPageType=CPT;matchedTreatments=window.sessionStorage.getItem(SESSION_STORAGE_KEYS.MATCHED_TREATMENTS);if(!matchedTreatments){_context.next=22;break;}_context.prev=9;_context.next=12;return JSON.parse(matchedTreatments);case 12:matchedTreatments=_context.sent;matchedTreatments=matchedTreatments.filter(function(mt){return _this.checkPageType(mt.pageTypes);});BeagleTreatmentRepository_logger.log("".concat(matchedTreatments.length," treatments user segment matched"));return _context.abrupt("return",matchedTreatments);case 18:_context.prev=18;_context.t0=_context["catch"](9);BeagleTreatmentRepository_logger.failed("Error getting matched robots:",_context.t0.message);return _context.abrupt("return",[]);case 22:matchedTreatments=[];treatments=this.treatments,treatmentWeights=this.treatmentWeights;_context.next=26;return getFromBeagleInfoLayer("s");case 26:userSegment=_context.sent;if(userSegment){_context.next=29;break;}return _context.abrupt("return",null);case 29:if(!treatmentWeights){_context.next=76;break;}userSegmentWeights=treatmentWeights[userSegment];if(userSegmentWeights){_context.next=33;break;}return _context.abrupt("return",[]);case 33:_iterator=BeagleTreatmentRepository_createForOfIteratorHelper(treatments);_context.prev=34;_iterator.s();case 36:if((_step=_iterator.n()).done){_context.next=68;break;}treatment=_step.value;segmentedWeight=(_userSegmentWeights$t=userSegmentWeights[treatment.id])===null||_userSegmentWeights$t===void 0?void 0:_userSegmentWeights$t.weight;if(segmentedWeight){_context.next=43;break;}if(treatment.dependant_on_treatment){segmentedWeight=(_userSegmentWeights$t2=userSegmentWeights[treatment.dependant_on_treatment])===null||_userSegmentWeights$t2===void 0?void 0:_userSegmentWeights$t2.weight;}else if(debugMode&&debugMode===1)segmentedWeight=100;if(segmentedWeight){_context.next=43;break;}return _context.abrupt("continue",66);case 43:treatment.weight=segmentedWeight;if(treatment.actions.some(function(a){return a.variants;})){_context.next=47;break;}matchedTreatments.push(treatment);return _context.abrupt("continue",66);case 47:_iterator2=BeagleTreatmentRepository_createForOfIteratorHelper(treatment.actions);_context.prev=48;_iterator2.s();case 50:if((_step2=_iterator2.n()).done){_context.next=57;break;}action=_step2.value;if(action.variants){_context.next=54;break;}return _context.abrupt("continue",55);case 54:for(_i=0,_Object$keys=Object.keys(action.variants);_i<_Object$keys.length;_i++){variantKey=_Object$keys[_i];if((_userSegmentWeights$t3=userSegmentWeights[treatment.id])!==null&&_userSegmentWeights$t3!==void 0&&_userSegmentWeights$t3.variants&&(_userSegmentWeights$t4=userSegmentWeights[treatment.id])!==null&&_userSegmentWeights$t4!==void 0&&_userSegmentWeights$t4.variants[variantKey]){action.variants[variantKey].weight=userSegmentWeights[treatment.id].variants[variantKey];}}case 55:_context.next=50;break;case 57:_context.next=62;break;case 59:_context.prev=59;_context.t1=_context["catch"](48);_iterator2.e(_context.t1);case 62:_context.prev=62;_iterator2.f();return _context.finish(62);case 65:matchedTreatments.push(treatment);case 66:_context.next=36;break;case 68:_context.next=73;break;case 70:_context.prev=70;_context.t2=_context["catch"](34);_iterator.e(_context.t2);case 73:_context.prev=73;_iterator.f();return _context.finish(73);case 76:window.sessionStorage.setItem(SESSION_STORAGE_KEYS.MATCHED_TREATMENTS,JSON.stringify(matchedTreatments));_context.next=79;return this.getMatchedTreatments(debugMode);case 79:return _context.abrupt("return",_context.sent);case 80:case"end":return _context.stop();}}},_callee,this,[[9,18],[34,70,73,76],[48,59,62,65]]);}));function getMatchedTreatments(_x){return _getMatchedTreatments.apply(this,arguments);}return getMatchedTreatments;}()},{key:"checkPageType",value:function checkPageType(pageTypes){var currentPageType=this.currentPageType;if(pageTypes===null||pageTypes===undefined)return true;if(!Array.isArray(pageTypes)){BeagleTreatmentRepository_logger.failed("Page Types should be an array");return false;}if(pageTypes[0].startsWith("!")){pageTypes=pageTypes.map(function(pt){return pt.substr(1);});return!pageTypes.includes(currentPageType);}return pageTypes.includes(currentPageType);}}],[{key:"getTreatments",value:function(){var _getTreatments=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(){var TREATMENTS,treatmentsObj,treatments,timestamp,treatmentWithTimestamp,elapsedHours,_treatmentWithTimestamp;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:BeagleTreatmentRepository_logger.log("Loading treatments");TREATMENTS=LOCAL_STORAGE_KEYS.TREATMENTS;treatmentsObj=JSON.parse(window.localStorage.getItem(TREATMENTS));treatments=treatmentsObj===null||treatmentsObj===void 0?void 0:treatmentsObj.treatments;timestamp=treatmentsObj===null||treatmentsObj===void 0?void 0:treatmentsObj.timestamp;if(!(!treatments||!timestamp)){_context2.next=17;break;}BeagleTreatmentRepository_logger.failed("Treatments not found in local storage");_context2.next=9;return fetchTreatments();case 9:treatments=_context2.sent;if(treatments){_context2.next=13;break;}BeagleTreatmentRepository_logger.failed("Failed to fetch treatments");return _context2.abrupt("return",null);case 13:treatmentWithTimestamp={timestamp:Date.now(),treatments:treatments};window.localStorage.setItem(TREATMENTS,JSON.stringify(treatmentWithTimestamp));window.sessionStorage.removeItem(SESSION_STORAGE_KEYS.MATCHED_TREATMENTS);return _context2.abrupt("return",treatments);case 17:if(!timestamp){_context2.next=31;break;}elapsedHours=(Date.now()-timestamp)/(1000*3600);if(!(elapsedHours>LOCAL_STORAGE_TTL_HOURS)){_context2.next=31;break;}BeagleTreatmentRepository_logger.failed("Treatments are expired");_context2.next=23;return fetchTreatments();case 23:treatments=_context2.sent;if(treatments){_context2.next=27;break;}BeagleTreatmentRepository_logger.failed("Failed to fetch treatments");return _context2.abrupt("return",null);case 27:_treatmentWithTimestamp={timestamp:Date.now(),treatments:treatments};window.localStorage.setItem(TREATMENTS,JSON.stringify(_treatmentWithTimestamp));window.sessionStorage.removeItem(SESSION_STORAGE_KEYS.MATCHED_TREATMENTS);return _context2.abrupt("return",treatments);case 31:BeagleTreatmentRepository_logger.success("Treatments are loaded from local storage");return _context2.abrupt("return",treatments);case 33:case"end":return _context2.stop();}}},_callee2);}));function getTreatments(){return _getTreatments.apply(this,arguments);}return getTreatments;}()},{key:"getTreatmentWeights",value:function(){var _getTreatmentWeights=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(){var weightsObj,elapsedHours;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;weightsObj=window.localStorage.getItem(LOCAL_STORAGE_KEYS.WEIGHTS);if(!weightsObj){_context3.next=8;break;}weightsObj=JSON.parse(weightsObj);if(!weightsObj.timestamp){_context3.next=8;break;}elapsedHours=(Date.now()-weightsObj.timestamp)/(1000*3600);if(!(elapsedHours<LOCAL_STORAGE_TTL_HOURS)){_context3.next=8;break;}return _context3.abrupt("return",weightsObj.weights);case 8:_context3.next=10;return fetchTreatmentWeights();case 10:weightsObj=_context3.sent;if(weightsObj){_context3.next=14;break;}BeagleTreatmentRepository_logger.failed("Failed to fetch weights");return _context3.abrupt("return",null);case 14:weightsObj={weights:weightsObj,timestamp:Date.now()};window.localStorage.setItem(LOCAL_STORAGE_KEYS.WEIGHTS,JSON.stringify(weightsObj));return _context3.abrupt("return",weightsObj.weights);case 19:_context3.prev=19;_context3.t0=_context3["catch"](0);BeagleTreatmentRepository_logger.warn(_context3.t0.message);return _context3.abrupt("return",null);case 23:case"end":return _context3.stop();}}},_callee3,null,[[0,19]]);}));function getTreatmentWeights(){return _getTreatmentWeights.apply(this,arguments);}return getTreatmentWeights;}()}]);return TreatmentRepository;}();/* harmony default export */var BeagleTreatmentRepository=TreatmentRepository;;// CONCATENATED MODULE: ./src/BeagleApplyActions/replace-utils.js
function replace_utils_createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=replace_utils_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function replace_utils_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return replace_utils_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return replace_utils_arrayLikeToArray(o,minLen);}function replace_utils_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}var replace_utils_logger=new src_logger("ReplaceUtils");var replacer=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(value,replaceFn){var _iterator,_step,_step$value,i,val,currentReplaceFn,replaceVal,_iterator2,_step2,rFn,_replaceVal,_replaceVal2;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!Array.isArray(value)){_context.next=27;break;}_iterator=replace_utils_createForOfIteratorHelper(value.entries());_context.prev=2;_iterator.s();case 4:if((_step=_iterator.n()).done){_context.next=17;break;}_step$value=_slicedToArray(_step.value,2),i=_step$value[0],val=_step$value[1];currentReplaceFn=Array.isArray(replaceFn)?replaceFn[i]:replaceFn||"";if(!(_typeof(currentReplaceFn)==="object")){_context.next=14;break;}_context.next=10;return replaceObjectExtractor(currentReplaceFn);case 10:replaceVal=_context.sent;value[i]=replaceAll(val,"{{REPLACE}}",replaceVal);_context.next=15;break;case 14:value[i]=replaceFnExecutor(currentReplaceFn,val);case 15:_context.next=4;break;case 17:_context.next=22;break;case 19:_context.prev=19;_context.t0=_context["catch"](2);_iterator.e(_context.t0);case 22:_context.prev=22;_iterator.f();return _context.finish(22);case 25:_context.next=61;break;case 27:if(!Array.isArray(replaceFn)){_context.next=53;break;}_iterator2=replace_utils_createForOfIteratorHelper(replaceFn);_context.prev=29;_iterator2.s();case 31:if((_step2=_iterator2.n()).done){_context.next=43;break;}rFn=_step2.value;if(!(_typeof(rFn)==="object")){_context.next=40;break;}_context.next=36;return replaceObjectExtractor(rFn);case 36:_replaceVal=_context.sent;value=value.replace("{{REPLACE}}",_replaceVal);_context.next=41;break;case 40:value=replaceFnExecutor(rFn,value,true);case 41:_context.next=31;break;case 43:_context.next=48;break;case 45:_context.prev=45;_context.t1=_context["catch"](29);_iterator2.e(_context.t1);case 48:_context.prev=48;_iterator2.f();return _context.finish(48);case 51:_context.next=61;break;case 53:if(!(_typeof(replaceFn)==="object")){_context.next=60;break;}_context.next=56;return replaceObjectExtractor(replaceFn);case 56:_replaceVal2=_context.sent;value=replaceAll(value,"{{REPLACE}}",_replaceVal2);_context.next=61;break;case 60:value=replaceFnExecutor(replaceFn,value);case 61:return _context.abrupt("return",value);case 62:case"end":return _context.stop();}}},_callee,null,[[2,19,22,25],[29,45,48,51]]);}));return function replacer(_x,_x2){return _ref.apply(this,arguments);};}();function replaceFnExecutor(replaceFn,value){var single=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(replaceFn&&value.includes("{{REPLACE}}")){replace_utils_logger.log("Executing replace function: ",replaceFn);var replaceFunction=Function(replaceFn);if(single)return value.replace("{{REPLACE}}",replaceFunction());return replaceAll(value,"{{REPLACE}}",replaceFunction());}return value;}function replaceObjectExtractor(_x3){return _replaceObjectExtractor.apply(this,arguments);}function _replaceObjectExtractor(){_replaceObjectExtractor=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(replaceFn){var storage,key,keyFallback,type,replaceVal,_replaceVal3;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:storage=replaceFn.storage,key=replaceFn.key,keyFallback=replaceFn.keyFallback,type=replaceFn.type;_context2.t0=storage;_context2.next=_context2.t0==="session"?4:_context2.t0==="info-layer"?18:26;break;case 4:replaceVal=null;replaceVal=window.sessionStorage.getItem(key);if(!replaceVal)replaceVal=window.sessionStorage.getItem(keyFallback);if(!type){_context2.next=17;break;}_context2.prev=8;replaceVal=JSON.parse(replaceVal);replaceVal=replaceVal[replaceVal.length-1][type];_context2.next=17;break;case 13:_context2.prev=13;_context2.t1=_context2["catch"](8);replace_utils_logger.failed("Could not parse ".concat(replaceVal));return _context2.abrupt("return",null);case 17:return _context2.abrupt("return",replaceVal);case 18:_context2.next=20;return getFromBeagleInfoLayer(key);case 20:_replaceVal3=_context2.sent;if(_replaceVal3){_context2.next=25;break;}_context2.next=24;return getFromBeagleInfoLayer(keyFallback);case 24:_replaceVal3=_context2.sent;case 25:return _context2.abrupt("return",_replaceVal3);case 26:case"end":return _context2.stop();}}},_callee2,null,[[8,13]]);}));return _replaceObjectExtractor.apply(this,arguments);}/* harmony default export */var replace_utils=replacer;;// CONCATENATED MODULE: ./src/GlovProductInfoRepository/store.config.js
var store_config_config={dbName:"beagle_cache",version:1,store:{name:"infoCache",indexes:[{name:"ix_sku",fields:"sku"}],options:{keyPath:"sku"}}};/* harmony default export */var GlovProductInfoRepository_store_config=store_config_config;;// CONCATENATED MODULE: ./src/GlovProductInfoRepository/index.js
function GlovProductInfoRepository_createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=GlovProductInfoRepository_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function GlovProductInfoRepository_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return GlovProductInfoRepository_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return GlovProductInfoRepository_arrayLikeToArray(o,minLen);}function GlovProductInfoRepository_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}var GlovProductInfoRepository_logger=new src_logger("GlovProductInfoRepository");var GlovProductInfoRepository=/*#__PURE__*/function(){function GlovProductInfoRepository(){_classCallCheck(this,GlovProductInfoRepository);this.indexedDB=null;this.init();}_createClass(GlovProductInfoRepository,[{key:"init",value:function init(){var _window$top$indexedDB,_this=this;GlovProductInfoRepository_logger.log("Initializing indexedDB");var openRequest=(_window$top$indexedDB=window.top.indexedDB)===null||_window$top$indexedDB===void 0?void 0:_window$top$indexedDB.open(GlovProductInfoRepository_store_config.dbName,GlovProductInfoRepository_store_config.version);if(!openRequest){throw new Error("indexeddb is not supported");}openRequest.onupgradeneeded=function(event){switch(event.oldVersion){case 0:break;default:// TODO upgrade existing db instead of delete and create from scratch
try{openRequest.result.deleteObjectStore(GlovProductInfoRepository_store_config.store.name);}catch(err){GlovProductInfoRepository_logger.failed("Could not delete outdated database",err.message);}break;}try{var _config$store$indexes;var store=openRequest.result.createObjectStore(GlovProductInfoRepository_store_config.store.name,GlovProductInfoRepository_store_config.store.options);if(((_config$store$indexes=GlovProductInfoRepository_store_config.store.indexes)===null||_config$store$indexes===void 0?void 0:_config$store$indexes.length)>0){var _iterator=GlovProductInfoRepository_createForOfIteratorHelper(GlovProductInfoRepository_store_config.store.indexes),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var idx=_step.value;store.createIndex(idx.name,idx.fields);}}catch(err){_iterator.e(err);}finally{_iterator.f();}}}catch(err){GlovProductInfoRepository_logger.failed("Could not create object store on database",err.message);}};openRequest.onerror=function(){throw new Error("Error initializing beagle_cache indexed DB",openRequest.error);};openRequest.onsuccess=function(){_this.indexedDB=openRequest.result;};}},{key:"getConnection",value:function getConnection(){var _this2=this;return new Promise(function(resolve,reject){var interval=setInterval(function(){if(_this2.indexedDB){clearInterval(interval);resolve();}},25);setTimeout(function(){if(!_this2.indexedDB){clearInterval(interval);reject(new Error("IndexedDB not initialized within the allotted time"));}},1000);});}},{key:"initTransaction",value:function(){var _initTransaction=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(){var readwrite,tx,_args=arguments;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:readwrite=_args.length>0&&_args[0]!==undefined?_args[0]:false;_context.next=3;return this.getConnection();case 3:tx=this.indexedDB.transaction(GlovProductInfoRepository_store_config.store.name,readwrite?"readwrite":"readonly");return _context.abrupt("return",tx.objectStore(GlovProductInfoRepository_store_config.store.name));case 5:case"end":return _context.stop();}}},_callee,this);}));function initTransaction(){return _initTransaction.apply(this,arguments);}return initTransaction;}()},{key:"save",value:function(){var _save=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(payload){var store,timestamp,_iterator2,_step2,load;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return this.initTransaction(true);case 2:store=_context2.sent;timestamp=Math.round(Date.now()/1000);if(Array.isArray(payload)){_iterator2=GlovProductInfoRepository_createForOfIteratorHelper(payload);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){load=_step2.value;load.timestamp=timestamp;store.put(load);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}else{payload.timestamp=timestamp;store.put(payload);}case 5:case"end":return _context2.stop();}}},_callee2,this);}));function save(_x){return _save.apply(this,arguments);}return save;}()},{key:"clear",value:function(){var _clear=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(){var _this3=this;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:return _context3.abrupt("return",new Promise(function(resolve){_this3.initTransaction(true).then(function(store){var clearRequest=store.clear();clearRequest.onsuccess=function(){resolve();};clearRequest.onerror=function(){GlovProductInfoRepository_logger.failed("Error clearing store: ".concat(store.name));resolve(null);};});}));case 1:case"end":return _context3.stop();}}},_callee3);}));function clear(){return _clear.apply(this,arguments);}return clear;}()},{key:"get",value:function(){var _get=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee4(sku){var _this4=this;return regenerator_default().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:return _context4.abrupt("return",new Promise(function(resolve){_this4.initTransaction().then(function(store){var getRequest=store.get(sku);getRequest.onsuccess=function(){var result=getRequest.result;GlovProductInfoRepository_logger.log("Found value ".concat(result," for key ").concat(sku));resolve(result);};getRequest.onerror=function(){GlovProductInfoRepository_logger.failed("Error getting value for key: ".concat(sku),getRequest.onerror);resolve(null);};});}));case 1:case"end":return _context4.stop();}}},_callee4);}));function get(_x2){return _get.apply(this,arguments);}return get;}()},{key:"count",value:function(){var _count=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee5(){var _this5=this;return regenerator_default().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:return _context5.abrupt("return",new Promise(function(resolve){_this5.initTransaction().then(function(store){var countRequest=store.count();countRequest.onsuccess=function(){var result=countRequest.result;GlovProductInfoRepository_logger.log("Counted ".concat(result," entries"));resolve(result);};countRequest.onerror=function(){GlovProductInfoRepository_logger.failed("Error counting entries: ",countRequest.onerror);resolve(null);};});}));case 1:case"end":return _context5.stop();}}},_callee5);}));function count(){return _count.apply(this,arguments);}return count;}()},{key:"getCursor",value:function(){var _getCursor=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee6(){var _this6=this;return regenerator_default().wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:return _context6.abrupt("return",new Promise(function(resolve){_this6.initTransaction().then(function(store){var cursorRequest=store.openCursor();cursorRequest.onsuccess=function(event){resolve(event.target.result);};cursorRequest.onerror=function(){GlovProductInfoRepository_logger.failed("Error getting cursor",cursorRequest.onerror);resolve(null);};});}));case 1:case"end":return _context6.stop();}}},_callee6);}));function getCursor(){return _getCursor.apply(this,arguments);}return getCursor;}()},{key:"persistProductInfo",value:function(){var _persistProductInfo=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee7(){var existingProdInfo,cursor,timestamp,elapsedSeconds,productInfoPromise,clearPromise,_yield$Promise$all,_yield$Promise$all2,productInfoArray;return regenerator_default().wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:addToBeagleInfoLayer("m","check-existing-prod-info");_context7.next=3;return this.count();case 3:existingProdInfo=_context7.sent;if(!existingProdInfo){_context7.next=14;break;}GlovProductInfoRepository_logger.log("Existing product info found");_context7.next=8;return this.getCursor();case 8:cursor=_context7.sent;timestamp=cursor.value.timestamp;elapsedSeconds=Date.now()/1000-timestamp;// Re-fetch product info once a day
if(!(elapsedSeconds<86400)){_context7.next=13;break;}return _context7.abrupt("return");case 13:GlovProductInfoRepository_logger.log("Existing product info is expired");case 14:addToBeagleInfoLayer("m","fetching-prod-info");productInfoPromise=fetchProductInfo();clearPromise=this.clear();_context7.next=19;return Promise.all([productInfoPromise,clearPromise]);case 19:_yield$Promise$all=_context7.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,1);productInfoArray=_yield$Promise$all2[0];if(!(!productInfoArray||!productInfoArray.length)){_context7.next=24;break;}return _context7.abrupt("return");case 24:addToBeagleInfoLayer("m","fetched-prod-info");_context7.next=27;return this.save(this.preparePayloads(productInfoArray));case 27:addToBeagleInfoLayer("m","persisted-prod-info");case 28:case"end":return _context7.stop();}}},_callee7,this);}));function persistProductInfo(){return _persistProductInfo.apply(this,arguments);}return persistProductInfo;}()},{key:"preparePayloads",value:function preparePayloads(productInfoArray){var payloads=[];var fieldNames=productInfoArray.shift();fieldNames.shift();var _iterator3=GlovProductInfoRepository_createForOfIteratorHelper(productInfoArray),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var info=_step3.value;var payload={sku:info.shift()};for(var i=0;i<fieldNames.length;i++){payload[fieldNames[i]]=info[i]||0;}payloads.push(payload);}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}return payloads;}}]);return GlovProductInfoRepository;}();/* harmony default export */var src_GlovProductInfoRepository=GlovProductInfoRepository;;// CONCATENATED MODULE: ./src/GlovProductInfoRepository/store.js
var Store=function(){var instance=null;return{getInstance:function getInstance(){if(instance===null){instance=new src_GlovProductInfoRepository();// Hide the constructor so the returned object can't be new'd...
instance.constructor=null;}return instance;}};}();/* harmony default export */var store=Store;;// CONCATENATED MODULE: ./src/BeagleApplyActions/action-condition-util.js
var action_condition_util_logger=new src_logger("ActionConditionUtils");var checkActionCondition=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(condition){var eligibleElements,attribute,inner_condition,operator,selector,type,value,chain,conditionElements,_i,_conditionElements,element;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:action_condition_util_logger.log("Action condition found: ",condition);eligibleElements=[];attribute=condition.attribute,inner_condition=condition.inner_condition,operator=condition.operator,selector=condition.selector,type=condition.type,value=condition.value,chain=condition.chain;conditionElements=Array.from(window.top.document.querySelectorAll(selector));_i=0,_conditionElements=conditionElements;case 5:if(!(_i<_conditionElements.length)){_context.next=14;break;}element=_conditionElements[_i];_context.next=9;return actionConditionChecker(element,type,operator,attribute,inner_condition,value,chain);case 9:if(!_context.sent){_context.next=11;break;}eligibleElements.push($(element));case 11:_i++;_context.next=5;break;case 14:return _context.abrupt("return",eligibleElements);case 15:case"end":return _context.stop();}}},_callee);}));return function checkActionCondition(_x){return _ref.apply(this,arguments);};}();var actionConditionChecker=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(element,type,operator,attribute,inner_condition,value,chain){var elementSku,productInfo,runTimeValue,res,_runTimeValue,_res;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.t0=type;_context2.next=_context2.t0==="productInfoLookup"?3:20;break;case 3:elementSku=element.getAttribute(attribute);_context2.next=6;return store.getInstance().get(elementSku);case 6:productInfo=_context2.sent;runTimeValue=productInfo===null||productInfo===void 0?void 0:productInfo[operator];// runTimeValue may be 0
if(!(runTimeValue===null||runTimeValue===undefined)){_context2.next=11;break;}action_condition_util_logger.failed("Product info is empty");return _context2.abrupt("return",false);case 11:if(conditionChecker(runTimeValue,inner_condition,value)){_context2.next=13;break;}return _context2.abrupt("return",false);case 13:if(!chain){_context2.next=19;break;}_context2.next=16;return actionConditionChecker(element,chain.type,chain.operator,chain.attribute,chain.inner_condition,chain.value,chain.chain);case 16:res=_context2.sent;if(res){_context2.next=19;break;}return _context2.abrupt("return",false);case 19:return _context2.abrupt("break",29);case 20:_runTimeValue=element.getAttribute(attribute);if(conditionChecker(_runTimeValue,inner_condition,value)){_context2.next=23;break;}return _context2.abrupt("return",false);case 23:if(!chain){_context2.next=29;break;}_context2.next=26;return actionConditionChecker(element,chain.type,chain.operator,chain.attribute,chain.inner_condition,chain.value,chain.chain);case 26:_res=_context2.sent;if(_res){_context2.next=29;break;}return _context2.abrupt("return",false);case 29:return _context2.abrupt("return",true);case 30:case"end":return _context2.stop();}}},_callee2);}));return function actionConditionChecker(_x2,_x3,_x4,_x5,_x6,_x7,_x8){return _ref2.apply(this,arguments);};}();/* harmony default export */var action_condition_util=checkActionCondition;;// CONCATENATED MODULE: ./src/BeagleApplyActions/index.js
function BeagleApplyActions_createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=BeagleApplyActions_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function BeagleApplyActions_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return BeagleApplyActions_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return BeagleApplyActions_arrayLikeToArray(o,minLen);}function BeagleApplyActions_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function applyActions(_x){return _applyActions.apply(this,arguments);}function _applyActions(){_applyActions=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee7(actions){var logger,POPUP_DISPLAY_FLAG,transformer,prepareFinalTitle,replaceWithVal,getProductInfo,handleDocumentTitleTabChange,handlePopupClick,handleModalClick,displayPopup,displayModal,createPopup,swapNodes,waitForJQuery,actionApplicator,result;return regenerator_default().wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:logger=new src_logger("BeagleApplyActions");POPUP_DISPLAY_FLAG=SESSION_STORAGE_KEYS.POPUP_DISPLAY_FLAG;transformer=/*#__PURE__*/function(){var _transformer=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(action){var element,operator,type,applyEvent,contentSelector,selector,selectorFallback,mdCondition,move_selector_1,move_selector_2,replaceFn,pType,attribute,productInfoStorage,value,mc,elm,mobile,_iterator,_step,event,_yield$Promise$all,_yield$Promise$all2,r,d,styleChangesMap,_iterator2,_step2,_event,property,propertyValue,n1,n2,source,destination,res,_i,_Array$from,_e$innerText,e,finalTitle,_args=arguments;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:element=_args.length>1&&_args[1]!==undefined?_args[1]:null;logger.log("Applying action: ",JSON.stringify(action));operator=action.operator,type=action.type,applyEvent=action.applyEvent,contentSelector=action.contentSelector,selector=action.selector,selectorFallback=action.selectorFallback,mdCondition=action.mdCondition,move_selector_1=action.move_selector_1,move_selector_2=action.move_selector_2,replaceFn=action.replaceFn,pType=action.pType,attribute=action.attribute,productInfoStorage=action.productInfoStorage;if(!(operator==="noop")){_context.next=6;break;}logger.failed("Noop Operator: No operation is applied on target ");return _context.abrupt("return",true);case 6:value=action.value;// If an element is passed to transformer, selector is relative to passed element
element=element?element.find(selector):$(selector);mc=mdCondition?window.matchMedia(mdCondition).matches:true;if(mc){_context.next=12;break;}logger.failed("Media condition mismatch: ",mdCondition);return _context.abrupt("return",false);case 12:if(!(move_selector_1&&!move_selector_2||move_selector_2&&!move_selector_1)){_context.next=15;break;}logger.failed("Both move selectors are required");return _context.abrupt("return",false);case 15:if(!(move_selector_1&&move_selector_2)){_context.next=24;break;}if($(move_selector_1).length){_context.next=19;break;}logger.failed("Move selector 1 not found: ",move_selector_1);return _context.abrupt("return",false);case 19:if($(move_selector_2).length){_context.next=22;break;}logger.failed("Move selector 2 not found: ",move_selector_2);return _context.abrupt("return",false);case 22:_context.next=39;break;case 24:if(selector){_context.next=29;break;}logger.failed("Selector not specified");return _context.abrupt("return",false);case 29:if(element.length){_context.next=39;break;}if(!(!$(selectorFallback).length&&operator==="remove")){_context.next=32;break;}return _context.abrupt("return",true);case 32:if(!(selector!=="no-selector")){_context.next=39;break;}logger.failed("Selector not found: ",selector);logger.log("Trying fallback selector: ",selectorFallback);if(selectorFallback)element=$(selectorFallback);if(element.length){_context.next=39;break;}logger.failed("Fallback selector not found");return _context.abrupt("return",false);case 39:if(!replaceFn){_context.next=43;break;}_context.next=42;return replace_utils(value,replaceFn);case 42:value=_context.sent;case 43:if(!(operator==="remove")){_context.next=47;break;}if(element.length){logger.log("Removing: ",selector);element.remove();}else logger.log("Cannot found element with selector: ",selector);_context.next=225;break;case 47:if(!(operator==="insert")){_context.next=121;break;}_context.t0=type;_context.next=_context.t0==="before"?51:_context.t0==="after"?55:_context.t0==="append"?58:_context.t0==="modal"?61:_context.t0==="popup"?66:117;break;case 51:logger.log("Inserting before: ",value);if(String(value).includes("nd-add-to-win")){$(".nd-add-to-win").remove();}element.before(value);return _context.abrupt("break",119);case 55:logger.log("Inserting after: ",value);element.after(value);return _context.abrupt("break",119);case 58:logger.log("Appending value: ",value);element.append(value);return _context.abrupt("break",119);case 61:element.off("click");createPopup(value,contentSelector,true);elm=document.querySelector(selector);elm.addEventListener("click",function(e){if(elm==e.target){e.stopPropagation();}displayModal(value,contentSelector);},true);return _context.abrupt("break",119);case 66:if(!(parseInt(sessionStorage.getItem(POPUP_DISPLAY_FLAG))!==0)){_context.next=69;break;}logger.log("Popup already displayed in session");return _context.abrupt("break",119);case 69:logger.log("Creating Popup: ",value);if(!pType){_context.next=74;break;}_context.next=73;return getProductInfo(pType,value,productInfoStorage);case 73:value=_context.sent;case 74:createPopup(value,contentSelector);if(!applyEvent){_context.next=115;break;}mobile=window.matchMedia(MOBILE_MEDIA_QUERY).matches;_iterator=BeagleApplyActions_createForOfIteratorHelper(applyEvent);_context.prev=78;_iterator.s();case 80:if((_step=_iterator.n()).done){_context.next=105;break;}event=_step.value;_context.t1=event;_context.next=_context.t1==="exitIntent"?85:_context.t1==="copyIntent"?100:103;break;case 85:logger.log("Adding exit intent listener");if(!mobile){_context.next=98;break;}window.top.addEventListener("visibilitychange",displayPopup);_context.next=90;return Promise.all([getFromBeagleInfoLayer("r",true),getFromBeagleInfoLayer("d",true)]);case 90:_yield$Promise$all=_context.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,2);r=_yield$Promise$all2[0];d=_yield$Promise$all2[1];if(typeof r==="string"&&typeof d==="string"&&!r.includes(d)){if(window.history&&typeof window.history.pushState==="function"){if(window.top.document.readyState!=="complete"){window.top.addEventListener("load",function(){if(window.history.state!=="bg_limbo")window.history.pushState("bg_limbo","");window.top.addEventListener("popstate",displayPopup,{once:true});});}else{if(window.history.state!=="bg_limbo")window.history.pushState("bg_limbo","");window.top.addEventListener("popstate",displayPopup,{once:true});}}}idleTimer(IDLE_TIMEOUT,displayPopup);_context.next=99;break;case 98:window.top.document.documentElement.addEventListener("mouseleave",displayPopup,{once:true});case 99:return _context.abrupt("break",103);case 100:logger.log("Adding copy intent listener");window.top.document.documentElement.addEventListener("copy",displayPopup,{once:true});return _context.abrupt("break",103);case 103:_context.next=80;break;case 105:_context.next=110;break;case 107:_context.prev=107;_context.t2=_context["catch"](78);_iterator.e(_context.t2);case 110:_context.prev=110;_iterator.f();return _context.finish(110);case 113:_context.next=116;break;case 115:// append popup to body after timeout expires
setTimeout(function(){displayPopup();},timeout);case 116:return _context.abrupt("break",119);case 117:logger.failed("Type: ".concat(type," not found for operator: ").concat(operator));return _context.abrupt("break",119);case 119:_context.next=225;break;case 121:if(!(operator==="edit")){_context.next=149;break;}_context.t3=type;_context.next=_context.t3==="text"?125:_context.t3==="html"?128:_context.t3==="styleApplicator"?131:_context.t3==="addClass"?136:_context.t3==="removeClass"?139:_context.t3==="documentTitle"?142:145;break;case 125:logger.log("Editing text: ",value);element.text(value);return _context.abrupt("break",147);case 128:logger.log("Editing html: ",value);element.html(value);return _context.abrupt("break",147);case 131:logger.log("Applying style: ",value);styleChangesMap=JSON.parse(value);logger.log("Style Changes Map: ",styleChangesMap);styleApplicator(element,styleChangesMap);return _context.abrupt("break",147);case 136:logger.log("addding class to ".concat(element," named ").concat(value));element.addClass(value);return _context.abrupt("break",147);case 139:logger.log("remove class from ".concat(element," named ").concat(value));element.removeClass(value);return _context.abrupt("break",147);case 142:logger.log("changing document title from ".concat(element," to ").concat(value));if(applyEvent){_iterator2=BeagleApplyActions_createForOfIteratorHelper(applyEvent);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){_event=_step2.value;if(_event=="tabChange"){(function(){logger.log("catching event tabchange..");var originalTitle=window.top.document.title;window.top.document.addEventListener("visibilitychange",function(e){setTimeout(function(){handleDocumentTitleTabChange(e,value,originalTitle);},15000);});})();}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}return _context.abrupt("break",147);case 145:logger.log("Unknown edit type: ",type);return _context.abrupt("break",147);case 147:_context.next=225;break;case 149:if(!(operator==="setattribute")){_context.next=166;break;}logger.log("Setting attribute: ",attribute,value);_context.t4=attribute;_context.next=_context.t4==="src"?154:_context.t4==="style"?156:160;break;case 154:element.css("content","url(".concat(value.trim(),")"));return _context.abrupt("break",164);case 156:// eslint-disable-next-line no-case-declarations
property=value.split(":")[0].trim();// eslint-disable-next-line no-case-declarations
propertyValue=value.split(":")[1].trim();element.css(property,propertyValue,"!important");return _context.abrupt("break",164);case 160:if(value.includes("function")){value=Function(value);}element.attr(attribute,value);logger.log("Unhandled attribute: Setting attribute: ",attribute,value);return _context.abrupt("break",164);case 164:_context.next=225;break;case 166:if(!(operator==="replace")){_context.next=171;break;}logger.log("Replacing: ",value);element.replaceAll(value);_context.next=225;break;case 171:if(!(operator==="swap")){_context.next=178;break;}logger.log("Swapping: ",move_selector_1,move_selector_2);n1=window.top.document.querySelector(move_selector_1);n2=window.top.document.querySelector(move_selector_2);swapNodes(n1,n2);_context.next=225;break;case 178:if(!(operator==="injectscript")){_context.next=183;break;}logger.log("Injecting script: ",value);element.append("<script>".concat(value,"</script>"));_context.next=225;break;case 183:if(!(operator==="move")){_context.next=191;break;}logger.log("Moving ".concat(move_selector_1," to ").concat(move_selector_2));source=window.top.document.querySelector(move_selector_1);destination=window.top.document.querySelector(move_selector_2);source.remove();destination.prepend(source);_context.next=225;break;case 191:if(!(operator==="productInfoLookup")){_context.next=198;break;}_context.next=194;return getProductInfo(pType,value,productInfoStorage);case 194:res=_context.sent;element.before(res);_context.next=225;break;case 198:if(!(operator==="text-transform")){_context.next=217;break;}_context.t5=type;_context.next=_context.t5==="capitalize"?202:_context.t5==="PLACEHOLDER"?213:214;break;case 202:_i=0,_Array$from=Array.from(element);case 203:if(!(_i<_Array$from.length)){_context.next=212;break;}e=_Array$from[_i];if(!((_e$innerText=e.innerText)!==null&&_e$innerText!==void 0&&_e$innerText.includes("\n"))){_context.next=208;break;}e.innerText=turkishToLower(e.innerText).split("\n").map(function(sentence){return sentence.split(" ").map(function(word){return word.charAt(0).toLocaleUpperCase()+word.slice(1);}).join(" ");}).join("\n");return _context.abrupt("continue",209);case 208:e.innerText=turkishToLower(e.innerText).split(" ").map(function(word){return word.charAt(0).toLocaleUpperCase()+word.slice(1);}).join(" ");case 209:_i++;_context.next=203;break;case 212:return _context.abrupt("break",215);case 213:return _context.abrupt("break",215);case 214:return _context.abrupt("break",215);case 215:_context.next=225;break;case 217:if(!(operator==="title-change")){_context.next=224;break;}_context.next=220;return prepareFinalTitle();case 220:finalTitle=_context.sent;element.text(finalTitle);_context.next=225;break;case 224:logger.failed("No such operator exists yet",operator);case 225:case"end":return _context.stop();}}},_callee,null,[[78,107,110,113]]);}));function transformer(_x2){return _transformer.apply(this,arguments);}return transformer;}();prepareFinalTitle=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(){var _yield$getFromBeagleI,name,sku,productInfo,res;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return getFromBeagleInfoLayer("pdp",true);case 2:_yield$getFromBeagleI=_context2.sent;name=_yield$getFromBeagleI.name;sku=_yield$getFromBeagleI.sku;_context2.next=7;return store.getInstance().get(sku);case 7:productInfo=_context2.sent;res=name+productInfo.titleAugment+"("+sku+")";return _context2.abrupt("return",res);case 10:case"end":return _context2.stop();}}},_callee2);}));return function prepareFinalTitle(){return _ref.apply(this,arguments);};}();replaceWithVal=function replaceWithVal(value,htmlStr){if(value&&htmlStr.includes("{{REPLACE_PRODUCTINFO}}")){htmlStr=replaceAll(htmlStr,"{{REPLACE_PRODUCTINFO}}",value);}return htmlStr;};getProductInfo=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(type,value,productInfoStorage){var skuList,res,productInfo;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!(productInfoStorage==="basket")){_context3.next=6;break;}_context3.next=3;return getFromBeagleInfoLayer("__features.SKUsonLastCartView",true);case 3:_context3.t0=_context3.sent;_context3.next=9;break;case 6:_context3.next=8;return getFromBeagleInfoLayer("__features.SKUsonPage",true);case 8:_context3.t0=_context3.sent;case 9:skuList=_context3.t0;res=null;if(!(!skuList||skuList.length===0)){_context3.next=14;break;}logger.log("No sku found");return _context3.abrupt("return",null);case 14:_context3.next=16;return store.getInstance().get(skuList[0]);case 16:productInfo=_context3.sent;_context3.t1=type;_context3.next=_context3.t1==="transactionIn2Weeks"?20:_context3.t1==="addToCartIn2Weeks"?23:_context3.t1==="productViewCount"?26:29;break;case 20:res=replaceWithVal(productInfo.saleCntVisitorsIn15.toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."),value);logger.log("Replacing transcationIn2Weeks ",productInfo.saleCntVisitorsIn15);return _context3.abrupt("break",30);case 23:res=replaceWithVal(productInfo.cartCntVisitorsIn15.toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."),value);logger.log("Replacing AddToCartCount ",productInfo.cartCntVisitorsIn15);return _context3.abrupt("break",30);case 26:res=replaceWithVal(productInfo.viewCntVisitorsIn1.toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."),value);logger.log("Replacing productViewCount for",productInfo.viewCntVisitorsIn1);return _context3.abrupt("break",30);case 29:logger.failed("no such type found for productInfoLookup operator: "+type);case 30:return _context3.abrupt("return",res);case 31:case"end":return _context3.stop();}}},_callee3);}));return function getProductInfo(_x3,_x4,_x5){return _ref2.apply(this,arguments);};}();handleDocumentTitleTabChange=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee4(event,titles,originalTitle){var parsedTitles,_iterator3,_step3,parsedTitle;return regenerator_default().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:parsedTitles=!Array.isArray(titles)?[titles]:titles;_iterator3=BeagleApplyActions_createForOfIteratorHelper(parsedTitles);_context4.prev=2;_iterator3.s();case 4:if((_step3=_iterator3.n()).done){_context4.next=18;break;}parsedTitle=_step3.value;if(!window.top.document.hidden){_context4.next=15;break;}window.top.document.title=parsedTitle;_context4.next=10;return delay(2000);case 10:window.top.document.title=originalTitle;_context4.next=13;return delay(2000);case 13:_context4.next=16;break;case 15:window.top.document.title=originalTitle;case 16:_context4.next=4;break;case 18:_context4.next=23;break;case 20:_context4.prev=20;_context4.t0=_context4["catch"](2);_iterator3.e(_context4.t0);case 23:_context4.prev=23;_iterator3.f();return _context4.finish(23);case 26:if(!window.top.document.hidden){window.top.document.title=originalTitle;}else{handleDocumentTitleTabChange(event,titles,originalTitle);}case 27:case"end":return _context4.stop();}}},_callee4,null,[[2,20,23,26]]);}));return function handleDocumentTitleTabChange(_x6,_x7,_x8){return _ref3.apply(this,arguments);};}();handlePopupClick=function handlePopupClick(event){var id=event.target.id;if(id&&id==="nd-popup__wrapper"){$("#nd-popup__wrapper").remove();window.removeEventListener("click",handlePopupClick,true);window.removeEventListener("touchend",handlePopupClick,true);}};handleModalClick=function handleModalClick(event){var classList=event.target.classList;if(classList&&classList.contains("nd-modal__wrapper")){$(".nd-modal__wrapper").hide();window.removeEventListener("click",handleModalClick,true);window.removeEventListener("touchend",handleModalClick,true);}};displayPopup=function displayPopup(){if(window.top.document.hidden)return;if(parseInt(sessionStorage.getItem(POPUP_DISPLAY_FLAG))>0)return;sessionStorage.setItem(POPUP_DISPLAY_FLAG,1);var qPopup=window.top.document.querySelector("#grt-shadow-host");if(qPopup)qPopup.style["display"]="none";window.top.document.getElementById("nd-popup__wrapper").style["display"]="block";window.addEventListener("click",handlePopupClick,true);window.addEventListener("touchend",handlePopupClick,true);window.top.document.documentElement.removeEventListener("mouseleave",displayPopup,{once:true});window.top.document.documentElement.removeEventListener("copy",displayPopup,{once:true});window.top.removeEventListener("visibilitychange",displayPopup);window.top.removeEventListener("popstate",displayPopup,{once:true});setTimeout(function(){$("#nd-popup__wrapper").remove();window.removeEventListener("click",handlePopupClick,true);window.removeEventListener("touchend",handlePopupClick,true);},15000);};displayModal=function displayModal(value,contentSelector){if(window.top.document.hidden)return;var qPopup=window.top.document.querySelector("#grt-shadow-host");if(qPopup)qPopup.style["display"]="none";if(!window.top.document.querySelector(".nd-modal__wrapper"))createPopup(value,contentSelector,true);window.top.document.querySelector(".nd-modal__wrapper").style["display"]="block";window.addEventListener("click",handleModalClick,true);};createPopup=function createPopup(value,contentSelector){var isModal=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;// Create popup wrapper
var popupWrapper=window.top.document.createElement("div");// eslint-disable-next-line max-len
popupWrapper.classList.add("nd-popup__wrapper");if(isModal)popupWrapper.classList.add("nd-modal__wrapper");if(!isModal)popupWrapper.id="nd-popup__wrapper";// Create popup close button
var popupCloseButton=window.top.document.createElement("button");var popupCloseButtonStyle=isModal?"nd-popup__button-close__colored":"nd-popup__button-close";popupCloseButton.classList.add(popupCloseButtonStyle);popupCloseButton.innerText="X";if(isModal){popupCloseButton.onclick=function(){$(".nd-modal__wrapper").hide();window.removeEventListener("click",handleModalClick,true);};}else{popupCloseButton.onclick=function(){$("#nd-popup__wrapper").remove();window.removeEventListener("click",handlePopupClick,true);};}if(contentSelector){var contents=Array.from(window.top.document.querySelectorAll(contentSelector));while(value.includes("{{REPLACE}}")&&contents.length>0){value=value.replace("{{REPLACE}}",contents.shift().src);}}// Create popup from action and append close button
var template=window.top.document.createElement("template");template.innerHTML=value.trim();var popup=template.content.firstChild;popup.appendChild(popupCloseButton);popupWrapper.appendChild(popup);// Remove old popup if exists before appending new one
$("#nd-popup__wrapper").remove();window.top.document.body.appendChild(popupWrapper);};swapNodes=function swapNodes(n1,n2){var p1=n1.parentNode;var p2=n2.parentNode;var i1;var i2;if(!p1||!p2||p1.isEqualNode(n2)||p2.isEqualNode(n1))return;for(var i=0;i<p1.children.length;i++){if(p1.children[i].isEqualNode(n1)){i1=i;}}for(var _i2=0;_i2<p2.children.length;_i2++){if(p2.children[_i2].isEqualNode(n2)){i2=_i2;}}if(p1.isEqualNode(p2)&&i1<i2){i2++;}p1.insertBefore(n2,p1.children[i1]);p2.insertBefore(n1,p2.children[i2]);};waitForJQuery=function waitForJQuery(){return new Promise(function(resolve){if(!window.jQuery){logger.log("jQuery not found, retrying");var jQueryInterval=setInterval(function(){if(window.jQuery){clearInterval(jQueryInterval);resolve(true);}},25);setTimeout(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee5(){return regenerator_default().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:clearInterval(jQueryInterval);resolve(false);case 2:case"end":return _context5.stop();}}},_callee5);})),2000);}else resolve(true);});};actionApplicator=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee6(actions){var _iterator4,_step4,action,_result,eligibleElements,_iterator5,_step5,element;return regenerator_default().wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return waitForJQuery();case 2:if(!_context6.sent){_context6.next=59;break;}_iterator4=BeagleApplyActions_createForOfIteratorHelper(actions);_context6.prev=4;_iterator4.s();case 6:if((_step4=_iterator4.n()).done){_context6.next=49;break;}action=_step4.value;_context6.prev=8;_result=false;if(!action.condition){_context6.next=36;break;}_context6.next=13;return action_condition_util(action.condition);case 13:eligibleElements=_context6.sent;_iterator5=BeagleApplyActions_createForOfIteratorHelper(eligibleElements);_context6.prev=15;_iterator5.s();case 17:if((_step5=_iterator5.n()).done){_context6.next=26;break;}element=_step5.value;_context6.next=21;return transformer(action,element);case 21:_result=_context6.sent;if(!(_result===false)){_context6.next=24;break;}return _context6.abrupt("return",false);case 24:_context6.next=17;break;case 26:_context6.next=31;break;case 28:_context6.prev=28;_context6.t0=_context6["catch"](15);_iterator5.e(_context6.t0);case 31:_context6.prev=31;_iterator5.f();return _context6.finish(31);case 34:_context6.next=39;break;case 36:_context6.next=38;return transformer(action);case 38:_result=_context6.sent;case 39:if(!(_result===false)){_context6.next=41;break;}return _context6.abrupt("return",false);case 41:_context6.next=47;break;case 43:_context6.prev=43;_context6.t1=_context6["catch"](8);logger.failed("Couldn't apply action ".concat(JSON.stringify(action)," with error ").concat(_context6.t1.message));return _context6.abrupt("return",_context6.t1);case 47:_context6.next=6;break;case 49:_context6.next=54;break;case 51:_context6.prev=51;_context6.t2=_context6["catch"](4);_iterator4.e(_context6.t2);case 54:_context6.prev=54;_iterator4.f();return _context6.finish(54);case 57:_context6.next=61;break;case 59:logger.failed("Jquery not found on window");return _context6.abrupt("return",false);case 61:case"end":return _context6.stop();}}},_callee6,null,[[4,51,54,57],[8,43],[15,28,31,34]]);}));return function actionApplicator(_x9){return _ref5.apply(this,arguments);};}();// Apply actions
_context7.next=17;return actionApplicator(actions);case 17:result=_context7.sent;return _context7.abrupt("return",result);case 19:case"end":return _context7.stop();}}},_callee7);}));return _applyActions.apply(this,arguments);}/* harmony default export */var BeagleApplyActions=applyActions;;// CONCATENATED MODULE: ./node_modules/async-mutex/index.mjs
var E_TIMEOUT=new Error('timeout while waiting for mutex to become available');var E_ALREADY_LOCKED=new Error('mutex already locked');var E_CANCELED=new Error('request for lock canceled');var __awaiter$2= false||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator["throw"](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};var Semaphore=/*#__PURE__*/function(){function Semaphore(_value){var _cancelError=arguments.length>1&&arguments[1]!==undefined?arguments[1]:E_CANCELED;_classCallCheck2(this,Semaphore);this._value=_value;this._cancelError=_cancelError;this._weightedQueues=[];this._weightedWaiters=[];}_createClass2(Semaphore,[{key:"acquire",value:function acquire(){var _this8=this;var weight=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;if(weight<=0)throw new Error("invalid weight ".concat(weight,": must be positive"));return new Promise(function(resolve,reject){if(!_this8._weightedQueues[weight-1])_this8._weightedQueues[weight-1]=[];_this8._weightedQueues[weight-1].push({resolve:resolve,reject:reject});_this8._dispatch();});}},{key:"runExclusive",value:function runExclusive(callback){var weight=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;return __awaiter$2(this,void 0,void 0,/*#__PURE__*/_regeneratorRuntime2.mark(function _callee13(){var _yield$this$acquire,_yield$this$acquire2,value,release;return _regeneratorRuntime2.wrap(function _callee13$(_context13){while(1){switch(_context13.prev=_context13.next){case 0:_context13.next=2;return this.acquire(weight);case 2:_yield$this$acquire=_context13.sent;_yield$this$acquire2=_slicedToArray2(_yield$this$acquire,2);value=_yield$this$acquire2[0];release=_yield$this$acquire2[1];_context13.prev=6;_context13.next=9;return callback(value);case 9:return _context13.abrupt("return",_context13.sent);case 10:_context13.prev=10;release();return _context13.finish(10);case 13:case"end":return _context13.stop();}}},_callee13,this,[[6,,10,13]]);}));}},{key:"waitForUnlock",value:function waitForUnlock(){var _this9=this;var weight=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;if(weight<=0)throw new Error("invalid weight ".concat(weight,": must be positive"));return new Promise(function(resolve){if(!_this9._weightedWaiters[weight-1])_this9._weightedWaiters[weight-1]=[];_this9._weightedWaiters[weight-1].push(resolve);_this9._dispatch();});}},{key:"isLocked",value:function isLocked(){return this._value<=0;}},{key:"getValue",value:function getValue(){return this._value;}},{key:"setValue",value:function setValue(value){this._value=value;this._dispatch();}},{key:"release",value:function release(){var weight=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;if(weight<=0)throw new Error("invalid weight ".concat(weight,": must be positive"));this._value+=weight;this._dispatch();}},{key:"cancel",value:function cancel(){var _this10=this;this._weightedQueues.forEach(function(queue){return queue.forEach(function(entry){return entry.reject(_this10._cancelError);});});this._weightedQueues=[];}},{key:"_dispatch",value:function _dispatch(){var _a;for(var weight=this._value;weight>0;weight--){var queueEntry=(_a=this._weightedQueues[weight-1])===null||_a===void 0?void 0:_a.shift();if(!queueEntry)continue;var previousValue=this._value;var previousWeight=weight;this._value-=weight;weight=this._value+1;queueEntry.resolve([previousValue,this._newReleaser(previousWeight)]);}this._drainUnlockWaiters();}},{key:"_newReleaser",value:function _newReleaser(weight){var _this11=this;var called=false;return function(){if(called)return;called=true;_this11.release(weight);};}},{key:"_drainUnlockWaiters",value:function _drainUnlockWaiters(){for(var weight=this._value;weight>0;weight--){if(!this._weightedWaiters[weight-1])continue;this._weightedWaiters[weight-1].forEach(function(waiter){return waiter();});this._weightedWaiters[weight-1]=[];}}}]);return Semaphore;}();var __awaiter$1= false||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator["throw"](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};var Mutex=/*#__PURE__*/function(){function Mutex(cancelError){_classCallCheck2(this,Mutex);this._semaphore=new Semaphore(1,cancelError);}_createClass2(Mutex,[{key:"acquire",value:function acquire(){return __awaiter$1(this,void 0,void 0,/*#__PURE__*/_regeneratorRuntime2.mark(function _callee14(){var _yield$this$_semaphor,_yield$this$_semaphor2,releaser;return _regeneratorRuntime2.wrap(function _callee14$(_context14){while(1){switch(_context14.prev=_context14.next){case 0:_context14.next=2;return this._semaphore.acquire();case 2:_yield$this$_semaphor=_context14.sent;_yield$this$_semaphor2=_slicedToArray2(_yield$this$_semaphor,2);releaser=_yield$this$_semaphor2[1];return _context14.abrupt("return",releaser);case 6:case"end":return _context14.stop();}}},_callee14,this);}));}},{key:"runExclusive",value:function runExclusive(callback){return this._semaphore.runExclusive(function(){return callback();});}},{key:"isLocked",value:function isLocked(){return this._semaphore.isLocked();}},{key:"waitForUnlock",value:function waitForUnlock(){return this._semaphore.waitForUnlock();}},{key:"release",value:function release(){if(this._semaphore.isLocked())this._semaphore.release();}},{key:"cancel",value:function cancel(){return this._semaphore.cancel();}}]);return Mutex;}();var __awaiter= false||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator["throw"](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};function withTimeout(sync,timeout){var _this12=this;var timeoutError=arguments.length>2&&arguments[2]!==undefined?arguments[2]:E_TIMEOUT;return{acquire:function acquire(weight){if(weight!==undefined&&weight<=0){throw new Error("invalid weight ".concat(weight,": must be positive"));}return new Promise(function(resolve,reject){return __awaiter(_this12,void 0,void 0,/*#__PURE__*/_regeneratorRuntime2.mark(function _callee15(){var isTimeout,handle,ticket,release;return _regeneratorRuntime2.wrap(function _callee15$(_context15){while(1){switch(_context15.prev=_context15.next){case 0:isTimeout=false;handle=setTimeout(function(){isTimeout=true;reject(timeoutError);},timeout);_context15.prev=2;_context15.next=5;return sync.acquire(weight);case 5:ticket=_context15.sent;if(isTimeout){release=Array.isArray(ticket)?ticket[1]:ticket;release();}else{clearTimeout(handle);resolve(ticket);}_context15.next=12;break;case 9:_context15.prev=9;_context15.t0=_context15["catch"](2);if(!isTimeout){clearTimeout(handle);reject(_context15.t0);}case 12:case"end":return _context15.stop();}}},_callee15,null,[[2,9]]);}));});},runExclusive:function runExclusive(callback,weight){return __awaiter(this,void 0,void 0,/*#__PURE__*/_regeneratorRuntime2.mark(function _callee16(){var release,ticket;return _regeneratorRuntime2.wrap(function _callee16$(_context16){while(1){switch(_context16.prev=_context16.next){case 0:release=function release(){return undefined;};_context16.prev=1;_context16.next=4;return this.acquire(weight);case 4:ticket=_context16.sent;if(!Array.isArray(ticket)){_context16.next=12;break;}release=ticket[1];_context16.next=9;return callback(ticket[0]);case 9:return _context16.abrupt("return",_context16.sent);case 12:release=ticket;_context16.next=15;return callback();case 15:return _context16.abrupt("return",_context16.sent);case 16:_context16.prev=16;release();return _context16.finish(16);case 19:case"end":return _context16.stop();}}},_callee16,this,[[1,,16,19]]);}));},release:function release(weight){sync.release(weight);},cancel:function cancel(){return sync.cancel();},waitForUnlock:function waitForUnlock(weight){if(weight!==undefined&&weight<=0){throw new Error("invalid weight ".concat(weight,": must be positive"));}return new Promise(function(resolve,reject){sync.waitForUnlock(weight).then(resolve);setTimeout(function(){return reject(timeoutError);},timeout);});},isLocked:function isLocked(){return sync.isLocked();},getValue:function getValue(){return sync.getValue();},setValue:function setValue(value){return sync.setValue(value);}};}// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types
function tryAcquire(sync){var alreadyAcquiredError=arguments.length>1&&arguments[1]!==undefined?arguments[1]:E_ALREADY_LOCKED;// eslint-disable-next-line @typescript-eslint/no-explicit-any
return withTimeout(sync,0,alreadyAcquiredError);};// CONCATENATED MODULE: ./src/BeagleOn/robotEngine.js
function robotEngine_createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=robotEngine_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function robotEngine_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return robotEngine_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return robotEngine_arrayLikeToArray(o,minLen);}function robotEngine_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}var robotEngine_logger=new src_logger("BeagleRobotEngine");var OBSERVER_CONFIG={subtree:true,childList:true,attributes:true};var RobotEngine=/*#__PURE__*/function(){function RobotEngine(body){_classCallCheck(this,RobotEngine);var debugFilteredTreatments=body.debugFilteredTreatments,debugMode=body.debugMode,matchedTreatments=body.matchedTreatments,identifier=body.identifier,pageType=body.pageType;this.engagementLock={};this.pageType=pageType;this.debugMode=debugMode;this.identifier=identifier;this.reApplyTreatmentsMap={};this.addedDataListenerIds=[];this.matchedTreatments=matchedTreatments;this.debugFilteredTreatments=debugFilteredTreatments;this.isMobile=window.matchMedia(MOBILE_MEDIA_QUERY).matches;}_createClass(RobotEngine,[{key:"engageRobots",value:function(){var _engageRobots=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(){var robotPromises,_iterator,_step,treatment;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:robotPromises=[];_iterator=robotEngine_createForOfIteratorHelper(this.matchedTreatments);_context.prev=2;_iterator.s();case 4:if((_step=_iterator.n()).done){_context.next=17;break;}treatment=_step.value;_context.prev=6;if(!treatment.dependant_on_treatment){_context.next=9;break;}return _context.abrupt("continue",15);case 9:robotPromises.push(this.engageRobot(treatment));_context.next=15;break;case 12:_context.prev=12;_context.t0=_context["catch"](6);robotEngine_logger.failed("Error engaging robot ".concat(treatment.id,": ").concat(_context.t0.message||_context.t0));case 15:_context.next=4;break;case 17:_context.next=22;break;case 19:_context.prev=19;_context.t1=_context["catch"](2);_iterator.e(_context.t1);case 22:_context.prev=22;_iterator.f();return _context.finish(22);case 25:_context.next=27;return Promise.all(robotPromises);case 27:this.initiateReapplyRobotMap();case 28:case"end":return _context.stop();}}},_callee,this,[[2,19,22,25],[6,12]]);}));function engageRobots(){return _engageRobots.apply(this,arguments);}return engageRobots;}()},{key:"engageRobot",value:function(){var _engageRobot=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(treatment){var _this=this;var id,actions,eligibilityRuleSet,device,dependant_on_treatment,businessRuleSet,weight,delay,helpers,debugMode,debugFilteredTreatments,engagementLock,identifier,isMobile,matchedTreatments,prepareAndApply,release,treatmentSkipRatio,determiningIdentifier,treatmentPct,businessRuleId;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:id=treatment.id,actions=treatment.actions,eligibilityRuleSet=treatment.eligibilityRuleSet,device=treatment.device,dependant_on_treatment=treatment.dependant_on_treatment,businessRuleSet=treatment.businessRuleSet,weight=treatment.weight,delay=treatment.delay,helpers=treatment.helpers;debugMode=this.debugMode,debugFilteredTreatments=this.debugFilteredTreatments,engagementLock=this.engagementLock,identifier=this.identifier,isMobile=this.isMobile,matchedTreatments=this.matchedTreatments,prepareAndApply=this.prepareAndApply;// one engagement at a time
engagementLock[id]=engagementLock[id]||new Mutex();_context3.next=5;return engagementLock[id].acquire();case 5:release=_context3.sent;_context3.prev=6;if(!(debugMode&&debugFilteredTreatments&&!debugFilteredTreatments.includes(id))){_context3.next=9;break;}return _context3.abrupt("return");case 9:if(!(device==="mobile"&&!isMobile)){_context3.next=12;break;}robotEngine_logger.failed("Treatment device 'mobile' mismatch");return _context3.abrupt("return");case 12:if(!(device==="desktop"&&isMobile)){_context3.next=15;break;}robotEngine_logger.failed("Treatment device 'desktop' mismatch");return _context3.abrupt("return");case 15:robotEngine_logger.log("Starting base rule set check for treatment: "+id);_context3.t0=!eligibilityRuleSet;if(_context3.t0){_context3.next=21;break;}_context3.next=20;return this.checkEligibilityRuleSet(eligibilityRuleSet);case 20:_context3.t0=_context3.sent;case 21:if(!_context3.t0){_context3.next=55;break;}treatmentSkipRatio=weight===100?0:100-weight||TREATMENT_RATIO;robotEngine_logger.log("Treatment skip ratio: "+treatmentSkipRatio);// Determining identifier for calculating treatment percentage (treatmentPct)
determiningIdentifier=dependant_on_treatment||id;// treatmentPct is the percentage value for the treatment used to determine if it should be skipped or not
// treatmentPct is 100 when debug mode is 1, ensuring no treatments are skipped
if(!(debugMode===1)){_context3.next=29;break;}_context3.t1=100;_context3.next=32;break;case 29:_context3.next=31;return determinePct(identifier+determiningIdentifier);case 31:_context3.t1=_context3.sent;case 32:treatmentPct=_context3.t1;robotEngine_logger.log("TreatmentPct: "+treatmentPct+" with debug mode ".concat(debugMode?"on":"off"));businessRuleId=null;if(!businessRuleSet){_context3.next=41;break;}robotEngine_logger.log("Starting sub variant rule set check for treatment: "+id);_context3.next=39;return this.checkBusinessRules(businessRuleSet);case 39:businessRuleId=_context3.sent;if(businessRuleId!==null){robotEngine_logger.log("Applying business rule transformation with id: ",businessRuleId);}else robotEngine_logger.log("Applying treatment with default values");case 41:if(!(treatmentPct<treatmentSkipRatio)){_context3.next=45;break;}robotEngine_logger.log("Treatment ".concat(id," skipped due to treatment split ratio"));addTreatment(id,businessRuleId,null,"skipped",dependant_on_treatment);return _context3.abrupt("return");case 45:if(delay){_context3.next=52;break;}_context3.next=48;return prepareAndApply(id,identifier,actions,businessRuleId,debugMode);case 48:_context3.next=50;return this.engageHelpers(helpers,matchedTreatments);case 50:_context3.next=53;break;case 52:setTimeout(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(){return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return prepareAndApply(id,identifier,actions,businessRuleId,debugMode);case 2:_context2.next=4;return _this.engageHelpers(helpers,matchedTreatments);case 4:case"end":return _context2.stop();}}},_callee2);})),delay);case 53:_context3.next=56;break;case 55:robotEngine_logger.failed("Rule check failed for treatment:",id);case 56:_context3.prev=56;release();this.addReapplyEvent(treatment);this.addRuleSetDataListeners(treatment);return _context3.finish(56);case 61:case"end":return _context3.stop();}}},_callee3,this,[[6,,56,61]]);}));function engageRobot(_x){return _engageRobot.apply(this,arguments);}return engageRobot;}()},{key:"engageHelpers",value:function(){var _engageHelpers=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee4(helpers,matchedTreatments){var helperRobotPromises,_iterator2,_step2,treatment;return regenerator_default().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!(Array.isArray(helpers)&&helpers.length)){_context4.next=22;break;}helperRobotPromises=[];_iterator2=robotEngine_createForOfIteratorHelper(matchedTreatments);_context4.prev=3;_iterator2.s();case 5:if((_step2=_iterator2.n()).done){_context4.next=12;break;}treatment=_step2.value;if(helpers.includes(treatment.id)){_context4.next=9;break;}return _context4.abrupt("continue",10);case 9:helperRobotPromises.push(this.engageRobot(treatment));case 10:_context4.next=5;break;case 12:_context4.next=17;break;case 14:_context4.prev=14;_context4.t0=_context4["catch"](3);_iterator2.e(_context4.t0);case 17:_context4.prev=17;_iterator2.f();return _context4.finish(17);case 20:_context4.next=22;return Promise.all(helperRobotPromises);case 22:case"end":return _context4.stop();}}},_callee4,this,[[3,14,17,20]]);}));function engageHelpers(_x2,_x3){return _engageHelpers.apply(this,arguments);}return engageHelpers;}()},{key:"prepareAndApply",value:function(){var _prepareAndApply=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee5(id,identifier,actions,businessRuleId,debugMode){var _yield$prepareActions,_yield$prepareActions2,prepared,variant,res;return regenerator_default().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return prepareActions(identifier,actions,businessRuleId,debugMode);case 2:_yield$prepareActions=_context5.sent;_yield$prepareActions2=_slicedToArray(_yield$prepareActions,2);prepared=_yield$prepareActions2[0];variant=_yield$prepareActions2[1];_context5.next=8;return BeagleApplyActions(prepared);case 8:res=_context5.sent;if(res===false){addTreatment(id,businessRuleId,variant,"failed");}else{addTreatment(id,businessRuleId,variant,"applied");}case 10:case"end":return _context5.stop();}}},_callee5);}));function prepareAndApply(_x4,_x5,_x6,_x7,_x8){return _prepareAndApply.apply(this,arguments);}return prepareAndApply;}()},{key:"addReapplyEvent",value:function addReapplyEvent(treatment){var pageType=this.pageType,reApplyTreatmentsMap=this.reApplyTreatmentsMap;var id=treatment.id,reapply_event=treatment.reapply_event,reapply_event_page_type=treatment.reapply_event_page_type;if(reapply_event){if(!reapply_event_page_type||reapply_event_page_type===pageType){var reapply_event_array=reapply_event;if(!Array.isArray(reapply_event))reapply_event_array=[reapply_event];robotEngine_logger.log("Reapply event '".concat(reapply_event,"' found for treatment: ").concat(id));var _iterator3=robotEngine_createForOfIteratorHelper(reapply_event_array),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var reapplyEvent=_step3.value;var previousValue=reApplyTreatmentsMap[reapplyEvent]?reApplyTreatmentsMap[reapplyEvent]:[];if(previousValue.includes(id)){robotEngine_logger.log("Treatment already added for reapply event");}else reApplyTreatmentsMap[reapplyEvent]=[].concat(_toConsumableArray(previousValue),[id]);}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}}}}},{key:"initiateReapplyRobotMap",value:function initiateReapplyRobotMap(){var _this2=this;var reApplyTreatmentsMap=this.reApplyTreatmentsMap,matchedTreatments=this.matchedTreatments;var _loop=function _loop(){var key=_Object$keys[_i];var treatmentIds=reApplyTreatmentsMap[key];var reApplyTreatments=matchedTreatments.filter(function(t){return treatmentIds.includes(t.id);});switch(key){case"infinite_scroll":{var observer=new ResizeObserver(function(){var _iterator4=robotEngine_createForOfIteratorHelper(reApplyTreatments),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var treatment=_step4.value;robotEngine_logger.log("Retrying treatment ".concat(treatment.id," from infinite_scroll"));_this2.engageRobot(treatment);}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}});observer.observe(window.top.document.documentElement);}break;case"timeout":{setTimeout(function(){var _iterator5=robotEngine_createForOfIteratorHelper(reApplyTreatments),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var treatment=_step5.value;robotEngine_logger.log("Retrying treatment ".concat(treatment.id," from timeout"));_this2.engageRobot(treatment);}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}},500);}break;case"element_change":{var _iterator6=robotEngine_createForOfIteratorHelper(reApplyTreatments),_step6;try{var _loop2=function _loop2(){var treatment=_step6.value;var reapplySelectorList=Array.isArray(treatment.reapply_selector)?treatment.reapply_selector:[treatment.reapply_selector];var _iterator7=robotEngine_createForOfIteratorHelper(reapplySelectorList),_step7;try{for(_iterator7.s();!(_step7=_iterator7.n()).done;){var selector=_step7.value;var element=window.top.document.querySelector(selector);if(element){var _observer=new MutationObserver(function(){robotEngine_logger.log("Retrying treatment ".concat(treatment.id," from element_change"));_this2.engageRobot(treatment);});_observer.observe(element,OBSERVER_CONFIG);}}}catch(err){_iterator7.e(err);}finally{_iterator7.f();}};for(_iterator6.s();!(_step6=_iterator6.n()).done;){_loop2();}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}}break;case"on_scroll":{// add window scroll listener, call engageRobot on scroll, do not trigger more than once per 250ms
var lastScrollTop=0;var lastScrollTime=0;window.addEventListener("scroll",function(){var now=new Date().getTime();var st=window.pageYOffset||window.top.document.documentElement.scrollTop;if(now-lastScrollTime>250&&Math.abs(lastScrollTop-st)>5){lastScrollTop=st;lastScrollTime=now;var _iterator8=robotEngine_createForOfIteratorHelper(reApplyTreatments),_step8;try{for(_iterator8.s();!(_step8=_iterator8.n()).done;){var treatment=_step8.value;robotEngine_logger.log("Retrying treatment ".concat(treatment.id," from on_scroll"));_this2.engageRobot(treatment);}}catch(err){_iterator8.e(err);}finally{_iterator8.f();}}},false);}break;case"query_search_change":{var queryString=window.location.search;var _observer2=new MutationObserver(function(){if(window.location.search!==queryString){queryString=window.location.search;var _iterator9=robotEngine_createForOfIteratorHelper(reApplyTreatments),_step9;try{for(_iterator9.s();!(_step9=_iterator9.n()).done;){var treatment=_step9.value;robotEngine_logger.log("Retrying treatment ".concat(treatment.id," from query_search_change"));_this2.engageRobot(treatment);}}catch(err){_iterator9.e(err);}finally{_iterator9.f();}}});_observer2.observe(document,OBSERVER_CONFIG);}break;case"interval":var _iterator10=robotEngine_createForOfIteratorHelper(reApplyTreatments),_step10;try{var _loop3=function _loop3(){var treatment=_step10.value;var reapplyInterval=setInterval(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee6(){var applied;return regenerator_default().wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return getFromBeagleInfoLayer("a",true);case 2:applied=_context6.sent;if(!(applied!==null&&applied!==void 0&&applied[treatment.id])){_context6.next=7;break;}clearInterval(reapplyInterval);_context6.next=10;break;case 7:robotEngine_logger.log("Retrying treatment ".concat(treatment.id," from interval"));_context6.next=10;return _this2.engageRobot(treatment);case 10:case"end":return _context6.stop();}}},_callee6);})),50);setTimeout(function(){clearInterval(reapplyInterval);},2500);};for(_iterator10.s();!(_step10=_iterator10.n()).done;){_loop3();}}catch(err){_iterator10.e(err);}finally{_iterator10.f();}break;case"info_layer_change":var _iterator11=robotEngine_createForOfIteratorHelper(reApplyTreatments),_step11;try{for(_iterator11.s();!(_step11=_iterator11.n()).done;){var treatment=_step11.value;var boundEngageTreatment=_this2.engageRobot.bind(_this2,treatment);addDataListener(treatment.reapply_selector,boundEngageTreatment);}}catch(err){_iterator11.e(err);}finally{_iterator11.f();}break;default:robotEngine_logger.failed("Reapply event not found: ",key);break;}};for(var _i=0,_Object$keys=Object.keys(reApplyTreatmentsMap);_i<_Object$keys.length;_i++){_loop();}}},{key:"addRuleSetDataListeners",value:function(){var _addRuleSetDataListeners=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee7(treatment){var _treatment$eligibilit,eligibilityRuleSet,_treatment$businessRu,businessRuleSet,id,selectors,boundEngageTreatment,_iterator12,_step12,selector;return regenerator_default().wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_treatment$eligibilit=treatment.eligibilityRuleSet,eligibilityRuleSet=_treatment$eligibilit===void 0?[]:_treatment$eligibilit,_treatment$businessRu=treatment.businessRuleSet,businessRuleSet=_treatment$businessRu===void 0?[]:_treatment$businessRu,id=treatment.id;if(!this.addedDataListenerIds.includes(id)){_context7.next=3;break;}return _context7.abrupt("return");case 3:selectors=this.extractDataListenerSelectors([].concat(_toConsumableArray(eligibilityRuleSet),_toConsumableArray(businessRuleSet)));boundEngageTreatment=this.engageRobot.bind(this,treatment);_iterator12=robotEngine_createForOfIteratorHelper(selectors);try{for(_iterator12.s();!(_step12=_iterator12.n()).done;){selector=_step12.value;addDataListener("__eRules.".concat(selector),boundEngageTreatment);}}catch(err){_iterator12.e(err);}finally{_iterator12.f();}this.addedDataListenerIds.push(id);case 8:case"end":return _context7.stop();}}},_callee7,this);}));function addRuleSetDataListeners(_x9){return _addRuleSetDataListeners.apply(this,arguments);}return addRuleSetDataListeners;}()},{key:"extractDataListenerSelectors",value:function extractDataListenerSelectors(ruleSet){var previousSelectors=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var selectors=previousSelectors||[];var _iterator13=robotEngine_createForOfIteratorHelper(ruleSet),_step13;try{for(_iterator13.s();!(_step13=_iterator13.n()).done;){var rule=_step13.value;if(typeof rule==="string"){if(rule.startsWith("!"))rule=rule.slice(1);selectors.push(rule.split(".")[0]);continue;}this.extractDataListenerSelectors(rule.set,selectors);}}catch(err){_iterator13.e(err);}finally{_iterator13.f();}return _toConsumableArray(new Set(selectors));}},{key:"checkEligibility",value:function(){var _checkEligibility=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee8(eligibilityRule){var oppositeFlag,_eligibilityRule$spli,_eligibilityRule$spli2,eligibilityScope,eligibilityName,res;return regenerator_default().wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:robotEngine_logger.log("Checking eligibility ".concat(eligibilityRule));oppositeFlag=false;_eligibilityRule$spli=eligibilityRule.split("."),_eligibilityRule$spli2=_slicedToArray(_eligibilityRule$spli,2),eligibilityScope=_eligibilityRule$spli2[0],eligibilityName=_eligibilityRule$spli2[1];if(eligibilityScope.startsWith("!")){oppositeFlag=true;eligibilityScope=eligibilityScope.slice(1);}_context8.next=6;return getFromBeagleInfoLayer("__eRules.".concat(eligibilityScope));case 6:res=_context8.sent;if(!(!res||!Array.isArray(res))){_context8.next=9;break;}return _context8.abrupt("return",false);case 9:if(!(oppositeFlag&&res.includes(eligibilityName))){_context8.next=11;break;}return _context8.abrupt("return",false);case 11:if(!(!oppositeFlag&&!res.includes(eligibilityName))){_context8.next=13;break;}return _context8.abrupt("return",false);case 13:robotEngine_logger.log("".concat(eligibilityRule," is eligible"));return _context8.abrupt("return",true);case 15:case"end":return _context8.stop();}}},_callee8);}));function checkEligibility(_x10){return _checkEligibility.apply(this,arguments);}return checkEligibility;}()},{key:"checkEligibilityRuleSet",value:function(){var _checkEligibilityRuleSet=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee9(eligibilityRuleSet){var eligibilitySetType,previousIsEligible,isEligible,_iterator14,_step14,eligibilityRule,_args9=arguments;return regenerator_default().wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:eligibilitySetType=_args9.length>1&&_args9[1]!==undefined?_args9[1]:null;previousIsEligible=_args9.length>2&&_args9[2]!==undefined?_args9[2]:null;robotEngine_logger.log("Checking robot eligibility");if(Array.isArray(eligibilityRuleSet)){_context9.next=6;break;}robotEngine_logger.failed("Eligibility Rule Set ".concat(eligibilityRuleSet," is not an array"));return _context9.abrupt("return",false);case 6:isEligible=previousIsEligible;_iterator14=robotEngine_createForOfIteratorHelper(eligibilityRuleSet);_context9.prev=8;_iterator14.s();case 10:if((_step14=_iterator14.n()).done){_context9.next=57;break;}eligibilityRule=_step14.value;if(!(typeof eligibilityRule==="string")){_context9.next=49;break;}if(eligibilitySetType){_context9.next=21;break;}_context9.next=16;return this.checkEligibility(eligibilityRule);case 16:isEligible=_context9.sent;if(isEligible){_context9.next=19;break;}return _context9.abrupt("return",false);case 19:_context9.next=47;break;case 21:if(!eligibilitySetType){_context9.next=47;break;}if(!(isEligible===null)){_context9.next=27;break;}_context9.next=25;return this.checkEligibility(eligibilityRule);case 25:isEligible=_context9.sent;return _context9.abrupt("continue",55);case 27:_context9.t0=eligibilitySetType;_context9.next=_context9.t0==="or"?30:_context9.t0==="and"?37:44;break;case 30:_context9.t1=isEligible;if(_context9.t1){_context9.next=35;break;}_context9.next=34;return this.checkEligibility(eligibilityRule,eligibilitySetType);case 34:_context9.t1=_context9.sent;case 35:isEligible=_context9.t1;return _context9.abrupt("break",47);case 37:_context9.t2=isEligible;if(!_context9.t2){_context9.next=42;break;}_context9.next=41;return this.checkEligibility(eligibilityRule,eligibilitySetType);case 41:_context9.t2=_context9.sent;case 42:isEligible=_context9.t2;return _context9.abrupt("break",47);case 44:robotEngine_logger.failed("Unknown eligibilitySetType: ",eligibilitySetType);isEligible=false;return _context9.abrupt("break",47);case 47:_context9.next=55;break;case 49:if(!(_typeof(eligibilityRule)==="object")){_context9.next=55;break;}_context9.next=52;return this.checkEligibilityRuleSet(eligibilityRule.set,eligibilityRule.type,isEligible);case 52:isEligible=_context9.sent;if(isEligible){_context9.next=55;break;}return _context9.abrupt("return",false);case 55:_context9.next=10;break;case 57:_context9.next=62;break;case 59:_context9.prev=59;_context9.t3=_context9["catch"](8);_iterator14.e(_context9.t3);case 62:_context9.prev=62;_iterator14.f();return _context9.finish(62);case 65:return _context9.abrupt("return",isEligible);case 66:case"end":return _context9.stop();}}},_callee9,this,[[8,59,62,65]]);}));function checkEligibilityRuleSet(_x11){return _checkEligibilityRuleSet.apply(this,arguments);}return checkEligibilityRuleSet;}()// Return index of businessRule, this is the businessRuleId
},{key:"checkBusinessRules",value:function(){var _checkBusinessRules=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee10(businessRuleSet){var _iterator15,_step15,_step15$value,index,businessRule;return regenerator_default().wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:_iterator15=robotEngine_createForOfIteratorHelper(businessRuleSet.entries());_context10.prev=1;_iterator15.s();case 3:if((_step15=_iterator15.n()).done){_context10.next=11;break;}_step15$value=_slicedToArray(_step15.value,2),index=_step15$value[0],businessRule=_step15$value[1];_context10.next=7;return this.checkEligibilityRuleSet([businessRule]);case 7:if(!_context10.sent){_context10.next=9;break;}return _context10.abrupt("return",index);case 9:_context10.next=3;break;case 11:_context10.next=16;break;case 13:_context10.prev=13;_context10.t0=_context10["catch"](1);_iterator15.e(_context10.t0);case 16:_context10.prev=16;_iterator15.f();return _context10.finish(16);case 19:return _context10.abrupt("return",null);case 20:case"end":return _context10.stop();}}},_callee10,this,[[1,13,16,19]]);}));function checkBusinessRules(_x12){return _checkBusinessRules.apply(this,arguments);}return checkBusinessRules;}()}]);return RobotEngine;}();;// CONCATENATED MODULE: ./src/BeagleRuleEngine/dataLayerChecker.js
var dataLayerChecker_logger=new src_logger("BeagleInfoLayerChecker");var checkDataLayerRule=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(rule){var operator,condition,value,runtimeValue;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dataLayerChecker_logger.log("Checking rule",JSON.stringify(rule));operator=rule.operator,condition=rule.condition,value=rule.value;_context.next=4;return dataLayerFinder(operator);case 4:runtimeValue=_context.sent;return _context.abrupt("return",conditionChecker(runtimeValue,condition,value));case 6:case"end":return _context.stop();}}},_callee);}));return function checkDataLayerRule(_x){return _ref.apply(this,arguments);};}();var dataLayerFinder=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(key){var res;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dataLayerChecker_logger.log("Searching beagleInfoLayer for key ",key);_context2.next=3;return getFromBeagleInfoLayer(key);case 3:res=_context2.sent;if(!(res!==null&&res!==undefined)){_context2.next=7;break;}dataLayerChecker_logger.success("Found key ".concat(key," with value ").concat(res));return _context2.abrupt("return",res);case 7:dataLayerChecker_logger.failed("Key ".concat(key," not found in beagleInfoLayer"));return _context2.abrupt("return",null);case 9:case"end":return _context2.stop();}}},_callee2);}));return function dataLayerFinder(_x2){return _ref2.apply(this,arguments);};}();;// CONCATENATED MODULE: ./src/BeagleRuleEngine/elementChecker.js
var elementChecker_logger=new src_logger("BeagleElementChecker");var checkElementRule=function checkElementRule(rule){elementChecker_logger.log("Checking rule",JSON.stringify(rule));var operator=rule.operator,condition=rule.condition,value=rule.value,selector=rule.selector,selectorAll=rule.selectorAll,_rule$selectorFallbac=rule.selectorFallback,selectorFallback=_rule$selectorFallbac===void 0?null:_rule$selectorFallbac;var mainSelector=selector;if(mainSelector&&!window.top.document.querySelector(mainSelector)){mainSelector=selectorFallback?selectorFallback:mainSelector;}if(operator===null){return conditionChecker(window.top.document.querySelector(mainSelector),condition,value);}if(mainSelector&&!window.top.document.querySelector(mainSelector)){elementChecker_logger.failed("Selector not found on page");return false;}if(selectorAll&&!window.top.document.querySelectorAll(selectorAll)){elementChecker_logger.failed("Selector not found on page");return false;}var element;if(mainSelector)element=window.top.document.querySelector(mainSelector);else if(selectorAll)element=Array.from(window.top.document.querySelectorAll(selectorAll));switch(operator){case"text-number":{var tempVal;if(Array.isArray(element)){tempVal=element.reduce(function(returnVal,elem){returnVal+=parseInt(elem.textContent.replace("TL","").replace(".",""));return returnVal;},0);}else{tempVal=parseInt(window.top.document.querySelector(mainSelector).textContent.replace("TL","").replace(".",""));}var runTimeValue=parseInt(tempVal);return conditionChecker(runTimeValue,condition,value);}case"classList":return conditionChecker(Array.from(element.classList),condition,value);case"count":{if(Array.isArray(element)&&element.length>0){return conditionChecker(element.length,condition,value);}else if(element){return conditionChecker(1,condition,value);}else{return conditionChecker(0,condition,value);}}case"style":{var elementStyles=getComputedStyle(element);var styleKey=value.split(":")[0].trim();var styleValue=value.split(":")[1].trim();var _runTimeValue=elementStyles[styleKey];return conditionChecker(_runTimeValue,condition,styleValue);}default:elementChecker_logger.failed("Operator not defined");return false;}};;// CONCATENATED MODULE: ./src/BeagleRuleEngine/functionChecker.js
var functionChecker_logger=new src_logger("BeagleFunctionChecker");var checkFunctionRule=function checkFunctionRule(rule){functionChecker_logger.log("Checking rule",JSON.stringify(rule));var operator=rule.operator,condition=rule.condition,value=rule.value;if(!operator){functionChecker_logger.failed("Rule function not defined");return false;}var ruleFunction=Function(operator);var runtimeValue=ruleFunction();return conditionChecker(runtimeValue,condition,value);};;// CONCATENATED MODULE: ./src/BeagleRuleEngine/sessionChecker.js
var sessionChecker_logger=new src_logger("BeagleSessionChecker");var checkSessionRule=function checkSessionRule(rule){sessionChecker_logger.log("Checking rule",JSON.stringify(rule));var operator=rule.operator,condition=rule.condition,value=rule.value;switch(operator){case"duration":return durationHandler(condition,value);case"history":return historyHandler(condition,value);default:return null;}};var getSessionTimestamp=function getSessionTimestamp(){try{return new Date(parseInt(window.sessionStorage.getItem(SESSION_STORAGE_KEYS.SESSION_TIMESTAMP)));}catch(err){sessionChecker_logger.failed("Could not get session timestamp",err);return Date.now();}};var durationHandler=function durationHandler(condition,value){var duration=(Date.now()-getSessionTimestamp())/1000;return conditionChecker(duration,condition,parseInt(value));};var historyHandler=function historyHandler(condition,value){var _window$sessionStorag;var currentHistory=(_window$sessionStorag=window.sessionStorage.getItem(SESSION_STORAGE_KEYS.SESSION_HISTORY))===null||_window$sessionStorag===void 0?void 0:_window$sessionStorag.split(",");return conditionChecker(currentHistory,condition,value);};;// CONCATENATED MODULE: ./src/BeagleRuleEngine/urlChecker.js
var urlChecker_logger=new src_logger("BeagleUrlChecker");var checkUrlRule=function checkUrlRule(rule){urlChecker_logger.log("Checking rule",JSON.stringify(rule));var operator=rule.operator,condition=rule.condition,value=rule.value;switch(operator){case"path":{var requestURL=window.top.location.href;var path=new URL(requestURL).pathname;urlChecker_logger.log("Checking path ".concat(path," matches rule path ").concat(value));return conditionChecker(path,condition,value);}case"PLACEHOLDER":{return null;}default:return null;}};;// CONCATENATED MODULE: ./src/BeagleRuleEngine/envChecker.js
var envChecker_logger=new src_logger("BeagleEnvChecker");var checkEnvRule=function checkEnvRule(rule){envChecker_logger.log("Checking rule",JSON.stringify(rule));var operator=rule.operator,condition=rule.condition,value=rule.value;switch(operator){case"device_type":{var isMobile=window.matchMedia(MOBILE_MEDIA_QUERY).matches?"mobile":"desktop";return conditionChecker(isMobile,condition,value);}case"PLACEHOLDER":{return null;}default:return null;}};;// CONCATENATED MODULE: ./src/BeagleRuleEngine/productInfoChecker.js
var productInfoChecker_logger=new src_logger("BeagleProductInfoChecker");var checkProductInfoRule=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(rule){var _skuList$Object$keys$;var operator,condition,value,skuList,runtimeValue,sku;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:productInfoChecker_logger.log("Checking rule",JSON.stringify(rule));operator=rule.operator,condition=rule.condition,value=rule.value;_context.next=4;return getFromBeagleInfoLayer("__features.SKUsonPage",true);case 4:skuList=_context.sent;if(!(!skuList||_typeof(skuList)==="object"&&!Object.keys(skuList).length)){_context.next=7;break;}return _context.abrupt("return",false);case 7:runtimeValue=null;sku=(_skuList$Object$keys$=skuList[Object.keys(skuList)[0]])===null||_skuList$Object$keys$===void 0?void 0:_skuList$Object$keys$.id;_context.t0=operator;_context.next=_context.t0==="transactionIn2Weeks"?12:_context.t0==="addToCartIn2Weeks"?17:_context.t0==="productViewCount"?22:27;break;case 12:productInfoChecker_logger.log("Getting TransactionCount for sku ",sku);_context.next=15;return getTransactionCount(sku);case 15:runtimeValue=_context.sent;return _context.abrupt("break",27);case 17:productInfoChecker_logger.log("Getting AddToCartCount for sku ",sku);_context.next=20;return getAddToCartCount(sku);case 20:runtimeValue=_context.sent;return _context.abrupt("break",27);case 22:productInfoChecker_logger.log("Getting productViewCount for sku ",sku);_context.next=25;return getPreviewCount(sku);case 25:runtimeValue=_context.sent;return _context.abrupt("break",27);case 27:return _context.abrupt("return",conditionChecker(runtimeValue,condition,value));case 28:case"end":return _context.stop();}}},_callee);}));return function checkProductInfoRule(_x){return _ref.apply(this,arguments);};}();var getTransactionCount=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(sku){var productInfo;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return store.getInstance().get(sku);case 2:productInfo=_context2.sent;if(!(sku&&productInfo)){_context2.next=5;break;}return _context2.abrupt("return",productInfo.saleCntVisitorsIn15);case 5:return _context2.abrupt("return",-1);case 6:case"end":return _context2.stop();}}},_callee2);}));return function getTransactionCount(_x2){return _ref2.apply(this,arguments);};}();var getAddToCartCount=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(sku){var productInfo;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return store.getInstance().get(sku);case 2:productInfo=_context3.sent;if(!(sku&&productInfo)){_context3.next=5;break;}return _context3.abrupt("return",productInfo.cartCntVisitorsIn15);case 5:return _context3.abrupt("return",-1);case 6:case"end":return _context3.stop();}}},_callee3);}));return function getAddToCartCount(_x3){return _ref3.apply(this,arguments);};}();var getPreviewCount=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee4(sku){var productInfo;return regenerator_default().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return store.getInstance().get(sku);case 2:productInfo=_context4.sent;if(!(sku&&productInfo)){_context4.next=5;break;}return _context4.abrupt("return",productInfo.viewCntVisitorsIn1);case 5:return _context4.abrupt("return",-1);case 6:case"end":return _context4.stop();}}},_callee4);}));return function getPreviewCount(_x4){return _ref4.apply(this,arguments);};}();;// CONCATENATED MODULE: ./src/BeagleRuleEngine/index.js
function BeagleRuleEngine_createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=BeagleRuleEngine_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function BeagleRuleEngine_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return BeagleRuleEngine_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return BeagleRuleEngine_arrayLikeToArray(o,minLen);}function BeagleRuleEngine_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}var BeagleRuleEngine_logger=new src_logger("BeagleRuleEngine");var RuleEngine=/*#__PURE__*/function(){function RuleEngine(body){_classCallCheck(this,RuleEngine);var eligibilityRules=body.eligibilityRules,baseRuleSet=body.baseRuleSet;this.baseRuleSet=baseRuleSet;this.eligibilityRules=eligibilityRules;this.addedDataListeners=[];this.mutex=new Mutex();}_createClass(RuleEngine,[{key:"checkRules",value:function(){var _checkRules=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(){var _iterator,_step,rule,ruleSatisfied;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_iterator=BeagleRuleEngine_createForOfIteratorHelper(this.baseRuleSet);_context.prev=1;_iterator.s();case 3:if((_step=_iterator.n()).done){_context.next=12;break;}rule=_step.value;_context.next=7;return this.checkRule(rule);case 7:ruleSatisfied=_context.sent;if(ruleSatisfied){_context.next=10;break;}return _context.abrupt("return",false);case 10:_context.next=3;break;case 12:_context.next=17;break;case 14:_context.prev=14;_context.t0=_context["catch"](1);_iterator.e(_context.t0);case 17:_context.prev=17;_iterator.f();return _context.finish(17);case 20:return _context.abrupt("return",true);case 21:case"end":return _context.stop();}}},_callee,this,[[1,14,17,20]]);}));function checkRules(){return _checkRules.apply(this,arguments);}return checkRules;}()},{key:"checkRule",value:function(){var _checkRule=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(rule){var chain,chain_condition,type,ruleSatisfied;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:chain=rule.chain,chain_condition=rule.chain_condition,type=rule.type;ruleSatisfied=null;// check rule
_context2.t0=type;_context2.next=_context2.t0==="session"?5:_context2.t0==="element"?7:_context2.t0==="dataLayer"?9:_context2.t0==="url"?13:_context2.t0==="function"?15:_context2.t0==="environment"?17:_context2.t0==="productInfoLookup"?19:23;break;case 5:ruleSatisfied=checkSessionRule(rule);return _context2.abrupt("break",25);case 7:ruleSatisfied=checkElementRule(rule);return _context2.abrupt("break",25);case 9:_context2.next=11;return checkDataLayerRule(rule);case 11:ruleSatisfied=_context2.sent;return _context2.abrupt("break",25);case 13:ruleSatisfied=checkUrlRule(rule);return _context2.abrupt("break",25);case 15:ruleSatisfied=checkFunctionRule(rule);return _context2.abrupt("break",25);case 17:ruleSatisfied=checkEnvRule(rule);return _context2.abrupt("break",25);case 19:_context2.next=21;return checkProductInfoRule(rule);case 21:ruleSatisfied=_context2.sent;return _context2.abrupt("break",25);case 23:BeagleRuleEngine_logger.failed("No such rule type: ".concat(type));return _context2.abrupt("return",null);case 25:if(!chain){_context2.next=51;break;}_context2.t1=chain_condition;_context2.next=_context2.t1==="and"?29:_context2.t1==="or"?36:_context2.t1==="xor"?43:49;break;case 29:_context2.t2=ruleSatisfied;if(!_context2.t2){_context2.next=34;break;}_context2.next=33;return this.checkRule(chain);case 33:_context2.t2=_context2.sent;case 34:ruleSatisfied=_context2.t2;return _context2.abrupt("break",51);case 36:_context2.t3=ruleSatisfied;if(_context2.t3){_context2.next=41;break;}_context2.next=40;return this.checkRule(chain);case 40:_context2.t3=_context2.sent;case 41:ruleSatisfied=_context2.t3;return _context2.abrupt("break",51);case 43:_context2.t4=ruleSatisfied;_context2.next=46;return this.checkRule(chain);case 46:_context2.t5=_context2.sent;ruleSatisfied=_context2.t4!=_context2.t5;return _context2.abrupt("break",51);case 49:BeagleRuleEngine_logger.failed("No such chain condition");return _context2.abrupt("break",51);case 51:return _context2.abrupt("return",ruleSatisfied?rule.name||true:false);case 52:case"end":return _context2.stop();}}},_callee2,this);}));function checkRule(_x){return _checkRule.apply(this,arguments);}return checkRule;}()},{key:"assesEligibilityRules",value:function(){var _assesEligibilityRules=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(){var keyPromisesMap,_i,_Object$entries,_Object$entries$_i,key,rules,_iterator2,_step2,rule,_i2,_Object$entries2,_Object$entries2$_i,_key,rulePromises,satisfiedRuleIds;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:addToBeagleInfoLayer("m","assessing-eligibility-rules");keyPromisesMap={};for(_i=0,_Object$entries=Object.entries(this.eligibilityRules);_i<_Object$entries.length;_i++){_Object$entries$_i=_slicedToArray(_Object$entries[_i],2),key=_Object$entries$_i[0],rules=_Object$entries$_i[1];keyPromisesMap[key]=[];_iterator2=BeagleRuleEngine_createForOfIteratorHelper(rules);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){rule=_step2.value;keyPromisesMap[key].push(this.checkRule(rule));}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}_i2=0,_Object$entries2=Object.entries(keyPromisesMap);case 4:if(!(_i2<_Object$entries2.length)){_context3.next=14;break;}_Object$entries2$_i=_slicedToArray(_Object$entries2[_i2],2),_key=_Object$entries2$_i[0],rulePromises=_Object$entries2$_i[1];_context3.next=8;return Promise.all(rulePromises);case 8:satisfiedRuleIds=_context3.sent;addToBeagleInfoLayer("__eRules.".concat(_key),satisfiedRuleIds.filter(function(id){return id!==false;}));this.setUpListeners(_key,this.eligibilityRules[_key]);case 11:_i2++;_context3.next=4;break;case 14:case"end":return _context3.stop();}}},_callee3,this);}));function assesEligibilityRules(){return _assesEligibilityRules.apply(this,arguments);}return assesEligibilityRules;}()},{key:"assesEligibilityRulesCallBack",value:function(){var _assesEligibilityRulesCallBack=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee4(key,rules){var _this=this;var release,_iterator3,_step3,_loop,_ret;return regenerator_default().wrap(function _callee4$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(!(!key||!rules||!rules.length)){_context5.next=2;break;}return _context5.abrupt("return");case 2:_context5.next=4;return this.mutex.acquire();case 4:release=_context5.sent;BeagleRuleEngine_logger.log("Lock acquired for key ".concat(key));_context5.prev=6;_iterator3=BeagleRuleEngine_createForOfIteratorHelper(rules);_context5.prev=8;_loop=/*#__PURE__*/regenerator_default().mark(function _loop(){var rule,isEligible,current,filtered;return regenerator_default().wrap(function _loop$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:rule=_step3.value;_context4.next=3;return _this.checkRule(rule);case 3:isEligible=_context4.sent;_context4.next=6;return getFromBeagleInfoLayer("__eRules.".concat(key));case 6:_context4.t0=_context4.sent;if(_context4.t0){_context4.next=9;break;}_context4.t0=[];case 9:current=_context4.t0;if(!isEligible){_context4.next=19;break;}if(!current.includes(rule.name)){_context4.next=13;break;}return _context4.abrupt("return","continue");case 13:current.push(rule.name);addToBeagleInfoLayer("__eRules.".concat(key),current);if(!(key==="PageType")){_context4.next=17;break;}return _context4.abrupt("return","break");case 17:_context4.next=23;break;case 19:if(current.includes(rule.name)){_context4.next=21;break;}return _context4.abrupt("return","continue");case 21:filtered=current.filter(function(k){return k!==rule.name;});addToBeagleInfoLayer("__eRules.".concat(key),filtered);case 23:case"end":return _context4.stop();}}},_loop);});_iterator3.s();case 11:if((_step3=_iterator3.n()).done){_context5.next=20;break;}return _context5.delegateYield(_loop(),"t0",13);case 13:_ret=_context5.t0;if(!(_ret==="continue")){_context5.next=16;break;}return _context5.abrupt("continue",18);case 16:if(!(_ret==="break")){_context5.next=18;break;}return _context5.abrupt("break",20);case 18:_context5.next=11;break;case 20:_context5.next=25;break;case 22:_context5.prev=22;_context5.t1=_context5["catch"](8);_iterator3.e(_context5.t1);case 25:_context5.prev=25;_iterator3.f();return _context5.finish(25);case 28:_context5.next=33;break;case 30:_context5.prev=30;_context5.t2=_context5["catch"](6);BeagleRuleEngine_logger.failed("Error assessing rules for key: ".concat(key," - ").concat(_context5.t2.message));case 33:_context5.prev=33;BeagleRuleEngine_logger.log("Releasing lock for key: ".concat(key));release();return _context5.finish(33);case 37:case"end":return _context5.stop();}}},_callee4,this,[[6,30,33,37],[8,22,25,28]]);}));function assesEligibilityRulesCallBack(_x2,_x3){return _assesEligibilityRulesCallBack.apply(this,arguments);}return assesEligibilityRulesCallBack;}()},{key:"setUpListeners",value:function(){var _setUpListeners=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee5(key,rules){var _this2=this;var _this$extractRuleAttr,dataLayerRules,elementRules,_i3,_Object$entries3,_Object$entries3$_i,operator,_rules,boundAssesEligibilityRulesCallBack,_loop2,_i4,_Object$entries4;return regenerator_default().wrap(function _callee5$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_this$extractRuleAttr=this.extractRuleAttributes(rules),dataLayerRules=_this$extractRuleAttr.dataLayerRules,elementRules=_this$extractRuleAttr.elementRules;for(_i3=0,_Object$entries3=Object.entries(dataLayerRules);_i3<_Object$entries3.length;_i3++){_Object$entries3$_i=_slicedToArray(_Object$entries3[_i3],2),operator=_Object$entries3$_i[0],_rules=_Object$entries3$_i[1];boundAssesEligibilityRulesCallBack=this.assesEligibilityRulesCallBack.bind(this,key,_rules);addDataListener(operator,boundAssesEligibilityRulesCallBack);}_loop2=function _loop2(){var _Object$entries4$_i=_slicedToArray(_Object$entries4[_i4],2),selector=_Object$entries4$_i[0],rules=_Object$entries4$_i[1];var observer=new MutationObserver(function(mutationList){if(window.top.document.readyState!=="complete")return;var nodes=[];var _iterator4=BeagleRuleEngine_createForOfIteratorHelper(mutationList),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var mutationRecord=_step4.value;nodes=[].concat(_toConsumableArray(nodes),_toConsumableArray(Array.from(mutationRecord.addedNodes)),_toConsumableArray(Array.from(mutationRecord.removedNodes)));}// exclude mutations that only update text
}catch(err){_iterator4.e(err);}finally{_iterator4.f();}if(nodes.every(function(n){return n.tagName===undefined;}))return;_this2.assesEligibilityRulesCallBack(key,rules);});if(selector==="body"){observer.observe(window.top.document.body,{subtree:true,childList:true});}else{observer.observe(window.top.document.querySelector(selector).parentNode,{subtree:true,childList:true});}};for(_i4=0,_Object$entries4=Object.entries(elementRules);_i4<_Object$entries4.length;_i4++){_loop2();}case 4:case"end":return _context6.stop();}}},_callee5,this);}));function setUpListeners(_x4,_x5){return _setUpListeners.apply(this,arguments);}return setUpListeners;}()},{key:"extractRuleAttributes",value:function extractRuleAttributes(rules){var dataLayerRules=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var elementRules=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(!rules||!rules.length)return;var _iterator5=BeagleRuleEngine_createForOfIteratorHelper(rules),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var rule=_step5.value;var type=rule.type;switch(type){case"dataLayer":if(!dataLayerRules[rule.operator]){dataLayerRules[rule.operator]=[];}dataLayerRules[rule.operator].push(rule);break;case"element":if(document.querySelector(rule.selector)){elementRules[rule.selector]=elementRules[rule.selector]?[].concat(_toConsumableArray(elementRules[rule.selector]),[rule]):[rule];break;}if(document.querySelectorAll(rule.selectorAll).length){elementRules[rule.selectorAll]=elementRules[rule.selectorAll]?[].concat(_toConsumableArray(elementRules[rule.selectorAll]),[rule]):[rule];break;}elementRules["body"]=elementRules["body"]?[].concat(_toConsumableArray(elementRules["body"]),[rule]):[rule];break;}if(rule.chain){this.extractRuleAttributes([rule.chain],dataLayerRules,elementRules);}}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}return{dataLayerRules:dataLayerRules,elementRules:elementRules};}}],[{key:"getEligibilityRules",value:function(){var _getEligibilityRules=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee6(){var eligibilityRulesObj,elapsedHours;return regenerator_default().wrap(function _callee6$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.prev=0;eligibilityRulesObj=window.localStorage.getItem(LOCAL_STORAGE_KEYS.ELIGIBILITY_RULES);if(!eligibilityRulesObj){_context7.next=8;break;}eligibilityRulesObj=JSON.parse(eligibilityRulesObj);if(!eligibilityRulesObj.timestamp){_context7.next=8;break;}elapsedHours=(Date.now()-eligibilityRulesObj.timestamp)/(1000*3600);if(!(elapsedHours<LOCAL_STORAGE_TTL_HOURS)){_context7.next=8;break;}return _context7.abrupt("return",eligibilityRulesObj.rules);case 8:_context7.next=10;return fetchEligibilityRules();case 10:eligibilityRulesObj=_context7.sent;if(eligibilityRulesObj){_context7.next=14;break;}BeagleRuleEngine_logger.failed("Failed to fetch eligibility rules");return _context7.abrupt("return",null);case 14:eligibilityRulesObj={rules:eligibilityRulesObj,timestamp:Date.now()};window.localStorage.setItem(LOCAL_STORAGE_KEYS.ELIGIBILITY_RULES,JSON.stringify(eligibilityRulesObj));return _context7.abrupt("return",eligibilityRulesObj.rules);case 19:_context7.prev=19;_context7.t0=_context7["catch"](0);BeagleRuleEngine_logger.failed("Could not get eligibility rules: ",_context7.t0.message);return _context7.abrupt("return",null);case 23:case"end":return _context7.stop();}}},_callee6,null,[[0,19]]);}));function getEligibilityRules(){return _getEligibilityRules.apply(this,arguments);}return getEligibilityRules;}()}]);return RuleEngine;}();;// CONCATENATED MODULE: ./src/BeagleOn/index.js
var BeagleOn_logger=new src_logger("BeagleOnComponent");var beagleOn=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(identifier,debugMode,pageType,treatmentWeights){var persistProductInfoPromise,eligibilityRulesAssessPromise,treatmentsPromise,searchParams,debugFilteredTreatments,treatments,treatmentRepository,matchedTreatments,robotEngine;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:persistProductInfoPromise=store.getInstance().persistProductInfo();eligibilityRulesAssessPromise=assesEligibilityRules();treatmentsPromise=BeagleTreatmentRepository.getTreatments();injectStyleSheet();initiateSessionStorages();addToBeagleInfoLayer("m","on-init");searchParams=window.location.search;debugFilteredTreatments=null;if(debugMode&&searchParams.includes("filter=")){debugFilteredTreatments=searchParams.slice(searchParams.indexOf("[")+1,searchParams.lastIndexOf("]")).split(",").map(function(item){return parseInt(item,10);});}_context.next=11;return treatmentsPromise;case 11:treatments=_context.sent;if(treatments){_context.next=15;break;}addToBeagleInfoLayer("m","no-robot-weights");throw new Error("Failed to fetch treatments/weights");case 15:BeagleOn_logger.success("Found treatments: ",treatments);addToBeagleInfoLayer("m","fetched-treatments");treatmentRepository=new BeagleTreatmentRepository({treatments:treatments,treatmentWeights:treatmentWeights});_context.next=20;return treatmentRepository.getMatchedTreatments(debugMode);case 20:matchedTreatments=_context.sent;if(!(matchedTreatments===null)){_context.next=25;break;}addToBeagleInfoLayer("m","no-user-segment");removeDocumentHide();return _context.abrupt("return");case 25:if(matchedTreatments.length){_context.next=30;break;}BeagleOn_logger.log("No treatments matched, returning without further action");addToBeagleInfoLayer("m","no-robot-matched");removeDocumentHide();return _context.abrupt("return");case 30:addToBeagleInfoLayer("m","found-matched-robots");_context.prev=31;_context.next=34;return eligibilityRulesAssessPromise;case 34:_context.next=40;break;case 36:_context.prev=36;_context.t0=_context["catch"](31);addToBeagleInfoLayer("m","no-rules-assessed");throw new Error("Could not asses eligibility rules");case 40:addToBeagleInfoLayer("m","rules-assessed");_context.prev=41;_context.next=44;return persistProductInfoPromise;case 44:_context.next=50;break;case 46:_context.prev=46;_context.t1=_context["catch"](41);addToBeagleInfoLayer("m","product-into-no-persist");throw new Error("Could not persist product info");case 50:addToBeagleInfoLayer("m","engaging-robots");robotEngine=new RobotEngine({debugFilteredTreatments:debugFilteredTreatments,debugMode:debugMode,matchedTreatments:matchedTreatments,identifier:identifier,pageType:pageType});_context.next=54;return robotEngine.engageRobots();case 54:removeDocumentHide();addToBeagleInfoLayer("m","robots-engaged");_context.t2=BeagleOn_logger;_context.next=59;return getFromBeagleInfoLayer("a");case 59:_context.t3=_context.sent;_context.t2.success.call(_context.t2,"Applied treatments: ",_context.t3);case 61:case"end":return _context.stop();}}},_callee,null,[[31,36],[41,46]]);}));return function beagleOn(_x,_x2,_x3,_x4){return _ref.apply(this,arguments);};}();function assesEligibilityRules(){return _assesEligibilityRules.apply(this,arguments);}function _assesEligibilityRules(){_assesEligibilityRules=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(){var eligibilityRules,ruleEngine;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:addToBeagleInfoLayer("m","fetching-eligibility-rules");_context2.next=3;return RuleEngine.getEligibilityRules();case 3:eligibilityRules=_context2.sent;if(eligibilityRules){_context2.next=6;break;}return _context2.abrupt("return");case 6:addToBeagleInfoLayer("m","fetched-eligibility-rules");ruleEngine=new RuleEngine({eligibilityRules:eligibilityRules});_context2.next=10;return ruleEngine.assesEligibilityRules();case 10:addToBeagleInfoLayer("m","assessed-eligibility-rules");case 11:case"end":return _context2.stop();}}},_callee2);}));return _assesEligibilityRules.apply(this,arguments);}/* harmony default export */var BeagleOn=beagleOn;;// CONCATENATED MODULE: ./src/BeagleInfoLayer/segment-computer.js
var segment_computer_logger=new src_logger("SegmentationComputer");function computeSegment(_x){return _computeSegment.apply(this,arguments);}function _computeSegment(){_computeSegment=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(treatmentWeights){var _i,_Object$keys,_treatmentWeights$seg,segment,ruleSet,segmentRuleEngine;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:segment_computer_logger.log("Determining user segment");_context.prev=1;_i=0,_Object$keys=Object.keys(treatmentWeights);case 3:if(!(_i<_Object$keys.length)){_context.next=18;break;}segment=_Object$keys[_i];ruleSet=(_treatmentWeights$seg=treatmentWeights[segment])===null||_treatmentWeights$seg===void 0?void 0:_treatmentWeights$seg.ruleSet;if(ruleSet){_context.next=8;break;}return _context.abrupt("continue",15);case 8:segmentRuleEngine=new RuleEngine({baseRuleSet:ruleSet,businessRuleSet:[]});_context.next=11;return segmentRuleEngine.checkRules();case 11:if(!_context.sent){_context.next=15;break;}segment_computer_logger.log("User segment matched: ".concat(segment));addToBeagleInfoLayer("s",segment);return _context.abrupt("return",segment);case 15:_i++;_context.next=3;break;case 18:segment_computer_logger.log("User segment not matched");return _context.abrupt("return",null);case 22:_context.prev=22;_context.t0=_context["catch"](1);segment_computer_logger.failed("Could not compute user segment");return _context.abrupt("return",null);case 26:case"end":return _context.stop();}}},_callee,null,[[1,22]]);}));return _computeSegment.apply(this,arguments);};// CONCATENATED MODULE: ./src/BeagleClientSDK/index.js
var SHUTDOWN=false;_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(){var monitor,logger,earlyLogSent,hideRemoved,_String$prototype,treatmentWeightsPromise,identifier,cookiePct,userSegment,treatmentWeights,oosReason,isLabelSent,timeoutCounter,debugMode,processAdminUser,isAdmin,isOn,pageType;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:switchToEaseOut();monitor=null;logger=new src_logger();logger.info("Beagle initializing");window.dataLayer=window.dataLayer||[];earlyLogSent=false;hideRemoved=false;_context.prev=7;/* ======================================== INIT TASKS ===================================== */addToBeagleInfoLayer("GLOV_ON","not-sent | initializing");treatmentWeightsPromise=BeagleTreatmentRepository.getTreatmentWeights();monitor=new BeagleMonitor();initializeBeagleInfoLayer();_context.next=14;return getIdentifier();case 14:identifier=_context.sent;logger.log("Found identifier: ",identifier);addToBeagleInfoLayer("cookieGaId",identifier);_context.next=19;return determinePct(identifier);case 19:cookiePct=_context.sent;addToBeagleInfoLayer("onHashPct",cookiePct);addToBeagleInfoLayer("view_epoch",Date.now()+Math.random());addToBeagleInfoLayer("v",VERSION);addToBeagleInfoLayer("sr",SPLIT_RATIO);// data-less log to detect bounces
_context.next=26;return monitor.packAndQueueArrivalLog();case 26:setTimeout(function(){removeDocumentHide();},2000);/* ================================= EARLY PRUNE OUT-OF-SCOPE ============================== */userSegment=null;treatmentWeights=null;oosReason=window.localStorage.getItem(LOCAL_STORAGE_KEYS.OUT_OF_SCOPE);if(!(oosReason!=="unsupported")){_context.next=40;break;}_context.next=33;return treatmentWeightsPromise;case 33:treatmentWeights=_context.sent;if(treatmentWeights){_context.next=37;break;}addToBeagleInfoLayer("m","no-robot-weights");throw new Error("Unable to fetch weights");case 37:_context.next=39;return computeSegment(treatmentWeights);case 39:userSegment=_context.sent;case 40:if(!(cookiePct===null||!navigator.sendBeacon||typeof navigator.sendBeacon!=="function"||typeof(String===null||String===void 0?void 0:(_String$prototype=String.prototype)===null||_String$prototype===void 0?void 0:_String$prototype.padStart)!=="function"||oosReason&&oosReason==="unsupported"||!userSegment)){_context.next=45;break;}window.dataLayer.push({event:"GLOV",GLOV_ON:"unsupported"});window.localStorage.setItem(LOCAL_STORAGE_KEYS.OUT_OF_SCOPE,"unsupported");addToBeagleInfoLayer("GLOV_ON","unsupported | device");throw new Error("unsupported-device");case 45:isLabelSent=window.localStorage.getItem(LOCAL_STORAGE_KEYS.IS_LABEL_SENT);timeoutCounter=parseInt(sessionStorage.getItem(SESSION_STORAGE_KEYS.TIMEOUT_COUNT))||0;// check if debug mode is on, also adds dbm to beagleInfoLayer and sets oosReason
debugMode=getDebugMode("employee");// if timed-out too many times for very first interactsions, make out of scope for the session
if(!(!debugMode&&!oosReason&&!isLabelSent&&timeoutCounter>MAX_TIMEOUT_PER_SESSION)){_context.next=52;break;}window.dataLayer.push({event:"GLOV",GLOV_ON:"unsupported"});addToBeagleInfoLayer("GLOV_ON","unsupported | timeout");throw new Error("max-timeout");case 52:/* =================================== ADMIN USER CHECK ==================================== */ // TODO: rename showroom logic to admin, and map vvsIsShowroom to a configurable admin param
// if admin user, make out of scope and mark as employee
processAdminUser=function processAdminUser(){window.dataLayer.push({event:"GLOV",GLOV_ON:"employee"});window.localStorage.setItem(LOCAL_STORAGE_KEYS.OUT_OF_SCOPE,"employee");window.localStorage.setItem(LOCAL_STORAGE_KEYS.IS_ADMIN,true);addToBeagleInfoLayer("GLOV_ON","employee | admin");throw new Error("admin-employee");};isAdmin=window.localStorage.getItem(LOCAL_STORAGE_KEYS.IS_ADMIN);// if not found in localStorage, check beagleInfoLayer with blocking mdoe
if(!(isAdmin===null||isAdmin===undefined)){_context.next=60;break;}_context.next=57;return getFromBeagleInfoLayer("vvsIsShowroom",true);case 57:isAdmin=_context.sent;_context.next=61;break;case 60:if(isAdmin==="false"||isAdmin===false){// async call to getFromBeagleInfoLayer, then set localStorage
getFromBeagleInfoLayer("vvsIsShowroom",true).then(function(isAdmin){if(isAdmin&&(isAdmin==="true"||isAdmin===true)){processAdminUser();}});}case 61:if(!(isAdmin&&(isAdmin==="true"||isAdmin===true))){_context.next=65;break;}processAdminUser();_context.next=72;break;case 65:if(!(isAdmin===null||isAdmin===undefined)){_context.next=71;break;}sessionStorage.setItem(SESSION_STORAGE_KEYS.TIMEOUT_COUNT,timeoutCounter+1);addToBeagleInfoLayer("GLOV_ON","not-sent | timeout");throw new Error("no-admin-status");case 71:window.localStorage.setItem(LOCAL_STORAGE_KEYS.IS_ADMIN,false);case 72:if(window.top.document.documentElement.classList.contains("glov-ease")){_context.next=76;break;}sessionStorage.setItem(SESSION_STORAGE_KEYS.TIMEOUT_COUNT,timeoutCounter+1);addToBeagleInfoLayer("GLOV_ON","not-sent | timeout");throw new Error("anti-flicker-timeout");case 76:/* ===================================== ON/OFF CHECK ====================================== */ // isOn can be true (ON), false (OFF)
isOn=null;if(!debugMode){_context.next=84;break;}logger.log("Debug mode on: all applicable treatments will be applied");isOn=true;window.dataLayer.push({event:"GLOV",GLOV_ON:"employee"});addToBeagleInfoLayer("GLOV_ON","employee | tester");_context.next=100;break;case 84:if(!(oosReason&&oosReason==="employee")){_context.next=91;break;}logger.warn("User is out of scope");// set isOn to true/false when not debugMode but out of scope i.e. nd_debug=0 for testability
isOn=cookiePct>=SPLIT_RATIO;window.dataLayer.push({event:"GLOV",GLOV_ON:"employee"});addToBeagleInfoLayer("GLOV_ON","employee | tester");_context.next=100;break;case 91:if(!oosReason){_context.next=96;break;}addToBeagleInfoLayer("GLOV_ON","not-sent | unknown");throw new Error("Unknown out of scope reason");case 96:// if greater than SPLIT_RATIO, then in ON mode
if(cookiePct>=SPLIT_RATIO){isOn=true;window.dataLayer.push({event:"GLOV",GLOV_ON:"true"});}else if(cookiePct>=SPLIT_RATIO/2){isOn=false;window.dataLayer.push({event:"GLOV",GLOV_ON:"false2"});}else{isOn=false;window.dataLayer.push({event:"GLOV",GLOV_ON:"false1"});}addToBeagleInfoLayer("isOn",isOn);window.localStorage.setItem(LOCAL_STORAGE_KEYS.IS_LABEL_SENT,true);addToBeagleInfoLayer("GLOV_ON",isOn.toString());case 100:_context.next=102;return getFromBeagleInfoLayer("PageType",true);case 102:pageType=_context.sent;if(!(pageType==="purchase")){_context.next=113;break;}_context.next=106;return getFromBeagleInfoLayer("purchase.revenue",true,50,5000);case 106:_context.next=108;return getFromBeagleInfoLayer("purchase.paymentType",true,50,5000);case 108:_context.next=110;return monitor.sendLogs(true);case 110:// if purchase is complete, do not apply any treatments on the confirmation page
SHUTDOWN=true;_context.next=114;break;case 113:// send logs when ready, start scraping and sending asyncly
monitor.sendLogs(false);case 114:earlyLogSent=true;/* ======================================= ROBOT PATHs ===================================== */if(!(isOn===true)){_context.next=119;break;}if(!SHUTDOWN){logger.log("Beagle ON Group Path");BeagleOn(identifier,debugMode,pageType,treatmentWeights);}else{logger.info("Beagle ON Group SHUTDOWN Path");removeDocumentHide();hideRemoved=true;}_context.next=126;break;case 119:if(!(isOn===false)){_context.next=125;break;}logger.info("Beagle OFF Group Path");removeDocumentHide();hideRemoved=true;_context.next=126;break;case 125:throw new Error("isOn is undefined or null");case 126:_context.next=134;break;case 128:_context.prev=128;_context.t0=_context["catch"](7);logger.warn("Beagle Early Scope-out or ERROR: ",_context.t0.message);addToBeagleInfoLayer("m",_context.t0.message);if(!earlyLogSent&&monitor)monitor.sendLogs(false);if(!hideRemoved)removeDocumentHide();case 134:case"end":return _context.stop();}}},_callee,null,[[7,128]]);}))();}();/******/})();/***/},/***/897:/***/function _(module){function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}module.exports=_arrayLikeToArray,module.exports.__esModule=true,module.exports["default"]=module.exports;/***/},/***/372:/***/function _(module){function _arrayWithHoles(arr){if(Array.isArray(arr))return arr;}module.exports=_arrayWithHoles,module.exports.__esModule=true,module.exports["default"]=module.exports;/***/},/***/690:/***/function _(module){function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}module.exports=_classCallCheck,module.exports.__esModule=true,module.exports["default"]=module.exports;/***/},/***/728:/***/function _(module,__unused_webpack_exports,__nested_webpack_require_262725__){var toPropertyKey=__nested_webpack_require_262725__(62);function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,toPropertyKey(descriptor.key),descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);Object.defineProperty(Constructor,"prototype",{writable:false});return Constructor;}module.exports=_createClass,module.exports.__esModule=true,module.exports["default"]=module.exports;/***/},/***/872:/***/function _(module){function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null!=_i){var _s,_e,_x,_r,_arr=[],_n=!0,_d=!1;try{if(_x=(_i=_i.call(arr)).next,0===i){if(Object(_i)!==_i)return;_n=!1;}else for(;!(_n=(_s=_x.call(_i)).done)&&(_arr.push(_s.value),_arr.length!==i);_n=!0){;}}catch(err){_d=!0,_e=err;}finally{try{if(!_n&&null!=_i["return"]&&(_r=_i["return"](),Object(_r)!==_r))return;}finally{if(_d)throw _e;}}return _arr;}}module.exports=_iterableToArrayLimit,module.exports.__esModule=true,module.exports["default"]=module.exports;/***/},/***/218:/***/function _(module){function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}module.exports=_nonIterableRest,module.exports.__esModule=true,module.exports["default"]=module.exports;/***/},/***/61:/***/function _(module,__unused_webpack_exports,__nested_webpack_require_264484__){var _typeof=__nested_webpack_require_264484__(698)["default"];function _regeneratorRuntime(){"use strict";/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */module.exports=_regeneratorRuntime=function _regeneratorRuntime(){return exports;},module.exports.__esModule=true,module.exports["default"]=module.exports;var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,defineProperty=Object.defineProperty||function(obj,key,desc){obj[key]=desc.value;},$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key];}try{define({},"");}catch(err){define=function define(obj,key,value){return obj[key]=value;};}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return defineProperty(generator,"_invoke",{value:makeInvokeMethod(innerFn,self,context)}),generator;}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)};}catch(err){return{type:"throw",arg:err};}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,function(){return this;});var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){["next","throw","return"].forEach(function(method){define(prototype,method,function(arg){return this._invoke(method,arg);});});}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"!==record.type){var result=record.arg,value=result.value;return value&&"object"==_typeof(value)&&hasOwn.call(value,"__await")?PromiseImpl.resolve(value.__await).then(function(value){invoke("next",value,resolve,reject);},function(err){invoke("throw",err,resolve,reject);}):PromiseImpl.resolve(value).then(function(unwrapped){result.value=unwrapped,resolve(result);},function(error){return invoke("throw",error,resolve,reject);});}reject(record.arg);}var previousPromise;defineProperty(this,"_invoke",{value:function value(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl(function(resolve,reject){invoke(method,arg,resolve,reject);});}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg();}});}function makeInvokeMethod(innerFn,self,context){var state="suspendedStart";return function(method,arg){if("executing"===state)throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult();}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult;}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg);}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done};}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg);}};}function maybeInvokeDelegate(delegate,context){var methodName=context.method,method=delegate.iterator[methodName];if(undefined===method)return context.delegate=null,"throw"===methodName&&delegate.iterator["return"]&&(context.method="return",context.arg=undefined,maybeInvokeDelegate(delegate,context),"throw"===context.method)||"return"!==methodName&&(context.method="throw",context.arg=new TypeError("The iterator does not provide a '"+methodName+"' method")),ContinueSentinel;var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=undefined),context.delegate=null,ContinueSentinel):info:(context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel);}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry);}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record;}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0);}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;){if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;}return next.value=undefined,next.done=!0,next;};return next.next=next;}}return{next:doneResult};}function doneResult(){return{value:undefined,done:!0};}return GeneratorFunction.prototype=GeneratorFunctionPrototype,defineProperty(Gp,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),defineProperty(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,"GeneratorFunction"),exports.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name));},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,"GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun;},exports.awrap=function(arg){return{__await:arg};},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,function(){return this;}),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then(function(result){return result.done?result.value:iter.next();});},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,"Generator"),define(Gp,iteratorSymbol,function(){return this;}),define(Gp,"toString",function(){return"[object Generator]";}),exports.keys=function(val){var object=Object(val),keys=[];for(var key in object){keys.push(key);}return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next;}return next.done=!0,next;};},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=undefined,this.done=!1,this.delegate=null,this.method="next",this.arg=undefined,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this){"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=undefined);}},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval;},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=undefined),!!caught;}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break;}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record);},complete:function complete(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel;},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel;}},"catch":function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry);}return thrown;}}throw new Error("illegal catch attempt");},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=undefined),ContinueSentinel;}},exports;}module.exports=_regeneratorRuntime,module.exports.__esModule=true,module.exports["default"]=module.exports;/***/},/***/424:/***/function _(module,__unused_webpack_exports,__nested_webpack_require_275643__){var arrayWithHoles=__nested_webpack_require_275643__(372);var iterableToArrayLimit=__nested_webpack_require_275643__(872);var unsupportedIterableToArray=__nested_webpack_require_275643__(116);var nonIterableRest=__nested_webpack_require_275643__(218);function _slicedToArray(arr,i){return arrayWithHoles(arr)||iterableToArrayLimit(arr,i)||unsupportedIterableToArray(arr,i)||nonIterableRest();}module.exports=_slicedToArray,module.exports.__esModule=true,module.exports["default"]=module.exports;/***/},/***/36:/***/function _(module,__unused_webpack_exports,__nested_webpack_require_276166__){var _typeof=__nested_webpack_require_276166__(698)["default"];function _toPrimitive(input,hint){if(_typeof(input)!=="object"||input===null)return input;var prim=input[Symbol.toPrimitive];if(prim!==undefined){var res=prim.call(input,hint||"default");if(_typeof(res)!=="object")return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return(hint==="string"?String:Number)(input);}module.exports=_toPrimitive,module.exports.__esModule=true,module.exports["default"]=module.exports;/***/},/***/62:/***/function _(module,__unused_webpack_exports,__nested_webpack_require_276738__){var _typeof=__nested_webpack_require_276738__(698)["default"];var toPrimitive=__nested_webpack_require_276738__(36);function _toPropertyKey(arg){var key=toPrimitive(arg,"string");return _typeof(key)==="symbol"?key:String(key);}module.exports=_toPropertyKey,module.exports.__esModule=true,module.exports["default"]=module.exports;/***/},/***/698:/***/function _(module){function _typeof(obj){"@babel/helpers - typeof";return(module.exports=_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj;}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;},module.exports.__esModule=true,module.exports["default"]=module.exports),_typeof(obj);}module.exports=_typeof,module.exports.__esModule=true,module.exports["default"]=module.exports;/***/},/***/116:/***/function _(module,__unused_webpack_exports,__nested_webpack_require_277642__){var arrayLikeToArray=__nested_webpack_require_277642__(897);function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return arrayLikeToArray(o,minLen);}module.exports=_unsupportedIterableToArray,module.exports.__esModule=true,module.exports["default"]=module.exports;/***/},/***/687:/***/function _(module,__unused_webpack_exports,__nested_webpack_require_278260__){// TODO(Babel 8): Remove this file.
var runtime=__nested_webpack_require_278260__(61)();module.exports=runtime;// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try{regeneratorRuntime=runtime;}catch(accidentalStrictMode){if((typeof globalThis==="undefined"?"undefined":_typeof3(globalThis))==="object"){globalThis.regeneratorRuntime=runtime;}else{Function("r","regeneratorRuntime = r")(runtime);}}/***/}/******/};/************************************************************************/ /******/ // The module cache
/******/var __webpack_module_cache__={};/******/ /******/ // The require function
/******/function __nested_webpack_require_278923__(moduleId){/******/ // Check if module is in cache
/******/var cachedModule=__webpack_module_cache__[moduleId];/******/if(cachedModule!==undefined){/******/return cachedModule.exports;/******/}/******/ // Create a new module (and put it into the cache)
/******/var module=__webpack_module_cache__[moduleId]={/******/ // no module.id needed
/******/ // no module.loaded needed
/******/exports:{}/******/};/******/ /******/ // Execute the module function
/******/__webpack_modules__[moduleId](module,module.exports,__nested_webpack_require_278923__);/******/ /******/ // Return the exports of the module
/******/return module.exports;/******/}/******/ /************************************************************************/ /******/ /* webpack/runtime/compat get default export */ /******/!function(){/******/ // getDefaultExport function for compatibility with non-harmony modules
/******/__nested_webpack_require_278923__.n=function(module){/******/var getter=module&&module.__esModule?/******/function(){return module['default'];}:/******/function(){return module;};/******/__nested_webpack_require_278923__.d(getter,{a:getter});/******/return getter;/******/};/******/}();/******/ /******/ /* webpack/runtime/define property getters */ /******/!function(){/******/ // define getter functions for harmony exports
/******/__nested_webpack_require_278923__.d=function(exports,definition){/******/for(var key in definition){/******/if(__nested_webpack_require_278923__.o(definition,key)&&!__nested_webpack_require_278923__.o(exports,key)){/******/Object.defineProperty(exports,key,{enumerable:true,get:definition[key]});/******/}/******/}/******/};/******/}();/******/ /******/ /* webpack/runtime/hasOwnProperty shorthand */ /******/!function(){/******/__nested_webpack_require_278923__.o=function(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop);};/******/}();/******/ /************************************************************************/var __webpack_exports__={};// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function(){"use strict";;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{Promise.resolve(value).then(_next,_throw);}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err);}_next(undefined);});};}// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator=__nested_webpack_require_278923__(687);var regenerator_default=/*#__PURE__*/__nested_webpack_require_278923__.n(regenerator);;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj;}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;},_typeof(obj);};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function _toPrimitive(input,hint){if(_typeof(input)!=="object"||input===null)return input;var prim=input[Symbol.toPrimitive];if(prim!==undefined){var res=prim.call(input,hint||"default");if(_typeof(res)!=="object")return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return(hint==="string"?String:Number)(input);};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function _toPropertyKey(arg){var key=_toPrimitive(arg,"string");return _typeof(key)==="symbol"?key:String(key);};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,_toPropertyKey(descriptor.key),descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);Object.defineProperty(Constructor,"prototype",{writable:false});return Constructor;};// CONCATENATED MODULE: ./src/stringUtils.js
var replaceAll=function replaceAll(str,find){var replace=arguments.length>2&&arguments[2]!==undefined?arguments[2]:"";if(!str)return"";var index=str.indexOf(find);if(index<0)return str;while(str.indexOf(find)>=0){var _index=str.indexOf(find);str=(_index>0?str.substring(0,_index):"")+replace+str.substring(_index+find.length);}return str;};var turkishToLower=function turkishToLower(str){if(!str||typeof str!=="string")return str;var string=str;var letters={"İ":"i","I":"ı","Ş":"ş","Ğ":"ğ","Ü":"ü","Ö":"ö","Ç":"ç"};string=string.replace(/(([İIŞĞÜÇÖ]))/g,function(letter){return letters[letter];});return string.toLowerCase();};;// CONCATENATED MODULE: ./src/constants.js
/* eslint-disable max-len */var isStaging=typeof window!=="undefined"?window.location.href.includes("staging.vivense"):true;var VERSION="0.0.39.5";var COOKIE_NAME="_ga";// TODO revert the following staging env check after moving to new branch structure
var TREATMENTS_LOCATION="https://host-b96.pages.dev/treatments.json";var TREATMENT_WEIGHTS_LOCATION="https://host-b96.pages.dev/weights.json";var STYLESHEET_LOCATION=isStaging?"https://ndvivense.glov.ai/nd-styles_staging.css":"https://ndvivense.glov.ai/nd-styles.css?id=".concat(replaceAll(new Date().toISOString().substring(0,13).replace("T",""),"-",""));var E_RULES_LOCATION=isStaging?"https://ndvivense.glov.ai/eligibility_rules_staging.json":"https://ndvivense.glov.ai/eligibility_rules.json";var PRODUCT_INFO_LOCATION="https://ndvivense.glov.ai/social-proof-v2-staging.json";var LOG_API_URL="https://europe-west3-nextday-34eb3.cloudfunctions.net/api/log";var LOOKUP_API_URL="https://catalog-api.adoraai.com";var MOBILE_MEDIA_QUERY="(max-width: 440px)";// Control group percentage
var SPLIT_RATIO=50;// Skipped treatment percentage
var TREATMENT_RATIO=50;var LOCAL_STORAGE_TTL_HOURS=2;var MAX_TIMEOUT_PER_SESSION=1;var LIST_MODE_BEAGLE_KEYS=/* unused pure expression or super */null&&0;var IDLE_TIMEOUT=15000;var SESSION_STORAGE_KEYS={SESSION_TIMESTAMP:"BG_SessionTimestamp",SESSION_HISTORY:"BG_SessionHistory",POPUP_DISPLAY_FLAG:"BG_PopupDisplayFlag",SKU_INFO_BASKET:"BG_ProductInfoBasket",TIMEOUT_COUNT:"BG_TimeoutCount",SESSION_REFERRER:"BG_SessionReferrer",MATCHED_TREATMENTS:"GLV_Matched"};var LOCAL_STORAGE_KEYS={TREATMENTS:"BG_Treatments",WEIGHTS:"BG_Weights",ELIGIBILITY_RULES:"BG_E_Rules",DEBUG_MODE:"BG_Debug",OUT_OF_SCOPE:"BG_OutOfScope",IS_LABEL_SENT:"BG_LabelSent",USER_ID:"BG_UserId_00",DATA_COLLECTION_DATA_SIZE:"BG_CollectionDataSize",IS_ADMIN:"GLV_IsAdmin"};var CUSTOM_STORAGE_PREFIX="BG_Seg_";;// CONCATENATED MODULE: ./src/logger.js
var Logger=/*#__PURE__*/function(){function Logger(){var origin=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"Beagle Client SDK";var testing=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;_classCallCheck(this,Logger);this.origin=origin;if(testing){this.DEBUG=1;}else{this.DEBUG=window.localStorage.getItem(LOCAL_STORAGE_KEYS.DEBUG_MODE);}}_createClass(Logger,[{key:"info",value:function info(){var _console;var origin=this.origin;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}(_console=console).info.apply(_console,["[".concat(origin,"]")].concat(args));}},{key:"log",value:function log(){var DEBUG=this.DEBUG,origin=this.origin;if(DEBUG){var _console2;for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}(_console2=console).log.apply(_console2,["[".concat(origin,"]")].concat(args));}}},{key:"failed",value:function failed(){var _console3;var DEBUG=this.DEBUG,origin=this.origin;if(!DEBUG)return;var messageConfig="%c%s   ";for(var _len3=arguments.length,args=new Array(_len3),_key3=0;_key3<_len3;_key3++){args[_key3]=arguments[_key3];}args.forEach(function(argument){var type=_typeof(argument);switch(type){case"bigint":case"number":case"boolean":messageConfig+="%d   ";break;case"string":messageConfig+="%s   ";break;case"object":case"undefined":default:messageConfig+="%o   ";}});(_console3=console).log.apply(_console3,[messageConfig,"color: red","[".concat(origin,"]")].concat(args));}},{key:"success",value:function success(){var _console4;var DEBUG=this.DEBUG,origin=this.origin;if(!DEBUG)return;var messageConfig="%c%s   ";for(var _len4=arguments.length,args=new Array(_len4),_key4=0;_key4<_len4;_key4++){args[_key4]=arguments[_key4];}args.forEach(function(argument){var type=_typeof(argument);switch(type){case"bigint":case"number":case"boolean":messageConfig+="%d   ";break;case"string":messageConfig+="%s   ";break;case"object":case"undefined":default:messageConfig+="%o   ";}});(_console4=console).log.apply(_console4,[messageConfig,"color: green","[".concat(origin,"]")].concat(args));}},{key:"warn",value:function warn(){var _console5;var origin=this.origin;for(var _len5=arguments.length,args=new Array(_len5),_key5=0;_key5<_len5;_key5++){args[_key5]=arguments[_key5];}(_console5=console).warn.apply(_console5,["[".concat(origin,"]")].concat(args));}},{key:"error",value:function error(){var _console6;var origin=this.origin;for(var _len6=arguments.length,args=new Array(_len6),_key6=0;_key6<_len6;_key6++){args[_key6]=arguments[_key6];}(_console6=console).error.apply(_console6,["[".concat(origin,"]")].concat(args));}}]);return Logger;}();/* harmony default export */var src_logger=Logger;;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(arr){if(Array.isArray(arr))return arr;};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null!=_i){var _s,_e,_x,_r,_arr=[],_n=!0,_d=!1;try{if(_x=(_i=_i.call(arr)).next,0===i){if(Object(_i)!==_i)return;_n=!1;}else for(;!(_n=(_s=_x.call(_i)).done)&&(_arr.push(_s.value),_arr.length!==i);_n=!0){;}}catch(err){_d=!0,_e=err;}finally{try{if(!_n&&null!=_i["return"]&&(_r=_i["return"](),Object(_r)!==_r))return;}finally{if(_d)throw _e;}}return _arr;}};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js
function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest();};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr);};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(iter){if(typeof Symbol!=="undefined"&&iter[Symbol.iterator]!=null||iter["@@iterator"]!=null)return Array.from(iter);};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_unsupportedIterableToArray(arr)||_nonIterableSpread();};// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj,key,value){key=_toPropertyKey(key);if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;};// CONCATENATED MODULE: ./src/utils.js
function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=utils_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function utils_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return utils_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return utils_arrayLikeToArray(o,minLen);}function utils_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}/* eslint-disable max-len */var logger=new src_logger("BeagleUtils");var months={"ocak":0,"şubat":1,"mart":2,"nisan":3,"mayıs":4,"haziran":5,"temmuz":6,"ağustos":7,"eylül":8,"ekim":9,"kasım":10,"aralık":11};var removeDocumentHide=function removeDocumentHide(){window.top.document.documentElement.classList.remove("glov-ease");window.top.document.documentElement.classList.remove("glov-hide");};var switchToEaseOut=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(){var el;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(window.top.document.documentElement.classList.contains("glov-hide")){_context.next=2;break;}return _context.abrupt("return");case 2:el=document.createElement("style");el.textContent=".glov-ease {\n    -webkit-animation: smooth 2s ease-in;\n    -moz-animation: smooth 2s ease-in;\n    -o-animation: smooth 2s ease-in;\n    -ms-animation: smooth 2s ease-in;\n    animation: smooth 2s ease-in;\n  }\n  \n  @keyframes smooth {\n    0% { opacity: 0;}\n    25% { opacity: 0.25;}\n    50% { opacity: 0.5;}\n    75% { opacity: 0.75;}\n    100% { opacity: 1;}\n  }\n  @-webkit-keyframes smooth {\n    0% { opacity: 0;}\n    25% { opacity: 0.25;}\n    50% { opacity: 0.5;}\n    75% { opacity: 0.75;}\n    100% { opacity: 1;}\n  }";window.top.document.documentElement.prepend(el);window.top.document.documentElement.classList.add("glov-ease");window.top.document.documentElement.classList.remove("glov-hide");case 7:case"end":return _context.stop();}}},_callee);}));return function switchToEaseOut(){return _ref.apply(this,arguments);};}();var fetchTreatments=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(){var treatments,jsonTreatment;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;logger.log("Fetching treatments");_context2.next=4;return fetchPlus(TREATMENTS_LOCATION);case 4:treatments=_context2.sent;if(treatments){_context2.next=7;break;}throw new Error();case 7:_context2.next=9;return treatments.json();case 9:jsonTreatment=_context2.sent;return _context2.abrupt("return",jsonTreatment);case 13:_context2.prev=13;_context2.t0=_context2["catch"](0);logger.failed("Could not fetch treatments",_context2.t0.message);return _context2.abrupt("return",null);case 17:case"end":return _context2.stop();}}},_callee2,null,[[0,13]]);}));return function fetchTreatments(){return _ref2.apply(this,arguments);};}();var fetchTreatmentWeights=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(){var treatmentWeights,jsonTreatmentWeights;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;logger.log("Fetching treatment weights");_context3.next=4;return fetchPlus(TREATMENT_WEIGHTS_LOCATION);case 4:treatmentWeights=_context3.sent;if(treatmentWeights){_context3.next=7;break;}throw new Error();case 7:_context3.next=9;return treatmentWeights.json();case 9:jsonTreatmentWeights=_context3.sent;return _context3.abrupt("return",jsonTreatmentWeights);case 13:_context3.prev=13;_context3.t0=_context3["catch"](0);logger.failed("Could not fetch treatment weights",_context3.t0.message);return _context3.abrupt("return",null);case 17:case"end":return _context3.stop();}}},_callee3,null,[[0,13]]);}));return function fetchTreatmentWeights(){return _ref3.apply(this,arguments);};}();var fetchEligibilityRules=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee4(){var eligibilityRules,jsonEligibilityRules;return regenerator_default().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;logger.log("Fetching eligibility rules");_context4.next=4;return fetchPlus(E_RULES_LOCATION);case 4:eligibilityRules=_context4.sent;if(eligibilityRules){_context4.next=7;break;}throw new Error();case 7:_context4.next=9;return eligibilityRules.json();case 9:jsonEligibilityRules=_context4.sent;return _context4.abrupt("return",jsonEligibilityRules);case 13:_context4.prev=13;_context4.t0=_context4["catch"](0);logger.failed("Could not fetch eligibility rules",_context4.t0.message);return _context4.abrupt("return",null);case 17:case"end":return _context4.stop();}}},_callee4,null,[[0,13]]);}));return function fetchEligibilityRules(){return _ref4.apply(this,arguments);};}();var fetchProductInfo=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee5(){var productInfo,productInfoJson;return regenerator_default().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;logger.log("Fetching product info");_context5.next=4;return fetchPlus(PRODUCT_INFO_LOCATION);case 4:productInfo=_context5.sent;if(productInfo){_context5.next=7;break;}throw new Error();case 7:_context5.next=9;return productInfo.json();case 9:productInfoJson=_context5.sent;return _context5.abrupt("return",productInfoJson);case 13:_context5.prev=13;_context5.t0=_context5["catch"](0);logger.failed("Could not fetch product info",_context5.t0.message);return _context5.abrupt("return",null);case 17:case"end":return _context5.stop();}}},_callee5,null,[[0,13]]);}));return function fetchProductInfo(){return _ref5.apply(this,arguments);};}();var utils_timeout=function timeout(time){var controller=new AbortController();setTimeout(function(){return controller.abort();},time);return controller;};var fetchPlus=function fetchPlus(url){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var retries=arguments.length>2&&arguments[2]!==undefined?arguments[2]:5;return fetch(url,_objectSpread(_objectSpread({},options),{},{signal:utils_timeout(5000).signal})).then(function(res){if(res.ok){return res;}if(retries>0){return fetchPlus(url,options,retries-1);}throw new Error(res.status);}).catch(function(error){if(retries>0){logger.failed("Fetch timed out Retrying...: ",error.message);return fetchPlus(url,options,retries-1);}logger.failed("Fetch failed: ",error.message);return null;});};var extractCookieIdentifier=function extractCookieIdentifier(cookieString,cookieName){if(!cookieString){return null;}var parsed=cookieString.split(";").map(function(v){return v.split("=");}).reduce(function(acc,v){if(v[0]&&v[1]){acc[decodeURIComponent(v[0].trim())]=decodeURIComponent(v[1].trim());}return acc;},{});var identifier=parsed[cookieName];if(!identifier){return null;}if(cookieName==="_ga"){// extract unique identifier from GA cookie
var identifierIndex=2;identifier=identifier.split(".")[identifierIndex];}return identifier;};var determinePct=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee6(identifier){var hash,pct;return regenerator_default().wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.prev=0;if(identifier){_context6.next=3;break;}return _context6.abrupt("return",null);case 3:hash=getUnsecureHash(identifier);if(!(hash===null)){_context6.next=6;break;}return _context6.abrupt("return",null);case 6:pct=hash%100;if(!(pct>=0&&pct<100)){_context6.next=9;break;}return _context6.abrupt("return",pct);case 9:return _context6.abrupt("return",null);case 12:_context6.prev=12;_context6.t0=_context6["catch"](0);logger.error(_context6.t0);return _context6.abrupt("return",null);case 16:case"end":return _context6.stop();}}},_callee6,null,[[0,12]]);}));return function determinePct(_x){return _ref6.apply(this,arguments);};}();var exitScrollListener=function exitScrollListener(callBack){var loop=function loop(){var scrollTop=window.top.document.documentElement.scrollTop;if(lastScrollTop-400>scrollTop){clearInterval(exitScrollInterval);callBack();}else{lastScrollTop=scrollTop;}};var lastScrollTop=window.top.document.documentElement.scrollTop;var exitScrollInterval=setInterval(loop,500);};/**
 * @description This function is used to apply treatments to the page on specific media type.
 * @param {MediaQueryList} mediaQueryCondition window.matchMedia("(max-width: 500px)")
 * @param {DOMNodeList } elements document.querySelectorAll("div.product_info")
 * @param {Object} styleChangesMap { "margin-top" : "10rem"}
 * @returns
 */var styleApplicator=function styleApplicator(elements,styleChangesMap){logger.log("Applying style changes",styleChangesMap,"to elements",elements);for(var i=0;i<elements.length;i++){var element=elements[i];for(var _i=0,_Object$entries=Object.entries(styleChangesMap);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),key=_Object$entries$_i[0],value=_Object$entries$_i[1];element.style[key]=value;}}};var injectStyleSheet=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee7(){var styleSheet;return regenerator_default().wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:styleSheet=window.top.document.createElement("link");styleSheet.rel="stylesheet";styleSheet.type="text/css";styleSheet.href=STYLESHEET_LOCATION;window.top.document.head.appendChild(styleSheet);case 5:case"end":return _context7.stop();}}},_callee7);}));return function injectStyleSheet(){return _ref7.apply(this,arguments);};}();var prepareActions=/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee8(identifier,actionsToPrepare,businessRuleId,debugMode){var actions,variant,_iterator,_step,action,businessRuleTransformations,variants,_iterator2,_step2,businessTransformation,key,_iterator3,_step3,_step3$value,index,variantKey,randomPct,_iterator4,_step4,_businessTransformation,_i2,_Object$keys,_key,_key2;return regenerator_default().wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:actions=JSON.parse(JSON.stringify(actionsToPrepare));variant=null;_iterator=_createForOfIteratorHelper(actions);_context8.prev=3;_iterator.s();case 5:if((_step=_iterator.n()).done){_context8.next=65;break;}action=_step.value;businessRuleTransformations=action.businessRuleTransformations,variants=action.variants;if(!(!businessRuleTransformations&&!variants)){_context8.next=10;break;}return _context8.abrupt("continue",63);case 10:if(businessRuleId!==null&&businessRuleTransformations){_iterator2=_createForOfIteratorHelper(businessRuleTransformations);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){businessTransformation=_step2.value;if(businessTransformation.id===businessRuleId){for(key in businessTransformation){if(key!=="id"){action[key]=businessTransformation[key];}}}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}if(!variants){_context8.next=63;break;}_iterator3=_createForOfIteratorHelper(Object.keys(variants).entries());_context8.prev=13;_iterator3.s();case 15:if((_step3=_iterator3.n()).done){_context8.next=55;break;}_step3$value=_slicedToArray(_step3.value,2),index=_step3$value[0],variantKey=_step3$value[1];_context8.next=19;return determinePct(identifier+variantKey);case 19:randomPct=_context8.sent;if(debugMode&&!action.variants[variantKey].weight){action.variants[variantKey].weight=Math.floor(100/Object.keys(variants).length)*(index+1);}if(!(randomPct<action.variants[variantKey].weight)){_context8.next=53;break;}variant=variantKey;if(!(businessRuleId!==null&&variants[variantKey].businessRuleTransformations)){_context8.next=51;break;}_iterator4=_createForOfIteratorHelper(variants[variantKey].businessRuleTransformations);_context8.prev=25;_iterator4.s();case 27:if((_step4=_iterator4.n()).done){_context8.next=41;break;}_businessTransformation=_step4.value;if(!(_businessTransformation.id==businessRuleId)){_context8.next=39;break;}_i2=0,_Object$keys=Object.keys(_businessTransformation);case 31:if(!(_i2<_Object$keys.length)){_context8.next=39;break;}_key=_Object$keys[_i2];if(!(_key==="id")){_context8.next=35;break;}return _context8.abrupt("continue",36);case 35:action[_key]=_businessTransformation[_key];case 36:_i2++;_context8.next=31;break;case 39:_context8.next=27;break;case 41:_context8.next=46;break;case 43:_context8.prev=43;_context8.t0=_context8["catch"](25);_iterator4.e(_context8.t0);case 46:_context8.prev=46;_iterator4.f();return _context8.finish(46);case 49:_context8.next=52;break;case 51:for(_key2 in variants[variantKey]){if(_key2!=="weight"&&_key2!=="businessRuleTransformations"){action[_key2]=variants[variantKey][_key2];}}case 52:return _context8.abrupt("break",55);case 53:_context8.next=15;break;case 55:_context8.next=60;break;case 57:_context8.prev=57;_context8.t1=_context8["catch"](13);_iterator3.e(_context8.t1);case 60:_context8.prev=60;_iterator3.f();return _context8.finish(60);case 63:_context8.next=5;break;case 65:_context8.next=70;break;case 67:_context8.prev=67;_context8.t2=_context8["catch"](3);_iterator.e(_context8.t2);case 70:_context8.prev=70;_iterator.f();return _context8.finish(70);case 73:return _context8.abrupt("return",[actions,variant]);case 74:case"end":return _context8.stop();}}},_callee8,null,[[3,67,70,73],[13,57,60,63],[25,43,46,49]]);}));return function prepareActions(_x2,_x3,_x4,_x5){return _ref8.apply(this,arguments);};}();var initiateSessionStorages=function initiateSessionStorages(){var POPUP_DISPLAY_FLAG=SESSION_STORAGE_KEYS.POPUP_DISPLAY_FLAG,SESSION_TIMESTAMP=SESSION_STORAGE_KEYS.SESSION_TIMESTAMP,SESSION_HISTORY=SESSION_STORAGE_KEYS.SESSION_HISTORY;var popupDisplayFlag=sessionStorage.getItem(POPUP_DISPLAY_FLAG);var sessionTimestamp=sessionStorage.getItem(SESSION_TIMESTAMP);var sessionHistory=sessionStorage.getItem(SESSION_HISTORY);if(popupDisplayFlag===null){sessionStorage.setItem(POPUP_DISPLAY_FLAG,0);}if(!sessionTimestamp){sessionStorage.setItem(SESSION_TIMESTAMP,Date.now());}if(!sessionHistory){sessionStorage.setItem(SESSION_HISTORY,[window.location.pathname]);}else{sessionStorage.setItem(SESSION_HISTORY,[window.location.pathname,sessionHistory]);}};var conditionChecker=function conditionChecker(runTimeValue,condition,value){if(condition==="notExist"){if(!runTimeValue){logger.success("conditionChecker: -satisfied- target does not exist");return true;}logger.failed("conditionChecker: -not satisfied- target does exist");return false;}if(runTimeValue===null||runTimeValue===undefined||condition===null||condition===undefined){logger.failed("conditionChecker: runTimeValue or condition is not defined");return false;}switch(condition){case"exist":if(runTimeValue){logger.success("conditionChecker: -satisfied- target does exist");return true;}logger.failed("conditionChecker: -not satisfied- target does not exist");return false;case"includes":case"contains":if(runTimeValue.includes(value)){logger.success("conditionChecker: -satisfied- target contains value");return true;}logger.failed("conditionChecker: -not satisfied- target does not contain value");return false;case"notIncludes":case"notContains":if(!runTimeValue.includes(value)){logger.success("conditionChecker: -satisfied- target does not contain value");return true;}logger.failed("conditionChecker: -not satisfied- target contains value");return false;case"equal":if(runTimeValue===value){logger.success("conditionChecker: -satisfied- target equals value");return true;}logger.failed("conditionChecker: -not satisfied- target does not equal value");return false;case"notEqual":if(runTimeValue!==value){logger.success("conditionChecker: -satisfied- target does not equal value");return true;}logger.failed("conditionChecker: -not satisfied- target equals value");return false;case"greaterThan":if(runTimeValue>value){logger.success("conditionChecker: -satisfied- target is greater than value");return true;}logger.failed("conditionChecker: -not satisfied- target is not greater than value");return false;case"lessThan":if(runTimeValue<value){logger.success("conditionChecker: -satisfied- target is less than value");return true;}logger.failed("conditionChecker: -not satisfied- target is not less than value");return false;case"greaterEquals":if(runTimeValue>=value){logger.success("conditionChecker: -satisfied- target is greater or equal than value");return true;}logger.failed("conditionChecker: -not satisfied- target is not greater or equal than value");return false;case"lessEquals":if(runTimeValue<=value){logger.success("conditionChecker: -satisfied- target is less or equal than value");return true;}logger.failed("conditionChecker: -not satisfied- target is not less or equal than value");return false;case"between":{var _value$split=value.split(","),_value$split2=_slicedToArray(_value$split,2),min=_value$split2[0],max=_value$split2[1];min=parseInt(min);max=parseInt(max);if(runTimeValue>=min&&runTimeValue<=max){logger.success("conditionChecker: -satisfied- target is between min and max");return true;}logger.failed("conditionChecker: -not satisfied- target is not between min and max");return false;}case"regex":{var regex=new RegExp(value,"i");return regex.test(runTimeValue);}default:logger.failed("conditionChecker: condition is not defined ",condition);return false;}};var getDebugMode=function getDebugMode(oosReason){var DEBUG_MODE=LOCAL_STORAGE_KEYS.DEBUG_MODE,OUT_OF_SCOPE=LOCAL_STORAGE_KEYS.OUT_OF_SCOPE;var queryString=window.location.search;if(queryString.includes("nd_debug=")){window.localStorage.setItem(OUT_OF_SCOPE,oosReason);}if(queryString.includes("nd_debug=1")){window.localStorage.setItem(DEBUG_MODE,1);addToBeagleInfoLayer("dbm","on");return 1;}if(queryString.includes("nd_debug=2")){window.localStorage.setItem(DEBUG_MODE,2);addToBeagleInfoLayer("dbm","on");return 2;}if(queryString.includes("nd_debug=0")){window.localStorage.removeItem(DEBUG_MODE);addToBeagleInfoLayer("dbm","off");return 0;}var current=parseInt(window.localStorage.getItem(DEBUG_MODE));addToBeagleInfoLayer("dbm",current?"on":"off");return current||0;};// get GA client id using ga.getAll()
var getGaClientId=function getGaClientId(){var ga=window.ga;// if ga and ga.getAll() is not defined, return null
if(ga&&ga.getAll){var trackers=ga.getAll();if(trackers&&trackers.length){return trackers[0].get("clientId");}}return null;};// get deterministic numeric hash from string that conatins only numbers
var getUnsecureHash=function getUnsecureHash(str){var hash=0;if(str.length===0){return null;}for(var i=0;i<str.length;i++){var char=str.charCodeAt(i);hash=(hash<<5)-hash+char;hash=hash&hash;}// return absolute value
return Math.abs(hash);};// generate a 32-bit random integer
var getRandomInt=function getRandomInt(){return Math.floor(Math.random()*0x100000000);};// get current unix epoch time in seconds
var getUnixTime=function getUnixTime(){return Math.floor(Date.now()/1000);};var getIdentifier=function getIdentifier(){return new Promise(function(resolve){try{var id=window.localStorage.getItem(LOCAL_STORAGE_KEYS.USER_ID);if(id!==null&&id!==undefined){logger.log("getIdentifier: got identifier from local storage",id);resolve(id);return;}id=getGaClientId();if(id!==null&&id!==undefined){logger.log("getIdentifier: got identifier from ga in first attempt",id);window.localStorage.setItem(LOCAL_STORAGE_KEYS.USER_ID,id);resolve(id);return;}else{var extractIdentifierInterval=setInterval(function(){id=getGaClientId();if(id!==null&&id!==undefined){logger.log("getIdentifier: got identifier from ga",id);clearInterval(extractIdentifierInterval);window.localStorage.setItem(LOCAL_STORAGE_KEYS.USER_ID,id);resolve(id);}},10);setTimeout(function(){clearInterval(extractIdentifierInterval);if(id===null||id===undefined){logger.failed("Could not read GA client id");resolve(null);}},2000);}}catch(e){logger.failed("Error in getIdentifier",e);resolve(null);}});};var delay=function delay(ms){return new Promise(function(res){return setTimeout(res,ms);});};var formatDeliveryDate=function formatDeliveryDate(date){if(!date||typeof date!=="string")return date;var result={startMonthIndex:undefined,endMonthIndex:undefined,startDay:undefined,endDay:undefined};var match=date.match("([\\d]+)-([\\d]+)\\s?([\\wıüğşöçİÖÇĞÜŞ]+)");if(match&&match.length===4){result.startDay=parseInt(match[1]);result.endDay=parseInt(match[2]);result.startMonthIndex=months[match[3].toLowerCase()];result.endMonthIndex=result.startMonthIndex;}else{match=date.match("([\\d]+)\\s+([\\wıüğşöçİÖÇĞÜŞ]+)-([\\d]+)\\s+([\\wıüğşöçİÖÇĞÜŞ]+)");if(!match||match.length!==5)return date;result.startDay=parseInt(match[1]);result.startMonthIndex=months[match[2].toLowerCase()];result.endDay=parseInt(match[3]);result.endMonthIndex=months[match[4].toLowerCase()];}try{var today=new Date();if(!result.startMonthIndex||!result.endMonthIndex)return date;var startYear=result.startMonthIndex>=today.getMonth()?today.getFullYear():today.getFullYear()+1;var endYear=result.endMonthIndex>=today.getMonth()?today.getFullYear():today.getFullYear()+1;var estimatedStart=new Date(startYear,result.startMonthIndex,result.startDay);var estimatedEnd=new Date(endYear,result.endMonthIndex,result.endDay);var startDiffOverDays=Math.ceil(Math.abs(estimatedStart-today)/(1000*60*60*24));var endDiffOverDays=Math.ceil(Math.abs(estimatedEnd-today)/(1000*60*60*24));var startDiffOverWeeks=startDiffOverDays<7?0:Math.ceil(startDiffOverDays/7);var endDiffOverWeeks=endDiffOverDays<7?0:Math.ceil(endDiffOverDays/7);if(startDiffOverWeeks===0&&endDiffOverWeeks===0){return"".concat(startDiffOverDays," - ").concat(endDiffOverDays," G\xFCn");}if(startDiffOverWeeks===0&&endDiffOverWeeks>=1){return"".concat(startDiffOverDays," G\xFCn - ").concat(endDiffOverWeeks," Hafta");}if(startDiffOverWeeks===endDiffOverWeeks){return"".concat(startDiffOverWeeks," Hafta");}return"".concat(startDiffOverWeeks," - ").concat(endDiffOverWeeks," Hafta");}catch(err){return date;}};var idleTimer=/*#__PURE__*/function(){var _ref9=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee9(timeOut,callBack){var idleTimeout,resetTimer;return regenerator_default().wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:resetTimer=function _resetTimer(){clearTimeout(idleTimeout);idleTimeout=setTimeout(callBack,timeOut);};idleTimeout=setTimeout(callBack,timeOut);window.top.document.ontouchstart=resetTimer;case 3:case"end":return _context9.stop();}}},_callee9);}));return function idleTimer(_x6,_x7){return _ref9.apply(this,arguments);};}();var getBrowserType=function getBrowserType(){var userAgent=navigator.userAgent;if(userAgent.match(/chrome|chromium|crios/i)){return"chrome";}if(userAgent.match(/firefox|fxios/i)){return"firefox";}if(userAgent.match(/safari/i)){return"safari";}if(userAgent.match(/opr\//i)){return"opera";}if(userAgent.match(/edg/i)){return"edge";}return null;};var isOwnMutation=function isOwnMutation(mutationList){var nodes=[].concat(_toConsumableArray(Array.from(mutationList[0].addedNodes)),_toConsumableArray(Array.from(mutationList[0].removedNodes)));return nodes.some(function(n){var _n$id;return n.tagName&&(((_n$id=n.id)===null||_n$id===void 0?void 0:_n$id.includes("bn-"))||Array.from(n.classList).some(function(c){return c.includes("bn-")||c.includes("nd-");}));});};;// CONCATENATED MODULE: ./src/BeagleDataCollection/store.config.js
var config={dbName:"beagle",version:1,maintenanceOperationCount:1000,// affects version
store:{name:"data",indexes:[{name:"ix_dataName",fields:["data_name"]},{name:"ix_dataName_session",fields:["data_name","session_id"]},{name:"ix_dataName_dataValue",fields:["data_name","data_value"]},{name:"ix_dataName_dataValue_session",fields:["data_name","data_value","session_id"]}],options:{keyPath:"id",autoIncrement:true}}};/* harmony default export */var store_config=config;;// CONCATENATED MODULE: ./src/BeagleDataCollection/api.js
function api_createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=api_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function api_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return api_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return api_arrayLikeToArray(o,minLen);}function api_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}var api_logger=new src_logger("BeagleDataCollectionWrapper");var _window={alltime:"alltime",session:"session"};var BeagleDataCollectionWrapper=/*#__PURE__*/function(){function BeagleDataCollectionWrapper(){_classCallCheck(this,BeagleDataCollectionWrapper);this.indexedDB=null;try{this.init();}catch(err){api_logger.failed("Failed to initialized db with: ",err.message);}}_createClass(BeagleDataCollectionWrapper,[{key:"init",value:function init(){var _window$top$indexedDB,_this=this;api_logger.log("Initializing indexedDB");// TODO, uncomment next line once existing stale dbs are purged
// const openRequest = window.top.indexedDB?.open(config.dbName, config.version);
var openRequest=(_window$top$indexedDB=window.top.indexedDB)===null||_window$top$indexedDB===void 0?void 0:_window$top$indexedDB.open(store_config.dbName);if(!openRequest){throw new Error("indexeddb is not supported");}openRequest.onupgradeneeded=function(event){switch(event.oldVersion){case 0:break;default:// TODO upgrade existing db instead of delete and create from scratch
try{openRequest.result.deleteObjectStore(store_config.store.name);}catch(err){api_logger.failed("Could not delete outdated database",err.message);}break;}try{var _config$store$indexes;var store=openRequest.result.createObjectStore(store_config.store.name,store_config.store.options);if(((_config$store$indexes=store_config.store.indexes)===null||_config$store$indexes===void 0?void 0:_config$store$indexes.length)>0){var _iterator=api_createForOfIteratorHelper(store_config.store.indexes),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var idx=_step.value;store.createIndex(idx.name,idx.fields);}}catch(err){_iterator.e(err);}finally{_iterator.f();}}}catch(err){api_logger.failed("Could not create object store on database",err.message);}};openRequest.onerror=function(){throw new Error("Error initializing beagle indexed DB",openRequest.error);};openRequest.onsuccess=function(){var db=openRequest.result;if(db.version!==1){// TODO, remove delete request once existing stale dbs are purged
var deleteRequest=window.indexedDB.deleteDatabase(store_config.dbName);deleteRequest.onsuccess=function(){_this.init();};}else _this.indexedDB=db;};}},{key:"getConnection",value:function getConnection(){var _this2=this;return new Promise(function(resolve,reject){var interval=setInterval(function(){if(_this2.indexedDB){clearInterval(interval);resolve();}},25);setTimeout(function(){if(!_this2.indexedDB){clearInterval(interval);reject(new Error("IndexedDB not initialized within the allotted time"));}},1000);});}},{key:"initTransaction",value:function(){var _initTransaction=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(){var readwrite,tx,store,_args=arguments;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:readwrite=_args.length>0&&_args[0]!==undefined?_args[0]:false;_context.next=3;return this.getConnection();case 3:tx=this.indexedDB.transaction(store_config.store.name,readwrite?"readwrite":"readonly");store=tx.objectStore(store_config.store.name);return _context.abrupt("return",store);case 6:case"end":return _context.stop();}}},_callee,this);}));function initTransaction(){return _initTransaction.apply(this,arguments);}return initTransaction;}()},{key:"save",value:function(){var _save=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(dataName,dataValue){var store,sessionId,time,payload;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return this.initTransaction(true);case 2:store=_context2.sent;sessionId=this.getCurrentSessionId();// date current -2 saat  yil-ay-gun
time=Math.round(Date.now()/1000);payload={"data_name":dataName,"data_value":dataValue,"session_id":sessionId,time:time};store.put(payload);case 7:case"end":return _context2.stop();}}},_callee2,this);}));function save(_x,_x2){return _save.apply(this,arguments);}return save;}()},{key:"minmax",value:function minmax(dataName,op){var _this3=this;var window=arguments.length>2&&arguments[2]!==undefined?arguments[2]:_window.alltime;return new Promise(function(resolve){_this3.initTransaction().then(function(store){var stored=undefined;_this3.getCursor(store,dataName,window).onsuccess=function(event){var cursor=event.target.result;if(cursor){var value=cursor.value;if("data_value"in value){if(stored===undefined||op==="min"&&value["data_value"]<stored||op==="max"&&value["data_value"]>stored){stored=value["data_value"];}}else{console.warn("key not found in cursor values "+dataName);}cursor.continue();}else{resolve(stored);}};});});}},{key:"min",value:function min(dataName){var window=arguments.length>1&&arguments[1]!==undefined?arguments[1]:_window.alltime;return this.minmax(dataName,"min",window);}},{key:"max",value:function max(dataName){var window=arguments.length>1&&arguments[1]!==undefined?arguments[1]:_window.alltime;return this.minmax(dataName,"max",window);}},{key:"groupBy",value:function groupBy(dataName){var _this4=this;var window=arguments.length>1&&arguments[1]!==undefined?arguments[1]:_window.alltime;return new Promise(function(resolve){_this4.initTransaction().then(function(store){var map=new Map();_this4.getCursor(store,dataName,window).onsuccess=function(event){var cursor=event.target.result;if(cursor){var value=cursor.value;if("data_value"in value){if(!map.has(value["data_value"]))map.set(value["data_value"],0);map.set(value["data_value"],map.get(value["data_value"])+1);}else{console.warn("key not found in cursor values "+dataName);}cursor.continue();}else{resolve(map);}};});});}},{key:"mode",value:function(){var _mode=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(dataName){var window,data,max,_iterator2,_step2,_step2$value,key,value,_args3=arguments;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:window=_args3.length>1&&_args3[1]!==undefined?_args3[1]:_window.alltime;_context3.next=3;return this.groupBy(dataName,window);case 3:data=_context3.sent;if(!(data.keys().length===0)){_context3.next=6;break;}return _context3.abrupt("return",null);case 6:max={name:undefined,value:-1};_iterator2=api_createForOfIteratorHelper(data);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){_step2$value=_slicedToArray(_step2.value,2),key=_step2$value[0],value=_step2$value[1];if(max.value<value){max.name=key;max.value=value;}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return _context3.abrupt("return",max);case 10:case"end":return _context3.stop();}}},_callee3,this);}));function mode(_x3){return _mode.apply(this,arguments);}return mode;}()},{key:"count",value:function count(dataName){var _this5=this;var window=arguments.length>1&&arguments[1]!==undefined?arguments[1]:_window.alltime;return new Promise(function(resolve){_this5.initTransaction().then(function(store){var count=0;_this5.getCursor(store,dataName,window).onsuccess=function(event){var cursor=event.target.result;if(cursor){count++;cursor.continue();}else{resolve(count);}};});});}},{key:"sum",value:function sum(dataName){var _this6=this;var window=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"alltime";return new Promise(function(resolve){_this6.initTransaction().then(function(store){var total=0.00;_this6.getCursor(store,dataName,window).onsuccess=function(event){var cursor=event.target.result;if(cursor){var value=cursor.value;if("data_value"in value){total+=parseFloat(value["data_value"]);}else{console.warn("key not found in cursor values "+dataName);}cursor.continue();}else{resolve(total.toFixed(2));}};});});}},{key:"getCursor",value:function getCursor(store,dataName){var window=arguments.length>2&&arguments[2]!==undefined?arguments[2]:_window.alltime;var dataValue=arguments.length>3&&arguments[3]!==undefined?arguments[3]:undefined;if(dataValue){if(window===_window.session){return store.index("ix_dataName_dataValue_session").openCursor(IDBKeyRange.only([dataName,dataValue,this.getCurrentSessionId().toString()]));}return store.index("ix_dataName_dataValue").openCursor(IDBKeyRange.only([dataName,dataValue]));}if(window===_window.session){return store.index("ix_dataName_session").openCursor(IDBKeyRange.only([dataName,this.getCurrentSessionId().toString()]));}var indexValue=getBrowserType()==="safari"?dataName:[dataName];return store.index("ix_dataName").openCursor(IDBKeyRange.only(indexValue));}},{key:"avg",value:function(){var _avg=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee4(dataName){var window,total,count,_args4=arguments;return regenerator_default().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:window=_args4.length>1&&_args4[1]!==undefined?_args4[1]:_window.alltime;_context4.next=3;return this.sum(dataName,window);case 3:total=_context4.sent;_context4.next=6;return this.count(dataName,window);case 6:count=_context4.sent;if(!(!total||!count)){_context4.next=9;break;}return _context4.abrupt("return",0);case 9:return _context4.abrupt("return",(total/count).toFixed(2));case 10:case"end":return _context4.stop();}}},_callee4,this);}));function avg(_x4){return _avg.apply(this,arguments);}return avg;}()},{key:"last",value:function(){var _last=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee5(dataName){var _this7=this;var size,window,_args5=arguments;return regenerator_default().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:size=_args5.length>1&&_args5[1]!==undefined?_args5[1]:1;window=_args5.length>2&&_args5[2]!==undefined?_args5[2]:_window.alltime;return _context5.abrupt("return",new Promise(function(resolve){_this7.initTransaction().then(function(store){var cursor=store.index("ix_dataName").openCursor([dataName],"prev");if(window===_window.session){cursor=store.index("ix_dataName_session").openCursor([dataName,_this7.getCurrentSessionId()],"prev");}var index=0;var values=[];cursor.onsuccess=function(event){var result=event.target.result;if(result&&index<size){index++;values.push(result.value);result.continue();}else{resolve(values);}};});}));case 3:case"end":return _context5.stop();}}},_callee5);}));function last(_x5){return _last.apply(this,arguments);}return last;}()},{key:"getCurrentSessionId",value:function getCurrentSessionId(){var d=new Date();d.setHours(d.getHours()-2);return d.getFullYear()+"-"+(d.getMonth()+1).toString().padStart(2,"0")+"-"+d.getDate().toString().padStart(2,"0");}}]);return BeagleDataCollectionWrapper;}();;// CONCATENATED MODULE: ./src/BeagleDataCollection/index.js
function BeagleDataCollection_createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=BeagleDataCollection_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function BeagleDataCollection_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return BeagleDataCollection_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return BeagleDataCollection_arrayLikeToArray(o,minLen);}function BeagleDataCollection_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}/* eslint-disable max-len */var BeagleDataCollection_logger=new src_logger("BeagleDataCollection");var collectorApi=new BeagleDataCollectionWrapper();// keep a table in indexdb the format [session_id, data_name, data_value, stored_value]
var queryInCollector=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(baseFeatureName,queryMethod,window){var queryPromise,_queryPromise,_queryPromise2,data,count,_iterator,_step,_step$value,value,_data,match,_queryPromise3,dataValues;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:BeagleDataCollection_logger.log("queryInCollector",baseFeatureName,queryMethod,window);if(collectorApi){_context.next=4;break;}BeagleDataCollection_logger.failed("IndexedDB no supported/Initialized");return _context.abrupt("return",null);case 4:if(!(queryMethod==="min")){_context.next=11;break;}_context.next=7;return collectorApi.min(baseFeatureName,window);case 7:queryPromise=_context.sent;return _context.abrupt("return",queryPromise);case 11:if(!(queryMethod==="max")){_context.next=18;break;}_context.next=14;return collectorApi.max(baseFeatureName,window);case 14:_queryPromise=_context.sent;return _context.abrupt("return",_queryPromise);case 18:if(!(queryMethod==="avg")){_context.next=25;break;}_context.next=21;return collectorApi.avg(baseFeatureName,window);case 21:_queryPromise2=_context.sent;return _context.abrupt("return",_queryPromise2);case 25:if(!(queryMethod==="cd")){_context.next=31;break;}_context.next=28;return collectorApi.groupBy(baseFeatureName,window);case 28:return _context.abrupt("return",_context.sent.size);case 31:if(!(queryMethod==="cv")){_context.next=39;break;}_context.next=34;return collectorApi.groupBy(baseFeatureName,window);case 34:data=_context.sent;count=0;_iterator=BeagleDataCollection_createForOfIteratorHelper(data);try{for(_iterator.s();!(_step=_iterator.n()).done;){_step$value=_slicedToArray(_step.value,2),value=_step$value[1];count+=value;}}catch(err){_iterator.e(err);}finally{_iterator.f();}return _context.abrupt("return",count);case 39:if(!(queryMethod==="mode")){_context.next=46;break;}_context.next=42;return collectorApi.mode(baseFeatureName,window);case 42:_data=_context.sent;if(_data){_context.next=45;break;}return _context.abrupt("return",null);case 45:return _context.abrupt("return",_data.name);case 46:if(!(queryMethod.indexOf("last")>=0)){_context.next=55;break;}match=queryMethod.match("last\\(([\\d]+)\\)");if(!(!match||!match.length===2||parseInt(match[1])<1)){_context.next=50;break;}return _context.abrupt("return",null);case 50:_context.next=52;return collectorApi.last(baseFeatureName,match[1],window);case 52:_queryPromise3=_context.sent;dataValues=_queryPromise3.map(function(obj){return obj.data_value;});return _context.abrupt("return",dataValues);case 55:/**
              {"Listingpage" => 21}
              {"Homepage" => 12}
              -- example will have:
              mode: Listingpage
              cd: 2
              cv: 21+12
              last(3) (n, n-1, n-2)
            */ // 1000lik temizlenecek (maintOpCount -> version)
// queryMethod can be "mode", "cd" (count distint) for string/categorical data types
// queryMethod can be "cv" (sum of count values), "current", or "prev" for any data type (stored via last)
BeagleDataCollection_logger.failed("unknown queryMethod=".concat(queryMethod," in BeagleDataCollection"));return _context.abrupt("return",null);case 57:case"end":return _context.stop();}}},_callee);}));return function queryInCollector(_x,_x2,_x3){return _ref.apply(this,arguments);};}();var updateInCollector=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(baseFeatureName,baseFeatureValue,updateMethod){return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:BeagleDataCollection_logger.log("updateInCollector",baseFeatureName,baseFeatureValue,updateMethod);if(collectorApi){_context2.next=4;break;}BeagleDataCollection_logger.failed("IndexedDB no supported/Initialized");return _context2.abrupt("return",null);case 4:_context2.next=6;return collectorApi.save(baseFeatureName,baseFeatureValue);case 6:case"end":return _context2.stop();}}},_callee2);}));return function updateInCollector(_x4,_x5,_x6){return _ref2.apply(this,arguments);};}();;// CONCATENATED MODULE: ./src/BeagleInfoLayer/index.js
function BeagleInfoLayer_createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=BeagleInfoLayer_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function BeagleInfoLayer_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return BeagleInfoLayer_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return BeagleInfoLayer_arrayLikeToArray(o,minLen);}function BeagleInfoLayer_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}/* eslint-disable max-len */window.beagleInfoLayer=window.beagleInfoLayer||{a:{},e:{},f:{},__hwm:0};var BeagleInfoLayer_logger=new src_logger("BeagleInfoLayer");// TODO: convert to name --> array of selectors
var searchPaths=[// ----------------------------------------------------------------------------------------------------------------------------------------------
// GA Data Layer Queries
{PageTypeDepend:"*",method:"GADataLayer",selector:"PageType",name:"PageType"},{PageTypeDepend:"*",method:"GADataLayer",selector:"isAdmin",name:"vvsIsShowroom"},{PageTypeDepend:"*",method:"GADataLayer",selector:"userId",name:"vvsUserId"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"content_name",name:"pdp.name"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"productgroup",name:"pdp.group"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivense_category",name:"pdp.class"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"content_ids",name:"pdp.sku",formatter:"upperCaseTR"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"ProductID",name:"pdp.sku"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"content_category",name:"pdp.category"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"ecommerce.detail.actionField.list",name:"pdp.listalias"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivenseProducts.*.sku",name:"pdp.sku",formatter:"dearray"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivenseProducts.*.category",name:"pdp.category",formatter:"dearray"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivenseProducts.*.discountRate",name:"pdp.discountRate",formatter:"dearray"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivenseProducts.*.fastDelivery",name:"pdp.fastDelivery",formatter:"dearray"},{PageTypeDepend:"Productpage",method:"GADataLayer",selector:"vivenseProducts.*.isInShowroom",name:"pdp.isInShowroom",formatter:"dearray"},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"search_success",name:"plp.searchSuccess",exclusive:["plp.id","plp.approximateCount","plp.name","plp.group","plp.class"]},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"content_ids",name:"plp.id",exclusive:["plp.searchSuccess"]},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"category_product_count",name:"plp.approximateCount",exclusive:["plp.searchSuccess"]},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"content_name",name:"plp.name",exclusive:["plp.searchSuccess"]},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"productgroup",name:"plp.group",exclusive:["plp.searchSuccess"]},{PageTypeDepend:"Listingpage",method:"GADataLayer",selector:"vivense_category",name:"plp.class",exclusive:["plp.searchSuccess"]},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.products.*.id",name:"purchase.skus"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.products.*.price",name:"purchase.prices"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.products.*.quantity",name:"purchase.quantities"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.products.*.category",name:"purchase.categories"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.actionField.id",name:"purchase.orderId"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.actionField.revenue",name:"purchase.revenue"},{PageTypeDepend:"purchase",method:"GADataLayer",selector:"ecommerce.purchase.actionField.dimension15",name:"purchase.paymentType"},// ----------------------------------------------------------------------------------------------------------------------------------------------
// Document Queries
{PageTypeDepend:"*",method:"DocQuery",selector:"[class*=\"page_preview_wrapper_production\"]",name:"PageType",operand:"docQueryValueIfHasInnerText",value:"Homepage"},{PageTypeDepend:"*",method:"DocQuery",selector:"[class*=\"category_page_wrapper\"]",name:"PageType",operand:"docQueryValueIfHasInnerText",value:"Listingpage"},{PageTypeDepend:"*",method:"DocQuery",selector:"[class*=\"product-main-details\"]",name:"PageType",operand:"docQueryValueIfHasInnerText",value:"Productpage"},{PageTypeDepend:"*",method:"DocQuery",selector:"[class*=\"product\"]",name:"PageType",operand:"docQueryValueIfHasInnerText",value:"Productpage"},{PageTypeDepend:"Homepage|Productpage|Listingpage",method:"DocQuery",selector:"[class*=\"welcome_username\"]",name:"view.isLoggedIn",operand:"docQueryHasInnerText"},{PageTypeDepend:"Homepage|Productpage|Listingpage",method:"DocQuery",selector:"[class*=\"empty_basket_text\"]",name:"cart.isempty",operand:"docQueryHasInnerText",exclusive:["cart.totalBasePrice","cart.skucount","cart.couponNotApplicable"]},{PageTypeDepend:"Homepage|Productpage|Listingpage",method:"DocQuery",selector:"body > .desktop_layout_wrapper .not-allowed-coupon",name:"cart.couponNotApplicable",operand:"docQuerySumNumInnerText",exclusive:["cart.isempty"]},// Note that sequential search will mark copuonNotApplicable as found
{PageTypeDepend:"Homepage|Productpage|Listingpage",method:"DocQuery",selector:"[class*=\"basket_total_price\"]",name:"cart.totalBasePrice",operand:"docQueryInnerText",exclusive:["cart.isempty","cart.couponNotApplicable"],formatter:"numericOnly"},{PageTypeDepend:"Homepage|Productpage|Listingpage",method:"DocQuery",selector:"[id*=\"cart_quantity\"], [class*=\"basket_length\"]",name:"cart.skucount",operand:"docQueryInnerText",exclusive:["cart.isempty"]},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"[class*=\"delivery-date\"]",name:"pdp.deliveryDate",operand:"docQueryInnerText"},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"[class*=\"delivery-date\"]",name:"pdp.deliveryDateFormatted",operand:"docQueryInnerText",formatter:"formatDeliveryDate"},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"[class*=\"product-title\"], [class*=\"header-bottom\"]",name:"pdp.name",operand:"docQueryInnerText"},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"[class*=\"vivense-showrooms\"] > *",name:"pdp.showroomcount",operand:"docQueryCountElts",exclusive:["pdp.hasNoShowrooms"]},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"#vivense-showroom-tab p:not(.vivense-showrooms)",name:"pdp.hasNoShowrooms",operand:"docQueryHasInnerText",exclusive:["pdp.showroomcount"]},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"span.price",name:"pdp.price",operand:"docQueryInnerText",formatter:"numericOnly"},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"#sales-price",name:"pdp.price",operand:"docQueryInnerText",formatter:"numericOnly"},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"div.product-price-box",name:"__priceObserver",children:["pdp.price"],operand:"docQueryObserve"},{PageTypeDepend:"Productpage",method:"DocQuery",selector:"#mobile-product-sticky",name:"__priceObserver",children:["pdp.price"],operand:"docQueryObserve"},{PageTypeDepend:"Listingpage",method:"DocQuery",selector:"[class*=\"count-of-product\"]",name:"plp.itemCount",operand:"docQueryInnerText",formatter:"numericOnly"},{PageTypeDepend:"Listingpage",method:"DocQuery",selector:"[class*=\"subcategories-title\"]",name:"plp.name",operand:"docQueryInnerText"},{PageTypeDepend:"Listingpage",method:"DocQuery",selector:".product-card[data-product-sku]",name:"__features.SKUsonPage",operand:"docQueryAttribValueList",value:"data-product-sku"},{PageTypeDepend:"Listingpage",method:"DocQuery",selector:".product-list",name:"__listingItemBlockObserver",children:["__features.SKUsonPage"],operand:"docQueryObserve"},{PageTypeDepend:"basket",method:"DocQuery",selector:".empty-cart-container, .empty-cart",name:"cart.isempty",operand:"docQueryHasInnerText",exclusive:["cart.skucount","cart.totalPrice","cart.totalPriceFinal","cart.couponNotApplicable","cart.skus","cart.prices","cart.quantities","cart.categories","__checkoutFormObserver"]},{PageTypeDepend:"basket",method:"DocQuery",selector:".bracket-text, .product-count",name:"cart.skucount",operand:"docQueryInnerText",exclusive:["cart.isempty"],formatter:"numericOnly"},{PageTypeDepend:"basket",method:"DocQuery",selector:".cartItemQuantity",name:"cart.quantities",operand:"docQueryAttribValueList",value:"data-previous",exclusive:["cart.isempty"]},{PageTypeDepend:"basket",method:"DocQuery",selector:"#bill_total",name:"cart.totalPrice",operand:"docQueryInnerText",exclusive:["cart.isempty"],formatter:"numericOnly"},{PageTypeDepend:"basket",method:"DocQuery",selector:"[class*=\"order-final-number\"]",name:"cart.totalPriceFinal",operand:"docQueryInnerText",exclusive:["cart.isempty"],formatter:"numericOnly"},{PageTypeDepend:"basket",method:"DocQuery",selector:"[class*=\"cart-price\"] .not-allowed-coupon",name:"cart.couponNotApplicable",operand:"docQuerySumNumInnerText",exclusive:["cart.isempty"]},// Note that sequential search will mark couponApplicable as found
{PageTypeDepend:"basket",method:"DocQuery",selector:".cart-inside",name:"cart.skus",operand:"docQueryAttribValueList",value:"data-sku",exclusive:["cart.isempty","cart.couponNotApplicable"]},{PageTypeDepend:"basket",method:"DocQuery",selector:".cart-inside",name:"cart.categories",operand:"docQueryAttribValueList",value:"data-last-breadcrumb",exclusive:["cart.isempty","cart.couponNotApplicable"]},{PageTypeDepend:"basket",method:"DocQuery",selector:".cart-inside",name:"cart.prices",operand:"docQueryAttribValueList",value:"data-price",exclusive:["cart.isempty","cart.couponNotApplicable"]},// Desktop observer for the right panel, as it is the one changing
{PageTypeDepend:"basket",method:"DocQuery",selector:".cart-right-container",name:"__checkoutFormObserver",children:["cart.skucount","cart.totalPrice","cart.totalPriceFinal","cart.couponNotApplicable","cart.skus","cart.prices","cart.quantities","cart.categories","cart.isempty","cart.couponApplicableAmount"],operand:"docQueryObserve"},// Mobile observer for the full form block as it is completely replaced
{PageTypeDepend:"basket",method:"DocQuery",selector:"#checkoutForm",name:"__checkoutFormObserver",children:["cart.skucount","cart.totalPrice","cart.totalPriceFinal","cart.couponNotApplicable","cart.skus","cart.prices","cart.quantities","cart.categories","cart.isempty","cart.couponApplicableAmount"],operand:"docQueryObserve"},{PageTypeDepend:"purchase",method:"DocQuery",selector:"[class*=\"basket_summary_total\"], [class*=\"total_row\"]",name:"purchase.revenue",operand:"docQueryInnerText",formatter:"numericOnly"},{PageTypeDepend:"purchase",method:"DocQuery",selector:"[class*=\"order_follow_numb\"], [class*=\"cart-title-bottom\"]",name:"purchase.vvsTxnId",operand:"docQueryInnerText"},{PageTypeDepend:"purchase",method:"DocQuery",selector:".payment_type_title, .cart-title-info",name:"purchase.paymentType",operand:"docQueryInnerText",formatter:"lowerCaseTRFirstWord"},{PageTypeDepend:"purchase",method:"DocQuery",selector:"[class*=\"product_sku_code\"]",name:"purchase.skus",operand:"docQueryArrayInnerText"},{PageTypeDepend:"purchase",method:"DocQuery",selector:".cart-inside",name:"purchase.skus",operand:"docQueryAttribValueList",value:"data-sku"},// ----------------------------------------------------------------------------------------------------------------------------------------------
// SORG Elements
{PageTypeDepend:"Productpage",method:"DocSorg",selector:"sku",name:"pdp.sku"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"mpn",name:"pdp.mpn"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"name",name:"pdp.name",operand:"JSONFilterOther",value:"@type=Product"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"offers.priceValidUntil",name:"pdp.priceValidUntil"},{PageTypeDepend:"Productpage",method:"DocSorg",selector:"itemListElement.*.name",name:"view.breadcrumb"},{PageTypeDepend:"Listingpage",method:"DocSorg",selector:"mainEntity.name",name:"plp.name"},{PageTypeDepend:"Listingpage",method:"DocSorg",selector:"mainEntity.numberOfItems",name:"plp.itemCount"},{PageTypeDepend:"Listingpage",method:"DocSorg",selector:"breadcrumb.itemListElement.*.item.name",name:"view.breadcrumb"},// ----------------------------------------------------------------------------------------------------------------------------------------------
// Window custom elements
{PageTypeDepend:"*",method:"SingleWT",selector:"favoriteProducts",name:"view.favoritedMPNs"},{PageTypeDepend:"*",method:"SingleWT",selector:"isAdmin",name:"vvsIsShowroom",formatter:"toString"},{PageTypeDepend:"*",method:"SingleWT",selector:"userId",name:"vvsUserId"}];var featureEngineeringOps={"view_epoch":[{updateMethod:"min"},{queryMethod:"min",window:"session",featureName:"history.view_epoch_min"}],"PageType":[{updateMethod:"count_values"},{queryMethod:"cv",window:"session",featureName:"history.PageType_count_session"},{queryMethod:"cv",window:"alltime",featureName:"history.PageType_count_alltime"}],"cart.couponApplicableAmount":[{updateMethod:"last"},{queryMethod:"last(1)",window:"session",featureName:"__features.lastCartCouponApplicable"}],"pdp.category":[{updateMethod:"count_values"},{updateMethod:"last"},{queryMethod:"mode",window:"session",featureName:"history.pdp_category_mode_session"},{queryMethod:"last(1)",window:"session",featureName:"history.pdp_category_last_session"}],"cart.skus":[{updateMethod:"last"},{queryMethod:"last(1)",window:"session",featureName:"__features.SKUsonLastCartView"}]};var increaseBeagleInfoLayerHWM=function increaseBeagleInfoLayerHWM(){var infoLayer=window.top.beagleInfoLayer;// update hwm to indicate change
infoLayer.__hwm+=1;};var addToBeagleInfoLayer=function addToBeagleInfoLayer(key,value){var infoLayer=window.top.beagleInfoLayer;if(key===null||key===undefined)return;// if value is string, add as a clean string, if object add the same
var typedValue=typeof value==="string"?value.toString().trim():value;// if key contains . create nested object
if(key.indexOf(".")>-1){var keys=key.split(".");var lastKey=keys.pop();var obj=infoLayer;keys.forEach(function(key){if(!obj[key])obj[key]={};obj=obj[key];});obj[lastKey]=typedValue;}else{infoLayer[key]=typedValue;}// update hwm to indicate change
increaseBeagleInfoLayerHWM();// process dependent historical data for scan-found elements
if(typedValue!==undefined&&typedValue!==null){updateDerivationsInCollector(key,typedValue);passValueToListeners(key,typedValue);}};var DATA_LISTENERS={};var addDataListener=function addDataListener(key,listener){if(!DATA_LISTENERS[key]){DATA_LISTENERS[key]=[];}DATA_LISTENERS[key].push(listener);};var passValueToListeners=function passValueToListeners(key,value){var listeners=DATA_LISTENERS[key];if(listeners&&Array.isArray(listeners)&&listeners.length>0){for(var i=0;i<listeners.length;i+=1){var listener=listeners[i];if(typeof listener==="function"){BeagleInfoLayer_logger.log("passValueToListeners --> value ".concat(value," to listener ").concat(i," of key ").concat(key));listener(value);}}}};var getFromBeagleInfoLayer=function getFromBeagleInfoLayer(key){var blocking=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var pollInterval=arguments.length>2&&arguments[2]!==undefined?arguments[2]:50;var timeout=arguments.length>3&&arguments[3]!==undefined?arguments[3]:10000;// TODO: check featureEngineering and search list if all marked as found but value is missing
var infoLayer=window.top.beagleInfoLayer;// return null if key is missing or not an array or has no elements
if(!key)return null;var obtainData=jsonGet(infoLayer,key);if(obtainData!==null&&obtainData!==undefined){// found data for key
return Promise.resolve(obtainData);}var _iterator=BeagleInfoLayer_createForOfIteratorHelper(searchPaths),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var searchElement=_step.value;if(key===searchElement.name&&(searchElement.isFound||searchElement.isIgnore)){// data is missing but element is marked as found or ignored
return Promise.resolve(null);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}if(blocking){return new Promise(function(resolve){var interval=setInterval(function(){obtainData=jsonGet(infoLayer,key);if(obtainData!==null&&obtainData!==undefined){// found data for key, clear interval and resolve
clearInterval(interval);resolve(obtainData);}var _iterator2=BeagleInfoLayer_createForOfIteratorHelper(searchPaths),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var searchElement=_step2.value;if(key===searchElement.name&&(searchElement.isFound||searchElement.isIgnore)){// data is missing but element is marked as found or ignored
clearInterval(interval);resolve(null);}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}},pollInterval);// add timeout
setTimeout(function(){clearInterval(interval);resolve(null);},timeout);// wait blocking for "timeout" msecs
});}return Promise.resolve(null);};var removeFromBeagleInfoLayer=function removeFromBeagleInfoLayer(key){var infoLayer=window.top.beagleInfoLayer;if(key===null||key===undefined)return;// remove key from infoLayer
if(key.indexOf(".")>-1){var keys=key.split(".");var lastKey=keys.pop();var obj=infoLayer;keys.forEach(function(key){if(!obj[key])return;obj=obj[key];});BeagleInfoLayer_logger.log("removeFromBeagleInfoLayer","Removing ".concat(lastKey," from ").concat(JSON.stringify(obj)));delete obj[lastKey];}else{delete infoLayer[key];}increaseBeagleInfoLayerHWM();// process dependent historical data for scan-found elements
updateDerivationsInCollector(key,null);passValueToListeners(key,null);};var addTreatment=function addTreatment(id,businessRuleId,variant,status){var dependant_on_treatment=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var value={};var infoLayer=window.top.beagleInfoLayer;if(businessRuleId!==null&&businessRuleId!==undefined)value.businessRuleId=businessRuleId;if(variant)value.variant=variant;switch(status){case"applied":infoLayer.a[id]=value;break;case"skipped":value.dependant_on_treatment=dependant_on_treatment;infoLayer.e[id]=value;break;case"failed":infoLayer.f[id]=value;break;}increaseBeagleInfoLayerHWM();};var PARSESEARCHMAXRETRY=10;var PARSESEARCHSTARTDELAY=10;var parseSearchPathsDelay=PARSESEARCHSTARTDELAY;var parseSearchPathsRetry=0;var initializeBeagleInfoLayer=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(){return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// Collect core data
prepareCoreData();// Trigger-start the parser loop
parserCaller();// Add metrics
addMetrics();case 3:case"end":return _context.stop();}}},_callee);}));return function initializeBeagleInfoLayer(){return _ref.apply(this,arguments);};}();var collectDerivationsFromCollector=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(){var baseFeatureNames,_i,_baseFeatureNames,baseFeatureName,FEData,_iterator3,_step3,FEOp,queryResponse;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:baseFeatureNames=Object.keys(featureEngineeringOps);_i=0,_baseFeatureNames=baseFeatureNames;case 2:if(!(_i<_baseFeatureNames.length)){_context2.next=30;break;}baseFeatureName=_baseFeatureNames[_i];FEData=featureEngineeringOps[baseFeatureName];if(!(FEData&&Array.isArray(FEData)&&FEData.length>0)){_context2.next=27;break;}_iterator3=BeagleInfoLayer_createForOfIteratorHelper(FEData);_context2.prev=7;_iterator3.s();case 9:if((_step3=_iterator3.n()).done){_context2.next=19;break;}FEOp=_step3.value;if(!(FEOp.queryMethod===null||FEOp.queryMethod===undefined)){_context2.next=13;break;}return _context2.abrupt("continue",17);case 13:_context2.next=15;return queryInCollector(baseFeatureName,FEOp.queryMethod,FEOp.window);case 15:queryResponse=_context2.sent;addToBeagleInfoLayer(FEOp.featureName,queryResponse);case 17:_context2.next=9;break;case 19:_context2.next=24;break;case 21:_context2.prev=21;_context2.t0=_context2["catch"](7);_iterator3.e(_context2.t0);case 24:_context2.prev=24;_iterator3.f();return _context2.finish(24);case 27:_i++;_context2.next=2;break;case 30:case"end":return _context2.stop();}}},_callee2,null,[[7,21,24,27]]);}));return function collectDerivationsFromCollector(){return _ref2.apply(this,arguments);};}();var updateDerivationsInCollector=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(baseFeatureName,baseFeatureValue){var FEData,_iterator4,_step4,FEOp;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:// process dependent historical data for scan-found elements
FEData=featureEngineeringOps[baseFeatureName];if(!(FEData&&Array.isArray(FEData)&&FEData.length>0)){_context3.next=21;break;}_iterator4=BeagleInfoLayer_createForOfIteratorHelper(FEData);_context3.prev=3;_iterator4.s();case 5:if((_step4=_iterator4.n()).done){_context3.next=13;break;}FEOp=_step4.value;if(!(FEOp.updateMethod===null||FEOp.updateMethod===undefined)){_context3.next=9;break;}return _context3.abrupt("continue",11);case 9:_context3.next=11;return updateInCollector(baseFeatureName,baseFeatureValue,FEOp.updateMethod);case 11:_context3.next=5;break;case 13:_context3.next=18;break;case 15:_context3.prev=15;_context3.t0=_context3["catch"](3);_iterator4.e(_context3.t0);case 18:_context3.prev=18;_iterator4.f();return _context3.finish(18);case 21:case"end":return _context3.stop();}}},_callee3,null,[[3,15,18,21]]);}));return function updateDerivationsInCollector(_x,_x2){return _ref3.apply(this,arguments);};}();var processFormatter=function processFormatter(value,formatter){if(value===null||value===undefined||!formatter){return null;}switch(formatter){case"upperCaseTR":return value.toString().toUpperCase("tr-TR");case"formatDeliveryDate":return formatDeliveryDate(value);case"numericOnly":return value.replace(/\D/g,"");case"lowerCaseTRFirstWord":return value.toString().toLowerCase("tr-TR").split(" ")[0];case"dearray":if(Array.isArray(value)&&value.length>0){return value[0];}return value;case"toString":return value.toString().trim();default:return value;}};var searchObj=function searchObj(obj,searchElement){var value;var layerValue;try{switch(searchElement.operand){case"JSONFilterOther":{value=jsonGet(obj,searchElement.selector);if(value===null||value===undefined){break;}var filterParams=searchElement.value.split("=");if(filterParams.length!==2)break;var filterName=filterParams[0];var filterValue=filterParams[1];if(!filterName||!filterValue)break;var filterMatch=jsonGet(obj,filterName);if(!filterMatch||filterMatch!==filterValue)break;if(value&&(Array.isArray(value)?value.length>0:value.toString().trim().length>0)){layerValue=value;}}break;case"docQueryObserve":value=obj.querySelector(searchElement.selector);if(value!==null&&value!==undefined){searchElement.isFound=true;// update found status of the elements in the children list
var toBeUpdated=[];searchElement.children.forEach(function(child){var childElements=searchPaths.filter(function(element){return element.name===child;});// add childElements into toBeUpdated
toBeUpdated.push.apply(toBeUpdated,_toConsumableArray(childElements));});// run only if the element has added or removed children
var observer=new MutationObserver(/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee4(mutationList){var triggerRestart;return regenerator_default().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!isOwnMutation(mutationList)){_context4.next=2;break;}return _context4.abrupt("return");case 2:toBeUpdated.forEach(function(element){element.isFound=false;removeFromBeagleInfoLayer(element.name);});triggerRestart=parseSearchPathsRetry>=PARSESEARCHMAXRETRY;parseSearchPathsDelay=PARSESEARCHSTARTDELAY;parseSearchPathsRetry=0;if(triggerRestart){BeagleInfoLayer_logger.log("searchObj: triggered a restart of searchpaths due: ",searchElement.name);parserCaller();}case 7:case"end":return _context4.stop();}}},_callee4);}));return function(_x3){return _ref4.apply(this,arguments);};}());observer.observe(value,{subtree:true,childList:true});}break;case"docQueryInnerText":value=obj.querySelector(searchElement.selector);if(value!==null&&value!==undefined&&value.innerText&&value.innerText.trim().length>0){layerValue=value.innerText;}break;case"docQueryAttribValueList":{var attribValueList=[];value=obj.querySelectorAll(searchElement.selector);if(value===null||value===undefined||value.length===0)break;var _iterator5=BeagleInfoLayer_createForOfIteratorHelper(value),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var valuechild=_step5.value;var attribValue=valuechild.getAttribute(searchElement.value);if(attribValue){attribValueList.push(attribValue);}}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}if(attribValueList.length>0){layerValue=attribValueList;}}break;case"docQueryHasInnerText":value=obj.querySelector(searchElement.selector);if(value!==null&&value!==undefined){var setValue=value.innerText.trim().length>0;layerValue=setValue.toString();}break;case"docQueryCountElts":value=obj.querySelectorAll(searchElement.selector);if(value!==null&&value!==undefined){layerValue=value.length;}break;case"docQueryValueIfHasInnerText":value=obj.querySelector(searchElement.selector);if(value&&value.innerText&&value.innerText.trim().length>0){layerValue=searchElement.value;}break;case"docQuerySumNumInnerText":{value=obj.querySelectorAll(searchElement.selector);if(value===null||value===undefined||value.length===0)break;var sumPrice=0;var _iterator6=BeagleInfoLayer_createForOfIteratorHelper(value),_step6;try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var child=_step6.value;var childText=child.innerText.trim().replace(/\D/g,"");if(childText.length>0){sumPrice+=parseInt(childText);}}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}if(sumPrice>0){layerValue=sumPrice;}}break;case"docQueryArrayInnerText":{value=obj.querySelectorAll(searchElement.selector);if(value===null||value===undefined||value.length===0)break;var arrayInnerText=[];var _iterator7=BeagleInfoLayer_createForOfIteratorHelper(value),_step7;try{for(_iterator7.s();!(_step7=_iterator7.n()).done;){var _child=_step7.value;var _childText=_child.innerText.trim();if(_childText.length>0){arrayInnerText.push(_childText);}}}catch(err){_iterator7.e(err);}finally{_iterator7.f();}if(arrayInnerText.length>0){layerValue=arrayInnerText;}}break;default:value=jsonGet(obj,searchElement.selector);if(value!==null&&value!==undefined&&(Array.isArray(value)?value.length>0:value.toString().trim().length>0)){layerValue=value;}break;}// switch
if(layerValue!==undefined&&layerValue!==null){if(searchElement.formatter){layerValue=processFormatter(layerValue,searchElement.formatter);}addToBeagleInfoLayer(searchElement.name,layerValue);searchElement.isFound=true;// mark exclusive elements as found
if(searchElement.exclusive&&Array.isArray(searchElement.exclusive)&&searchElement.exclusive.length>0){var _iterator8=BeagleInfoLayer_createForOfIteratorHelper(searchPaths),_step8;try{for(_iterator8.s();!(_step8=_iterator8.n()).done;){var exclusiveElement=_step8.value;if(searchElement.exclusive.includes(exclusiveElement.name)){exclusiveElement.isFound=true;}}}catch(err){_iterator8.e(err);}finally{_iterator8.f();}}}if(searchElement.isFound){return true;}}catch(e){BeagleInfoLayer_logger.error("searchObj error: "+e);}return false;};var customDataDerivations=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee5(){var currentPageType,_yield$Promise$all,_yield$Promise$all2,isCartEmpty,totalBasePrice,couponNotApplicable,prices,quantities,totalPrice,i,couponApplicableAmount,sku,skuList;return regenerator_default().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return getFromBeagleInfoLayer("PageType",true,50,1000);case 2:currentPageType=_context5.sent;_context5.prev=3;_context5.next=6;return Promise.all([getFromBeagleInfoLayer("cart.isempty"),getFromBeagleInfoLayer("cart.totalBasePrice"),getFromBeagleInfoLayer("cart.couponNotApplicable"),getFromBeagleInfoLayer("cart.prices"),getFromBeagleInfoLayer("cart.quantities")]);case 6:_yield$Promise$all=_context5.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,5);isCartEmpty=_yield$Promise$all2[0];totalBasePrice=_yield$Promise$all2[1];couponNotApplicable=_yield$Promise$all2[2];prices=_yield$Promise$all2[3];quantities=_yield$Promise$all2[4];totalPrice=0;if(!totalBasePrice&&prices&&Array.isArray(prices)&&prices.length>0&&quantities&&Array.isArray(quantities)&&quantities.length>0&&prices.length===quantities.length){for(i=0;i<prices.length;i++){totalPrice+=parseInt(prices[i])*parseInt(quantities[i]);}}else{totalPrice=parseInt(totalBasePrice);}couponApplicableAmount=0;if(!isCartEmpty&&totalPrice&&couponNotApplicable){couponApplicableAmount=totalPrice-parseInt(couponNotApplicable);}else if(!isCartEmpty&&totalPrice){couponApplicableAmount=parseInt(totalPrice);}else{couponApplicableAmount=0;}addToBeagleInfoLayer("cart.couponApplicableAmount",couponApplicableAmount);if(isCartEmpty){addToBeagleInfoLayer("cart.totalPrice",0);addToBeagleInfoLayer("cart.couponNotApplicable",0);}_context5.next=24;break;case 21:_context5.prev=21;_context5.t0=_context5["catch"](3);BeagleInfoLayer_logger.error("customDataDerivations cannot compute couponApplicablePrice: "+_context5.t0);case 24:if(!(currentPageType==="Productpage")){_context5.next=33;break;}_context5.next=27;return getFromBeagleInfoLayer("pdp.sku");case 27:sku=_context5.sent;if(!(sku!==null&&sku!==undefined)){_context5.next=31;break;}_context5.next=31;return addToBeagleInfoLayer("__features.SKUsonPage",[sku]);case 31:_context5.next=40;break;case 33:if(!(currentPageType==="basket")){_context5.next=40;break;}_context5.next=36;return getFromBeagleInfoLayer("cart.skus");case 36:skuList=_context5.sent;if(!(skuList!==null&&Array.isArray(skuList)&&skuList.length)){_context5.next=40;break;}_context5.next=40;return addToBeagleInfoLayer("__features.SKUsonPage",skuList);case 40:case"end":return _context5.stop();}}},_callee5,null,[[3,21]]);}));return function customDataDerivations(){return _ref5.apply(this,arguments);};}();var parseSearchPaths=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee6(){var domStatus,wintop,dataLayer,windoc,sorgArrayInner,foundNames,prevFoundNames,notFoundNames,currentPageType,_iterator9,_step9,searchElement,_iterator10,_step10,_searchElement,_iterator11,_step11,dataLayerItem,_iterator12,_step12,sorgItem;return regenerator_default().wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:domStatus=document.readyState;// check if document and dom is loaded and ready for scrapping
BeagleInfoLayer_logger.log("parseSearchPaths initialized with dom status:  "+domStatus);wintop=window.top;dataLayer=wintop.dataLayer;windoc=wintop.document;foundNames=new Set();prevFoundNames=new Set();notFoundNames=new Set();// PageType can be inferred from URL, if found use it from there
_context6.next=10;return getFromBeagleInfoLayer("PageType");case 10:currentPageType=_context6.sent;if(currentPageType){prevFoundNames.add("PageType");}// Loop through search lists and mark found names
_iterator9=BeagleInfoLayer_createForOfIteratorHelper(searchPaths);try{for(_iterator9.s();!(_step9=_iterator9.n()).done;){searchElement=_step9.value;if(searchElement.isFound){prevFoundNames.add(searchElement.name);}}}catch(err){_iterator9.e(err);}finally{_iterator9.f();}_iterator10=BeagleInfoLayer_createForOfIteratorHelper(searchPaths);_context6.prev=15;_iterator10.s();case 17:if((_step10=_iterator10.n()).done){_context6.next=38;break;}_searchElement=_step10.value;if(!(_searchElement.isFound||_searchElement.isIgnore)){_context6.next=21;break;}return _context6.abrupt("continue",36);case 21:if(!(foundNames.has(_searchElement.name)||prevFoundNames.has(_searchElement.name))){_context6.next=24;break;}// had already found this element on another parse item
_searchElement.isFound=true;return _context6.abrupt("continue",36);case 24:if(!(_searchElement.PageTypeDepend!=="*")){_context6.next=35;break;}if(currentPageType){_context6.next=32;break;}_context6.next=28;return getFromBeagleInfoLayer("PageType");case 28:currentPageType=_context6.sent;if(currentPageType){_context6.next=32;break;}notFoundNames.add(_searchElement.name);return _context6.abrupt("continue",36);case 32:if(!(_searchElement.PageTypeDepend.indexOf(currentPageType)<0)){_context6.next=35;break;}// skip searchElement because of PageTypeDepend
_searchElement.isIgnore=true;return _context6.abrupt("continue",36);case 35:if(_searchElement.method==="SingleWT"){// SCAN Window for Single Elements
searchAndSet(wintop,_searchElement,foundNames,notFoundNames);}else if(_searchElement.method==="GADataLayer"){// SCAN GA DATA LAYER
_iterator11=BeagleInfoLayer_createForOfIteratorHelper(dataLayer);try{for(_iterator11.s();!(_step11=_iterator11.n()).done;){dataLayerItem=_step11.value;searchAndSet(dataLayerItem,_searchElement,foundNames,notFoundNames);}}catch(err){_iterator11.e(err);}finally{_iterator11.f();}}else if(_searchElement.method==="DocSorg"){// SCAN SORG ARRAY
if(!sorgArrayInner){sorgArrayInner=getSORGArray();}_iterator12=BeagleInfoLayer_createForOfIteratorHelper(sorgArrayInner);try{for(_iterator12.s();!(_step12=_iterator12.n()).done;){sorgItem=_step12.value;searchAndSet(sorgItem,_searchElement,foundNames,notFoundNames);}}catch(err){_iterator12.e(err);}finally{_iterator12.f();}}else if(_searchElement.method==="DocQuery"){// SCAN DOCUMENT
searchAndSet(windoc,_searchElement,foundNames,notFoundNames);}// DOCQUERY parse
case 36:_context6.next=17;break;case 38:_context6.next=43;break;case 40:_context6.prev=40;_context6.t0=_context6["catch"](15);_iterator10.e(_context6.t0);case 43:_context6.prev=43;_iterator10.f();return _context6.finish(43);case 46:if(notFoundNames.size===0){parseSearchPathsRetry=PARSESEARCHMAXRETRY;BeagleInfoLayer_logger.log("parseSearchPaths found all elements - setting retry to max");}else if(foundNames.size===0){// update retry counter and delay only if dom is active
if(domStatus==="complete"||domStatus==="interactive"){parseSearchPathsDelay*=2;parseSearchPathsRetry+=1;}BeagleInfoLayer_logger.log("parseSearchPaths processed but not found any, setting delay and retry to "+parseSearchPathsDelay+" and "+parseSearchPathsRetry+" for notfound: ["+Array.from(notFoundNames).join(" | ")+"]");}else{BeagleInfoLayer_logger.log("parseSearchPaths processed: notfound: ["+Array.from(notFoundNames).join(" | ")+"] and found "+foundNames.size);}case 47:case"end":return _context6.stop();}}},_callee6,null,[[15,40,43,46]]);}));return function parseSearchPaths(){return _ref6.apply(this,arguments);};}();var searchAndSet=function searchAndSet(obj,searchElement,foundNames,notFoundNames){if(searchObj(obj,searchElement)){foundNames.add(searchElement.name);}else{notFoundNames.add(searchElement.name);}};// parse source
var parserCaller=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee8(){return regenerator_default().wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.next=2;return parseSearchPaths();case 2:if(!(parseSearchPathsRetry<PARSESEARCHMAXRETRY)){_context8.next=7;break;}BeagleInfoLayer_logger.log("parseSearchPaths: scheduled to be recalled in "+parseSearchPathsDelay+"ms");setTimeout(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee7(){return regenerator_default().wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return parserCaller();case 2:case"end":return _context7.stop();}}},_callee7);})),parseSearchPathsDelay);_context8.next=13;break;case 7:BeagleInfoLayer_logger.log("parseSearchPaths: reached max retry, calling remainder historical data");_context8.next=10;return customDataDerivations();case 10:_context8.next=12;return collectDerivationsFromCollector();case 12:addToBeagleInfoLayer("__CompletedScraping",true);case 13:case"end":return _context8.stop();}}},_callee8);}));return function parserCaller(){return _ref7.apply(this,arguments);};}();// Extract value from json object using given path
// If an element is *, concatenate recursively all sub-path values as string
var jsonGet=function jsonGet(obj,path){if(!obj)return null;if(!path)return null;try{var pathArray=path.split(".");var current=obj;for(var i=0;i<pathArray.length;i++){if(current===null)return null;if(pathArray[i]==="*"){var subPath=pathArray.slice(i+1).join(".");var subArray=[];for(var subKey in current){if(current[subKey]!==undefined&&current[subKey]!==null){var subValue=jsonGet(current[subKey],subPath);if(subValue!==null&&subValue!==undefined){subArray.push(subValue);}}}return subArray;}current=current[pathArray[i]];}return current;}catch(e){return null;}};var prepareCoreData=/*#__PURE__*/function(){var _ref9=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee9(){var _windowPtr$navigator,_windowPtr$navigator$,_windowPtr$navigator2,_windowPtr$navigator3,_windowPtr$screen,_windowPtr$screen2,_windowPtr$screen3,_windowPtr$screen4,_windowPtr$visualView,_windowPtr$visualView2,_windowPtr$history,_windowPtr$navigator4,_windowPtr$navigator5;var windowPtr,navPtr,platform,availWindow,windowDepth,vportShape,width,height,iOS,_windowPtr$screen5,_windowPtr$screen5$or,orientationAngle,temp,_navPtr$userAgentData,_navPtr$userAgentData2,_navPtr$userAgentData3,navAgent,currentURL,firstSessionReferrer,pageType;return regenerator_default().wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:windowPtr=window.top;navPtr=windowPtr.navigator;platform=((_windowPtr$navigator=windowPtr.navigator)===null||_windowPtr$navigator===void 0?void 0:(_windowPtr$navigator$=_windowPtr$navigator.userAgentData)===null||_windowPtr$navigator$===void 0?void 0:_windowPtr$navigator$.platform)||((_windowPtr$navigator2=windowPtr.navigator)===null||_windowPtr$navigator2===void 0?void 0:_windowPtr$navigator2.platform)||((_windowPtr$navigator3=windowPtr.navigator)===null||_windowPtr$navigator3===void 0?void 0:_windowPtr$navigator3.userAgent);addToBeagleInfoLayer("device.navPlatform",platform);/* window view area */addToBeagleInfoLayer("device.windowPRatio",windowPtr.devicePixelRatio);availWindow=((_windowPtr$screen=windowPtr.screen)===null||_windowPtr$screen===void 0?void 0:_windowPtr$screen.availWidth)+"x"+((_windowPtr$screen2=windowPtr.screen)===null||_windowPtr$screen2===void 0?void 0:_windowPtr$screen2.availHeight);addToBeagleInfoLayer("device.windowAvail",availWindow);windowDepth=((_windowPtr$screen3=windowPtr.screen)===null||_windowPtr$screen3===void 0?void 0:_windowPtr$screen3.colorDepth)+"-"+((_windowPtr$screen4=windowPtr.screen)===null||_windowPtr$screen4===void 0?void 0:_windowPtr$screen4.pixelDepth);addToBeagleInfoLayer("device.windowDepth",windowDepth);vportShape=((_windowPtr$visualView=windowPtr.visualViewport)===null||_windowPtr$visualView===void 0?void 0:_windowPtr$visualView.width)+"x"+((_windowPtr$visualView2=windowPtr.visualViewport)===null||_windowPtr$visualView2===void 0?void 0:_windowPtr$visualView2.height);addToBeagleInfoLayer("device.windowVport",vportShape);if(screen.width){width=parseInt(screen.width);height=screen.height?parseInt(screen.height):0;if(width!==0&&height!==0){iOS=/iPad|iPhone|iPod/.test(platform);if(iOS&&windowPtr.devicePixelRatio){// ios provides DPIs, need to multiply
width=Math.round(width*windowPtr.devicePixelRatio);height=Math.round(height*windowPtr.devicePixelRatio);}else{orientationAngle=(_windowPtr$screen5=windowPtr.screen)===null||_windowPtr$screen5===void 0?void 0:(_windowPtr$screen5$or=_windowPtr$screen5.orientation)===null||_windowPtr$screen5$or===void 0?void 0:_windowPtr$screen5$or.angle;if(Math.abs(orientationAngle)===90||Math.abs(orientationAngle)===270){// we have landscape orientation switch values for all except ios
temp=width;width=height;height=temp;}}addToBeagleInfoLayer("device.window",width+"x"+height);}}/* navigator */addToBeagleInfoLayer("device.navHistSize",(_windowPtr$history=windowPtr.history)===null||_windowPtr$history===void 0?void 0:_windowPtr$history.length);// check if userAgentData is supported and userAgent is not available, use it
if(!navPtr.userAgent){if(navPtr.userAgentData){// turn brands array into string
navAgent=navPtr===null||navPtr===void 0?void 0:(_navPtr$userAgentData=navPtr.userAgentData)===null||_navPtr$userAgentData===void 0?void 0:(_navPtr$userAgentData2=_navPtr$userAgentData.brands)===null||_navPtr$userAgentData2===void 0?void 0:_navPtr$userAgentData2.map(function(e){return e.brand+":"+e.version;}).join();// add mobile info
navAgent+=navPtr!==null&&navPtr!==void 0&&(_navPtr$userAgentData3=navPtr.userAgentData)!==null&&_navPtr$userAgentData3!==void 0&&_navPtr$userAgentData3.mobile?"mobi":" ";// add platform info
navAgent+=platform;addToBeagleInfoLayer("device.navAgent",navAgent);}}else{addToBeagleInfoLayer("device.navAgent",navPtr.userAgent);}addToBeagleInfoLayer("device.navHWCores",navPtr.hardwareConcurrency);addToBeagleInfoLayer("device.navLanguage",navPtr.language||navPtr.browserLanguage||navPtr.systemLanguage||navPtr.userLanguage);addToBeagleInfoLayer("device.navTouch",navPtr.maxTouchPoints);addToBeagleInfoLayer("device.navVendor",navPtr.vendor);addToBeagleInfoLayer("device.internetSpeed",(_windowPtr$navigator4=windowPtr.navigator)===null||_windowPtr$navigator4===void 0?void 0:(_windowPtr$navigator5=_windowPtr$navigator4.connection)===null||_windowPtr$navigator5===void 0?void 0:_windowPtr$navigator5.downlink);/* miscellaneous */currentURL=new URL(window.top.location.href);addToBeagleInfoLayer("u",currentURL.href);addToBeagleInfoLayer("d",currentURL.hostname);addToBeagleInfoLayer("donttrack",navPtr.doNotTrack||windowPtr.doNotTrack||navPtr.msDoNotTrack);addToBeagleInfoLayer("r",windowPtr.document.referrer);firstSessionReferrer=sessionStorage.getItem(SESSION_STORAGE_KEYS.SESSION_REFERRER);if(!firstSessionReferrer){sessionStorage.setItem(SESSION_STORAGE_KEYS.SESSION_REFERRER,windowPtr.document.referrer);addToBeagleInfoLayer("fr",windowPtr.document.referrer);}else{addToBeagleInfoLayer("fr",firstSessionReferrer);}/* Vivense specific */ // if url like x then set PageType = y
if(currentURL.pathname.indexOf("favorilerim.html")>-1){pageType="favorites";}else if(currentURL.pathname.indexOf("siparis-listesi.html")>-1){pageType="basket";}else if(currentURL.pathname.indexOf("siparis-ozeti.html")>-1){pageType="purchase";}else if(currentURL.pathname.indexOf("odeme.html")>-1){pageType="payment";}else if(currentURL.pathname.indexOf("adres-listesi.html")>-1){pageType="address";}else if(currentURL.pathname.indexOf("siparislerim.html")>-1){pageType="pastorders";}else if(currentURL.pathname.indexOf("uye-kayit.html")>-1){pageType="register";}else if(currentURL.pathname.indexOf("uye-girisi.html")>-1){pageType="signin";}else if(currentURL.pathname.indexOf("kuponlarim.html")>-1){pageType="profile_coupons";}else if(currentURL.pathname.indexOf("profil-guncelle.html")>-1){pageType="profile_info";}else if(currentURL.pathname.indexOf("adreslerim.html")>-1){pageType="profile_addresses";}else if(currentURL.pathname.indexOf("duyuru-tercihleri.html")>-1){pageType="profile_notifications";}else if(currentURL.pathname.indexOf("indirimli-mobilya-kampanyalari.html")>-1){pageType="special_campaigns";}if(pageType){addToBeagleInfoLayer("PageType",pageType);}case 28:case"end":return _context9.stop();}}},_callee9);}));return function prepareCoreData(){return _ref9.apply(this,arguments);};}();var addMetrics=function addMetrics(){var windowPtr=window.top;var perfMetrics={};var perfNavigationMetrics=windowPtr.performance.getEntriesByType("navigation")[0];if(windowPtr.performance&&perfNavigationMetrics){perfMetrics.connect=Math.round(perfNavigationMetrics.connectEnd-perfNavigationMetrics.connectStart);perfMetrics.request=Math.round(perfNavigationMetrics.responseEnd-perfNavigationMetrics.requestStart);perfMetrics.dom=Math.round(perfNavigationMetrics.domInteractive-perfNavigationMetrics.domComplete);perfMetrics.load=Math.round(perfNavigationMetrics.loadEventEnd-perfNavigationMetrics.loadEventStart);perfMetrics.duration=Math.round(perfNavigationMetrics.duration);}addToBeagleInfoLayer("metrics",perfMetrics);};// TODO: move this to an "element collector" module, then data is extracted from pre-collected elements
var getSORGArray=function getSORGArray(){var schemaOrgElts=window.top.document.querySelectorAll("[type=\"application/ld+json\"]");var sorgArray=[];var _iterator13=BeagleInfoLayer_createForOfIteratorHelper(schemaOrgElts),_step13;try{for(_iterator13.s();!(_step13=_iterator13.n()).done;){var sTag=_step13.value;try{var cntnt=sTag.textContent;var jsoncontent=JSON.parse(cntnt);sorgArray.push(jsoncontent);}catch(err){// do nothing
}}}catch(err){_iterator13.e(err);}finally{_iterator13.f();}return sorgArray;};;// CONCATENATED MODULE: ./src/BeagleMonitor/index.js
var BeagleMonitor_logger=new src_logger("BeagleMonitor");var HEADERS={type:"text/plain"};var Monitor=/*#__PURE__*/function(){function Monitor(){_classCallCheck(this,Monitor);BeagleMonitor_logger.log("Initializing monitor");this.hasArrivalLogSent=false;this.hasMainLogSent=false;this.hasUpdatesSent=false;this.highWaterMark=null;this.initializeExitEventListeners();}// Attempts to send the initial log body (beagleInfoLayer's initial population) immediately
_createClass(Monitor,[{key:"sendLogs",value:function(){var _sendLogs=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(immediate){return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!immediate){_context.next=6;break;}BeagleMonitor_logger.log("In immediate sending block");_context.next=4;return this.packAndQueueMainLog();case 4:_context.next=12;break;case 6:BeagleMonitor_logger.log("In non-critical send path - awaiting scraping");_context.next=9;return getFromBeagleInfoLayer("__CompletedScraping",true,50,1000);case 9:BeagleMonitor_logger.log("In non-critical send path - sending logs");_context.next=12;return this.packAndQueueMainLog();case 12:case"end":return _context.stop();}}},_callee,this);}));function sendLogs(_x){return _sendLogs.apply(this,arguments);}return sendLogs;}()// Send initial log body and incremental update logs on close
},{key:"handleCloseEvent",value:function(){var _handleCloseEvent=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(){return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return this.packAndQueueMainLog();case 2:_context2.next=4;return this.packAndQueueIncrementalLog();case 4:case"end":return _context2.stop();}}},_callee2,this);}));function handleCloseEvent(){return _handleCloseEvent.apply(this,arguments);}return handleCloseEvent;}()},{key:"packAndQueueMainLog",value:function(){var _packAndQueueMainLog=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(){var requestBlob;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!this.hasMainLogSent){_context3.next=2;break;}return _context3.abrupt("return");case 2:_context3.next=4;return this.packageMainLogData();case 4:requestBlob=_context3.sent;if(!requestBlob){_context3.next=11;break;}_context3.next=8;return this.checkForLatestChanges();case 8:BeagleMonitor_logger.log("Request blob to send: ",requestBlob);this.hasMainLogSent=true;this.queueLogs(requestBlob);case 11:case"end":return _context3.stop();}}},_callee3,this);}));function packAndQueueMainLog(){return _packAndQueueMainLog.apply(this,arguments);}return packAndQueueMainLog;}()},{key:"packAndQueueIncrementalLog",value:function(){var _packAndQueueIncrementalLog=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee4(){var hasChanged,logData;return regenerator_default().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!(!this.hasMainLogSent||this.hasUpdatesSent)){_context4.next=2;break;}return _context4.abrupt("return");case 2:_context4.next=4;return this.checkForLatestChanges();case 4:hasChanged=_context4.sent;BeagleMonitor_logger.log("Update logs change status: ",hasChanged);if(hasChanged){_context4.next=8;break;}return _context4.abrupt("return");case 8:_context4.next=10;return this.packageIncrementalLogData();case 10:logData=_context4.sent;if(logData){BeagleMonitor_logger.log("Sending incremental logs",logData);this.hasUpdatesSent=true;this.queueLogs(logData);}case 12:case"end":return _context4.stop();}}},_callee4,this);}));function packAndQueueIncrementalLog(){return _packAndQueueIncrementalLog.apply(this,arguments);}return packAndQueueIncrementalLog;}()},{key:"packAndQueueArrivalLog",value:function(){var _packAndQueueArrivalLog=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee5(){var requestBlob;return regenerator_default().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(!(this.hasMainLogSent||this.hasArrivalLogSent)){_context5.next=2;break;}return _context5.abrupt("return");case 2:_context5.next=4;return this.packageArrivalLogData();case 4:requestBlob=_context5.sent;if(requestBlob){// prepare change detection hashes at the time of main log preparation
BeagleMonitor_logger.log("Arrival blob to send: ",requestBlob);this.hasArrivalLogSent=true;this.queueLogs(requestBlob);}case 6:case"end":return _context5.stop();}}},_callee5,this);}));function packAndQueueArrivalLog(){return _packAndQueueArrivalLog.apply(this,arguments);}return packAndQueueArrivalLog;}()},{key:"checkForLatestChanges",value:function(){var _checkForLatestChanges=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee6(){var hwm;return regenerator_default().wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return getFromBeagleInfoLayer("__hwm");case 2:hwm=_context6.sent;if(!(this.highWaterMark!==hwm)){_context6.next=6;break;}this.highWaterMark=hwm;return _context6.abrupt("return",true);case 6:return _context6.abrupt("return",false);case 7:case"end":return _context6.stop();}}},_callee6,this);}));function checkForLatestChanges(){return _checkForLatestChanges.apply(this,arguments);}return checkForLatestChanges;}()},{key:"packageArrivalLogData",value:function(){var _packageArrivalLogData=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee7(){var _yield$Promise$all,_yield$Promise$all2,url,hash,cookieGaId,view_epoch,body;return regenerator_default().wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return Promise.all([getFromBeagleInfoLayer("u"),getFromBeagleInfoLayer("onHashPct"),getFromBeagleInfoLayer("cookieGaId"),getFromBeagleInfoLayer("view_epoch")]);case 2:_yield$Promise$all=_context7.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,4);url=_yield$Promise$all2[0];hash=_yield$Promise$all2[1];cookieGaId=_yield$Promise$all2[2];view_epoch=_yield$Promise$all2[3];body={cookieGaId:cookieGaId,lc:0,view_epoch:view_epoch,u:url,onHashPct:hash};BeagleMonitor_logger.log("Arrival log data: ",body);return _context7.abrupt("return",new Blob([JSON.stringify(body)],HEADERS));case 11:case"end":return _context7.stop();}}},_callee7);}));function packageArrivalLogData(){return _packageArrivalLogData.apply(this,arguments);}return packageArrivalLogData;}()},{key:"packageMainLogData",value:function(){var _packageMainLogData=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee8(){var body,_i,_Object$entries,_Object$entries$_i,key,value;return regenerator_default().wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:body={};if(window.beagleInfoLayer){_context8.next=3;break;}return _context8.abrupt("return",null);case 3:for(_i=0,_Object$entries=Object.entries(window.beagleInfoLayer);_i<_Object$entries.length;_i++){_Object$entries$_i=_slicedToArray(_Object$entries[_i],2),key=_Object$entries$_i[0],value=_Object$entries$_i[1];if(!key.startsWith("_")&&value!==null)body[key]=value;}body.lc=1;return _context8.abrupt("return",new Blob([JSON.stringify(body)],HEADERS));case 6:case"end":return _context8.stop();}}},_callee8);}));function packageMainLogData(){return _packageMainLogData.apply(this,arguments);}return packageMainLogData;}()},{key:"packageIncrementalLogData",value:function(){var _packageIncrementalLogData=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee9(){var _yield$Promise$all3,_yield$Promise$all4,a,e,f,s,m,cookieGaId,view_epoch,body;return regenerator_default().wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:_context9.next=2;return Promise.all([getFromBeagleInfoLayer("a"),getFromBeagleInfoLayer("e"),getFromBeagleInfoLayer("f"),getFromBeagleInfoLayer("s"),getFromBeagleInfoLayer("m"),getFromBeagleInfoLayer("cookieGaId"),getFromBeagleInfoLayer("view_epoch")]);case 2:_yield$Promise$all3=_context9.sent;_yield$Promise$all4=_slicedToArray(_yield$Promise$all3,7);a=_yield$Promise$all4[0];e=_yield$Promise$all4[1];f=_yield$Promise$all4[2];s=_yield$Promise$all4[3];m=_yield$Promise$all4[4];cookieGaId=_yield$Promise$all4[5];view_epoch=_yield$Promise$all4[6];body={cookieGaId:cookieGaId,lc:2,view_epoch:view_epoch,a:a,e:e,f:f,s:s,m:m};BeagleMonitor_logger.log("Update log data: ",body);return _context9.abrupt("return",new Blob([JSON.stringify(body)],HEADERS));case 14:case"end":return _context9.stop();}}},_callee9);}));function packageIncrementalLogData(){return _packageIncrementalLogData.apply(this,arguments);}return packageIncrementalLogData;}()},{key:"initializeExitEventListeners",value:function initializeExitEventListeners(){var _this=this;var visibilityChangeTimeout=null;BeagleMonitor_logger.log("Initializing exit event listener");window.addEventListener("beforeunload",/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee10(){return regenerator_default().wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:BeagleMonitor_logger.log("In beforeunload event");clearTimeout(visibilityChangeTimeout);_context10.next=4;return _this.handleCloseEvent();case 4:case"end":return _context10.stop();}}},_callee10);})),{capture:true});window.addEventListener("pagehide",/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee11(){return regenerator_default().wrap(function _callee11$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:BeagleMonitor_logger.log("In pagehide event");clearTimeout(visibilityChangeTimeout);_context11.next=4;return _this.handleCloseEvent();case 4:case"end":return _context11.stop();}}},_callee11);})),{capture:true});window.addEventListener("visibilitychange",function(){if(window.top.document.visibilityState==="hidden"){// If page is not visible and doesn't become visible within 30 seconds, send logs
visibilityChangeTimeout=setTimeout(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee12(){return regenerator_default().wrap(function _callee12$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:BeagleMonitor_logger.log("In timeout");_context12.next=3;return _this.handleCloseEvent();case 3:case"end":return _context12.stop();}}},_callee12);})),30000);return;}// Clear timeout when page is visible to make sure we send the latest logs possible
clearTimeout(visibilityChangeTimeout);visibilityChangeTimeout=null;},{capture:true});}},{key:"queueLogs",value:function queueLogs(logData){if(!navigator.sendBeacon||typeof navigator.sendBeacon!=="function"){fetch(LOG_API_URL,logData);return;}var queued=navigator.sendBeacon(LOG_API_URL,logData);var queueInterval=setInterval(function(){if(!queued)queued=navigator.sendBeacon(LOG_API_URL,logData);else{clearInterval(queueInterval);BeagleMonitor_logger.log("Logs queued successfully");}},10);if(queued)return;setTimeout(function(){clearInterval(queueInterval);if(!queued){BeagleMonitor_logger.log("Logs not queued");}},1000);}}]);return Monitor;}();/* harmony default export */var BeagleMonitor=Monitor;;// CONCATENATED MODULE: ./src/BeagleTreatmentRepository/index.js
function BeagleTreatmentRepository_createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=BeagleTreatmentRepository_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function BeagleTreatmentRepository_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return BeagleTreatmentRepository_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return BeagleTreatmentRepository_arrayLikeToArray(o,minLen);}function BeagleTreatmentRepository_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}var BeagleTreatmentRepository_logger=new src_logger("BeagleTreatmentRepository");var TreatmentRepository=/*#__PURE__*/function(){function TreatmentRepository(body){_classCallCheck(this,TreatmentRepository);var treatments=body.treatments,treatmentWeights=body.treatmentWeights;this.treatments=treatments;this.treatmentWeights=treatmentWeights;this.currentPageType=null;}_createClass(TreatmentRepository,[{key:"getMatchedTreatments",value:function(){var _getMatchedTreatments=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(debugMode){var _CPT,_this=this;var CPT,matchedTreatments,treatments,treatmentWeights,userSegment,userSegmentWeights,_iterator,_step,_userSegmentWeights$t,treatment,segmentedWeight,_userSegmentWeights$t2,_iterator2,_step2,action,_i,_Object$keys,_userSegmentWeights$t3,_userSegmentWeights$t4,variantKey;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getFromBeagleInfoLayer("__eRules.PageType",true);case 2:CPT=_context.sent;CPT=((_CPT=CPT)===null||_CPT===void 0?void 0:_CPT[0])||null;if(CPT){_context.next=6;break;}return _context.abrupt("return",[]);case 6:this.currentPageType=CPT;matchedTreatments=window.sessionStorage.getItem(SESSION_STORAGE_KEYS.MATCHED_TREATMENTS);if(!matchedTreatments){_context.next=22;break;}_context.prev=9;_context.next=12;return JSON.parse(matchedTreatments);case 12:matchedTreatments=_context.sent;matchedTreatments=matchedTreatments.filter(function(mt){return _this.checkPageType(mt.pageTypes);});BeagleTreatmentRepository_logger.log("".concat(matchedTreatments.length," treatments user segment matched"));return _context.abrupt("return",matchedTreatments);case 18:_context.prev=18;_context.t0=_context["catch"](9);BeagleTreatmentRepository_logger.failed("Error getting matched robots:",_context.t0.message);return _context.abrupt("return",[]);case 22:matchedTreatments=[];treatments=this.treatments,treatmentWeights=this.treatmentWeights;_context.next=26;return getFromBeagleInfoLayer("s");case 26:userSegment=_context.sent;if(userSegment){_context.next=29;break;}return _context.abrupt("return",null);case 29:if(!treatmentWeights){_context.next=76;break;}userSegmentWeights=treatmentWeights[userSegment];if(userSegmentWeights){_context.next=33;break;}return _context.abrupt("return",[]);case 33:_iterator=BeagleTreatmentRepository_createForOfIteratorHelper(treatments);_context.prev=34;_iterator.s();case 36:if((_step=_iterator.n()).done){_context.next=68;break;}treatment=_step.value;segmentedWeight=(_userSegmentWeights$t=userSegmentWeights[treatment.id])===null||_userSegmentWeights$t===void 0?void 0:_userSegmentWeights$t.weight;if(segmentedWeight){_context.next=43;break;}if(treatment.dependant_on_treatment){segmentedWeight=(_userSegmentWeights$t2=userSegmentWeights[treatment.dependant_on_treatment])===null||_userSegmentWeights$t2===void 0?void 0:_userSegmentWeights$t2.weight;}else if(debugMode&&debugMode===1)segmentedWeight=100;if(segmentedWeight){_context.next=43;break;}return _context.abrupt("continue",66);case 43:treatment.weight=segmentedWeight;if(treatment.actions.some(function(a){return a.variants;})){_context.next=47;break;}matchedTreatments.push(treatment);return _context.abrupt("continue",66);case 47:_iterator2=BeagleTreatmentRepository_createForOfIteratorHelper(treatment.actions);_context.prev=48;_iterator2.s();case 50:if((_step2=_iterator2.n()).done){_context.next=57;break;}action=_step2.value;if(action.variants){_context.next=54;break;}return _context.abrupt("continue",55);case 54:for(_i=0,_Object$keys=Object.keys(action.variants);_i<_Object$keys.length;_i++){variantKey=_Object$keys[_i];if((_userSegmentWeights$t3=userSegmentWeights[treatment.id])!==null&&_userSegmentWeights$t3!==void 0&&_userSegmentWeights$t3.variants&&(_userSegmentWeights$t4=userSegmentWeights[treatment.id])!==null&&_userSegmentWeights$t4!==void 0&&_userSegmentWeights$t4.variants[variantKey]){action.variants[variantKey].weight=userSegmentWeights[treatment.id].variants[variantKey];}}case 55:_context.next=50;break;case 57:_context.next=62;break;case 59:_context.prev=59;_context.t1=_context["catch"](48);_iterator2.e(_context.t1);case 62:_context.prev=62;_iterator2.f();return _context.finish(62);case 65:matchedTreatments.push(treatment);case 66:_context.next=36;break;case 68:_context.next=73;break;case 70:_context.prev=70;_context.t2=_context["catch"](34);_iterator.e(_context.t2);case 73:_context.prev=73;_iterator.f();return _context.finish(73);case 76:window.sessionStorage.setItem(SESSION_STORAGE_KEYS.MATCHED_TREATMENTS,JSON.stringify(matchedTreatments));_context.next=79;return this.getMatchedTreatments(debugMode);case 79:return _context.abrupt("return",_context.sent);case 80:case"end":return _context.stop();}}},_callee,this,[[9,18],[34,70,73,76],[48,59,62,65]]);}));function getMatchedTreatments(_x){return _getMatchedTreatments.apply(this,arguments);}return getMatchedTreatments;}()},{key:"checkPageType",value:function checkPageType(pageTypes){var currentPageType=this.currentPageType;if(pageTypes===null||pageTypes===undefined)return true;if(!Array.isArray(pageTypes)){BeagleTreatmentRepository_logger.failed("Page Types should be an array");return false;}if(pageTypes[0].startsWith("!")){pageTypes=pageTypes.map(function(pt){return pt.substr(1);});return!pageTypes.includes(currentPageType);}return pageTypes.includes(currentPageType);}}],[{key:"getTreatments",value:function(){var _getTreatments=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(){var TREATMENTS,treatmentsObj,treatments,timestamp,treatmentWithTimestamp,elapsedHours,_treatmentWithTimestamp;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:BeagleTreatmentRepository_logger.log("Loading treatments");TREATMENTS=LOCAL_STORAGE_KEYS.TREATMENTS;treatmentsObj=JSON.parse(window.localStorage.getItem(TREATMENTS));treatments=treatmentsObj===null||treatmentsObj===void 0?void 0:treatmentsObj.treatments;timestamp=treatmentsObj===null||treatmentsObj===void 0?void 0:treatmentsObj.timestamp;if(!(!treatments||!timestamp)){_context2.next=17;break;}BeagleTreatmentRepository_logger.failed("Treatments not found in local storage");_context2.next=9;return fetchTreatments();case 9:treatments=_context2.sent;if(treatments){_context2.next=13;break;}BeagleTreatmentRepository_logger.failed("Failed to fetch treatments");return _context2.abrupt("return",null);case 13:treatmentWithTimestamp={timestamp:Date.now(),treatments:treatments};window.localStorage.setItem(TREATMENTS,JSON.stringify(treatmentWithTimestamp));window.sessionStorage.removeItem(SESSION_STORAGE_KEYS.MATCHED_TREATMENTS);return _context2.abrupt("return",treatments);case 17:if(!timestamp){_context2.next=31;break;}elapsedHours=(Date.now()-timestamp)/(1000*3600);if(!(elapsedHours>LOCAL_STORAGE_TTL_HOURS)){_context2.next=31;break;}BeagleTreatmentRepository_logger.failed("Treatments are expired");_context2.next=23;return fetchTreatments();case 23:treatments=_context2.sent;if(treatments){_context2.next=27;break;}BeagleTreatmentRepository_logger.failed("Failed to fetch treatments");return _context2.abrupt("return",null);case 27:_treatmentWithTimestamp={timestamp:Date.now(),treatments:treatments};window.localStorage.setItem(TREATMENTS,JSON.stringify(_treatmentWithTimestamp));window.sessionStorage.removeItem(SESSION_STORAGE_KEYS.MATCHED_TREATMENTS);return _context2.abrupt("return",treatments);case 31:BeagleTreatmentRepository_logger.success("Treatments are loaded from local storage");return _context2.abrupt("return",treatments);case 33:case"end":return _context2.stop();}}},_callee2);}));function getTreatments(){return _getTreatments.apply(this,arguments);}return getTreatments;}()},{key:"getTreatmentWeights",value:function(){var _getTreatmentWeights=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(){var weightsObj,elapsedHours;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;weightsObj=window.localStorage.getItem(LOCAL_STORAGE_KEYS.WEIGHTS);if(!weightsObj){_context3.next=8;break;}weightsObj=JSON.parse(weightsObj);if(!weightsObj.timestamp){_context3.next=8;break;}elapsedHours=(Date.now()-weightsObj.timestamp)/(1000*3600);if(!(elapsedHours<LOCAL_STORAGE_TTL_HOURS)){_context3.next=8;break;}return _context3.abrupt("return",weightsObj.weights);case 8:_context3.next=10;return fetchTreatmentWeights();case 10:weightsObj=_context3.sent;if(weightsObj){_context3.next=14;break;}BeagleTreatmentRepository_logger.failed("Failed to fetch weights");return _context3.abrupt("return",null);case 14:weightsObj={weights:weightsObj,timestamp:Date.now()};window.localStorage.setItem(LOCAL_STORAGE_KEYS.WEIGHTS,JSON.stringify(weightsObj));return _context3.abrupt("return",weightsObj.weights);case 19:_context3.prev=19;_context3.t0=_context3["catch"](0);BeagleTreatmentRepository_logger.warn(_context3.t0.message);return _context3.abrupt("return",null);case 23:case"end":return _context3.stop();}}},_callee3,null,[[0,19]]);}));function getTreatmentWeights(){return _getTreatmentWeights.apply(this,arguments);}return getTreatmentWeights;}()}]);return TreatmentRepository;}();/* harmony default export */var BeagleTreatmentRepository=TreatmentRepository;;// CONCATENATED MODULE: ./src/BeagleApplyActions/replace-utils.js
function replace_utils_createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=replace_utils_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function replace_utils_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return replace_utils_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return replace_utils_arrayLikeToArray(o,minLen);}function replace_utils_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}var replace_utils_logger=new src_logger("ReplaceUtils");var replacer=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(value,replaceFn){var _iterator,_step,_step$value,i,val,currentReplaceFn,replaceVal,_iterator2,_step2,rFn,_replaceVal,_replaceVal2;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!Array.isArray(value)){_context.next=27;break;}_iterator=replace_utils_createForOfIteratorHelper(value.entries());_context.prev=2;_iterator.s();case 4:if((_step=_iterator.n()).done){_context.next=17;break;}_step$value=_slicedToArray(_step.value,2),i=_step$value[0],val=_step$value[1];currentReplaceFn=Array.isArray(replaceFn)?replaceFn[i]:replaceFn||"";if(!(_typeof(currentReplaceFn)==="object")){_context.next=14;break;}_context.next=10;return replaceObjectExtractor(currentReplaceFn);case 10:replaceVal=_context.sent;value[i]=replaceAll(val,"{{REPLACE}}",replaceVal);_context.next=15;break;case 14:value[i]=replaceFnExecutor(currentReplaceFn,val);case 15:_context.next=4;break;case 17:_context.next=22;break;case 19:_context.prev=19;_context.t0=_context["catch"](2);_iterator.e(_context.t0);case 22:_context.prev=22;_iterator.f();return _context.finish(22);case 25:_context.next=61;break;case 27:if(!Array.isArray(replaceFn)){_context.next=53;break;}_iterator2=replace_utils_createForOfIteratorHelper(replaceFn);_context.prev=29;_iterator2.s();case 31:if((_step2=_iterator2.n()).done){_context.next=43;break;}rFn=_step2.value;if(!(_typeof(rFn)==="object")){_context.next=40;break;}_context.next=36;return replaceObjectExtractor(rFn);case 36:_replaceVal=_context.sent;value=value.replace("{{REPLACE}}",_replaceVal);_context.next=41;break;case 40:value=replaceFnExecutor(rFn,value,true);case 41:_context.next=31;break;case 43:_context.next=48;break;case 45:_context.prev=45;_context.t1=_context["catch"](29);_iterator2.e(_context.t1);case 48:_context.prev=48;_iterator2.f();return _context.finish(48);case 51:_context.next=61;break;case 53:if(!(_typeof(replaceFn)==="object")){_context.next=60;break;}_context.next=56;return replaceObjectExtractor(replaceFn);case 56:_replaceVal2=_context.sent;value=replaceAll(value,"{{REPLACE}}",_replaceVal2);_context.next=61;break;case 60:value=replaceFnExecutor(replaceFn,value);case 61:return _context.abrupt("return",value);case 62:case"end":return _context.stop();}}},_callee,null,[[2,19,22,25],[29,45,48,51]]);}));return function replacer(_x,_x2){return _ref.apply(this,arguments);};}();function replaceFnExecutor(replaceFn,value){var single=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(replaceFn&&value.includes("{{REPLACE}}")){replace_utils_logger.log("Executing replace function: ",replaceFn);var replaceFunction=Function(replaceFn);if(single)return value.replace("{{REPLACE}}",replaceFunction());return replaceAll(value,"{{REPLACE}}",replaceFunction());}return value;}function replaceObjectExtractor(_x3){return _replaceObjectExtractor.apply(this,arguments);}function _replaceObjectExtractor(){_replaceObjectExtractor=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(replaceFn){var storage,key,keyFallback,type,replaceVal,_replaceVal3;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:storage=replaceFn.storage,key=replaceFn.key,keyFallback=replaceFn.keyFallback,type=replaceFn.type;_context2.t0=storage;_context2.next=_context2.t0==="session"?4:_context2.t0==="info-layer"?18:26;break;case 4:replaceVal=null;replaceVal=window.sessionStorage.getItem(key);if(!replaceVal)replaceVal=window.sessionStorage.getItem(keyFallback);if(!type){_context2.next=17;break;}_context2.prev=8;replaceVal=JSON.parse(replaceVal);replaceVal=replaceVal[replaceVal.length-1][type];_context2.next=17;break;case 13:_context2.prev=13;_context2.t1=_context2["catch"](8);replace_utils_logger.failed("Could not parse ".concat(replaceVal));return _context2.abrupt("return",null);case 17:return _context2.abrupt("return",replaceVal);case 18:_context2.next=20;return getFromBeagleInfoLayer(key);case 20:_replaceVal3=_context2.sent;if(_replaceVal3){_context2.next=25;break;}_context2.next=24;return getFromBeagleInfoLayer(keyFallback);case 24:_replaceVal3=_context2.sent;case 25:return _context2.abrupt("return",_replaceVal3);case 26:case"end":return _context2.stop();}}},_callee2,null,[[8,13]]);}));return _replaceObjectExtractor.apply(this,arguments);}/* harmony default export */var replace_utils=replacer;;// CONCATENATED MODULE: ./src/GlovProductInfoRepository/store.config.js
var store_config_config={dbName:"beagle_cache",version:1,store:{name:"infoCache",indexes:[{name:"ix_sku",fields:"sku"}],options:{keyPath:"sku"}}};/* harmony default export */var GlovProductInfoRepository_store_config=store_config_config;;// CONCATENATED MODULE: ./src/GlovProductInfoRepository/index.js
function GlovProductInfoRepository_createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=GlovProductInfoRepository_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function GlovProductInfoRepository_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return GlovProductInfoRepository_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return GlovProductInfoRepository_arrayLikeToArray(o,minLen);}function GlovProductInfoRepository_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}var GlovProductInfoRepository_logger=new src_logger("GlovProductInfoRepository");var GlovProductInfoRepository=/*#__PURE__*/function(){function GlovProductInfoRepository(){_classCallCheck(this,GlovProductInfoRepository);this.indexedDB=null;this.init();}_createClass(GlovProductInfoRepository,[{key:"init",value:function init(){var _window$top$indexedDB,_this=this;GlovProductInfoRepository_logger.log("Initializing indexedDB");var openRequest=(_window$top$indexedDB=window.top.indexedDB)===null||_window$top$indexedDB===void 0?void 0:_window$top$indexedDB.open(GlovProductInfoRepository_store_config.dbName,GlovProductInfoRepository_store_config.version);if(!openRequest){throw new Error("indexeddb is not supported");}openRequest.onupgradeneeded=function(event){switch(event.oldVersion){case 0:break;default:// TODO upgrade existing db instead of delete and create from scratch
try{openRequest.result.deleteObjectStore(GlovProductInfoRepository_store_config.store.name);}catch(err){GlovProductInfoRepository_logger.failed("Could not delete outdated database",err.message);}break;}try{var _config$store$indexes;var store=openRequest.result.createObjectStore(GlovProductInfoRepository_store_config.store.name,GlovProductInfoRepository_store_config.store.options);if(((_config$store$indexes=GlovProductInfoRepository_store_config.store.indexes)===null||_config$store$indexes===void 0?void 0:_config$store$indexes.length)>0){var _iterator=GlovProductInfoRepository_createForOfIteratorHelper(GlovProductInfoRepository_store_config.store.indexes),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var idx=_step.value;store.createIndex(idx.name,idx.fields);}}catch(err){_iterator.e(err);}finally{_iterator.f();}}}catch(err){GlovProductInfoRepository_logger.failed("Could not create object store on database",err.message);}};openRequest.onerror=function(){throw new Error("Error initializing beagle_cache indexed DB",openRequest.error);};openRequest.onsuccess=function(){_this.indexedDB=openRequest.result;};}},{key:"getConnection",value:function getConnection(){var _this2=this;return new Promise(function(resolve,reject){var interval=setInterval(function(){if(_this2.indexedDB){clearInterval(interval);resolve();}},25);setTimeout(function(){if(!_this2.indexedDB){clearInterval(interval);reject(new Error("IndexedDB not initialized within the allotted time"));}},1000);});}},{key:"initTransaction",value:function(){var _initTransaction=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(){var readwrite,tx,_args=arguments;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:readwrite=_args.length>0&&_args[0]!==undefined?_args[0]:false;_context.next=3;return this.getConnection();case 3:tx=this.indexedDB.transaction(GlovProductInfoRepository_store_config.store.name,readwrite?"readwrite":"readonly");return _context.abrupt("return",tx.objectStore(GlovProductInfoRepository_store_config.store.name));case 5:case"end":return _context.stop();}}},_callee,this);}));function initTransaction(){return _initTransaction.apply(this,arguments);}return initTransaction;}()},{key:"save",value:function(){var _save=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(payload){var store,timestamp,_iterator2,_step2,load;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return this.initTransaction(true);case 2:store=_context2.sent;timestamp=Math.round(Date.now()/1000);if(Array.isArray(payload)){_iterator2=GlovProductInfoRepository_createForOfIteratorHelper(payload);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){load=_step2.value;load.timestamp=timestamp;store.put(load);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}else{payload.timestamp=timestamp;store.put(payload);}case 5:case"end":return _context2.stop();}}},_callee2,this);}));function save(_x){return _save.apply(this,arguments);}return save;}()},{key:"clear",value:function(){var _clear=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(){var _this3=this;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:return _context3.abrupt("return",new Promise(function(resolve){_this3.initTransaction(true).then(function(store){var clearRequest=store.clear();clearRequest.onsuccess=function(){resolve();};clearRequest.onerror=function(){GlovProductInfoRepository_logger.failed("Error clearing store: ".concat(store.name));resolve(null);};});}));case 1:case"end":return _context3.stop();}}},_callee3);}));function clear(){return _clear.apply(this,arguments);}return clear;}()},{key:"get",value:function(){var _get=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee4(sku){var _this4=this;return regenerator_default().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:return _context4.abrupt("return",new Promise(function(resolve){_this4.initTransaction().then(function(store){var getRequest=store.get(sku);getRequest.onsuccess=function(){var result=getRequest.result;GlovProductInfoRepository_logger.log("Found value ".concat(result," for key ").concat(sku));resolve(result);};getRequest.onerror=function(){GlovProductInfoRepository_logger.failed("Error getting value for key: ".concat(sku),getRequest.onerror);resolve(null);};});}));case 1:case"end":return _context4.stop();}}},_callee4);}));function get(_x2){return _get.apply(this,arguments);}return get;}()},{key:"count",value:function(){var _count=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee5(){var _this5=this;return regenerator_default().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:return _context5.abrupt("return",new Promise(function(resolve){_this5.initTransaction().then(function(store){var countRequest=store.count();countRequest.onsuccess=function(){var result=countRequest.result;GlovProductInfoRepository_logger.log("Counted ".concat(result," entries"));resolve(result);};countRequest.onerror=function(){GlovProductInfoRepository_logger.failed("Error counting entries: ",countRequest.onerror);resolve(null);};});}));case 1:case"end":return _context5.stop();}}},_callee5);}));function count(){return _count.apply(this,arguments);}return count;}()},{key:"getCursor",value:function(){var _getCursor=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee6(){var _this6=this;return regenerator_default().wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:return _context6.abrupt("return",new Promise(function(resolve){_this6.initTransaction().then(function(store){var cursorRequest=store.openCursor();cursorRequest.onsuccess=function(event){resolve(event.target.result);};cursorRequest.onerror=function(){GlovProductInfoRepository_logger.failed("Error getting cursor",cursorRequest.onerror);resolve(null);};});}));case 1:case"end":return _context6.stop();}}},_callee6);}));function getCursor(){return _getCursor.apply(this,arguments);}return getCursor;}()},{key:"persistProductInfo",value:function(){var _persistProductInfo=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee7(){var existingProdInfo,cursor,timestamp,elapsedSeconds,productInfoPromise,clearPromise,_yield$Promise$all,_yield$Promise$all2,productInfoArray;return regenerator_default().wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:addToBeagleInfoLayer("m","check-existing-prod-info");_context7.next=3;return this.count();case 3:existingProdInfo=_context7.sent;if(!existingProdInfo){_context7.next=14;break;}GlovProductInfoRepository_logger.log("Existing product info found");_context7.next=8;return this.getCursor();case 8:cursor=_context7.sent;timestamp=cursor.value.timestamp;elapsedSeconds=Date.now()/1000-timestamp;// Re-fetch product info once a day
if(!(elapsedSeconds<86400)){_context7.next=13;break;}return _context7.abrupt("return");case 13:GlovProductInfoRepository_logger.log("Existing product info is expired");case 14:addToBeagleInfoLayer("m","fetching-prod-info");productInfoPromise=fetchProductInfo();clearPromise=this.clear();_context7.next=19;return Promise.all([productInfoPromise,clearPromise]);case 19:_yield$Promise$all=_context7.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,1);productInfoArray=_yield$Promise$all2[0];if(!(!productInfoArray||!productInfoArray.length)){_context7.next=24;break;}return _context7.abrupt("return");case 24:addToBeagleInfoLayer("m","fetched-prod-info");_context7.next=27;return this.save(this.preparePayloads(productInfoArray));case 27:addToBeagleInfoLayer("m","persisted-prod-info");case 28:case"end":return _context7.stop();}}},_callee7,this);}));function persistProductInfo(){return _persistProductInfo.apply(this,arguments);}return persistProductInfo;}()},{key:"preparePayloads",value:function preparePayloads(productInfoArray){var payloads=[];var fieldNames=productInfoArray.shift();fieldNames.shift();var _iterator3=GlovProductInfoRepository_createForOfIteratorHelper(productInfoArray),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var info=_step3.value;var payload={sku:info.shift()};for(var i=0;i<fieldNames.length;i++){payload[fieldNames[i]]=info[i]||0;}payloads.push(payload);}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}return payloads;}}]);return GlovProductInfoRepository;}();/* harmony default export */var src_GlovProductInfoRepository=GlovProductInfoRepository;;// CONCATENATED MODULE: ./src/GlovProductInfoRepository/store.js
var Store=function(){var instance=null;return{getInstance:function getInstance(){if(instance===null){instance=new src_GlovProductInfoRepository();// Hide the constructor so the returned object can't be new'd...
instance.constructor=null;}return instance;}};}();/* harmony default export */var store=Store;;// CONCATENATED MODULE: ./src/BeagleApplyActions/action-condition-util.js
var action_condition_util_logger=new src_logger("ActionConditionUtils");var checkActionCondition=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(condition){var eligibleElements,attribute,inner_condition,operator,selector,type,value,chain,conditionElements,_i,_conditionElements,element;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:action_condition_util_logger.log("Action condition found: ",condition);eligibleElements=[];attribute=condition.attribute,inner_condition=condition.inner_condition,operator=condition.operator,selector=condition.selector,type=condition.type,value=condition.value,chain=condition.chain;conditionElements=Array.from(window.top.document.querySelectorAll(selector));_i=0,_conditionElements=conditionElements;case 5:if(!(_i<_conditionElements.length)){_context.next=14;break;}element=_conditionElements[_i];_context.next=9;return actionConditionChecker(element,type,operator,attribute,inner_condition,value,chain);case 9:if(!_context.sent){_context.next=11;break;}eligibleElements.push($(element));case 11:_i++;_context.next=5;break;case 14:return _context.abrupt("return",eligibleElements);case 15:case"end":return _context.stop();}}},_callee);}));return function checkActionCondition(_x){return _ref.apply(this,arguments);};}();var actionConditionChecker=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(element,type,operator,attribute,inner_condition,value,chain){var elementSku,productInfo,runTimeValue,res,_runTimeValue,_res;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.t0=type;_context2.next=_context2.t0==="productInfoLookup"?3:20;break;case 3:elementSku=element.getAttribute(attribute);_context2.next=6;return store.getInstance().get(elementSku);case 6:productInfo=_context2.sent;runTimeValue=productInfo===null||productInfo===void 0?void 0:productInfo[operator];// runTimeValue may be 0
if(!(runTimeValue===null||runTimeValue===undefined)){_context2.next=11;break;}action_condition_util_logger.failed("Product info is empty");return _context2.abrupt("return",false);case 11:if(conditionChecker(runTimeValue,inner_condition,value)){_context2.next=13;break;}return _context2.abrupt("return",false);case 13:if(!chain){_context2.next=19;break;}_context2.next=16;return actionConditionChecker(element,chain.type,chain.operator,chain.attribute,chain.inner_condition,chain.value,chain.chain);case 16:res=_context2.sent;if(res){_context2.next=19;break;}return _context2.abrupt("return",false);case 19:return _context2.abrupt("break",29);case 20:_runTimeValue=element.getAttribute(attribute);if(conditionChecker(_runTimeValue,inner_condition,value)){_context2.next=23;break;}return _context2.abrupt("return",false);case 23:if(!chain){_context2.next=29;break;}_context2.next=26;return actionConditionChecker(element,chain.type,chain.operator,chain.attribute,chain.inner_condition,chain.value,chain.chain);case 26:_res=_context2.sent;if(_res){_context2.next=29;break;}return _context2.abrupt("return",false);case 29:return _context2.abrupt("return",true);case 30:case"end":return _context2.stop();}}},_callee2);}));return function actionConditionChecker(_x2,_x3,_x4,_x5,_x6,_x7,_x8){return _ref2.apply(this,arguments);};}();/* harmony default export */var action_condition_util=checkActionCondition;// EXTERNAL MODULE: ./out/GlovAiClientSDK/bundle.js
var bundle=__nested_webpack_require_278923__(63);;// CONCATENATED MODULE: ./src/BeagleApplyActions/index.js
function BeagleApplyActions_createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=BeagleApplyActions_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function BeagleApplyActions_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return BeagleApplyActions_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return BeagleApplyActions_arrayLikeToArray(o,minLen);}function BeagleApplyActions_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function applyActions(_x){return _applyActions.apply(this,arguments);}function _applyActions(){_applyActions=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee8(actions){var logger,POPUP_DISPLAY_FLAG,transformer,prepareDescElm,prepareFinalTitle,replaceWithVal,getProductInfo,handleDocumentTitleTabChange,handlePopupClick,handleModalClick,displayPopup,displayModal,createPopup,swapNodes,waitForJQuery,actionApplicator,result;return regenerator_default().wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:logger=new src_logger("BeagleApplyActions");POPUP_DISPLAY_FLAG=SESSION_STORAGE_KEYS.POPUP_DISPLAY_FLAG;transformer=/*#__PURE__*/function(){var _transformer=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(action){var element,operator,type,applyEvent,contentSelector,selector,selectorFallback,mdCondition,move_selector_1,move_selector_2,replaceFn,pType,attribute,productInfoStorage,value,mc,elm,mobile,_iterator,_step,event,_yield$Promise$all,_yield$Promise$all2,r,d,styleChangesMap,_iterator2,_step2,_event,property,propertyValue,n1,n2,source,destination,res,_i,_Array$from,_e$innerText,e,finalTitle,descriptionElm,_args=arguments;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:element=_args.length>1&&_args[1]!==undefined?_args[1]:null;logger.log("Applying action: ",JSON.stringify(action));operator=action.operator,type=action.type,applyEvent=action.applyEvent,contentSelector=action.contentSelector,selector=action.selector,selectorFallback=action.selectorFallback,mdCondition=action.mdCondition,move_selector_1=action.move_selector_1,move_selector_2=action.move_selector_2,replaceFn=action.replaceFn,pType=action.pType,attribute=action.attribute,productInfoStorage=action.productInfoStorage;if(!(operator==="noop")){_context.next=6;break;}logger.failed("Noop Operator: No operation is applied on target ");return _context.abrupt("return",true);case 6:value=action.value;// If an element is passed to transformer, selector is relative to passed element
element=element?element.find(selector):$(selector);mc=mdCondition?window.matchMedia(mdCondition).matches:true;if(mc){_context.next=12;break;}logger.failed("Media condition mismatch: ",mdCondition);return _context.abrupt("return",false);case 12:if(!(move_selector_1&&!move_selector_2||move_selector_2&&!move_selector_1)){_context.next=15;break;}logger.failed("Both move selectors are required");return _context.abrupt("return",false);case 15:if(!(move_selector_1&&move_selector_2)){_context.next=24;break;}if($(move_selector_1).length){_context.next=19;break;}logger.failed("Move selector 1 not found: ",move_selector_1);return _context.abrupt("return",false);case 19:if($(move_selector_2).length){_context.next=22;break;}logger.failed("Move selector 2 not found: ",move_selector_2);return _context.abrupt("return",false);case 22:_context.next=39;break;case 24:if(selector){_context.next=29;break;}logger.failed("Selector not specified");return _context.abrupt("return",false);case 29:if(element.length){_context.next=39;break;}if(!(!$(selectorFallback).length&&operator==="remove")){_context.next=32;break;}return _context.abrupt("return",true);case 32:if(!(selector!=="no-selector")){_context.next=39;break;}logger.failed("Selector not found: ",selector);logger.log("Trying fallback selector: ",selectorFallback);if(selectorFallback)element=$(selectorFallback);if(element.length){_context.next=39;break;}logger.failed("Fallback selector not found");return _context.abrupt("return",false);case 39:if(!replaceFn){_context.next=43;break;}_context.next=42;return replace_utils(value,replaceFn);case 42:value=_context.sent;case 43:if(!(operator==="remove")){_context.next=47;break;}if(element.length){logger.log("Removing: ",selector);element.remove();}else logger.log("Cannot found element with selector: ",selector);_context.next=234;break;case 47:if(!(operator==="insert")){_context.next=121;break;}_context.t0=type;_context.next=_context.t0==="before"?51:_context.t0==="after"?55:_context.t0==="append"?58:_context.t0==="modal"?61:_context.t0==="popup"?66:117;break;case 51:logger.log("Inserting before: ",value);if(String(value).includes("nd-add-to-win")){$(".nd-add-to-win").remove();}element.before(value);return _context.abrupt("break",119);case 55:logger.log("Inserting after: ",value);element.after(value);return _context.abrupt("break",119);case 58:logger.log("Appending value: ",value);element.append(value);return _context.abrupt("break",119);case 61:element.off("click");createPopup(value,contentSelector,true);elm=document.querySelector(selector);elm.addEventListener("click",function(e){if(elm==e.target){e.stopPropagation();}displayModal(value,contentSelector);},true);return _context.abrupt("break",119);case 66:if(!(parseInt(sessionStorage.getItem(POPUP_DISPLAY_FLAG))!==0)){_context.next=69;break;}logger.log("Popup already displayed in session");return _context.abrupt("break",119);case 69:logger.log("Creating Popup: ",value);if(!pType){_context.next=74;break;}_context.next=73;return getProductInfo(pType,value,productInfoStorage);case 73:value=_context.sent;case 74:createPopup(value,contentSelector);if(!applyEvent){_context.next=115;break;}mobile=window.matchMedia(MOBILE_MEDIA_QUERY).matches;_iterator=BeagleApplyActions_createForOfIteratorHelper(applyEvent);_context.prev=78;_iterator.s();case 80:if((_step=_iterator.n()).done){_context.next=105;break;}event=_step.value;_context.t1=event;_context.next=_context.t1==="exitIntent"?85:_context.t1==="copyIntent"?100:103;break;case 85:logger.log("Adding exit intent listener");if(!mobile){_context.next=98;break;}window.top.addEventListener("visibilitychange",displayPopup);_context.next=90;return Promise.all([getFromBeagleInfoLayer("r",true),getFromBeagleInfoLayer("d",true)]);case 90:_yield$Promise$all=_context.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,2);r=_yield$Promise$all2[0];d=_yield$Promise$all2[1];if(typeof r==="string"&&typeof d==="string"&&!r.includes(d)){if(window.history&&typeof window.history.pushState==="function"){if(window.top.document.readyState!=="complete"){window.top.addEventListener("load",function(){if(window.history.state!=="bg_limbo")window.history.pushState("bg_limbo","");window.top.addEventListener("popstate",displayPopup,{once:true});});}else{if(window.history.state!=="bg_limbo")window.history.pushState("bg_limbo","");window.top.addEventListener("popstate",displayPopup,{once:true});}}}idleTimer(IDLE_TIMEOUT,displayPopup);_context.next=99;break;case 98:window.top.document.documentElement.addEventListener("mouseleave",displayPopup,{once:true});case 99:return _context.abrupt("break",103);case 100:logger.log("Adding copy intent listener");window.top.document.documentElement.addEventListener("copy",displayPopup,{once:true});return _context.abrupt("break",103);case 103:_context.next=80;break;case 105:_context.next=110;break;case 107:_context.prev=107;_context.t2=_context["catch"](78);_iterator.e(_context.t2);case 110:_context.prev=110;_iterator.f();return _context.finish(110);case 113:_context.next=116;break;case 115:// append popup to body after timeout expires
setTimeout(function(){displayPopup();},timeout);case 116:return _context.abrupt("break",119);case 117:logger.failed("Type: ".concat(type," not found for operator: ").concat(operator));return _context.abrupt("break",119);case 119:_context.next=234;break;case 121:if(!(operator==="edit")){_context.next=149;break;}_context.t3=type;_context.next=_context.t3==="text"?125:_context.t3==="html"?128:_context.t3==="styleApplicator"?131:_context.t3==="addClass"?136:_context.t3==="removeClass"?139:_context.t3==="documentTitle"?142:145;break;case 125:logger.log("Editing text: ",value);element.text(value);return _context.abrupt("break",147);case 128:logger.log("Editing html: ",value);element.html(value);return _context.abrupt("break",147);case 131:logger.log("Applying style: ",value);styleChangesMap=JSON.parse(value);logger.log("Style Changes Map: ",styleChangesMap);styleApplicator(element,styleChangesMap);return _context.abrupt("break",147);case 136:logger.log("addding class to ".concat(element," named ").concat(value));element.addClass(value);return _context.abrupt("break",147);case 139:logger.log("remove class from ".concat(element," named ").concat(value));element.removeClass(value);return _context.abrupt("break",147);case 142:logger.log("changing document title from ".concat(element," to ").concat(value));if(applyEvent){_iterator2=BeagleApplyActions_createForOfIteratorHelper(applyEvent);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){_event=_step2.value;if(_event=="tabChange"){(function(){logger.log("catching event tabchange..");var originalTitle=window.top.document.title;window.top.document.addEventListener("visibilitychange",function(e){setTimeout(function(){handleDocumentTitleTabChange(e,value,originalTitle);},15000);});})();}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}return _context.abrupt("break",147);case 145:logger.log("Unknown edit type: ",type);return _context.abrupt("break",147);case 147:_context.next=234;break;case 149:if(!(operator==="setattribute")){_context.next=166;break;}logger.log("Setting attribute: ",attribute,value);_context.t4=attribute;_context.next=_context.t4==="src"?154:_context.t4==="style"?156:160;break;case 154:element.css("content","url(".concat(value.trim(),")"));return _context.abrupt("break",164);case 156:// eslint-disable-next-line no-case-declarations
property=value.split(":")[0].trim();// eslint-disable-next-line no-case-declarations
propertyValue=value.split(":")[1].trim();element.css(property,propertyValue,"!important");return _context.abrupt("break",164);case 160:if(value.includes("function")){value=Function(value);}element.attr(attribute,value);logger.log("Unhandled attribute: Setting attribute: ",attribute,value);return _context.abrupt("break",164);case 164:_context.next=234;break;case 166:if(!(operator==="replace")){_context.next=171;break;}logger.log("Replacing: ",value);element.replaceAll(value);_context.next=234;break;case 171:if(!(operator==="swap")){_context.next=178;break;}logger.log("Swapping: ",move_selector_1,move_selector_2);n1=window.top.document.querySelector(move_selector_1);n2=window.top.document.querySelector(move_selector_2);swapNodes(n1,n2);_context.next=234;break;case 178:if(!(operator==="injectscript")){_context.next=183;break;}logger.log("Injecting script: ",value);element.append("<script>".concat(value,"</script>"));_context.next=234;break;case 183:if(!(operator==="move")){_context.next=191;break;}logger.log("Moving ".concat(move_selector_1," to ").concat(move_selector_2));source=window.top.document.querySelector(move_selector_1);destination=window.top.document.querySelector(move_selector_2);source.remove();destination.prepend(source);_context.next=234;break;case 191:if(!(operator==="productInfoLookup")){_context.next=198;break;}_context.next=194;return getProductInfo(pType,value,productInfoStorage);case 194:res=_context.sent;element.before(res);_context.next=234;break;case 198:if(!(operator==="text-transform")){_context.next=217;break;}_context.t5=type;_context.next=_context.t5==="capitalize"?202:_context.t5==="PLACEHOLDER"?213:214;break;case 202:_i=0,_Array$from=Array.from(element);case 203:if(!(_i<_Array$from.length)){_context.next=212;break;}e=_Array$from[_i];if(!((_e$innerText=e.innerText)!==null&&_e$innerText!==void 0&&_e$innerText.includes("\n"))){_context.next=208;break;}e.innerText=turkishToLower(e.innerText).split("\n").map(function(sentence){return sentence.split(" ").map(function(word){return word.charAt(0).toLocaleUpperCase()+word.slice(1);}).join(" ");}).join("\n");return _context.abrupt("continue",209);case 208:e.innerText=turkishToLower(e.innerText).split(" ").map(function(word){return word.charAt(0).toLocaleUpperCase()+word.slice(1);}).join(" ");case 209:_i++;_context.next=203;break;case 212:return _context.abrupt("break",215);case 213:return _context.abrupt("break",215);case 214:return _context.abrupt("break",215);case 215:_context.next=234;break;case 217:if(!(operator==="ai-suggest")){_context.next=233;break;}_context.t6=type;_context.next=_context.t6==="title-change"?221:_context.t6==="add-description"?226:231;break;case 221:_context.next=223;return prepareFinalTitle();case 223:finalTitle=_context.sent;element.contents().filter(function(){return this.nodeType==3;})[0].nodeValue=finalTitle;return _context.abrupt("break",231);case 226:_context.next=228;return prepareDescElm(value);case 228:descriptionElm=_context.sent;element.before(descriptionElm);return _context.abrupt("break",231);case 231:_context.next=234;break;case 233:logger.failed("No such operator exists yet",operator);case 234:case"end":return _context.stop();}}},_callee,null,[[78,107,110,113]]);}));function transformer(_x2){return _transformer.apply(this,arguments);}return transformer;}();prepareDescElm=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(value){var regex,_yield$getFromBeagleI,sku,productInfo,updatedHtmlString;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:regex=/<p[^>]*>([\s\S]*?)<\/p>/;_context2.next=3;return getFromBeagleInfoLayer("pdp",true);case 3:_yield$getFromBeagleI=_context2.sent;sku=_yield$getFromBeagleI.sku;_context2.next=7;return store.getInstance().get(sku);case 7:productInfo=_context2.sent;updatedHtmlString=value.replace(regex,"<p>$1".concat(productInfo.marketingCopy,"</p>"));return _context2.abrupt("return",updatedHtmlString);case 10:case"end":return _context2.stop();}}},_callee2);}));return function prepareDescElm(_x3){return _ref.apply(this,arguments);};}();prepareFinalTitle=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(){var _yield$getFromBeagleI2,name,sku,productInfo,res;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return getFromBeagleInfoLayer("pdp",true);case 2:_yield$getFromBeagleI2=_context3.sent;name=_yield$getFromBeagleI2.name;sku=_yield$getFromBeagleI2.sku;_context3.next=7;return store.getInstance().get(sku);case 7:productInfo=_context3.sent;res=name+", "+productInfo.titleAugment+" ";return _context3.abrupt("return",res);case 10:case"end":return _context3.stop();}}},_callee3);}));return function prepareFinalTitle(){return _ref2.apply(this,arguments);};}();replaceWithVal=function replaceWithVal(value,htmlStr){if(value&&htmlStr.includes("{{REPLACE_PRODUCTINFO}}")){htmlStr=replaceAll(htmlStr,"{{REPLACE_PRODUCTINFO}}",value);}return htmlStr;};getProductInfo=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee4(type,value,productInfoStorage){var skuList,res,productInfo;return regenerator_default().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!(productInfoStorage==="basket")){_context4.next=6;break;}_context4.next=3;return getFromBeagleInfoLayer("__features.SKUsonLastCartView",true);case 3:_context4.t0=_context4.sent;_context4.next=9;break;case 6:_context4.next=8;return getFromBeagleInfoLayer("__features.SKUsonPage",true);case 8:_context4.t0=_context4.sent;case 9:skuList=_context4.t0;res=null;if(!(!skuList||skuList.length===0)){_context4.next=14;break;}logger.log("No sku found");return _context4.abrupt("return",null);case 14:_context4.next=16;return store.getInstance().get(skuList[0]);case 16:productInfo=_context4.sent;_context4.t1=type;_context4.next=_context4.t1==="transactionIn2Weeks"?20:_context4.t1==="addToCartIn2Weeks"?23:_context4.t1==="productViewCount"?26:29;break;case 20:res=replaceWithVal(productInfo.saleCntVisitorsIn15.toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."),value);logger.log("Replacing transcationIn2Weeks ",productInfo.saleCntVisitorsIn15);return _context4.abrupt("break",30);case 23:res=replaceWithVal(productInfo.cartCntVisitorsIn15.toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."),value);logger.log("Replacing AddToCartCount ",productInfo.cartCntVisitorsIn15);return _context4.abrupt("break",30);case 26:res=replaceWithVal(productInfo.viewCntVisitorsIn1.toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."),value);logger.log("Replacing productViewCount for",productInfo.viewCntVisitorsIn1);return _context4.abrupt("break",30);case 29:logger.failed("no such type found for productInfoLookup operator: "+type);case 30:return _context4.abrupt("return",res);case 31:case"end":return _context4.stop();}}},_callee4);}));return function getProductInfo(_x4,_x5,_x6){return _ref3.apply(this,arguments);};}();handleDocumentTitleTabChange=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee5(event,titles,originalTitle){var parsedTitles,_iterator3,_step3,parsedTitle;return regenerator_default().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:parsedTitles=!Array.isArray(titles)?[titles]:titles;_iterator3=BeagleApplyActions_createForOfIteratorHelper(parsedTitles);_context5.prev=2;_iterator3.s();case 4:if((_step3=_iterator3.n()).done){_context5.next=18;break;}parsedTitle=_step3.value;if(!window.top.document.hidden){_context5.next=15;break;}window.top.document.title=parsedTitle;_context5.next=10;return delay(2000);case 10:window.top.document.title=originalTitle;_context5.next=13;return delay(2000);case 13:_context5.next=16;break;case 15:window.top.document.title=originalTitle;case 16:_context5.next=4;break;case 18:_context5.next=23;break;case 20:_context5.prev=20;_context5.t0=_context5["catch"](2);_iterator3.e(_context5.t0);case 23:_context5.prev=23;_iterator3.f();return _context5.finish(23);case 26:if(!window.top.document.hidden){window.top.document.title=originalTitle;}else{handleDocumentTitleTabChange(event,titles,originalTitle);}case 27:case"end":return _context5.stop();}}},_callee5,null,[[2,20,23,26]]);}));return function handleDocumentTitleTabChange(_x7,_x8,_x9){return _ref4.apply(this,arguments);};}();handlePopupClick=function handlePopupClick(event){var id=event.target.id;if(id&&id==="nd-popup__wrapper"){$("#nd-popup__wrapper").remove();window.removeEventListener("click",handlePopupClick,true);window.removeEventListener("touchend",handlePopupClick,true);}};handleModalClick=function handleModalClick(event){var classList=event.target.classList;if(classList&&classList.contains("nd-modal__wrapper")){$(".nd-modal__wrapper").hide();window.removeEventListener("click",handleModalClick,true);window.removeEventListener("touchend",handleModalClick,true);}};displayPopup=function displayPopup(){if(window.top.document.hidden)return;if(parseInt(sessionStorage.getItem(POPUP_DISPLAY_FLAG))>0)return;sessionStorage.setItem(POPUP_DISPLAY_FLAG,1);var qPopup=window.top.document.querySelector("#grt-shadow-host");if(qPopup)qPopup.style["display"]="none";window.top.document.getElementById("nd-popup__wrapper").style["display"]="block";window.addEventListener("click",handlePopupClick,true);window.addEventListener("touchend",handlePopupClick,true);window.top.document.documentElement.removeEventListener("mouseleave",displayPopup,{once:true});window.top.document.documentElement.removeEventListener("copy",displayPopup,{once:true});window.top.removeEventListener("visibilitychange",displayPopup);window.top.removeEventListener("popstate",displayPopup,{once:true});setTimeout(function(){$("#nd-popup__wrapper").remove();window.removeEventListener("click",handlePopupClick,true);window.removeEventListener("touchend",handlePopupClick,true);},15000);};displayModal=function displayModal(value,contentSelector){if(window.top.document.hidden)return;var qPopup=window.top.document.querySelector("#grt-shadow-host");if(qPopup)qPopup.style["display"]="none";if(!window.top.document.querySelector(".nd-modal__wrapper"))createPopup(value,contentSelector,true);window.top.document.querySelector(".nd-modal__wrapper").style["display"]="block";window.addEventListener("click",handleModalClick,true);};createPopup=function createPopup(value,contentSelector){var isModal=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;// Create popup wrapper
var popupWrapper=window.top.document.createElement("div");// eslint-disable-next-line max-len
popupWrapper.classList.add("nd-popup__wrapper");if(isModal)popupWrapper.classList.add("nd-modal__wrapper");if(!isModal)popupWrapper.id="nd-popup__wrapper";// Create popup close button
var popupCloseButton=window.top.document.createElement("button");var popupCloseButtonStyle=isModal?"nd-popup__button-close__colored":"nd-popup__button-close";popupCloseButton.classList.add(popupCloseButtonStyle);popupCloseButton.innerText="X";if(isModal){popupCloseButton.onclick=function(){$(".nd-modal__wrapper").hide();window.removeEventListener("click",handleModalClick,true);};}else{popupCloseButton.onclick=function(){$("#nd-popup__wrapper").remove();window.removeEventListener("click",handlePopupClick,true);};}if(contentSelector){var contents=Array.from(window.top.document.querySelectorAll(contentSelector));while(value.includes("{{REPLACE}}")&&contents.length>0){value=value.replace("{{REPLACE}}",contents.shift().src);}}// Create popup from action and append close button
var template=window.top.document.createElement("template");template.innerHTML=value.trim();var popup=template.content.firstChild;popup.appendChild(popupCloseButton);popupWrapper.appendChild(popup);// Remove old popup if exists before appending new one
$("#nd-popup__wrapper").remove();window.top.document.body.appendChild(popupWrapper);};swapNodes=function swapNodes(n1,n2){var p1=n1.parentNode;var p2=n2.parentNode;var i1;var i2;if(!p1||!p2||p1.isEqualNode(n2)||p2.isEqualNode(n1))return;for(var i=0;i<p1.children.length;i++){if(p1.children[i].isEqualNode(n1)){i1=i;}}for(var _i2=0;_i2<p2.children.length;_i2++){if(p2.children[_i2].isEqualNode(n2)){i2=_i2;}}if(p1.isEqualNode(p2)&&i1<i2){i2++;}p1.insertBefore(n2,p1.children[i1]);p2.insertBefore(n1,p2.children[i2]);};waitForJQuery=function waitForJQuery(){return new Promise(function(resolve){if(!window.jQuery){logger.log("jQuery not found, retrying");var jQueryInterval=setInterval(function(){if(window.jQuery){clearInterval(jQueryInterval);resolve(true);}},25);setTimeout(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee6(){return regenerator_default().wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:clearInterval(jQueryInterval);resolve(false);case 2:case"end":return _context6.stop();}}},_callee6);})),2000);}else resolve(true);});};actionApplicator=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee7(actions){var _iterator4,_step4,action,_result,eligibleElements,_iterator5,_step5,element;return regenerator_default().wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return waitForJQuery();case 2:if(!_context7.sent){_context7.next=59;break;}_iterator4=BeagleApplyActions_createForOfIteratorHelper(actions);_context7.prev=4;_iterator4.s();case 6:if((_step4=_iterator4.n()).done){_context7.next=49;break;}action=_step4.value;_context7.prev=8;_result=false;if(!action.condition){_context7.next=36;break;}_context7.next=13;return action_condition_util(action.condition);case 13:eligibleElements=_context7.sent;_iterator5=BeagleApplyActions_createForOfIteratorHelper(eligibleElements);_context7.prev=15;_iterator5.s();case 17:if((_step5=_iterator5.n()).done){_context7.next=26;break;}element=_step5.value;_context7.next=21;return transformer(action,element);case 21:_result=_context7.sent;if(!(_result===false)){_context7.next=24;break;}return _context7.abrupt("return",false);case 24:_context7.next=17;break;case 26:_context7.next=31;break;case 28:_context7.prev=28;_context7.t0=_context7["catch"](15);_iterator5.e(_context7.t0);case 31:_context7.prev=31;_iterator5.f();return _context7.finish(31);case 34:_context7.next=39;break;case 36:_context7.next=38;return transformer(action);case 38:_result=_context7.sent;case 39:if(!(_result===false)){_context7.next=41;break;}return _context7.abrupt("return",false);case 41:_context7.next=47;break;case 43:_context7.prev=43;_context7.t1=_context7["catch"](8);logger.failed("Couldn't apply action ".concat(JSON.stringify(action)," with error ").concat(_context7.t1.message));return _context7.abrupt("return",_context7.t1);case 47:_context7.next=6;break;case 49:_context7.next=54;break;case 51:_context7.prev=51;_context7.t2=_context7["catch"](4);_iterator4.e(_context7.t2);case 54:_context7.prev=54;_iterator4.f();return _context7.finish(54);case 57:_context7.next=61;break;case 59:logger.failed("Jquery not found on window");return _context7.abrupt("return",false);case 61:case"end":return _context7.stop();}}},_callee7,null,[[4,51,54,57],[8,43],[15,28,31,34]]);}));return function actionApplicator(_x10){return _ref6.apply(this,arguments);};}();// Apply actions
_context8.next=18;return actionApplicator(actions);case 18:result=_context8.sent;return _context8.abrupt("return",result);case 20:case"end":return _context8.stop();}}},_callee8);}));return _applyActions.apply(this,arguments);}/* harmony default export */var BeagleApplyActions=applyActions;;// CONCATENATED MODULE: ./node_modules/async-mutex/index.mjs
var E_TIMEOUT=new Error('timeout while waiting for mutex to become available');var E_ALREADY_LOCKED=new Error('mutex already locked');var E_CANCELED=new Error('request for lock canceled');var __awaiter$2= false||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator["throw"](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};var Semaphore=/*#__PURE__*/function(){function Semaphore(_value){var _cancelError=arguments.length>1&&arguments[1]!==undefined?arguments[1]:E_CANCELED;_classCallCheck3(this,Semaphore);this._value=_value;this._cancelError=_cancelError;this._weightedQueues=[];this._weightedWaiters=[];}_createClass3(Semaphore,[{key:"acquire",value:function acquire(){var _this13=this;var weight=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;if(weight<=0)throw new Error("invalid weight ".concat(weight,": must be positive"));return new Promise(function(resolve,reject){if(!_this13._weightedQueues[weight-1])_this13._weightedQueues[weight-1]=[];_this13._weightedQueues[weight-1].push({resolve:resolve,reject:reject});_this13._dispatch();});}},{key:"runExclusive",value:function runExclusive(callback){var weight=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;return __awaiter$2(this,void 0,void 0,/*#__PURE__*/_regeneratorRuntime3.mark(function _callee17(){var _yield$this$acquire3,_yield$this$acquire4,value,release;return _regeneratorRuntime3.wrap(function _callee17$(_context17){while(1){switch(_context17.prev=_context17.next){case 0:_context17.next=2;return this.acquire(weight);case 2:_yield$this$acquire3=_context17.sent;_yield$this$acquire4=_slicedToArray3(_yield$this$acquire3,2);value=_yield$this$acquire4[0];release=_yield$this$acquire4[1];_context17.prev=6;_context17.next=9;return callback(value);case 9:return _context17.abrupt("return",_context17.sent);case 10:_context17.prev=10;release();return _context17.finish(10);case 13:case"end":return _context17.stop();}}},_callee17,this,[[6,,10,13]]);}));}},{key:"waitForUnlock",value:function waitForUnlock(){var _this14=this;var weight=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;if(weight<=0)throw new Error("invalid weight ".concat(weight,": must be positive"));return new Promise(function(resolve){if(!_this14._weightedWaiters[weight-1])_this14._weightedWaiters[weight-1]=[];_this14._weightedWaiters[weight-1].push(resolve);_this14._dispatch();});}},{key:"isLocked",value:function isLocked(){return this._value<=0;}},{key:"getValue",value:function getValue(){return this._value;}},{key:"setValue",value:function setValue(value){this._value=value;this._dispatch();}},{key:"release",value:function release(){var weight=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;if(weight<=0)throw new Error("invalid weight ".concat(weight,": must be positive"));this._value+=weight;this._dispatch();}},{key:"cancel",value:function cancel(){var _this15=this;this._weightedQueues.forEach(function(queue){return queue.forEach(function(entry){return entry.reject(_this15._cancelError);});});this._weightedQueues=[];}},{key:"_dispatch",value:function _dispatch(){var _a;for(var weight=this._value;weight>0;weight--){var queueEntry=(_a=this._weightedQueues[weight-1])===null||_a===void 0?void 0:_a.shift();if(!queueEntry)continue;var previousValue=this._value;var previousWeight=weight;this._value-=weight;weight=this._value+1;queueEntry.resolve([previousValue,this._newReleaser(previousWeight)]);}this._drainUnlockWaiters();}},{key:"_newReleaser",value:function _newReleaser(weight){var _this16=this;var called=false;return function(){if(called)return;called=true;_this16.release(weight);};}},{key:"_drainUnlockWaiters",value:function _drainUnlockWaiters(){for(var weight=this._value;weight>0;weight--){if(!this._weightedWaiters[weight-1])continue;this._weightedWaiters[weight-1].forEach(function(waiter){return waiter();});this._weightedWaiters[weight-1]=[];}}}]);return Semaphore;}();var __awaiter$1= false||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator["throw"](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};var Mutex=/*#__PURE__*/function(){function Mutex(cancelError){_classCallCheck3(this,Mutex);this._semaphore=new Semaphore(1,cancelError);}_createClass3(Mutex,[{key:"acquire",value:function acquire(){return __awaiter$1(this,void 0,void 0,/*#__PURE__*/_regeneratorRuntime3.mark(function _callee18(){var _yield$this$_semaphor3,_yield$this$_semaphor4,releaser;return _regeneratorRuntime3.wrap(function _callee18$(_context18){while(1){switch(_context18.prev=_context18.next){case 0:_context18.next=2;return this._semaphore.acquire();case 2:_yield$this$_semaphor3=_context18.sent;_yield$this$_semaphor4=_slicedToArray3(_yield$this$_semaphor3,2);releaser=_yield$this$_semaphor4[1];return _context18.abrupt("return",releaser);case 6:case"end":return _context18.stop();}}},_callee18,this);}));}},{key:"runExclusive",value:function runExclusive(callback){return this._semaphore.runExclusive(function(){return callback();});}},{key:"isLocked",value:function isLocked(){return this._semaphore.isLocked();}},{key:"waitForUnlock",value:function waitForUnlock(){return this._semaphore.waitForUnlock();}},{key:"release",value:function release(){if(this._semaphore.isLocked())this._semaphore.release();}},{key:"cancel",value:function cancel(){return this._semaphore.cancel();}}]);return Mutex;}();var __awaiter= false||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator["throw"](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};function withTimeout(sync,timeout){var _this17=this;var timeoutError=arguments.length>2&&arguments[2]!==undefined?arguments[2]:E_TIMEOUT;return{acquire:function acquire(weight){if(weight!==undefined&&weight<=0){throw new Error("invalid weight ".concat(weight,": must be positive"));}return new Promise(function(resolve,reject){return __awaiter(_this17,void 0,void 0,/*#__PURE__*/_regeneratorRuntime3.mark(function _callee19(){var isTimeout,handle,ticket,release;return _regeneratorRuntime3.wrap(function _callee19$(_context19){while(1){switch(_context19.prev=_context19.next){case 0:isTimeout=false;handle=setTimeout(function(){isTimeout=true;reject(timeoutError);},timeout);_context19.prev=2;_context19.next=5;return sync.acquire(weight);case 5:ticket=_context19.sent;if(isTimeout){release=Array.isArray(ticket)?ticket[1]:ticket;release();}else{clearTimeout(handle);resolve(ticket);}_context19.next=12;break;case 9:_context19.prev=9;_context19.t0=_context19["catch"](2);if(!isTimeout){clearTimeout(handle);reject(_context19.t0);}case 12:case"end":return _context19.stop();}}},_callee19,null,[[2,9]]);}));});},runExclusive:function runExclusive(callback,weight){return __awaiter(this,void 0,void 0,/*#__PURE__*/_regeneratorRuntime3.mark(function _callee20(){var release,ticket;return _regeneratorRuntime3.wrap(function _callee20$(_context20){while(1){switch(_context20.prev=_context20.next){case 0:release=function release(){return undefined;};_context20.prev=1;_context20.next=4;return this.acquire(weight);case 4:ticket=_context20.sent;if(!Array.isArray(ticket)){_context20.next=12;break;}release=ticket[1];_context20.next=9;return callback(ticket[0]);case 9:return _context20.abrupt("return",_context20.sent);case 12:release=ticket;_context20.next=15;return callback();case 15:return _context20.abrupt("return",_context20.sent);case 16:_context20.prev=16;release();return _context20.finish(16);case 19:case"end":return _context20.stop();}}},_callee20,this,[[1,,16,19]]);}));},release:function release(weight){sync.release(weight);},cancel:function cancel(){return sync.cancel();},waitForUnlock:function waitForUnlock(weight){if(weight!==undefined&&weight<=0){throw new Error("invalid weight ".concat(weight,": must be positive"));}return new Promise(function(resolve,reject){sync.waitForUnlock(weight).then(resolve);setTimeout(function(){return reject(timeoutError);},timeout);});},isLocked:function isLocked(){return sync.isLocked();},getValue:function getValue(){return sync.getValue();},setValue:function setValue(value){return sync.setValue(value);}};}// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types
function tryAcquire(sync){var alreadyAcquiredError=arguments.length>1&&arguments[1]!==undefined?arguments[1]:E_ALREADY_LOCKED;// eslint-disable-next-line @typescript-eslint/no-explicit-any
return withTimeout(sync,0,alreadyAcquiredError);};// CONCATENATED MODULE: ./src/BeagleOn/robotEngine.js
function robotEngine_createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=robotEngine_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function robotEngine_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return robotEngine_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return robotEngine_arrayLikeToArray(o,minLen);}function robotEngine_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}var robotEngine_logger=new src_logger("BeagleRobotEngine");var OBSERVER_CONFIG={subtree:true,childList:true,attributes:true};var RobotEngine=/*#__PURE__*/function(){function RobotEngine(body){_classCallCheck(this,RobotEngine);var debugFilteredTreatments=body.debugFilteredTreatments,debugMode=body.debugMode,matchedTreatments=body.matchedTreatments,identifier=body.identifier,pageType=body.pageType;this.engagementLock={};this.pageType=pageType;this.debugMode=debugMode;this.identifier=identifier;this.reApplyTreatmentsMap={};this.addedDataListenerIds=[];this.matchedTreatments=matchedTreatments;this.debugFilteredTreatments=debugFilteredTreatments;this.isMobile=window.matchMedia(MOBILE_MEDIA_QUERY).matches;}_createClass(RobotEngine,[{key:"engageRobots",value:function(){var _engageRobots=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(){var robotPromises,_iterator,_step,treatment;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:robotPromises=[];_iterator=robotEngine_createForOfIteratorHelper(this.matchedTreatments);_context.prev=2;_iterator.s();case 4:if((_step=_iterator.n()).done){_context.next=17;break;}treatment=_step.value;_context.prev=6;if(!treatment.dependant_on_treatment){_context.next=9;break;}return _context.abrupt("continue",15);case 9:robotPromises.push(this.engageRobot(treatment));_context.next=15;break;case 12:_context.prev=12;_context.t0=_context["catch"](6);robotEngine_logger.failed("Error engaging robot ".concat(treatment.id,": ").concat(_context.t0.message||_context.t0));case 15:_context.next=4;break;case 17:_context.next=22;break;case 19:_context.prev=19;_context.t1=_context["catch"](2);_iterator.e(_context.t1);case 22:_context.prev=22;_iterator.f();return _context.finish(22);case 25:_context.next=27;return Promise.all(robotPromises);case 27:this.initiateReapplyRobotMap();case 28:case"end":return _context.stop();}}},_callee,this,[[2,19,22,25],[6,12]]);}));function engageRobots(){return _engageRobots.apply(this,arguments);}return engageRobots;}()},{key:"engageRobot",value:function(){var _engageRobot=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(treatment){var _this=this;var id,actions,eligibilityRuleSet,device,dependant_on_treatment,businessRuleSet,weight,delay,helpers,debugMode,debugFilteredTreatments,engagementLock,identifier,isMobile,matchedTreatments,prepareAndApply,release,treatmentSkipRatio,determiningIdentifier,treatmentPct,businessRuleId;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:id=treatment.id,actions=treatment.actions,eligibilityRuleSet=treatment.eligibilityRuleSet,device=treatment.device,dependant_on_treatment=treatment.dependant_on_treatment,businessRuleSet=treatment.businessRuleSet,weight=treatment.weight,delay=treatment.delay,helpers=treatment.helpers;debugMode=this.debugMode,debugFilteredTreatments=this.debugFilteredTreatments,engagementLock=this.engagementLock,identifier=this.identifier,isMobile=this.isMobile,matchedTreatments=this.matchedTreatments,prepareAndApply=this.prepareAndApply;// one engagement at a time
engagementLock[id]=engagementLock[id]||new Mutex();_context3.next=5;return engagementLock[id].acquire();case 5:release=_context3.sent;_context3.prev=6;if(!(debugMode&&debugFilteredTreatments&&!debugFilteredTreatments.includes(id))){_context3.next=9;break;}return _context3.abrupt("return");case 9:if(!(device==="mobile"&&!isMobile)){_context3.next=12;break;}robotEngine_logger.failed("Treatment device 'mobile' mismatch");return _context3.abrupt("return");case 12:if(!(device==="desktop"&&isMobile)){_context3.next=15;break;}robotEngine_logger.failed("Treatment device 'desktop' mismatch");return _context3.abrupt("return");case 15:robotEngine_logger.log("Starting base rule set check for treatment: "+id);_context3.t0=!eligibilityRuleSet;if(_context3.t0){_context3.next=21;break;}_context3.next=20;return this.checkEligibilityRuleSet(eligibilityRuleSet);case 20:_context3.t0=_context3.sent;case 21:if(!_context3.t0){_context3.next=55;break;}treatmentSkipRatio=weight===100?0:100-weight||TREATMENT_RATIO;robotEngine_logger.log("Treatment skip ratio: "+treatmentSkipRatio);// Determining identifier for calculating treatment percentage (treatmentPct)
determiningIdentifier=dependant_on_treatment||id;// treatmentPct is the percentage value for the treatment used to determine if it should be skipped or not
// treatmentPct is 100 when debug mode is 1, ensuring no treatments are skipped
if(!(debugMode===1)){_context3.next=29;break;}_context3.t1=100;_context3.next=32;break;case 29:_context3.next=31;return determinePct(identifier+determiningIdentifier);case 31:_context3.t1=_context3.sent;case 32:treatmentPct=_context3.t1;robotEngine_logger.log("TreatmentPct: "+treatmentPct+" with debug mode ".concat(debugMode?"on":"off"));businessRuleId=null;if(!businessRuleSet){_context3.next=41;break;}robotEngine_logger.log("Starting sub variant rule set check for treatment: "+id);_context3.next=39;return this.checkBusinessRules(businessRuleSet);case 39:businessRuleId=_context3.sent;if(businessRuleId!==null){robotEngine_logger.log("Applying business rule transformation with id: ",businessRuleId);}else robotEngine_logger.log("Applying treatment with default values");case 41:if(!(treatmentPct<treatmentSkipRatio)){_context3.next=45;break;}robotEngine_logger.log("Treatment ".concat(id," skipped due to treatment split ratio"));addTreatment(id,businessRuleId,null,"skipped",dependant_on_treatment);return _context3.abrupt("return");case 45:if(delay){_context3.next=52;break;}_context3.next=48;return prepareAndApply(id,identifier,actions,businessRuleId,debugMode);case 48:_context3.next=50;return this.engageHelpers(helpers,matchedTreatments);case 50:_context3.next=53;break;case 52:setTimeout(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(){return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return prepareAndApply(id,identifier,actions,businessRuleId,debugMode);case 2:_context2.next=4;return _this.engageHelpers(helpers,matchedTreatments);case 4:case"end":return _context2.stop();}}},_callee2);})),delay);case 53:_context3.next=56;break;case 55:robotEngine_logger.failed("Rule check failed for treatment:",id);case 56:_context3.prev=56;release();this.addReapplyEvent(treatment);this.addRuleSetDataListeners(treatment);return _context3.finish(56);case 61:case"end":return _context3.stop();}}},_callee3,this,[[6,,56,61]]);}));function engageRobot(_x){return _engageRobot.apply(this,arguments);}return engageRobot;}()},{key:"engageHelpers",value:function(){var _engageHelpers=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee4(helpers,matchedTreatments){var helperRobotPromises,_iterator2,_step2,treatment;return regenerator_default().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!(Array.isArray(helpers)&&helpers.length)){_context4.next=22;break;}helperRobotPromises=[];_iterator2=robotEngine_createForOfIteratorHelper(matchedTreatments);_context4.prev=3;_iterator2.s();case 5:if((_step2=_iterator2.n()).done){_context4.next=12;break;}treatment=_step2.value;if(helpers.includes(treatment.id)){_context4.next=9;break;}return _context4.abrupt("continue",10);case 9:helperRobotPromises.push(this.engageRobot(treatment));case 10:_context4.next=5;break;case 12:_context4.next=17;break;case 14:_context4.prev=14;_context4.t0=_context4["catch"](3);_iterator2.e(_context4.t0);case 17:_context4.prev=17;_iterator2.f();return _context4.finish(17);case 20:_context4.next=22;return Promise.all(helperRobotPromises);case 22:case"end":return _context4.stop();}}},_callee4,this,[[3,14,17,20]]);}));function engageHelpers(_x2,_x3){return _engageHelpers.apply(this,arguments);}return engageHelpers;}()},{key:"prepareAndApply",value:function(){var _prepareAndApply=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee5(id,identifier,actions,businessRuleId,debugMode){var _yield$prepareActions,_yield$prepareActions2,prepared,variant,res;return regenerator_default().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return prepareActions(identifier,actions,businessRuleId,debugMode);case 2:_yield$prepareActions=_context5.sent;_yield$prepareActions2=_slicedToArray(_yield$prepareActions,2);prepared=_yield$prepareActions2[0];variant=_yield$prepareActions2[1];_context5.next=8;return BeagleApplyActions(prepared);case 8:res=_context5.sent;if(res===false){addTreatment(id,businessRuleId,variant,"failed");}else{addTreatment(id,businessRuleId,variant,"applied");}case 10:case"end":return _context5.stop();}}},_callee5);}));function prepareAndApply(_x4,_x5,_x6,_x7,_x8){return _prepareAndApply.apply(this,arguments);}return prepareAndApply;}()},{key:"addReapplyEvent",value:function addReapplyEvent(treatment){var pageType=this.pageType,reApplyTreatmentsMap=this.reApplyTreatmentsMap;var id=treatment.id,reapply_event=treatment.reapply_event,reapply_event_page_type=treatment.reapply_event_page_type;if(reapply_event){if(!reapply_event_page_type||reapply_event_page_type===pageType){var reapply_event_array=reapply_event;if(!Array.isArray(reapply_event))reapply_event_array=[reapply_event];robotEngine_logger.log("Reapply event '".concat(reapply_event,"' found for treatment: ").concat(id));var _iterator3=robotEngine_createForOfIteratorHelper(reapply_event_array),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var reapplyEvent=_step3.value;var previousValue=reApplyTreatmentsMap[reapplyEvent]?reApplyTreatmentsMap[reapplyEvent]:[];if(previousValue.includes(id)){robotEngine_logger.log("Treatment already added for reapply event");}else reApplyTreatmentsMap[reapplyEvent]=[].concat(_toConsumableArray(previousValue),[id]);}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}}}}},{key:"initiateReapplyRobotMap",value:function initiateReapplyRobotMap(){var _this2=this;var reApplyTreatmentsMap=this.reApplyTreatmentsMap,matchedTreatments=this.matchedTreatments;var _loop=function _loop(){var key=_Object$keys[_i];var treatmentIds=reApplyTreatmentsMap[key];var reApplyTreatments=matchedTreatments.filter(function(t){return treatmentIds.includes(t.id);});switch(key){case"infinite_scroll":{var observer=new ResizeObserver(function(){var _iterator4=robotEngine_createForOfIteratorHelper(reApplyTreatments),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var treatment=_step4.value;robotEngine_logger.log("Retrying treatment ".concat(treatment.id," from infinite_scroll"));_this2.engageRobot(treatment);}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}});observer.observe(window.top.document.documentElement);}break;case"timeout":{setTimeout(function(){var _iterator5=robotEngine_createForOfIteratorHelper(reApplyTreatments),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var treatment=_step5.value;robotEngine_logger.log("Retrying treatment ".concat(treatment.id," from timeout"));_this2.engageRobot(treatment);}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}},500);}break;case"element_change":{var _iterator6=robotEngine_createForOfIteratorHelper(reApplyTreatments),_step6;try{var _loop2=function _loop2(){var treatment=_step6.value;var reapplySelectorList=Array.isArray(treatment.reapply_selector)?treatment.reapply_selector:[treatment.reapply_selector];var _iterator7=robotEngine_createForOfIteratorHelper(reapplySelectorList),_step7;try{for(_iterator7.s();!(_step7=_iterator7.n()).done;){var selector=_step7.value;var element=window.top.document.querySelector(selector);if(element){var _observer=new MutationObserver(function(){robotEngine_logger.log("Retrying treatment ".concat(treatment.id," from element_change"));_this2.engageRobot(treatment);});_observer.observe(element,OBSERVER_CONFIG);}}}catch(err){_iterator7.e(err);}finally{_iterator7.f();}};for(_iterator6.s();!(_step6=_iterator6.n()).done;){_loop2();}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}}break;case"on_scroll":{// add window scroll listener, call engageRobot on scroll, do not trigger more than once per 250ms
var lastScrollTop=0;var lastScrollTime=0;window.addEventListener("scroll",function(){var now=new Date().getTime();var st=window.pageYOffset||window.top.document.documentElement.scrollTop;if(now-lastScrollTime>250&&Math.abs(lastScrollTop-st)>5){lastScrollTop=st;lastScrollTime=now;var _iterator8=robotEngine_createForOfIteratorHelper(reApplyTreatments),_step8;try{for(_iterator8.s();!(_step8=_iterator8.n()).done;){var treatment=_step8.value;robotEngine_logger.log("Retrying treatment ".concat(treatment.id," from on_scroll"));_this2.engageRobot(treatment);}}catch(err){_iterator8.e(err);}finally{_iterator8.f();}}},false);}break;case"query_search_change":{var queryString=window.location.search;var _observer2=new MutationObserver(function(){if(window.location.search!==queryString){queryString=window.location.search;var _iterator9=robotEngine_createForOfIteratorHelper(reApplyTreatments),_step9;try{for(_iterator9.s();!(_step9=_iterator9.n()).done;){var treatment=_step9.value;robotEngine_logger.log("Retrying treatment ".concat(treatment.id," from query_search_change"));_this2.engageRobot(treatment);}}catch(err){_iterator9.e(err);}finally{_iterator9.f();}}});_observer2.observe(document,OBSERVER_CONFIG);}break;case"interval":var _iterator10=robotEngine_createForOfIteratorHelper(reApplyTreatments),_step10;try{var _loop3=function _loop3(){var treatment=_step10.value;var reapplyInterval=setInterval(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee6(){var applied;return regenerator_default().wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return getFromBeagleInfoLayer("a",true);case 2:applied=_context6.sent;if(!(applied!==null&&applied!==void 0&&applied[treatment.id])){_context6.next=7;break;}clearInterval(reapplyInterval);_context6.next=10;break;case 7:robotEngine_logger.log("Retrying treatment ".concat(treatment.id," from interval"));_context6.next=10;return _this2.engageRobot(treatment);case 10:case"end":return _context6.stop();}}},_callee6);})),50);setTimeout(function(){clearInterval(reapplyInterval);},2500);};for(_iterator10.s();!(_step10=_iterator10.n()).done;){_loop3();}}catch(err){_iterator10.e(err);}finally{_iterator10.f();}break;case"info_layer_change":var _iterator11=robotEngine_createForOfIteratorHelper(reApplyTreatments),_step11;try{for(_iterator11.s();!(_step11=_iterator11.n()).done;){var treatment=_step11.value;var boundEngageTreatment=_this2.engageRobot.bind(_this2,treatment);addDataListener(treatment.reapply_selector,boundEngageTreatment);}}catch(err){_iterator11.e(err);}finally{_iterator11.f();}break;default:robotEngine_logger.failed("Reapply event not found: ",key);break;}};for(var _i=0,_Object$keys=Object.keys(reApplyTreatmentsMap);_i<_Object$keys.length;_i++){_loop();}}},{key:"addRuleSetDataListeners",value:function(){var _addRuleSetDataListeners=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee7(treatment){var _treatment$eligibilit,eligibilityRuleSet,_treatment$businessRu,businessRuleSet,id,selectors,boundEngageTreatment,_iterator12,_step12,selector;return regenerator_default().wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_treatment$eligibilit=treatment.eligibilityRuleSet,eligibilityRuleSet=_treatment$eligibilit===void 0?[]:_treatment$eligibilit,_treatment$businessRu=treatment.businessRuleSet,businessRuleSet=_treatment$businessRu===void 0?[]:_treatment$businessRu,id=treatment.id;if(!this.addedDataListenerIds.includes(id)){_context7.next=3;break;}return _context7.abrupt("return");case 3:selectors=this.extractDataListenerSelectors([].concat(_toConsumableArray(eligibilityRuleSet),_toConsumableArray(businessRuleSet)));boundEngageTreatment=this.engageRobot.bind(this,treatment);_iterator12=robotEngine_createForOfIteratorHelper(selectors);try{for(_iterator12.s();!(_step12=_iterator12.n()).done;){selector=_step12.value;addDataListener("__eRules.".concat(selector),boundEngageTreatment);}}catch(err){_iterator12.e(err);}finally{_iterator12.f();}this.addedDataListenerIds.push(id);case 8:case"end":return _context7.stop();}}},_callee7,this);}));function addRuleSetDataListeners(_x9){return _addRuleSetDataListeners.apply(this,arguments);}return addRuleSetDataListeners;}()},{key:"extractDataListenerSelectors",value:function extractDataListenerSelectors(ruleSet){var previousSelectors=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var selectors=previousSelectors||[];var _iterator13=robotEngine_createForOfIteratorHelper(ruleSet),_step13;try{for(_iterator13.s();!(_step13=_iterator13.n()).done;){var rule=_step13.value;if(typeof rule==="string"){if(rule.startsWith("!"))rule=rule.slice(1);selectors.push(rule.split(".")[0]);continue;}this.extractDataListenerSelectors(rule.set,selectors);}}catch(err){_iterator13.e(err);}finally{_iterator13.f();}return _toConsumableArray(new Set(selectors));}},{key:"checkEligibility",value:function(){var _checkEligibility=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee8(eligibilityRule){var oppositeFlag,_eligibilityRule$spli,_eligibilityRule$spli2,eligibilityScope,eligibilityName,res;return regenerator_default().wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:robotEngine_logger.log("Checking eligibility ".concat(eligibilityRule));oppositeFlag=false;_eligibilityRule$spli=eligibilityRule.split("."),_eligibilityRule$spli2=_slicedToArray(_eligibilityRule$spli,2),eligibilityScope=_eligibilityRule$spli2[0],eligibilityName=_eligibilityRule$spli2[1];if(eligibilityScope.startsWith("!")){oppositeFlag=true;eligibilityScope=eligibilityScope.slice(1);}_context8.next=6;return getFromBeagleInfoLayer("__eRules.".concat(eligibilityScope));case 6:res=_context8.sent;if(!(!res||!Array.isArray(res))){_context8.next=9;break;}return _context8.abrupt("return",false);case 9:if(!(oppositeFlag&&res.includes(eligibilityName))){_context8.next=11;break;}return _context8.abrupt("return",false);case 11:if(!(!oppositeFlag&&!res.includes(eligibilityName))){_context8.next=13;break;}return _context8.abrupt("return",false);case 13:robotEngine_logger.log("".concat(eligibilityRule," is eligible"));return _context8.abrupt("return",true);case 15:case"end":return _context8.stop();}}},_callee8);}));function checkEligibility(_x10){return _checkEligibility.apply(this,arguments);}return checkEligibility;}()},{key:"checkEligibilityRuleSet",value:function(){var _checkEligibilityRuleSet=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee9(eligibilityRuleSet){var eligibilitySetType,previousIsEligible,isEligible,_iterator14,_step14,eligibilityRule,_args9=arguments;return regenerator_default().wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:eligibilitySetType=_args9.length>1&&_args9[1]!==undefined?_args9[1]:null;previousIsEligible=_args9.length>2&&_args9[2]!==undefined?_args9[2]:null;robotEngine_logger.log("Checking robot eligibility");if(Array.isArray(eligibilityRuleSet)){_context9.next=6;break;}robotEngine_logger.failed("Eligibility Rule Set ".concat(eligibilityRuleSet," is not an array"));return _context9.abrupt("return",false);case 6:isEligible=previousIsEligible;_iterator14=robotEngine_createForOfIteratorHelper(eligibilityRuleSet);_context9.prev=8;_iterator14.s();case 10:if((_step14=_iterator14.n()).done){_context9.next=57;break;}eligibilityRule=_step14.value;if(!(typeof eligibilityRule==="string")){_context9.next=49;break;}if(eligibilitySetType){_context9.next=21;break;}_context9.next=16;return this.checkEligibility(eligibilityRule);case 16:isEligible=_context9.sent;if(isEligible){_context9.next=19;break;}return _context9.abrupt("return",false);case 19:_context9.next=47;break;case 21:if(!eligibilitySetType){_context9.next=47;break;}if(!(isEligible===null)){_context9.next=27;break;}_context9.next=25;return this.checkEligibility(eligibilityRule);case 25:isEligible=_context9.sent;return _context9.abrupt("continue",55);case 27:_context9.t0=eligibilitySetType;_context9.next=_context9.t0==="or"?30:_context9.t0==="and"?37:44;break;case 30:_context9.t1=isEligible;if(_context9.t1){_context9.next=35;break;}_context9.next=34;return this.checkEligibility(eligibilityRule,eligibilitySetType);case 34:_context9.t1=_context9.sent;case 35:isEligible=_context9.t1;return _context9.abrupt("break",47);case 37:_context9.t2=isEligible;if(!_context9.t2){_context9.next=42;break;}_context9.next=41;return this.checkEligibility(eligibilityRule,eligibilitySetType);case 41:_context9.t2=_context9.sent;case 42:isEligible=_context9.t2;return _context9.abrupt("break",47);case 44:robotEngine_logger.failed("Unknown eligibilitySetType: ",eligibilitySetType);isEligible=false;return _context9.abrupt("break",47);case 47:_context9.next=55;break;case 49:if(!(_typeof(eligibilityRule)==="object")){_context9.next=55;break;}_context9.next=52;return this.checkEligibilityRuleSet(eligibilityRule.set,eligibilityRule.type,isEligible);case 52:isEligible=_context9.sent;if(isEligible){_context9.next=55;break;}return _context9.abrupt("return",false);case 55:_context9.next=10;break;case 57:_context9.next=62;break;case 59:_context9.prev=59;_context9.t3=_context9["catch"](8);_iterator14.e(_context9.t3);case 62:_context9.prev=62;_iterator14.f();return _context9.finish(62);case 65:return _context9.abrupt("return",isEligible);case 66:case"end":return _context9.stop();}}},_callee9,this,[[8,59,62,65]]);}));function checkEligibilityRuleSet(_x11){return _checkEligibilityRuleSet.apply(this,arguments);}return checkEligibilityRuleSet;}()// Return index of businessRule, this is the businessRuleId
},{key:"checkBusinessRules",value:function(){var _checkBusinessRules=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee10(businessRuleSet){var _iterator15,_step15,_step15$value,index,businessRule;return regenerator_default().wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:_iterator15=robotEngine_createForOfIteratorHelper(businessRuleSet.entries());_context10.prev=1;_iterator15.s();case 3:if((_step15=_iterator15.n()).done){_context10.next=11;break;}_step15$value=_slicedToArray(_step15.value,2),index=_step15$value[0],businessRule=_step15$value[1];_context10.next=7;return this.checkEligibilityRuleSet([businessRule]);case 7:if(!_context10.sent){_context10.next=9;break;}return _context10.abrupt("return",index);case 9:_context10.next=3;break;case 11:_context10.next=16;break;case 13:_context10.prev=13;_context10.t0=_context10["catch"](1);_iterator15.e(_context10.t0);case 16:_context10.prev=16;_iterator15.f();return _context10.finish(16);case 19:return _context10.abrupt("return",null);case 20:case"end":return _context10.stop();}}},_callee10,this,[[1,13,16,19]]);}));function checkBusinessRules(_x12){return _checkBusinessRules.apply(this,arguments);}return checkBusinessRules;}()}]);return RobotEngine;}();;// CONCATENATED MODULE: ./src/BeagleRuleEngine/dataLayerChecker.js
var dataLayerChecker_logger=new src_logger("BeagleInfoLayerChecker");var checkDataLayerRule=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(rule){var operator,condition,value,runtimeValue;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dataLayerChecker_logger.log("Checking rule",JSON.stringify(rule));operator=rule.operator,condition=rule.condition,value=rule.value;_context.next=4;return dataLayerFinder(operator);case 4:runtimeValue=_context.sent;return _context.abrupt("return",conditionChecker(runtimeValue,condition,value));case 6:case"end":return _context.stop();}}},_callee);}));return function checkDataLayerRule(_x){return _ref.apply(this,arguments);};}();var dataLayerFinder=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(key){var res;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dataLayerChecker_logger.log("Searching beagleInfoLayer for key ",key);_context2.next=3;return getFromBeagleInfoLayer(key);case 3:res=_context2.sent;if(!(res!==null&&res!==undefined)){_context2.next=7;break;}dataLayerChecker_logger.success("Found key ".concat(key," with value ").concat(res));return _context2.abrupt("return",res);case 7:dataLayerChecker_logger.failed("Key ".concat(key," not found in beagleInfoLayer"));return _context2.abrupt("return",null);case 9:case"end":return _context2.stop();}}},_callee2);}));return function dataLayerFinder(_x2){return _ref2.apply(this,arguments);};}();;// CONCATENATED MODULE: ./src/BeagleRuleEngine/elementChecker.js
var elementChecker_logger=new src_logger("BeagleElementChecker");var checkElementRule=function checkElementRule(rule){elementChecker_logger.log("Checking rule",JSON.stringify(rule));var operator=rule.operator,condition=rule.condition,value=rule.value,selector=rule.selector,selectorAll=rule.selectorAll,_rule$selectorFallbac=rule.selectorFallback,selectorFallback=_rule$selectorFallbac===void 0?null:_rule$selectorFallbac;var mainSelector=selector;if(mainSelector&&!window.top.document.querySelector(mainSelector)){mainSelector=selectorFallback?selectorFallback:mainSelector;}if(operator===null){return conditionChecker(window.top.document.querySelector(mainSelector),condition,value);}if(mainSelector&&!window.top.document.querySelector(mainSelector)){elementChecker_logger.failed("Selector not found on page");return false;}if(selectorAll&&!window.top.document.querySelectorAll(selectorAll)){elementChecker_logger.failed("Selector not found on page");return false;}var element;if(mainSelector)element=window.top.document.querySelector(mainSelector);else if(selectorAll)element=Array.from(window.top.document.querySelectorAll(selectorAll));switch(operator){case"text-number":{var tempVal;if(Array.isArray(element)){tempVal=element.reduce(function(returnVal,elem){returnVal+=parseInt(elem.textContent.replace("TL","").replace(".",""));return returnVal;},0);}else{tempVal=parseInt(window.top.document.querySelector(mainSelector).textContent.replace("TL","").replace(".",""));}var runTimeValue=parseInt(tempVal);return conditionChecker(runTimeValue,condition,value);}case"classList":return conditionChecker(Array.from(element.classList),condition,value);case"count":{if(Array.isArray(element)&&element.length>0){return conditionChecker(element.length,condition,value);}else if(element){return conditionChecker(1,condition,value);}else{return conditionChecker(0,condition,value);}}case"style":{var elementStyles=getComputedStyle(element);var styleKey=value.split(":")[0].trim();var styleValue=value.split(":")[1].trim();var _runTimeValue=elementStyles[styleKey];return conditionChecker(_runTimeValue,condition,styleValue);}default:elementChecker_logger.failed("Operator not defined");return false;}};;// CONCATENATED MODULE: ./src/BeagleRuleEngine/functionChecker.js
var functionChecker_logger=new src_logger("BeagleFunctionChecker");var checkFunctionRule=function checkFunctionRule(rule){functionChecker_logger.log("Checking rule",JSON.stringify(rule));var operator=rule.operator,condition=rule.condition,value=rule.value;if(!operator){functionChecker_logger.failed("Rule function not defined");return false;}var ruleFunction=Function(operator);var runtimeValue=ruleFunction();return conditionChecker(runtimeValue,condition,value);};;// CONCATENATED MODULE: ./src/BeagleRuleEngine/sessionChecker.js
var sessionChecker_logger=new src_logger("BeagleSessionChecker");var checkSessionRule=function checkSessionRule(rule){sessionChecker_logger.log("Checking rule",JSON.stringify(rule));var operator=rule.operator,condition=rule.condition,value=rule.value;switch(operator){case"duration":return durationHandler(condition,value);case"history":return historyHandler(condition,value);default:return null;}};var getSessionTimestamp=function getSessionTimestamp(){try{return new Date(parseInt(window.sessionStorage.getItem(SESSION_STORAGE_KEYS.SESSION_TIMESTAMP)));}catch(err){sessionChecker_logger.failed("Could not get session timestamp",err);return Date.now();}};var durationHandler=function durationHandler(condition,value){var duration=(Date.now()-getSessionTimestamp())/1000;return conditionChecker(duration,condition,parseInt(value));};var historyHandler=function historyHandler(condition,value){var _window$sessionStorag;var currentHistory=(_window$sessionStorag=window.sessionStorage.getItem(SESSION_STORAGE_KEYS.SESSION_HISTORY))===null||_window$sessionStorag===void 0?void 0:_window$sessionStorag.split(",");return conditionChecker(currentHistory,condition,value);};;// CONCATENATED MODULE: ./src/BeagleRuleEngine/urlChecker.js
var urlChecker_logger=new src_logger("BeagleUrlChecker");var checkUrlRule=function checkUrlRule(rule){urlChecker_logger.log("Checking rule",JSON.stringify(rule));var operator=rule.operator,condition=rule.condition,value=rule.value;switch(operator){case"path":{var requestURL=window.top.location.href;var path=new URL(requestURL).pathname;urlChecker_logger.log("Checking path ".concat(path," matches rule path ").concat(value));return conditionChecker(path,condition,value);}case"PLACEHOLDER":{return null;}default:return null;}};;// CONCATENATED MODULE: ./src/BeagleRuleEngine/envChecker.js
var envChecker_logger=new src_logger("BeagleEnvChecker");var checkEnvRule=function checkEnvRule(rule){envChecker_logger.log("Checking rule",JSON.stringify(rule));var operator=rule.operator,condition=rule.condition,value=rule.value;switch(operator){case"device_type":{var isMobile=window.matchMedia(MOBILE_MEDIA_QUERY).matches?"mobile":"desktop";return conditionChecker(isMobile,condition,value);}case"PLACEHOLDER":{return null;}default:return null;}};;// CONCATENATED MODULE: ./src/BeagleRuleEngine/productInfoChecker.js
var productInfoChecker_logger=new src_logger("BeagleProductInfoChecker");var checkProductInfoRule=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(rule){var _skuList$Object$keys$;var operator,condition,value,skuList,runtimeValue,sku;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:productInfoChecker_logger.log("Checking rule",JSON.stringify(rule));operator=rule.operator,condition=rule.condition,value=rule.value;_context.next=4;return getFromBeagleInfoLayer("__features.SKUsonPage",true);case 4:skuList=_context.sent;if(!(!skuList||_typeof(skuList)==="object"&&!Object.keys(skuList).length)){_context.next=7;break;}return _context.abrupt("return",false);case 7:runtimeValue=null;sku=(_skuList$Object$keys$=skuList[Object.keys(skuList)[0]])===null||_skuList$Object$keys$===void 0?void 0:_skuList$Object$keys$.id;_context.t0=operator;_context.next=_context.t0==="transactionIn2Weeks"?12:_context.t0==="addToCartIn2Weeks"?17:_context.t0==="productViewCount"?22:27;break;case 12:productInfoChecker_logger.log("Getting TransactionCount for sku ",sku);_context.next=15;return getTransactionCount(sku);case 15:runtimeValue=_context.sent;return _context.abrupt("break",27);case 17:productInfoChecker_logger.log("Getting AddToCartCount for sku ",sku);_context.next=20;return getAddToCartCount(sku);case 20:runtimeValue=_context.sent;return _context.abrupt("break",27);case 22:productInfoChecker_logger.log("Getting productViewCount for sku ",sku);_context.next=25;return getPreviewCount(sku);case 25:runtimeValue=_context.sent;return _context.abrupt("break",27);case 27:return _context.abrupt("return",conditionChecker(runtimeValue,condition,value));case 28:case"end":return _context.stop();}}},_callee);}));return function checkProductInfoRule(_x){return _ref.apply(this,arguments);};}();var getTransactionCount=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(sku){var productInfo;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return store.getInstance().get(sku);case 2:productInfo=_context2.sent;if(!(sku&&productInfo)){_context2.next=5;break;}return _context2.abrupt("return",productInfo.saleCntVisitorsIn15);case 5:return _context2.abrupt("return",-1);case 6:case"end":return _context2.stop();}}},_callee2);}));return function getTransactionCount(_x2){return _ref2.apply(this,arguments);};}();var getAddToCartCount=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(sku){var productInfo;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return store.getInstance().get(sku);case 2:productInfo=_context3.sent;if(!(sku&&productInfo)){_context3.next=5;break;}return _context3.abrupt("return",productInfo.cartCntVisitorsIn15);case 5:return _context3.abrupt("return",-1);case 6:case"end":return _context3.stop();}}},_callee3);}));return function getAddToCartCount(_x3){return _ref3.apply(this,arguments);};}();var getPreviewCount=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee4(sku){var productInfo;return regenerator_default().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return store.getInstance().get(sku);case 2:productInfo=_context4.sent;if(!(sku&&productInfo)){_context4.next=5;break;}return _context4.abrupt("return",productInfo.viewCntVisitorsIn1);case 5:return _context4.abrupt("return",-1);case 6:case"end":return _context4.stop();}}},_callee4);}));return function getPreviewCount(_x4){return _ref4.apply(this,arguments);};}();;// CONCATENATED MODULE: ./src/BeagleRuleEngine/index.js
function BeagleRuleEngine_createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=BeagleRuleEngine_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function BeagleRuleEngine_unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return BeagleRuleEngine_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return BeagleRuleEngine_arrayLikeToArray(o,minLen);}function BeagleRuleEngine_arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}var BeagleRuleEngine_logger=new src_logger("BeagleRuleEngine");var RuleEngine=/*#__PURE__*/function(){function RuleEngine(body){_classCallCheck(this,RuleEngine);var eligibilityRules=body.eligibilityRules,baseRuleSet=body.baseRuleSet;this.baseRuleSet=baseRuleSet;this.eligibilityRules=eligibilityRules;this.addedDataListeners=[];this.mutex=new Mutex();}_createClass(RuleEngine,[{key:"checkRules",value:function(){var _checkRules=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(){var _iterator,_step,rule,ruleSatisfied;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_iterator=BeagleRuleEngine_createForOfIteratorHelper(this.baseRuleSet);_context.prev=1;_iterator.s();case 3:if((_step=_iterator.n()).done){_context.next=12;break;}rule=_step.value;_context.next=7;return this.checkRule(rule);case 7:ruleSatisfied=_context.sent;if(ruleSatisfied){_context.next=10;break;}return _context.abrupt("return",false);case 10:_context.next=3;break;case 12:_context.next=17;break;case 14:_context.prev=14;_context.t0=_context["catch"](1);_iterator.e(_context.t0);case 17:_context.prev=17;_iterator.f();return _context.finish(17);case 20:return _context.abrupt("return",true);case 21:case"end":return _context.stop();}}},_callee,this,[[1,14,17,20]]);}));function checkRules(){return _checkRules.apply(this,arguments);}return checkRules;}()},{key:"checkRule",value:function(){var _checkRule=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(rule){var chain,chain_condition,type,ruleSatisfied;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:chain=rule.chain,chain_condition=rule.chain_condition,type=rule.type;ruleSatisfied=null;// check rule
_context2.t0=type;_context2.next=_context2.t0==="session"?5:_context2.t0==="element"?7:_context2.t0==="dataLayer"?9:_context2.t0==="url"?13:_context2.t0==="function"?15:_context2.t0==="environment"?17:_context2.t0==="productInfoLookup"?19:23;break;case 5:ruleSatisfied=checkSessionRule(rule);return _context2.abrupt("break",25);case 7:ruleSatisfied=checkElementRule(rule);return _context2.abrupt("break",25);case 9:_context2.next=11;return checkDataLayerRule(rule);case 11:ruleSatisfied=_context2.sent;return _context2.abrupt("break",25);case 13:ruleSatisfied=checkUrlRule(rule);return _context2.abrupt("break",25);case 15:ruleSatisfied=checkFunctionRule(rule);return _context2.abrupt("break",25);case 17:ruleSatisfied=checkEnvRule(rule);return _context2.abrupt("break",25);case 19:_context2.next=21;return checkProductInfoRule(rule);case 21:ruleSatisfied=_context2.sent;return _context2.abrupt("break",25);case 23:BeagleRuleEngine_logger.failed("No such rule type: ".concat(type));return _context2.abrupt("return",null);case 25:if(!chain){_context2.next=51;break;}_context2.t1=chain_condition;_context2.next=_context2.t1==="and"?29:_context2.t1==="or"?36:_context2.t1==="xor"?43:49;break;case 29:_context2.t2=ruleSatisfied;if(!_context2.t2){_context2.next=34;break;}_context2.next=33;return this.checkRule(chain);case 33:_context2.t2=_context2.sent;case 34:ruleSatisfied=_context2.t2;return _context2.abrupt("break",51);case 36:_context2.t3=ruleSatisfied;if(_context2.t3){_context2.next=41;break;}_context2.next=40;return this.checkRule(chain);case 40:_context2.t3=_context2.sent;case 41:ruleSatisfied=_context2.t3;return _context2.abrupt("break",51);case 43:_context2.t4=ruleSatisfied;_context2.next=46;return this.checkRule(chain);case 46:_context2.t5=_context2.sent;ruleSatisfied=_context2.t4!=_context2.t5;return _context2.abrupt("break",51);case 49:BeagleRuleEngine_logger.failed("No such chain condition");return _context2.abrupt("break",51);case 51:return _context2.abrupt("return",ruleSatisfied?rule.name||true:false);case 52:case"end":return _context2.stop();}}},_callee2,this);}));function checkRule(_x){return _checkRule.apply(this,arguments);}return checkRule;}()},{key:"assesEligibilityRules",value:function(){var _assesEligibilityRules=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee3(){var keyPromisesMap,_i,_Object$entries,_Object$entries$_i,key,rules,_iterator2,_step2,rule,_i2,_Object$entries2,_Object$entries2$_i,_key,rulePromises,satisfiedRuleIds;return regenerator_default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:addToBeagleInfoLayer("m","assessing-eligibility-rules");keyPromisesMap={};for(_i=0,_Object$entries=Object.entries(this.eligibilityRules);_i<_Object$entries.length;_i++){_Object$entries$_i=_slicedToArray(_Object$entries[_i],2),key=_Object$entries$_i[0],rules=_Object$entries$_i[1];keyPromisesMap[key]=[];_iterator2=BeagleRuleEngine_createForOfIteratorHelper(rules);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){rule=_step2.value;keyPromisesMap[key].push(this.checkRule(rule));}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}_i2=0,_Object$entries2=Object.entries(keyPromisesMap);case 4:if(!(_i2<_Object$entries2.length)){_context3.next=14;break;}_Object$entries2$_i=_slicedToArray(_Object$entries2[_i2],2),_key=_Object$entries2$_i[0],rulePromises=_Object$entries2$_i[1];_context3.next=8;return Promise.all(rulePromises);case 8:satisfiedRuleIds=_context3.sent;addToBeagleInfoLayer("__eRules.".concat(_key),satisfiedRuleIds.filter(function(id){return id!==false;}));this.setUpListeners(_key,this.eligibilityRules[_key]);case 11:_i2++;_context3.next=4;break;case 14:case"end":return _context3.stop();}}},_callee3,this);}));function assesEligibilityRules(){return _assesEligibilityRules.apply(this,arguments);}return assesEligibilityRules;}()},{key:"assesEligibilityRulesCallBack",value:function(){var _assesEligibilityRulesCallBack=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee4(key,rules){var _this=this;var release,_iterator3,_step3,_loop,_ret;return regenerator_default().wrap(function _callee4$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(!(!key||!rules||!rules.length)){_context5.next=2;break;}return _context5.abrupt("return");case 2:_context5.next=4;return this.mutex.acquire();case 4:release=_context5.sent;BeagleRuleEngine_logger.log("Lock acquired for key ".concat(key));_context5.prev=6;_iterator3=BeagleRuleEngine_createForOfIteratorHelper(rules);_context5.prev=8;_loop=/*#__PURE__*/regenerator_default().mark(function _loop(){var rule,isEligible,current,filtered;return regenerator_default().wrap(function _loop$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:rule=_step3.value;_context4.next=3;return _this.checkRule(rule);case 3:isEligible=_context4.sent;_context4.next=6;return getFromBeagleInfoLayer("__eRules.".concat(key));case 6:_context4.t0=_context4.sent;if(_context4.t0){_context4.next=9;break;}_context4.t0=[];case 9:current=_context4.t0;if(!isEligible){_context4.next=19;break;}if(!current.includes(rule.name)){_context4.next=13;break;}return _context4.abrupt("return","continue");case 13:current.push(rule.name);addToBeagleInfoLayer("__eRules.".concat(key),current);if(!(key==="PageType")){_context4.next=17;break;}return _context4.abrupt("return","break");case 17:_context4.next=23;break;case 19:if(current.includes(rule.name)){_context4.next=21;break;}return _context4.abrupt("return","continue");case 21:filtered=current.filter(function(k){return k!==rule.name;});addToBeagleInfoLayer("__eRules.".concat(key),filtered);case 23:case"end":return _context4.stop();}}},_loop);});_iterator3.s();case 11:if((_step3=_iterator3.n()).done){_context5.next=20;break;}return _context5.delegateYield(_loop(),"t0",13);case 13:_ret=_context5.t0;if(!(_ret==="continue")){_context5.next=16;break;}return _context5.abrupt("continue",18);case 16:if(!(_ret==="break")){_context5.next=18;break;}return _context5.abrupt("break",20);case 18:_context5.next=11;break;case 20:_context5.next=25;break;case 22:_context5.prev=22;_context5.t1=_context5["catch"](8);_iterator3.e(_context5.t1);case 25:_context5.prev=25;_iterator3.f();return _context5.finish(25);case 28:_context5.next=33;break;case 30:_context5.prev=30;_context5.t2=_context5["catch"](6);BeagleRuleEngine_logger.failed("Error assessing rules for key: ".concat(key," - ").concat(_context5.t2.message));case 33:_context5.prev=33;BeagleRuleEngine_logger.log("Releasing lock for key: ".concat(key));release();return _context5.finish(33);case 37:case"end":return _context5.stop();}}},_callee4,this,[[6,30,33,37],[8,22,25,28]]);}));function assesEligibilityRulesCallBack(_x2,_x3){return _assesEligibilityRulesCallBack.apply(this,arguments);}return assesEligibilityRulesCallBack;}()},{key:"setUpListeners",value:function(){var _setUpListeners=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee5(key,rules){var _this2=this;var _this$extractRuleAttr,dataLayerRules,elementRules,_i3,_Object$entries3,_Object$entries3$_i,operator,_rules,boundAssesEligibilityRulesCallBack,_loop2,_i4,_Object$entries4;return regenerator_default().wrap(function _callee5$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_this$extractRuleAttr=this.extractRuleAttributes(rules),dataLayerRules=_this$extractRuleAttr.dataLayerRules,elementRules=_this$extractRuleAttr.elementRules;for(_i3=0,_Object$entries3=Object.entries(dataLayerRules);_i3<_Object$entries3.length;_i3++){_Object$entries3$_i=_slicedToArray(_Object$entries3[_i3],2),operator=_Object$entries3$_i[0],_rules=_Object$entries3$_i[1];boundAssesEligibilityRulesCallBack=this.assesEligibilityRulesCallBack.bind(this,key,_rules);addDataListener(operator,boundAssesEligibilityRulesCallBack);}_loop2=function _loop2(){var _Object$entries4$_i=_slicedToArray(_Object$entries4[_i4],2),selector=_Object$entries4$_i[0],rules=_Object$entries4$_i[1];var observer=new MutationObserver(function(mutationList){if(window.top.document.readyState!=="complete")return;var nodes=[];var _iterator4=BeagleRuleEngine_createForOfIteratorHelper(mutationList),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var mutationRecord=_step4.value;nodes=[].concat(_toConsumableArray(nodes),_toConsumableArray(Array.from(mutationRecord.addedNodes)),_toConsumableArray(Array.from(mutationRecord.removedNodes)));}// exclude mutations that only update text
}catch(err){_iterator4.e(err);}finally{_iterator4.f();}if(nodes.every(function(n){return n.tagName===undefined;}))return;_this2.assesEligibilityRulesCallBack(key,rules);});if(selector==="body"){observer.observe(window.top.document.body,{subtree:true,childList:true});}else{observer.observe(window.top.document.querySelector(selector).parentNode,{subtree:true,childList:true});}};for(_i4=0,_Object$entries4=Object.entries(elementRules);_i4<_Object$entries4.length;_i4++){_loop2();}case 4:case"end":return _context6.stop();}}},_callee5,this);}));function setUpListeners(_x4,_x5){return _setUpListeners.apply(this,arguments);}return setUpListeners;}()},{key:"extractRuleAttributes",value:function extractRuleAttributes(rules){var dataLayerRules=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var elementRules=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(!rules||!rules.length)return;var _iterator5=BeagleRuleEngine_createForOfIteratorHelper(rules),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var rule=_step5.value;var type=rule.type;switch(type){case"dataLayer":if(!dataLayerRules[rule.operator]){dataLayerRules[rule.operator]=[];}dataLayerRules[rule.operator].push(rule);break;case"element":if(document.querySelector(rule.selector)){elementRules[rule.selector]=elementRules[rule.selector]?[].concat(_toConsumableArray(elementRules[rule.selector]),[rule]):[rule];break;}if(document.querySelectorAll(rule.selectorAll).length){elementRules[rule.selectorAll]=elementRules[rule.selectorAll]?[].concat(_toConsumableArray(elementRules[rule.selectorAll]),[rule]):[rule];break;}elementRules["body"]=elementRules["body"]?[].concat(_toConsumableArray(elementRules["body"]),[rule]):[rule];break;}if(rule.chain){this.extractRuleAttributes([rule.chain],dataLayerRules,elementRules);}}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}return{dataLayerRules:dataLayerRules,elementRules:elementRules};}}],[{key:"getEligibilityRules",value:function(){var _getEligibilityRules=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee6(){var eligibilityRulesObj,elapsedHours;return regenerator_default().wrap(function _callee6$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.prev=0;eligibilityRulesObj=window.localStorage.getItem(LOCAL_STORAGE_KEYS.ELIGIBILITY_RULES);if(!eligibilityRulesObj){_context7.next=8;break;}eligibilityRulesObj=JSON.parse(eligibilityRulesObj);if(!eligibilityRulesObj.timestamp){_context7.next=8;break;}elapsedHours=(Date.now()-eligibilityRulesObj.timestamp)/(1000*3600);if(!(elapsedHours<LOCAL_STORAGE_TTL_HOURS)){_context7.next=8;break;}return _context7.abrupt("return",eligibilityRulesObj.rules);case 8:_context7.next=10;return fetchEligibilityRules();case 10:eligibilityRulesObj=_context7.sent;if(eligibilityRulesObj){_context7.next=14;break;}BeagleRuleEngine_logger.failed("Failed to fetch eligibility rules");return _context7.abrupt("return",null);case 14:eligibilityRulesObj={rules:eligibilityRulesObj,timestamp:Date.now()};window.localStorage.setItem(LOCAL_STORAGE_KEYS.ELIGIBILITY_RULES,JSON.stringify(eligibilityRulesObj));return _context7.abrupt("return",eligibilityRulesObj.rules);case 19:_context7.prev=19;_context7.t0=_context7["catch"](0);BeagleRuleEngine_logger.failed("Could not get eligibility rules: ",_context7.t0.message);return _context7.abrupt("return",null);case 23:case"end":return _context7.stop();}}},_callee6,null,[[0,19]]);}));function getEligibilityRules(){return _getEligibilityRules.apply(this,arguments);}return getEligibilityRules;}()}]);return RuleEngine;}();;// CONCATENATED MODULE: ./src/BeagleOn/index.js
var BeagleOn_logger=new src_logger("BeagleOnComponent");var beagleOn=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(identifier,debugMode,pageType,treatmentWeights){var persistProductInfoPromise,eligibilityRulesAssessPromise,treatmentsPromise,searchParams,debugFilteredTreatments,treatments,treatmentRepository,matchedTreatments,robotEngine;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:persistProductInfoPromise=store.getInstance().persistProductInfo();eligibilityRulesAssessPromise=assesEligibilityRules();treatmentsPromise=BeagleTreatmentRepository.getTreatments();injectStyleSheet();initiateSessionStorages();addToBeagleInfoLayer("m","on-init");searchParams=window.location.search;debugFilteredTreatments=null;if(debugMode&&searchParams.includes("filter=")){debugFilteredTreatments=searchParams.slice(searchParams.indexOf("[")+1,searchParams.lastIndexOf("]")).split(",").map(function(item){return parseInt(item,10);});}_context.next=11;return treatmentsPromise;case 11:treatments=_context.sent;if(treatments){_context.next=15;break;}addToBeagleInfoLayer("m","no-robot-weights");throw new Error("Failed to fetch treatments/weights");case 15:BeagleOn_logger.success("Found treatments: ",treatments);addToBeagleInfoLayer("m","fetched-treatments");treatmentRepository=new BeagleTreatmentRepository({treatments:treatments,treatmentWeights:treatmentWeights});_context.next=20;return treatmentRepository.getMatchedTreatments(debugMode);case 20:matchedTreatments=_context.sent;if(!(matchedTreatments===null)){_context.next=25;break;}addToBeagleInfoLayer("m","no-user-segment");removeDocumentHide();return _context.abrupt("return");case 25:if(matchedTreatments.length){_context.next=30;break;}BeagleOn_logger.log("No treatments matched, returning without further action");addToBeagleInfoLayer("m","no-robot-matched");removeDocumentHide();return _context.abrupt("return");case 30:addToBeagleInfoLayer("m","found-matched-robots");_context.prev=31;_context.next=34;return eligibilityRulesAssessPromise;case 34:_context.next=40;break;case 36:_context.prev=36;_context.t0=_context["catch"](31);addToBeagleInfoLayer("m","no-rules-assessed");throw new Error("Could not asses eligibility rules");case 40:addToBeagleInfoLayer("m","rules-assessed");_context.prev=41;_context.next=44;return persistProductInfoPromise;case 44:_context.next=50;break;case 46:_context.prev=46;_context.t1=_context["catch"](41);addToBeagleInfoLayer("m","product-into-no-persist");throw new Error("Could not persist product info");case 50:addToBeagleInfoLayer("m","engaging-robots");robotEngine=new RobotEngine({debugFilteredTreatments:debugFilteredTreatments,debugMode:debugMode,matchedTreatments:matchedTreatments,identifier:identifier,pageType:pageType});_context.next=54;return robotEngine.engageRobots();case 54:removeDocumentHide();addToBeagleInfoLayer("m","robots-engaged");_context.t2=BeagleOn_logger;_context.next=59;return getFromBeagleInfoLayer("a");case 59:_context.t3=_context.sent;_context.t2.success.call(_context.t2,"Applied treatments: ",_context.t3);case 61:case"end":return _context.stop();}}},_callee,null,[[31,36],[41,46]]);}));return function beagleOn(_x,_x2,_x3,_x4){return _ref.apply(this,arguments);};}();function assesEligibilityRules(){return _assesEligibilityRules.apply(this,arguments);}function _assesEligibilityRules(){_assesEligibilityRules=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee2(){var eligibilityRules,ruleEngine;return regenerator_default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:addToBeagleInfoLayer("m","fetching-eligibility-rules");_context2.next=3;return RuleEngine.getEligibilityRules();case 3:eligibilityRules=_context2.sent;if(eligibilityRules){_context2.next=6;break;}return _context2.abrupt("return");case 6:addToBeagleInfoLayer("m","fetched-eligibility-rules");ruleEngine=new RuleEngine({eligibilityRules:eligibilityRules});_context2.next=10;return ruleEngine.assesEligibilityRules();case 10:addToBeagleInfoLayer("m","assessed-eligibility-rules");case 11:case"end":return _context2.stop();}}},_callee2);}));return _assesEligibilityRules.apply(this,arguments);}/* harmony default export */var BeagleOn=beagleOn;;// CONCATENATED MODULE: ./src/BeagleInfoLayer/segment-computer.js
var segment_computer_logger=new src_logger("SegmentationComputer");function computeSegment(_x){return _computeSegment.apply(this,arguments);}function _computeSegment(){_computeSegment=_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(treatmentWeights){var _i,_Object$keys,_treatmentWeights$seg,segment,ruleSet,segmentRuleEngine;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:segment_computer_logger.log("Determining user segment");_context.prev=1;_i=0,_Object$keys=Object.keys(treatmentWeights);case 3:if(!(_i<_Object$keys.length)){_context.next=18;break;}segment=_Object$keys[_i];ruleSet=(_treatmentWeights$seg=treatmentWeights[segment])===null||_treatmentWeights$seg===void 0?void 0:_treatmentWeights$seg.ruleSet;if(ruleSet){_context.next=8;break;}return _context.abrupt("continue",15);case 8:segmentRuleEngine=new RuleEngine({baseRuleSet:ruleSet,businessRuleSet:[]});_context.next=11;return segmentRuleEngine.checkRules();case 11:if(!_context.sent){_context.next=15;break;}segment_computer_logger.log("User segment matched: ".concat(segment));addToBeagleInfoLayer("s",segment);return _context.abrupt("return",segment);case 15:_i++;_context.next=3;break;case 18:segment_computer_logger.log("User segment not matched");return _context.abrupt("return",null);case 22:_context.prev=22;_context.t0=_context["catch"](1);segment_computer_logger.failed("Could not compute user segment");return _context.abrupt("return",null);case 26:case"end":return _context.stop();}}},_callee,null,[[1,22]]);}));return _computeSegment.apply(this,arguments);};// CONCATENATED MODULE: ./src/BeagleClientSDK/index.js
var SHUTDOWN=false;_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(){var monitor,logger,earlyLogSent,hideRemoved,_String$prototype,treatmentWeightsPromise,identifier,cookiePct,userSegment,treatmentWeights,oosReason,isLabelSent,timeoutCounter,debugMode,processAdminUser,isAdmin,isOn,pageType;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:switchToEaseOut();monitor=null;logger=new src_logger();logger.info("Beagle initializing");window.dataLayer=window.dataLayer||[];earlyLogSent=false;hideRemoved=false;_context.prev=7;/* ======================================== INIT TASKS ===================================== */addToBeagleInfoLayer("GLOV_ON","not-sent | initializing");treatmentWeightsPromise=BeagleTreatmentRepository.getTreatmentWeights();monitor=new BeagleMonitor();initializeBeagleInfoLayer();_context.next=14;return getIdentifier();case 14:identifier=_context.sent;logger.log("Found identifier: ",identifier);addToBeagleInfoLayer("cookieGaId",identifier);_context.next=19;return determinePct(identifier);case 19:cookiePct=_context.sent;addToBeagleInfoLayer("onHashPct",cookiePct);addToBeagleInfoLayer("view_epoch",Date.now()+Math.random());addToBeagleInfoLayer("v",VERSION);addToBeagleInfoLayer("sr",SPLIT_RATIO);// data-less log to detect bounces
_context.next=26;return monitor.packAndQueueArrivalLog();case 26:setTimeout(function(){removeDocumentHide();},2000);/* ================================= EARLY PRUNE OUT-OF-SCOPE ============================== */userSegment=null;treatmentWeights=null;oosReason=window.localStorage.getItem(LOCAL_STORAGE_KEYS.OUT_OF_SCOPE);if(!(oosReason!=="unsupported")){_context.next=40;break;}_context.next=33;return treatmentWeightsPromise;case 33:treatmentWeights=_context.sent;if(treatmentWeights){_context.next=37;break;}addToBeagleInfoLayer("m","no-robot-weights");throw new Error("Unable to fetch weights");case 37:_context.next=39;return computeSegment(treatmentWeights);case 39:userSegment=_context.sent;case 40:if(!(cookiePct===null||!navigator.sendBeacon||typeof navigator.sendBeacon!=="function"||typeof(String===null||String===void 0?void 0:(_String$prototype=String.prototype)===null||_String$prototype===void 0?void 0:_String$prototype.padStart)!=="function"||oosReason&&oosReason==="unsupported"||!userSegment)){_context.next=45;break;}window.dataLayer.push({event:"GLOV",GLOV_ON:"unsupported"});window.localStorage.setItem(LOCAL_STORAGE_KEYS.OUT_OF_SCOPE,"unsupported");addToBeagleInfoLayer("GLOV_ON","unsupported | device");throw new Error("unsupported-device");case 45:isLabelSent=window.localStorage.getItem(LOCAL_STORAGE_KEYS.IS_LABEL_SENT);timeoutCounter=parseInt(sessionStorage.getItem(SESSION_STORAGE_KEYS.TIMEOUT_COUNT))||0;// check if debug mode is on, also adds dbm to beagleInfoLayer and sets oosReason
debugMode=getDebugMode("employee");// if timed-out too many times for very first interactsions, make out of scope for the session
if(!(!debugMode&&!oosReason&&!isLabelSent&&timeoutCounter>MAX_TIMEOUT_PER_SESSION)){_context.next=52;break;}window.dataLayer.push({event:"GLOV",GLOV_ON:"unsupported"});addToBeagleInfoLayer("GLOV_ON","unsupported | timeout");throw new Error("max-timeout");case 52:/* =================================== ADMIN USER CHECK ==================================== */ // TODO: rename showroom logic to admin, and map vvsIsShowroom to a configurable admin param
// if admin user, make out of scope and mark as employee
processAdminUser=function processAdminUser(){window.dataLayer.push({event:"GLOV",GLOV_ON:"employee"});window.localStorage.setItem(LOCAL_STORAGE_KEYS.OUT_OF_SCOPE,"employee");window.localStorage.setItem(LOCAL_STORAGE_KEYS.IS_ADMIN,true);addToBeagleInfoLayer("GLOV_ON","employee | admin");throw new Error("admin-employee");};isAdmin=window.localStorage.getItem(LOCAL_STORAGE_KEYS.IS_ADMIN);// if not found in localStorage, check beagleInfoLayer with blocking mdoe
if(!(isAdmin===null||isAdmin===undefined)){_context.next=60;break;}_context.next=57;return getFromBeagleInfoLayer("vvsIsShowroom",true);case 57:isAdmin=_context.sent;_context.next=61;break;case 60:if(isAdmin==="false"||isAdmin===false){// async call to getFromBeagleInfoLayer, then set localStorage
getFromBeagleInfoLayer("vvsIsShowroom",true).then(function(isAdmin){if(isAdmin&&(isAdmin==="true"||isAdmin===true)){processAdminUser();}});}case 61:if(!(isAdmin&&(isAdmin==="true"||isAdmin===true))){_context.next=65;break;}processAdminUser();_context.next=72;break;case 65:if(!(isAdmin===null||isAdmin===undefined)){_context.next=71;break;}sessionStorage.setItem(SESSION_STORAGE_KEYS.TIMEOUT_COUNT,timeoutCounter+1);addToBeagleInfoLayer("GLOV_ON","not-sent | timeout");throw new Error("no-admin-status");case 71:window.localStorage.setItem(LOCAL_STORAGE_KEYS.IS_ADMIN,false);case 72:if(window.top.document.documentElement.classList.contains("glov-ease")){_context.next=76;break;}sessionStorage.setItem(SESSION_STORAGE_KEYS.TIMEOUT_COUNT,timeoutCounter+1);addToBeagleInfoLayer("GLOV_ON","not-sent | timeout");throw new Error("anti-flicker-timeout");case 76:/* ===================================== ON/OFF CHECK ====================================== */ // isOn can be true (ON), false (OFF)
isOn=null;if(!debugMode){_context.next=84;break;}logger.log("Debug mode on: all applicable treatments will be applied");isOn=true;window.dataLayer.push({event:"GLOV",GLOV_ON:"employee"});addToBeagleInfoLayer("GLOV_ON","employee | tester");_context.next=100;break;case 84:if(!(oosReason&&oosReason==="employee")){_context.next=91;break;}logger.warn("User is out of scope");// set isOn to true/false when not debugMode but out of scope i.e. nd_debug=0 for testability
isOn=cookiePct>=SPLIT_RATIO;window.dataLayer.push({event:"GLOV",GLOV_ON:"employee"});addToBeagleInfoLayer("GLOV_ON","employee | tester");_context.next=100;break;case 91:if(!oosReason){_context.next=96;break;}addToBeagleInfoLayer("GLOV_ON","not-sent | unknown");throw new Error("Unknown out of scope reason");case 96:// if greater than SPLIT_RATIO, then in ON mode
if(cookiePct>=SPLIT_RATIO){isOn=true;window.dataLayer.push({event:"GLOV",GLOV_ON:"true"});}else if(cookiePct>=SPLIT_RATIO/2){isOn=false;window.dataLayer.push({event:"GLOV",GLOV_ON:"false2"});}else{isOn=false;window.dataLayer.push({event:"GLOV",GLOV_ON:"false1"});}addToBeagleInfoLayer("isOn",isOn);window.localStorage.setItem(LOCAL_STORAGE_KEYS.IS_LABEL_SENT,true);addToBeagleInfoLayer("GLOV_ON",isOn.toString());case 100:_context.next=102;return getFromBeagleInfoLayer("PageType",true);case 102:pageType=_context.sent;if(!(pageType==="purchase")){_context.next=113;break;}_context.next=106;return getFromBeagleInfoLayer("purchase.revenue",true,50,5000);case 106:_context.next=108;return getFromBeagleInfoLayer("purchase.paymentType",true,50,5000);case 108:_context.next=110;return monitor.sendLogs(true);case 110:// if purchase is complete, do not apply any treatments on the confirmation page
SHUTDOWN=true;_context.next=114;break;case 113:// send logs when ready, start scraping and sending asyncly
monitor.sendLogs(false);case 114:earlyLogSent=true;/* ======================================= ROBOT PATHs ===================================== */if(!(isOn===true)){_context.next=119;break;}if(!SHUTDOWN){logger.log("Beagle ON Group Path");BeagleOn(identifier,debugMode,pageType,treatmentWeights);}else{logger.info("Beagle ON Group SHUTDOWN Path");removeDocumentHide();hideRemoved=true;}_context.next=126;break;case 119:if(!(isOn===false)){_context.next=125;break;}logger.info("Beagle OFF Group Path");removeDocumentHide();hideRemoved=true;_context.next=126;break;case 125:throw new Error("isOn is undefined or null");case 126:_context.next=134;break;case 128:_context.prev=128;_context.t0=_context["catch"](7);logger.warn("Beagle Early Scope-out or ERROR: ",_context.t0.message);addToBeagleInfoLayer("m",_context.t0.message);if(!earlyLogSent&&monitor)monitor.sendLogs(false);if(!hideRemoved)removeDocumentHide();case 134:case"end":return _context.stop();}}},_callee,null,[[7,128]]);}))();}();/******/})();

/***/ }),

/***/ 897:
/***/ (function(module) {

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 372:
/***/ (function(module) {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 690:
/***/ (function(module) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 728:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toPropertyKey = __webpack_require__(62);
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 872:
/***/ (function(module) {

function _iterableToArrayLimit(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) {
        ;
      }
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 218:
/***/ (function(module) {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 61:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _typeof = (__webpack_require__(698)["default"]);
function _regeneratorRuntime() {
  "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
    return exports;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    },
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function value(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method,
      method = delegate.iterator[methodName];
    if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) {
              if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            }
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
      keys = [];
    for (var key in object) {
      keys.push(key);
    }
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
        "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      }
    },
    stop: function stop() {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}
module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 424:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(372);
var iterableToArrayLimit = __webpack_require__(872);
var unsupportedIterableToArray = __webpack_require__(116);
var nonIterableRest = __webpack_require__(218);
function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}
module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 36:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _typeof = (__webpack_require__(698)["default"]);
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
module.exports = _toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 62:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _typeof = (__webpack_require__(698)["default"]);
var toPrimitive = __webpack_require__(36);
function _toPropertyKey(arg) {
  var key = toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
module.exports = _toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 698:
/***/ (function(module) {

function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 116:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(897);
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}
module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 687:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// TODO(Babel 8): Remove this file.

var runtime = __webpack_require__(61)();
module.exports = runtime;

// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";

;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(687);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toPrimitive.js

function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js


function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
;// CONCATENATED MODULE: ./src/constants.js
/* eslint-disable max-len */

var isStaging = typeof window !== "undefined" ? window.location.href.includes("staging.vivense") : true;
var VERSION = "0.0.39.5";
var COOKIE_NAME = "_ga";
// TODO revert the following staging env check after moving to new branch structure
var TREATMENTS_LOCATION = "https://host-b96.pages.dev/treatments.json";
var TREATMENT_WEIGHTS_LOCATION = "https://host-b96.pages.dev/weights.json";
var STYLESHEET_LOCATION = "https://host-b96.pages.dev/nd-styless.css";
var E_RULES_LOCATION = isStaging ? "https://ndvivense.glov.ai/eligibility_rules_staging.json" : "https://ndvivense.glov.ai/eligibility_rules.json";
var PRODUCT_INFO_LOCATION = "https://ndvivense.glov.ai/social-proof-v2-staging.json";
var LOG_API_URL = "https://europe-west3-nextday-34eb3.cloudfunctions.net/api/log";
var LOOKUP_API_URL = "https://catalog-api.adoraai.com";
var MOBILE_MEDIA_QUERY = "(max-width: 440px)";
// Control group percentage
var SPLIT_RATIO = 50;
// Skipped treatment percentage
var TREATMENT_RATIO = 50;
var LOCAL_STORAGE_TTL_HOURS = 2;
var MAX_TIMEOUT_PER_SESSION = 1;
var LIST_MODE_BEAGLE_KEYS = (/* unused pure expression or super */ null && (["pagetype", "category", "alltimePLPCategoryMode", "sessionPLPCategoryMode", "alltimePDPCategoryMode", "sessionPDPCategoryMode", "alltimeCartCategoryMode", "sessionCartCategoryMode"]));
var IDLE_TIMEOUT = 15000;
var SESSION_STORAGE_KEYS = {
  SESSION_TIMESTAMP: "BG_SessionTimestamp",
  SESSION_HISTORY: "BG_SessionHistory",
  POPUP_DISPLAY_FLAG: "BG_PopupDisplayFlag",
  SKU_INFO_BASKET: "BG_ProductInfoBasket",
  TIMEOUT_COUNT: "BG_TimeoutCount",
  SESSION_REFERRER: "BG_SessionReferrer",
  MATCHED_TREATMENTS: "GLV_Matched"
};
var LOCAL_STORAGE_KEYS = {
  TREATMENTS: "BG_Treatments",
  WEIGHTS: "BG_Weights",
  ELIGIBILITY_RULES: "BG_E_Rules",
  DEBUG_MODE: "BG_Debug",
  OUT_OF_SCOPE: "BG_OutOfScope",
  IS_LABEL_SENT: "BG_LabelSent",
  USER_ID: "BG_UserId_00",
  DATA_COLLECTION_DATA_SIZE: "BG_CollectionDataSize",
  IS_ADMIN: "GLV_IsAdmin"
};
var CUSTOM_STORAGE_PREFIX = "BG_Seg_";
;// CONCATENATED MODULE: ./src/logger.js




var Logger = /*#__PURE__*/function () {
  function Logger() {
    var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Beagle Client SDK";
    var testing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    _classCallCheck(this, Logger);
    this.origin = origin;
    if (testing) {
      this.DEBUG = 1;
    } else {
      this.DEBUG = window.localStorage.getItem(LOCAL_STORAGE_KEYS.DEBUG_MODE);
    }
  }
  _createClass(Logger, [{
    key: "info",
    value: function info() {
      var _console;
      var origin = this.origin;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      (_console = console).info.apply(_console, ["[".concat(origin, "]")].concat(args));
    }
  }, {
    key: "log",
    value: function log() {
      var DEBUG = this.DEBUG,
        origin = this.origin;
      if (DEBUG) {
        var _console2;
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        (_console2 = console).log.apply(_console2, ["[".concat(origin, "]")].concat(args));
      }
    }
  }, {
    key: "failed",
    value: function failed() {
      var _console3;
      var DEBUG = this.DEBUG,
        origin = this.origin;
      if (!DEBUG) return;
      var messageConfig = "%c%s   ";
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      args.forEach(function (argument) {
        var type = _typeof(argument);
        switch (type) {
          case "bigint":
          case "number":
          case "boolean":
            messageConfig += "%d   ";
            break;
          case "string":
            messageConfig += "%s   ";
            break;
          case "object":
          case "undefined":
          default:
            messageConfig += "%o   ";
        }
      });
      (_console3 = console).log.apply(_console3, [messageConfig, "color: red", "[".concat(origin, "]")].concat(args));
    }
  }, {
    key: "success",
    value: function success() {
      var _console4;
      var DEBUG = this.DEBUG,
        origin = this.origin;
      if (!DEBUG) return;
      var messageConfig = "%c%s   ";
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      args.forEach(function (argument) {
        var type = _typeof(argument);
        switch (type) {
          case "bigint":
          case "number":
          case "boolean":
            messageConfig += "%d   ";
            break;
          case "string":
            messageConfig += "%s   ";
            break;
          case "object":
          case "undefined":
          default:
            messageConfig += "%o   ";
        }
      });
      (_console4 = console).log.apply(_console4, [messageConfig, "color: green", "[".concat(origin, "]")].concat(args));
    }
  }, {
    key: "warn",
    value: function warn() {
      var _console5;
      var origin = this.origin;
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      (_console5 = console).warn.apply(_console5, ["[".concat(origin, "]")].concat(args));
    }
  }, {
    key: "error",
    value: function error() {
      var _console6;
      var origin = this.origin;
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      (_console6 = console).error.apply(_console6, ["[".concat(origin, "]")].concat(args));
    }
  }]);
  return Logger;
}();
/* harmony default export */ var src_logger = (Logger);
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) {
        ;
      }
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js




function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js




function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js

function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
;// CONCATENATED MODULE: ./src/utils.js




function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = utils_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function utils_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return utils_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return utils_arrayLikeToArray(o, minLen); }
function utils_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/* eslint-disable max-len */



var logger = new src_logger("BeagleUtils");
var months = {
  "ocak": 0,
  "şubat": 1,
  "mart": 2,
  "nisan": 3,
  "mayıs": 4,
  "haziran": 5,
  "temmuz": 6,
  "ağustos": 7,
  "eylül": 8,
  "ekim": 9,
  "kasım": 10,
  "aralık": 11
};
var removeDocumentHide = function removeDocumentHide() {
  window.top.document.documentElement.classList.remove("glov-ease");
  window.top.document.documentElement.classList.remove("glov-hide");
};
var switchToEaseOut = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
    var el;
    return regenerator_default().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (window.top.document.documentElement.classList.contains("glov-hide")) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return");
          case 2:
            el = document.createElement("style");
            el.textContent = ".glov-ease {\n    -webkit-animation: smooth 2s ease-in;\n    -moz-animation: smooth 2s ease-in;\n    -o-animation: smooth 2s ease-in;\n    -ms-animation: smooth 2s ease-in;\n    animation: smooth 2s ease-in;\n  }\n  \n  @keyframes smooth {\n    0% { opacity: 0;}\n    25% { opacity: 0.25;}\n    50% { opacity: 0.5;}\n    75% { opacity: 0.75;}\n    100% { opacity: 1;}\n  }\n  @-webkit-keyframes smooth {\n    0% { opacity: 0;}\n    25% { opacity: 0.25;}\n    50% { opacity: 0.5;}\n    75% { opacity: 0.75;}\n    100% { opacity: 1;}\n  }";
            window.top.document.documentElement.prepend(el);
            window.top.document.documentElement.classList.add("glov-ease");
            window.top.document.documentElement.classList.remove("glov-hide");
          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return function switchToEaseOut() {
    return _ref.apply(this, arguments);
  };
}();
var fetchTreatments = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {
    var treatments, jsonTreatment;
    return regenerator_default().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            logger.log("Fetching treatments");
            _context2.next = 4;
            return fetchPlus(TREATMENTS_LOCATION);
          case 4:
            treatments = _context2.sent;
            if (treatments) {
              _context2.next = 7;
              break;
            }
            throw new Error();
          case 7:
            _context2.next = 9;
            return treatments.json();
          case 9:
            jsonTreatment = _context2.sent;
            return _context2.abrupt("return", jsonTreatment);
          case 13:
            _context2.prev = 13;
            _context2.t0 = _context2["catch"](0);
            logger.failed("Could not fetch treatments", _context2.t0.message);
            return _context2.abrupt("return", null);
          case 17:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 13]]);
  }));
  return function fetchTreatments() {
    return _ref2.apply(this, arguments);
  };
}();
var fetchTreatmentWeights = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3() {
    var treatmentWeights, jsonTreatmentWeights;
    return regenerator_default().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            logger.log("Fetching treatment weights");
            _context3.next = 4;
            return fetchPlus(TREATMENT_WEIGHTS_LOCATION);
          case 4:
            treatmentWeights = _context3.sent;
            if (treatmentWeights) {
              _context3.next = 7;
              break;
            }
            throw new Error();
          case 7:
            _context3.next = 9;
            return treatmentWeights.json();
          case 9:
            jsonTreatmentWeights = _context3.sent;
            return _context3.abrupt("return", jsonTreatmentWeights);
          case 13:
            _context3.prev = 13;
            _context3.t0 = _context3["catch"](0);
            logger.failed("Could not fetch treatment weights", _context3.t0.message);
            return _context3.abrupt("return", null);
          case 17:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[0, 13]]);
  }));
  return function fetchTreatmentWeights() {
    return _ref3.apply(this, arguments);
  };
}();
var fetchEligibilityRules = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4() {
    var eligibilityRules, jsonEligibilityRules;
    return regenerator_default().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.prev = 0;
            logger.log("Fetching eligibility rules");
            _context4.next = 4;
            return fetchPlus(E_RULES_LOCATION);
          case 4:
            eligibilityRules = _context4.sent;
            if (eligibilityRules) {
              _context4.next = 7;
              break;
            }
            throw new Error();
          case 7:
            _context4.next = 9;
            return eligibilityRules.json();
          case 9:
            jsonEligibilityRules = _context4.sent;
            return _context4.abrupt("return", jsonEligibilityRules);
          case 13:
            _context4.prev = 13;
            _context4.t0 = _context4["catch"](0);
            logger.failed("Could not fetch eligibility rules", _context4.t0.message);
            return _context4.abrupt("return", null);
          case 17:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, null, [[0, 13]]);
  }));
  return function fetchEligibilityRules() {
    return _ref4.apply(this, arguments);
  };
}();
var fetchProductInfo = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee5() {
    var productInfo, productInfoJson;
    return regenerator_default().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.prev = 0;
            logger.log("Fetching product info");
            _context5.next = 4;
            return fetchPlus(PRODUCT_INFO_LOCATION);
          case 4:
            productInfo = _context5.sent;
            if (productInfo) {
              _context5.next = 7;
              break;
            }
            throw new Error();
          case 7:
            _context5.next = 9;
            return productInfo.json();
          case 9:
            productInfoJson = _context5.sent;
            return _context5.abrupt("return", productInfoJson);
          case 13:
            _context5.prev = 13;
            _context5.t0 = _context5["catch"](0);
            logger.failed("Could not fetch product info", _context5.t0.message);
            return _context5.abrupt("return", null);
          case 17:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, null, [[0, 13]]);
  }));
  return function fetchProductInfo() {
    return _ref5.apply(this, arguments);
  };
}();
var utils_timeout = function timeout(time) {
  var controller = new AbortController();
  setTimeout(function () {
    return controller.abort();
  }, time);
  return controller;
};
var fetchPlus = function fetchPlus(url) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var retries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;
  return fetch(url, _objectSpread(_objectSpread({}, options), {}, {
    signal: utils_timeout(5000).signal
  })).then(function (res) {
    if (res.ok) {
      return res;
    }
    if (retries > 0) {
      return fetchPlus(url, options, retries - 1);
    }
    throw new Error(res.status);
  }).catch(function (error) {
    if (retries > 0) {
      logger.failed("Fetch timed out Retrying...: ", error.message);
      return fetchPlus(url, options, retries - 1);
    }
    logger.failed("Fetch failed: ", error.message);
    return null;
  });
};
var extractCookieIdentifier = function extractCookieIdentifier(cookieString, cookieName) {
  if (!cookieString) {
    return null;
  }
  var parsed = cookieString.split(";").map(function (v) {
    return v.split("=");
  }).reduce(function (acc, v) {
    if (v[0] && v[1]) {
      acc[decodeURIComponent(v[0].trim())] = decodeURIComponent(v[1].trim());
    }
    return acc;
  }, {});
  var identifier = parsed[cookieName];
  if (!identifier) {
    return null;
  }
  if (cookieName === "_ga") {
    // extract unique identifier from GA cookie
    var identifierIndex = 2;
    identifier = identifier.split(".")[identifierIndex];
  }
  return identifier;
};
var determinePct = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee6(identifier) {
    var hash, pct;
    return regenerator_default().wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.prev = 0;
            if (identifier) {
              _context6.next = 3;
              break;
            }
            return _context6.abrupt("return", null);
          case 3:
            hash = getUnsecureHash(identifier);
            if (!(hash === null)) {
              _context6.next = 6;
              break;
            }
            return _context6.abrupt("return", null);
          case 6:
            pct = hash % 100;
            if (!(pct >= 0 && pct < 100)) {
              _context6.next = 9;
              break;
            }
            return _context6.abrupt("return", pct);
          case 9:
            return _context6.abrupt("return", null);
          case 12:
            _context6.prev = 12;
            _context6.t0 = _context6["catch"](0);
            logger.error(_context6.t0);
            return _context6.abrupt("return", null);
          case 16:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, null, [[0, 12]]);
  }));
  return function determinePct(_x) {
    return _ref6.apply(this, arguments);
  };
}();
var exitScrollListener = function exitScrollListener(callBack) {
  var loop = function loop() {
    var scrollTop = window.top.document.documentElement.scrollTop;
    if (lastScrollTop - 400 > scrollTop) {
      clearInterval(exitScrollInterval);
      callBack();
    } else {
      lastScrollTop = scrollTop;
    }
  };
  var lastScrollTop = window.top.document.documentElement.scrollTop;
  var exitScrollInterval = setInterval(loop, 500);
};

/**
 * @description This function is used to apply treatments to the page on specific media type.
 * @param {MediaQueryList} mediaQueryCondition window.matchMedia("(max-width: 500px)")
 * @param {DOMNodeList } elements document.querySelectorAll("div.product_info")
 * @param {Object} styleChangesMap { "margin-top" : "10rem"}
 * @returns
 */

var styleApplicator = function styleApplicator(elements, styleChangesMap) {
  logger.log("Applying style changes", styleChangesMap, "to elements", elements);
  for (var i = 0; i < elements.length; i++) {
    var element = elements[i];
    for (var _i = 0, _Object$entries = Object.entries(styleChangesMap); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        key = _Object$entries$_i[0],
        value = _Object$entries$_i[1];
      element.style[key] = value;
    }
  }
};
var injectStyleSheet = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee7() {
    var styleSheet;
    return regenerator_default().wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            styleSheet = window.top.document.createElement("link");
            styleSheet.rel = "stylesheet";
            styleSheet.type = "text/css";
            styleSheet.href = STYLESHEET_LOCATION;
            window.top.document.head.appendChild(styleSheet);
          case 5:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return function injectStyleSheet() {
    return _ref7.apply(this, arguments);
  };
}();
var prepareActions = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee8(identifier, actionsToPrepare, businessRuleId, debugMode) {
    var actions, variant, _iterator, _step, action, businessRuleTransformations, variants, _iterator2, _step2, businessTransformation, key, _iterator3, _step3, _step3$value, index, variantKey, randomPct, _iterator4, _step4, _businessTransformation, _i2, _Object$keys, _key, _key2;
    return regenerator_default().wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            actions = JSON.parse(JSON.stringify(actionsToPrepare));
            variant = null;
            _iterator = _createForOfIteratorHelper(actions);
            _context8.prev = 3;
            _iterator.s();
          case 5:
            if ((_step = _iterator.n()).done) {
              _context8.next = 65;
              break;
            }
            action = _step.value;
            businessRuleTransformations = action.businessRuleTransformations, variants = action.variants;
            if (!(!businessRuleTransformations && !variants)) {
              _context8.next = 10;
              break;
            }
            return _context8.abrupt("continue", 63);
          case 10:
            if (businessRuleId !== null && businessRuleTransformations) {
              _iterator2 = _createForOfIteratorHelper(businessRuleTransformations);
              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  businessTransformation = _step2.value;
                  if (businessTransformation.id === businessRuleId) {
                    for (key in businessTransformation) {
                      if (key !== "id") {
                        action[key] = businessTransformation[key];
                      }
                    }
                  }
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
            }
            if (!variants) {
              _context8.next = 63;
              break;
            }
            _iterator3 = _createForOfIteratorHelper(Object.keys(variants).entries());
            _context8.prev = 13;
            _iterator3.s();
          case 15:
            if ((_step3 = _iterator3.n()).done) {
              _context8.next = 55;
              break;
            }
            _step3$value = _slicedToArray(_step3.value, 2), index = _step3$value[0], variantKey = _step3$value[1];
            _context8.next = 19;
            return determinePct(identifier + variantKey);
          case 19:
            randomPct = _context8.sent;
            if (debugMode && !action.variants[variantKey].weight) {
              action.variants[variantKey].weight = Math.floor(100 / Object.keys(variants).length) * (index + 1);
            }
            if (!(randomPct < action.variants[variantKey].weight)) {
              _context8.next = 53;
              break;
            }
            variant = variantKey;
            if (!(businessRuleId !== null && variants[variantKey].businessRuleTransformations)) {
              _context8.next = 51;
              break;
            }
            _iterator4 = _createForOfIteratorHelper(variants[variantKey].businessRuleTransformations);
            _context8.prev = 25;
            _iterator4.s();
          case 27:
            if ((_step4 = _iterator4.n()).done) {
              _context8.next = 41;
              break;
            }
            _businessTransformation = _step4.value;
            if (!(_businessTransformation.id == businessRuleId)) {
              _context8.next = 39;
              break;
            }
            _i2 = 0, _Object$keys = Object.keys(_businessTransformation);
          case 31:
            if (!(_i2 < _Object$keys.length)) {
              _context8.next = 39;
              break;
            }
            _key = _Object$keys[_i2];
            if (!(_key === "id")) {
              _context8.next = 35;
              break;
            }
            return _context8.abrupt("continue", 36);
          case 35:
            action[_key] = _businessTransformation[_key];
          case 36:
            _i2++;
            _context8.next = 31;
            break;
          case 39:
            _context8.next = 27;
            break;
          case 41:
            _context8.next = 46;
            break;
          case 43:
            _context8.prev = 43;
            _context8.t0 = _context8["catch"](25);
            _iterator4.e(_context8.t0);
          case 46:
            _context8.prev = 46;
            _iterator4.f();
            return _context8.finish(46);
          case 49:
            _context8.next = 52;
            break;
          case 51:
            for (_key2 in variants[variantKey]) {
              if (_key2 !== "weight" && _key2 !== "businessRuleTransformations") {
                action[_key2] = variants[variantKey][_key2];
              }
            }
          case 52:
            return _context8.abrupt("break", 55);
          case 53:
            _context8.next = 15;
            break;
          case 55:
            _context8.next = 60;
            break;
          case 57:
            _context8.prev = 57;
            _context8.t1 = _context8["catch"](13);
            _iterator3.e(_context8.t1);
          case 60:
            _context8.prev = 60;
            _iterator3.f();
            return _context8.finish(60);
          case 63:
            _context8.next = 5;
            break;
          case 65:
            _context8.next = 70;
            break;
          case 67:
            _context8.prev = 67;
            _context8.t2 = _context8["catch"](3);
            _iterator.e(_context8.t2);
          case 70:
            _context8.prev = 70;
            _iterator.f();
            return _context8.finish(70);
          case 73:
            return _context8.abrupt("return", [actions, variant]);
          case 74:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8, null, [[3, 67, 70, 73], [13, 57, 60, 63], [25, 43, 46, 49]]);
  }));
  return function prepareActions(_x2, _x3, _x4, _x5) {
    return _ref8.apply(this, arguments);
  };
}();
var initiateSessionStorages = function initiateSessionStorages() {
  var POPUP_DISPLAY_FLAG = SESSION_STORAGE_KEYS.POPUP_DISPLAY_FLAG,
    SESSION_TIMESTAMP = SESSION_STORAGE_KEYS.SESSION_TIMESTAMP,
    SESSION_HISTORY = SESSION_STORAGE_KEYS.SESSION_HISTORY;
  var popupDisplayFlag = sessionStorage.getItem(POPUP_DISPLAY_FLAG);
  var sessionTimestamp = sessionStorage.getItem(SESSION_TIMESTAMP);
  var sessionHistory = sessionStorage.getItem(SESSION_HISTORY);
  if (popupDisplayFlag === null) {
    sessionStorage.setItem(POPUP_DISPLAY_FLAG, 0);
  }
  if (!sessionTimestamp) {
    sessionStorage.setItem(SESSION_TIMESTAMP, Date.now());
  }
  if (!sessionHistory) {
    sessionStorage.setItem(SESSION_HISTORY, [window.location.pathname]);
  } else {
    sessionStorage.setItem(SESSION_HISTORY, [window.location.pathname, sessionHistory]);
  }
};
var conditionChecker = function conditionChecker(runTimeValue, condition, value) {
  if (condition === "notExist") {
    if (!runTimeValue) {
      logger.success("conditionChecker: -satisfied- target does not exist");
      return true;
    }
    logger.failed("conditionChecker: -not satisfied- target does exist");
    return false;
  }
  if (runTimeValue === null || runTimeValue === undefined || condition === null || condition === undefined) {
    logger.failed("conditionChecker: runTimeValue or condition is not defined");
    return false;
  }
  switch (condition) {
    case "exist":
      if (runTimeValue) {
        logger.success("conditionChecker: -satisfied- target does exist");
        return true;
      }
      logger.failed("conditionChecker: -not satisfied- target does not exist");
      return false;
    case "includes":
    case "contains":
      if (runTimeValue.includes(value)) {
        logger.success("conditionChecker: -satisfied- target contains value");
        return true;
      }
      logger.failed("conditionChecker: -not satisfied- target does not contain value");
      return false;
    case "notIncludes":
    case "notContains":
      if (!runTimeValue.includes(value)) {
        logger.success("conditionChecker: -satisfied- target does not contain value");
        return true;
      }
      logger.failed("conditionChecker: -not satisfied- target contains value");
      return false;
    case "equal":
      if (runTimeValue === value) {
        logger.success("conditionChecker: -satisfied- target equals value");
        return true;
      }
      logger.failed("conditionChecker: -not satisfied- target does not equal value");
      return false;
    case "notEqual":
      if (runTimeValue !== value) {
        logger.success("conditionChecker: -satisfied- target does not equal value");
        return true;
      }
      logger.failed("conditionChecker: -not satisfied- target equals value");
      return false;
    case "greaterThan":
      if (runTimeValue > value) {
        logger.success("conditionChecker: -satisfied- target is greater than value");
        return true;
      }
      logger.failed("conditionChecker: -not satisfied- target is not greater than value");
      return false;
    case "lessThan":
      if (runTimeValue < value) {
        logger.success("conditionChecker: -satisfied- target is less than value");
        return true;
      }
      logger.failed("conditionChecker: -not satisfied- target is not less than value");
      return false;
    case "greaterEquals":
      if (runTimeValue >= value) {
        logger.success("conditionChecker: -satisfied- target is greater or equal than value");
        return true;
      }
      logger.failed("conditionChecker: -not satisfied- target is not greater or equal than value");
      return false;
    case "lessEquals":
      if (runTimeValue <= value) {
        logger.success("conditionChecker: -satisfied- target is less or equal than value");
        return true;
      }
      logger.failed("conditionChecker: -not satisfied- target is not less or equal than value");
      return false;
    case "between":
      {
        var _value$split = value.split(","),
          _value$split2 = _slicedToArray(_value$split, 2),
          min = _value$split2[0],
          max = _value$split2[1];
        min = parseInt(min);
        max = parseInt(max);
        if (runTimeValue >= min && runTimeValue <= max) {
          logger.success("conditionChecker: -satisfied- target is between min and max");
          return true;
        }
        logger.failed("conditionChecker: -not satisfied- target is not between min and max");
        return false;
      }
    case "regex":
      {
        var regex = new RegExp(value, "i");
        return regex.test(runTimeValue);
      }
    default:
      logger.failed("conditionChecker: condition is not defined ", condition);
      return false;
  }
};
var getDebugMode = function getDebugMode(oosReason) {
  var DEBUG_MODE = LOCAL_STORAGE_KEYS.DEBUG_MODE,
    OUT_OF_SCOPE = LOCAL_STORAGE_KEYS.OUT_OF_SCOPE;
  var queryString = window.location.search;
  if (queryString.includes("nd_debug=")) {
    window.localStorage.setItem(OUT_OF_SCOPE, oosReason);
  }
  if (queryString.includes("nd_debug=1")) {
    window.localStorage.setItem(DEBUG_MODE, 1);
    addToBeagleInfoLayer("dbm", "on");
    return 1;
  }
  if (queryString.includes("nd_debug=2")) {
    window.localStorage.setItem(DEBUG_MODE, 2);
    addToBeagleInfoLayer("dbm", "on");
    return 2;
  }
  if (queryString.includes("nd_debug=0")) {
    window.localStorage.removeItem(DEBUG_MODE);
    addToBeagleInfoLayer("dbm", "off");
    return 0;
  }
  var current = parseInt(window.localStorage.getItem(DEBUG_MODE));
  addToBeagleInfoLayer("dbm", current ? "on" : "off");
  return current || 0;
};

// get GA client id using ga.getAll()
var getGaClientId = function getGaClientId() {
  var ga = window.ga;
  // if ga and ga.getAll() is not defined, return null
  if (ga && ga.getAll) {
    var trackers = ga.getAll();
    if (trackers && trackers.length) {
      return trackers[0].get("clientId");
    }
  }
  return null;
};

// get deterministic numeric hash from string that conatins only numbers
var getUnsecureHash = function getUnsecureHash(str) {
  var hash = 0;
  if (str.length === 0) {
    return null;
  }
  for (var i = 0; i < str.length; i++) {
    var char = str.charCodeAt(i);
    hash = (hash << 5) - hash + char;
    hash = hash & hash;
  }
  // return absolute value
  return Math.abs(hash);
};

// generate a 32-bit random integer
var getRandomInt = function getRandomInt() {
  return Math.floor(Math.random() * 0x100000000);
};

// get current unix epoch time in seconds
var getUnixTime = function getUnixTime() {
  return Math.floor(Date.now() / 1000);
};
var getIdentifier = function getIdentifier() {
  return new Promise(function (resolve) {
    try {
      var id = window.localStorage.getItem(LOCAL_STORAGE_KEYS.USER_ID);
      if (id !== null && id !== undefined) {
        logger.log("getIdentifier: got identifier from local storage", id);
        resolve(id);
        return;
      }
      id = getGaClientId();
      if (id !== null && id !== undefined) {
        logger.log("getIdentifier: got identifier from ga in first attempt", id);
        window.localStorage.setItem(LOCAL_STORAGE_KEYS.USER_ID, id);
        resolve(id);
        return;
      } else {
        var extractIdentifierInterval = setInterval(function () {
          id = getGaClientId();
          if (id !== null && id !== undefined) {
            logger.log("getIdentifier: got identifier from ga", id);
            clearInterval(extractIdentifierInterval);
            window.localStorage.setItem(LOCAL_STORAGE_KEYS.USER_ID, id);
            resolve(id);
          }
        }, 10);
        setTimeout(function () {
          clearInterval(extractIdentifierInterval);
          if (id === null || id === undefined) {
            logger.failed("Could not read GA client id");
            resolve(null);
          }
        }, 2000);
      }
    } catch (e) {
      logger.failed("Error in getIdentifier", e);
      resolve(null);
    }
  });
};
var delay = function delay(ms) {
  return new Promise(function (res) {
    return setTimeout(res, ms);
  });
};
var formatDeliveryDate = function formatDeliveryDate(date) {
  if (!date || typeof date !== "string") return date;
  var result = {
    startMonthIndex: undefined,
    endMonthIndex: undefined,
    startDay: undefined,
    endDay: undefined
  };
  var match = date.match("([\\d]+)-([\\d]+)\\s?([\\wıüğşöçİÖÇĞÜŞ]+)");
  if (match && match.length === 4) {
    result.startDay = parseInt(match[1]);
    result.endDay = parseInt(match[2]);
    result.startMonthIndex = months[match[3].toLowerCase()];
    result.endMonthIndex = result.startMonthIndex;
  } else {
    match = date.match("([\\d]+)\\s+([\\wıüğşöçİÖÇĞÜŞ]+)-([\\d]+)\\s+([\\wıüğşöçİÖÇĞÜŞ]+)");
    if (!match || match.length !== 5) return date;
    result.startDay = parseInt(match[1]);
    result.startMonthIndex = months[match[2].toLowerCase()];
    result.endDay = parseInt(match[3]);
    result.endMonthIndex = months[match[4].toLowerCase()];
  }
  try {
    var today = new Date();
    if (!result.startMonthIndex || !result.endMonthIndex) return date;
    var startYear = result.startMonthIndex >= today.getMonth() ? today.getFullYear() : today.getFullYear() + 1;
    var endYear = result.endMonthIndex >= today.getMonth() ? today.getFullYear() : today.getFullYear() + 1;
    var estimatedStart = new Date(startYear, result.startMonthIndex, result.startDay);
    var estimatedEnd = new Date(endYear, result.endMonthIndex, result.endDay);
    var startDiffOverDays = Math.ceil(Math.abs(estimatedStart - today) / (1000 * 60 * 60 * 24));
    var endDiffOverDays = Math.ceil(Math.abs(estimatedEnd - today) / (1000 * 60 * 60 * 24));
    var startDiffOverWeeks = startDiffOverDays < 7 ? 0 : Math.ceil(startDiffOverDays / 7);
    var endDiffOverWeeks = endDiffOverDays < 7 ? 0 : Math.ceil(endDiffOverDays / 7);
    if (startDiffOverWeeks === 0 && endDiffOverWeeks === 0) {
      return "".concat(startDiffOverDays, " - ").concat(endDiffOverDays, " G\xFCn");
    }
    if (startDiffOverWeeks === 0 && endDiffOverWeeks >= 1) {
      return "".concat(startDiffOverDays, " G\xFCn - ").concat(endDiffOverWeeks, " Hafta");
    }
    if (startDiffOverWeeks === endDiffOverWeeks) {
      return "".concat(startDiffOverWeeks, " Hafta");
    }
    return "".concat(startDiffOverWeeks, " - ").concat(endDiffOverWeeks, " Hafta");
  } catch (err) {
    return date;
  }
};
var idleTimer = /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee9(timeOut, callBack) {
    var idleTimeout, resetTimer;
    return regenerator_default().wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            resetTimer = function _resetTimer() {
              clearTimeout(idleTimeout);
              idleTimeout = setTimeout(callBack, timeOut);
            };
            idleTimeout = setTimeout(callBack, timeOut);
            window.top.document.ontouchstart = resetTimer;
          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return function idleTimer(_x6, _x7) {
    return _ref9.apply(this, arguments);
  };
}();
var getBrowserType = function getBrowserType() {
  var userAgent = navigator.userAgent;
  if (userAgent.match(/chrome|chromium|crios/i)) {
    return "chrome";
  }
  if (userAgent.match(/firefox|fxios/i)) {
    return "firefox";
  }
  if (userAgent.match(/safari/i)) {
    return "safari";
  }
  if (userAgent.match(/opr\//i)) {
    return "opera";
  }
  if (userAgent.match(/edg/i)) {
    return "edge";
  }
  return null;
};
var isOwnMutation = function isOwnMutation(mutationList) {
  var nodes = [].concat(_toConsumableArray(Array.from(mutationList[0].addedNodes)), _toConsumableArray(Array.from(mutationList[0].removedNodes)));
  return nodes.some(function (n) {
    var _n$id;
    return n.tagName && (((_n$id = n.id) === null || _n$id === void 0 ? void 0 : _n$id.includes("bn-")) || Array.from(n.classList).some(function (c) {
      return c.includes("bn-") || c.includes("nd-");
    }));
  });
};
;// CONCATENATED MODULE: ./src/BeagleDataCollection/store.config.js
var config = {
  dbName: "beagle",
  version: 1,
  maintenanceOperationCount: 1000,
  // affects version
  store: {
    name: "data",
    indexes: [{
      name: "ix_dataName",
      fields: ["data_name"]
    }, {
      name: "ix_dataName_session",
      fields: ["data_name", "session_id"]
    }, {
      name: "ix_dataName_dataValue",
      fields: ["data_name", "data_value"]
    }, {
      name: "ix_dataName_dataValue_session",
      fields: ["data_name", "data_value", "session_id"]
    }],
    options: {
      keyPath: "id",
      autoIncrement: true
    }
  }
};
/* harmony default export */ var store_config = (config);
;// CONCATENATED MODULE: ./src/BeagleDataCollection/api.js





function api_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = api_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function api_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return api_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return api_arrayLikeToArray(o, minLen); }
function api_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }



var api_logger = new src_logger("BeagleDataCollectionWrapper");
var _window = {
  alltime: "alltime",
  session: "session"
};
var BeagleDataCollectionWrapper = /*#__PURE__*/function () {
  function BeagleDataCollectionWrapper() {
    _classCallCheck(this, BeagleDataCollectionWrapper);
    this.indexedDB = null;
    try {
      this.init();
    } catch (err) {
      api_logger.failed("Failed to initialized db with: ", err.message);
    }
  }
  _createClass(BeagleDataCollectionWrapper, [{
    key: "init",
    value: function init() {
      var _window$top$indexedDB,
        _this = this;
      api_logger.log("Initializing indexedDB");
      // TODO, uncomment next line once existing stale dbs are purged
      // const openRequest = window.top.indexedDB?.open(config.dbName, config.version);
      var openRequest = (_window$top$indexedDB = window.top.indexedDB) === null || _window$top$indexedDB === void 0 ? void 0 : _window$top$indexedDB.open(store_config.dbName);
      if (!openRequest) {
        throw new Error("indexeddb is not supported");
      }
      openRequest.onupgradeneeded = function (event) {
        switch (event.oldVersion) {
          case 0:
            break;
          default:
            // TODO upgrade existing db instead of delete and create from scratch
            try {
              openRequest.result.deleteObjectStore(store_config.store.name);
            } catch (err) {
              api_logger.failed("Could not delete outdated database", err.message);
            }
            break;
        }
        try {
          var _config$store$indexes;
          var store = openRequest.result.createObjectStore(store_config.store.name, store_config.store.options);
          if (((_config$store$indexes = store_config.store.indexes) === null || _config$store$indexes === void 0 ? void 0 : _config$store$indexes.length) > 0) {
            var _iterator = api_createForOfIteratorHelper(store_config.store.indexes),
              _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var idx = _step.value;
                store.createIndex(idx.name, idx.fields);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        } catch (err) {
          api_logger.failed("Could not create object store on database", err.message);
        }
      };
      openRequest.onerror = function () {
        throw new Error("Error initializing beagle indexed DB", openRequest.error);
      };
      openRequest.onsuccess = function () {
        var db = openRequest.result;
        if (db.version !== 1) {
          // TODO, remove delete request once existing stale dbs are purged
          var deleteRequest = window.indexedDB.deleteDatabase(store_config.dbName);
          deleteRequest.onsuccess = function () {
            _this.init();
          };
        } else _this.indexedDB = db;
      };
    }
  }, {
    key: "getConnection",
    value: function getConnection() {
      var _this2 = this;
      return new Promise(function (resolve, reject) {
        var interval = setInterval(function () {
          if (_this2.indexedDB) {
            clearInterval(interval);
            resolve();
          }
        }, 25);
        setTimeout(function () {
          if (!_this2.indexedDB) {
            clearInterval(interval);
            reject(new Error("IndexedDB not initialized within the allotted time"));
          }
        }, 1000);
      });
    }
  }, {
    key: "initTransaction",
    value: function () {
      var _initTransaction = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
        var readwrite,
          tx,
          store,
          _args = arguments;
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                readwrite = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;
                _context.next = 3;
                return this.getConnection();
              case 3:
                tx = this.indexedDB.transaction(store_config.store.name, readwrite ? "readwrite" : "readonly");
                store = tx.objectStore(store_config.store.name);
                return _context.abrupt("return", store);
              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function initTransaction() {
        return _initTransaction.apply(this, arguments);
      }
      return initTransaction;
    }()
  }, {
    key: "save",
    value: function () {
      var _save = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2(dataName, dataValue) {
        var store, sessionId, time, payload;
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.initTransaction(true);
              case 2:
                store = _context2.sent;
                sessionId = this.getCurrentSessionId(); // date current -2 saat  yil-ay-gun
                time = Math.round(Date.now() / 1000);
                payload = {
                  "data_name": dataName,
                  "data_value": dataValue,
                  "session_id": sessionId,
                  time: time
                };
                store.put(payload);
              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function save(_x, _x2) {
        return _save.apply(this, arguments);
      }
      return save;
    }()
  }, {
    key: "minmax",
    value: function minmax(dataName, op) {
      var _this3 = this;
      var window = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _window.alltime;
      return new Promise(function (resolve) {
        _this3.initTransaction().then(function (store) {
          var stored = undefined;
          _this3.getCursor(store, dataName, window).onsuccess = function (event) {
            var cursor = event.target.result;
            if (cursor) {
              var value = cursor.value;
              if ("data_value" in value) {
                if (stored === undefined || op === "min" && value["data_value"] < stored || op === "max" && value["data_value"] > stored) {
                  stored = value["data_value"];
                }
              } else {
                console.warn("key not found in cursor values " + dataName);
              }
              cursor.continue();
            } else {
              resolve(stored);
            }
          };
        });
      });
    }
  }, {
    key: "min",
    value: function min(dataName) {
      var window = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _window.alltime;
      return this.minmax(dataName, "min", window);
    }
  }, {
    key: "max",
    value: function max(dataName) {
      var window = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _window.alltime;
      return this.minmax(dataName, "max", window);
    }
  }, {
    key: "groupBy",
    value: function groupBy(dataName) {
      var _this4 = this;
      var window = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _window.alltime;
      return new Promise(function (resolve) {
        _this4.initTransaction().then(function (store) {
          var map = new Map();
          _this4.getCursor(store, dataName, window).onsuccess = function (event) {
            var cursor = event.target.result;
            if (cursor) {
              var value = cursor.value;
              if ("data_value" in value) {
                if (!map.has(value["data_value"])) map.set(value["data_value"], 0);
                map.set(value["data_value"], map.get(value["data_value"]) + 1);
              } else {
                console.warn("key not found in cursor values " + dataName);
              }
              cursor.continue();
            } else {
              resolve(map);
            }
          };
        });
      });
    }
  }, {
    key: "mode",
    value: function () {
      var _mode = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3(dataName) {
        var window,
          data,
          max,
          _iterator2,
          _step2,
          _step2$value,
          key,
          value,
          _args3 = arguments;
        return regenerator_default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                window = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : _window.alltime;
                _context3.next = 3;
                return this.groupBy(dataName, window);
              case 3:
                data = _context3.sent;
                if (!(data.keys().length === 0)) {
                  _context3.next = 6;
                  break;
                }
                return _context3.abrupt("return", null);
              case 6:
                max = {
                  name: undefined,
                  value: -1
                };
                _iterator2 = api_createForOfIteratorHelper(data);
                try {
                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                    _step2$value = _slicedToArray(_step2.value, 2), key = _step2$value[0], value = _step2$value[1];
                    if (max.value < value) {
                      max.name = key;
                      max.value = value;
                    }
                  }
                } catch (err) {
                  _iterator2.e(err);
                } finally {
                  _iterator2.f();
                }
                return _context3.abrupt("return", max);
              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function mode(_x3) {
        return _mode.apply(this, arguments);
      }
      return mode;
    }()
  }, {
    key: "count",
    value: function count(dataName) {
      var _this5 = this;
      var window = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _window.alltime;
      return new Promise(function (resolve) {
        _this5.initTransaction().then(function (store) {
          var count = 0;
          _this5.getCursor(store, dataName, window).onsuccess = function (event) {
            var cursor = event.target.result;
            if (cursor) {
              count++;
              cursor.continue();
            } else {
              resolve(count);
            }
          };
        });
      });
    }
  }, {
    key: "sum",
    value: function sum(dataName) {
      var _this6 = this;
      var window = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "alltime";
      return new Promise(function (resolve) {
        _this6.initTransaction().then(function (store) {
          var total = 0.00;
          _this6.getCursor(store, dataName, window).onsuccess = function (event) {
            var cursor = event.target.result;
            if (cursor) {
              var value = cursor.value;
              if ("data_value" in value) {
                total += parseFloat(value["data_value"]);
              } else {
                console.warn("key not found in cursor values " + dataName);
              }
              cursor.continue();
            } else {
              resolve(total.toFixed(2));
            }
          };
        });
      });
    }
  }, {
    key: "getCursor",
    value: function getCursor(store, dataName) {
      var window = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _window.alltime;
      var dataValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
      if (dataValue) {
        if (window === _window.session) {
          return store.index("ix_dataName_dataValue_session").openCursor(IDBKeyRange.only([dataName, dataValue, this.getCurrentSessionId().toString()]));
        }
        return store.index("ix_dataName_dataValue").openCursor(IDBKeyRange.only([dataName, dataValue]));
      }
      if (window === _window.session) {
        return store.index("ix_dataName_session").openCursor(IDBKeyRange.only([dataName, this.getCurrentSessionId().toString()]));
      }
      var indexValue = getBrowserType() === "safari" ? dataName : [dataName];
      return store.index("ix_dataName").openCursor(IDBKeyRange.only(indexValue));
    }
  }, {
    key: "avg",
    value: function () {
      var _avg = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4(dataName) {
        var window,
          total,
          count,
          _args4 = arguments;
        return regenerator_default().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                window = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : _window.alltime;
                _context4.next = 3;
                return this.sum(dataName, window);
              case 3:
                total = _context4.sent;
                _context4.next = 6;
                return this.count(dataName, window);
              case 6:
                count = _context4.sent;
                if (!(!total || !count)) {
                  _context4.next = 9;
                  break;
                }
                return _context4.abrupt("return", 0);
              case 9:
                return _context4.abrupt("return", (total / count).toFixed(2));
              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
      function avg(_x4) {
        return _avg.apply(this, arguments);
      }
      return avg;
    }()
  }, {
    key: "last",
    value: function () {
      var _last = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee5(dataName) {
        var _this7 = this;
        var size,
          window,
          _args5 = arguments;
        return regenerator_default().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                size = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : 1;
                window = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : _window.alltime;
                return _context5.abrupt("return", new Promise(function (resolve) {
                  _this7.initTransaction().then(function (store) {
                    var cursor = store.index("ix_dataName").openCursor([dataName], "prev");
                    if (window === _window.session) {
                      cursor = store.index("ix_dataName_session").openCursor([dataName, _this7.getCurrentSessionId()], "prev");
                    }
                    var index = 0;
                    var values = [];
                    cursor.onsuccess = function (event) {
                      var result = event.target.result;
                      if (result && index < size) {
                        index++;
                        values.push(result.value);
                        result.continue();
                      } else {
                        resolve(values);
                      }
                    };
                  });
                }));
              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));
      function last(_x5) {
        return _last.apply(this, arguments);
      }
      return last;
    }()
  }, {
    key: "getCurrentSessionId",
    value: function getCurrentSessionId() {
      var d = new Date();
      d.setHours(d.getHours() - 2);
      return d.getFullYear() + "-" + (d.getMonth() + 1).toString().padStart(2, "0") + "-" + d.getDate().toString().padStart(2, "0");
    }
  }]);
  return BeagleDataCollectionWrapper;
}();

;// CONCATENATED MODULE: ./src/BeagleDataCollection/index.js



function BeagleDataCollection_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = BeagleDataCollection_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function BeagleDataCollection_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return BeagleDataCollection_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return BeagleDataCollection_arrayLikeToArray(o, minLen); }
function BeagleDataCollection_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
/* eslint-disable max-len */


var BeagleDataCollection_logger = new src_logger("BeagleDataCollection");
var collectorApi = new BeagleDataCollectionWrapper();

// keep a table in indexdb the format [session_id, data_name, data_value, stored_value]

var queryInCollector = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee(baseFeatureName, queryMethod, window) {
    var queryPromise, _queryPromise, _queryPromise2, data, count, _iterator, _step, _step$value, value, _data, match, _queryPromise3, dataValues;
    return regenerator_default().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            BeagleDataCollection_logger.log("queryInCollector", baseFeatureName, queryMethod, window);
            if (collectorApi) {
              _context.next = 4;
              break;
            }
            BeagleDataCollection_logger.failed("IndexedDB no supported/Initialized");
            return _context.abrupt("return", null);
          case 4:
            if (!(queryMethod === "min")) {
              _context.next = 11;
              break;
            }
            _context.next = 7;
            return collectorApi.min(baseFeatureName, window);
          case 7:
            queryPromise = _context.sent;
            return _context.abrupt("return", queryPromise);
          case 11:
            if (!(queryMethod === "max")) {
              _context.next = 18;
              break;
            }
            _context.next = 14;
            return collectorApi.max(baseFeatureName, window);
          case 14:
            _queryPromise = _context.sent;
            return _context.abrupt("return", _queryPromise);
          case 18:
            if (!(queryMethod === "avg")) {
              _context.next = 25;
              break;
            }
            _context.next = 21;
            return collectorApi.avg(baseFeatureName, window);
          case 21:
            _queryPromise2 = _context.sent;
            return _context.abrupt("return", _queryPromise2);
          case 25:
            if (!(queryMethod === "cd")) {
              _context.next = 31;
              break;
            }
            _context.next = 28;
            return collectorApi.groupBy(baseFeatureName, window);
          case 28:
            return _context.abrupt("return", _context.sent.size);
          case 31:
            if (!(queryMethod === "cv")) {
              _context.next = 39;
              break;
            }
            _context.next = 34;
            return collectorApi.groupBy(baseFeatureName, window);
          case 34:
            data = _context.sent;
            count = 0;
            _iterator = BeagleDataCollection_createForOfIteratorHelper(data);
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                _step$value = _slicedToArray(_step.value, 2), value = _step$value[1];
                count += value;
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            return _context.abrupt("return", count);
          case 39:
            if (!(queryMethod === "mode")) {
              _context.next = 46;
              break;
            }
            _context.next = 42;
            return collectorApi.mode(baseFeatureName, window);
          case 42:
            _data = _context.sent;
            if (_data) {
              _context.next = 45;
              break;
            }
            return _context.abrupt("return", null);
          case 45:
            return _context.abrupt("return", _data.name);
          case 46:
            if (!(queryMethod.indexOf("last") >= 0)) {
              _context.next = 55;
              break;
            }
            match = queryMethod.match("last\\(([\\d]+)\\)");
            if (!(!match || !match.length === 2 || parseInt(match[1]) < 1)) {
              _context.next = 50;
              break;
            }
            return _context.abrupt("return", null);
          case 50:
            _context.next = 52;
            return collectorApi.last(baseFeatureName, match[1], window);
          case 52:
            _queryPromise3 = _context.sent;
            dataValues = _queryPromise3.map(function (obj) {
              return obj.data_value;
            });
            return _context.abrupt("return", dataValues);
          case 55:
            /**
              {"Listingpage" => 21}
              {"Homepage" => 12}
              -- example will have:
              mode: Listingpage
              cd: 2
              cv: 21+12
              last(3) (n, n-1, n-2)
            */

            // 1000lik temizlenecek (maintOpCount -> version)

            // queryMethod can be "mode", "cd" (count distint) for string/categorical data types
            // queryMethod can be "cv" (sum of count values), "current", or "prev" for any data type (stored via last)
            BeagleDataCollection_logger.failed("unknown queryMethod=".concat(queryMethod, " in BeagleDataCollection"));
            return _context.abrupt("return", null);
          case 57:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return function queryInCollector(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
var updateInCollector = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2(baseFeatureName, baseFeatureValue, updateMethod) {
    return regenerator_default().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            BeagleDataCollection_logger.log("updateInCollector", baseFeatureName, baseFeatureValue, updateMethod);
            if (collectorApi) {
              _context2.next = 4;
              break;
            }
            BeagleDataCollection_logger.failed("IndexedDB no supported/Initialized");
            return _context2.abrupt("return", null);
          case 4:
            _context2.next = 6;
            return collectorApi.save(baseFeatureName, baseFeatureValue);
          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return function updateInCollector(_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();
;// CONCATENATED MODULE: ./src/BeagleInfoLayer/index.js




function BeagleInfoLayer_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = BeagleInfoLayer_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function BeagleInfoLayer_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return BeagleInfoLayer_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return BeagleInfoLayer_arrayLikeToArray(o, minLen); }
function BeagleInfoLayer_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
/* eslint-disable max-len */




window.beagleInfoLayer = window.beagleInfoLayer || {
  a: {},
  e: {},
  f: {},
  __hwm: 0
};
var BeagleInfoLayer_logger = new src_logger("BeagleInfoLayer");

// TODO: convert to name --> array of selectors
var searchPaths = [
// ----------------------------------------------------------------------------------------------------------------------------------------------
// GA Data Layer Queries
{
  PageTypeDepend: "*",
  method: "GADataLayer",
  selector: "PageType",
  name: "PageType"
}, {
  PageTypeDepend: "*",
  method: "GADataLayer",
  selector: "isAdmin",
  name: "vvsIsShowroom"
}, {
  PageTypeDepend: "*",
  method: "GADataLayer",
  selector: "userId",
  name: "vvsUserId"
}, {
  PageTypeDepend: "Productpage",
  method: "GADataLayer",
  selector: "content_name",
  name: "pdp.name"
}, {
  PageTypeDepend: "Productpage",
  method: "GADataLayer",
  selector: "productgroup",
  name: "pdp.group"
}, {
  PageTypeDepend: "Productpage",
  method: "GADataLayer",
  selector: "vivense_category",
  name: "pdp.class"
}, {
  PageTypeDepend: "Productpage",
  method: "GADataLayer",
  selector: "content_ids",
  name: "pdp.sku",
  formatter: "upperCaseTR"
}, {
  PageTypeDepend: "Productpage",
  method: "GADataLayer",
  selector: "ProductID",
  name: "pdp.sku"
}, {
  PageTypeDepend: "Productpage",
  method: "GADataLayer",
  selector: "content_category",
  name: "pdp.category"
}, {
  PageTypeDepend: "Productpage",
  method: "GADataLayer",
  selector: "ecommerce.detail.actionField.list",
  name: "pdp.listalias"
}, {
  PageTypeDepend: "Productpage",
  method: "GADataLayer",
  selector: "vivenseProducts.*.sku",
  name: "pdp.sku",
  formatter: "dearray"
}, {
  PageTypeDepend: "Productpage",
  method: "GADataLayer",
  selector: "vivenseProducts.*.category",
  name: "pdp.category",
  formatter: "dearray"
}, {
  PageTypeDepend: "Productpage",
  method: "GADataLayer",
  selector: "vivenseProducts.*.discountRate",
  name: "pdp.discountRate",
  formatter: "dearray"
}, {
  PageTypeDepend: "Productpage",
  method: "GADataLayer",
  selector: "vivenseProducts.*.fastDelivery",
  name: "pdp.fastDelivery",
  formatter: "dearray"
}, {
  PageTypeDepend: "Productpage",
  method: "GADataLayer",
  selector: "vivenseProducts.*.isInShowroom",
  name: "pdp.isInShowroom",
  formatter: "dearray"
}, {
  PageTypeDepend: "Listingpage",
  method: "GADataLayer",
  selector: "search_success",
  name: "plp.searchSuccess",
  exclusive: ["plp.id", "plp.approximateCount", "plp.name", "plp.group", "plp.class"]
}, {
  PageTypeDepend: "Listingpage",
  method: "GADataLayer",
  selector: "content_ids",
  name: "plp.id",
  exclusive: ["plp.searchSuccess"]
}, {
  PageTypeDepend: "Listingpage",
  method: "GADataLayer",
  selector: "category_product_count",
  name: "plp.approximateCount",
  exclusive: ["plp.searchSuccess"]
}, {
  PageTypeDepend: "Listingpage",
  method: "GADataLayer",
  selector: "content_name",
  name: "plp.name",
  exclusive: ["plp.searchSuccess"]
}, {
  PageTypeDepend: "Listingpage",
  method: "GADataLayer",
  selector: "productgroup",
  name: "plp.group",
  exclusive: ["plp.searchSuccess"]
}, {
  PageTypeDepend: "Listingpage",
  method: "GADataLayer",
  selector: "vivense_category",
  name: "plp.class",
  exclusive: ["plp.searchSuccess"]
}, {
  PageTypeDepend: "purchase",
  method: "GADataLayer",
  selector: "ecommerce.purchase.products.*.id",
  name: "purchase.skus"
}, {
  PageTypeDepend: "purchase",
  method: "GADataLayer",
  selector: "ecommerce.purchase.products.*.price",
  name: "purchase.prices"
}, {
  PageTypeDepend: "purchase",
  method: "GADataLayer",
  selector: "ecommerce.purchase.products.*.quantity",
  name: "purchase.quantities"
}, {
  PageTypeDepend: "purchase",
  method: "GADataLayer",
  selector: "ecommerce.purchase.products.*.category",
  name: "purchase.categories"
}, {
  PageTypeDepend: "purchase",
  method: "GADataLayer",
  selector: "ecommerce.purchase.actionField.id",
  name: "purchase.orderId"
}, {
  PageTypeDepend: "purchase",
  method: "GADataLayer",
  selector: "ecommerce.purchase.actionField.revenue",
  name: "purchase.revenue"
}, {
  PageTypeDepend: "purchase",
  method: "GADataLayer",
  selector: "ecommerce.purchase.actionField.dimension15",
  name: "purchase.paymentType"
},
// ----------------------------------------------------------------------------------------------------------------------------------------------
// Document Queries
{
  PageTypeDepend: "*",
  method: "DocQuery",
  selector: "[class*=\"page_preview_wrapper_production\"]",
  name: "PageType",
  operand: "docQueryValueIfHasInnerText",
  value: "Homepage"
}, {
  PageTypeDepend: "*",
  method: "DocQuery",
  selector: "[class*=\"category_page_wrapper\"]",
  name: "PageType",
  operand: "docQueryValueIfHasInnerText",
  value: "Listingpage"
}, {
  PageTypeDepend: "*",
  method: "DocQuery",
  selector: "[class*=\"product-main-details\"]",
  name: "PageType",
  operand: "docQueryValueIfHasInnerText",
  value: "Productpage"
}, {
  PageTypeDepend: "*",
  method: "DocQuery",
  selector: "[class*=\"product\"]",
  name: "PageType",
  operand: "docQueryValueIfHasInnerText",
  value: "Productpage"
}, {
  PageTypeDepend: "Homepage|Productpage|Listingpage",
  method: "DocQuery",
  selector: "[class*=\"welcome_username\"]",
  name: "view.isLoggedIn",
  operand: "docQueryHasInnerText"
}, {
  PageTypeDepend: "Homepage|Productpage|Listingpage",
  method: "DocQuery",
  selector: "[class*=\"empty_basket_text\"]",
  name: "cart.isempty",
  operand: "docQueryHasInnerText",
  exclusive: ["cart.totalBasePrice", "cart.skucount", "cart.couponNotApplicable"]
}, {
  PageTypeDepend: "Homepage|Productpage|Listingpage",
  method: "DocQuery",
  selector: "body > .desktop_layout_wrapper .not-allowed-coupon",
  name: "cart.couponNotApplicable",
  operand: "docQuerySumNumInnerText",
  exclusive: ["cart.isempty"]
},
// Note that sequential search will mark copuonNotApplicable as found
{
  PageTypeDepend: "Homepage|Productpage|Listingpage",
  method: "DocQuery",
  selector: "[class*=\"basket_total_price\"]",
  name: "cart.totalBasePrice",
  operand: "docQueryInnerText",
  exclusive: ["cart.isempty", "cart.couponNotApplicable"],
  formatter: "numericOnly"
}, {
  PageTypeDepend: "Homepage|Productpage|Listingpage",
  method: "DocQuery",
  selector: "[id*=\"cart_quantity\"], [class*=\"basket_length\"]",
  name: "cart.skucount",
  operand: "docQueryInnerText",
  exclusive: ["cart.isempty"]
}, {
  PageTypeDepend: "Productpage",
  method: "DocQuery",
  selector: "[class*=\"delivery-date\"]",
  name: "pdp.deliveryDate",
  operand: "docQueryInnerText"
}, {
  PageTypeDepend: "Productpage",
  method: "DocQuery",
  selector: "[class*=\"delivery-date\"]",
  name: "pdp.deliveryDateFormatted",
  operand: "docQueryInnerText",
  formatter: "formatDeliveryDate"
}, {
  PageTypeDepend: "Productpage",
  method: "DocQuery",
  selector: "[class*=\"product-title\"], [class*=\"header-bottom\"]",
  name: "pdp.name",
  operand: "docQueryInnerText"
}, {
  PageTypeDepend: "Productpage",
  method: "DocQuery",
  selector: "[class*=\"vivense-showrooms\"] > *",
  name: "pdp.showroomcount",
  operand: "docQueryCountElts",
  exclusive: ["pdp.hasNoShowrooms"]
}, {
  PageTypeDepend: "Productpage",
  method: "DocQuery",
  selector: "#vivense-showroom-tab p:not(.vivense-showrooms)",
  name: "pdp.hasNoShowrooms",
  operand: "docQueryHasInnerText",
  exclusive: ["pdp.showroomcount"]
}, {
  PageTypeDepend: "Productpage",
  method: "DocQuery",
  selector: "span.price",
  name: "pdp.price",
  operand: "docQueryInnerText",
  formatter: "numericOnly"
}, {
  PageTypeDepend: "Productpage",
  method: "DocQuery",
  selector: "#sales-price",
  name: "pdp.price",
  operand: "docQueryInnerText",
  formatter: "numericOnly"
}, {
  PageTypeDepend: "Productpage",
  method: "DocQuery",
  selector: "div.product-price-box",
  name: "__priceObserver",
  children: ["pdp.price"],
  operand: "docQueryObserve"
}, {
  PageTypeDepend: "Productpage",
  method: "DocQuery",
  selector: "#mobile-product-sticky",
  name: "__priceObserver",
  children: ["pdp.price"],
  operand: "docQueryObserve"
}, {
  PageTypeDepend: "Listingpage",
  method: "DocQuery",
  selector: "[class*=\"count-of-product\"]",
  name: "plp.itemCount",
  operand: "docQueryInnerText",
  formatter: "numericOnly"
}, {
  PageTypeDepend: "Listingpage",
  method: "DocQuery",
  selector: "[class*=\"subcategories-title\"]",
  name: "plp.name",
  operand: "docQueryInnerText"
}, {
  PageTypeDepend: "Listingpage",
  method: "DocQuery",
  selector: ".product-card[data-product-sku]",
  name: "__features.SKUsonPage",
  operand: "docQueryAttribValueList",
  value: "data-product-sku"
}, {
  PageTypeDepend: "Listingpage",
  method: "DocQuery",
  selector: ".product-list",
  name: "__listingItemBlockObserver",
  children: ["__features.SKUsonPage"],
  operand: "docQueryObserve"
}, {
  PageTypeDepend: "basket",
  method: "DocQuery",
  selector: ".empty-cart-container, .empty-cart",
  name: "cart.isempty",
  operand: "docQueryHasInnerText",
  exclusive: ["cart.skucount", "cart.totalPrice", "cart.totalPriceFinal", "cart.couponNotApplicable", "cart.skus", "cart.prices", "cart.quantities", "cart.categories", "__checkoutFormObserver"]
}, {
  PageTypeDepend: "basket",
  method: "DocQuery",
  selector: ".bracket-text, .product-count",
  name: "cart.skucount",
  operand: "docQueryInnerText",
  exclusive: ["cart.isempty"],
  formatter: "numericOnly"
}, {
  PageTypeDepend: "basket",
  method: "DocQuery",
  selector: ".cartItemQuantity",
  name: "cart.quantities",
  operand: "docQueryAttribValueList",
  value: "data-previous",
  exclusive: ["cart.isempty"]
}, {
  PageTypeDepend: "basket",
  method: "DocQuery",
  selector: "#bill_total",
  name: "cart.totalPrice",
  operand: "docQueryInnerText",
  exclusive: ["cart.isempty"],
  formatter: "numericOnly"
}, {
  PageTypeDepend: "basket",
  method: "DocQuery",
  selector: "[class*=\"order-final-number\"]",
  name: "cart.totalPriceFinal",
  operand: "docQueryInnerText",
  exclusive: ["cart.isempty"],
  formatter: "numericOnly"
}, {
  PageTypeDepend: "basket",
  method: "DocQuery",
  selector: "[class*=\"cart-price\"] .not-allowed-coupon",
  name: "cart.couponNotApplicable",
  operand: "docQuerySumNumInnerText",
  exclusive: ["cart.isempty"]
},
// Note that sequential search will mark couponApplicable as found
{
  PageTypeDepend: "basket",
  method: "DocQuery",
  selector: ".cart-inside",
  name: "cart.skus",
  operand: "docQueryAttribValueList",
  value: "data-sku",
  exclusive: ["cart.isempty", "cart.couponNotApplicable"]
}, {
  PageTypeDepend: "basket",
  method: "DocQuery",
  selector: ".cart-inside",
  name: "cart.categories",
  operand: "docQueryAttribValueList",
  value: "data-last-breadcrumb",
  exclusive: ["cart.isempty", "cart.couponNotApplicable"]
}, {
  PageTypeDepend: "basket",
  method: "DocQuery",
  selector: ".cart-inside",
  name: "cart.prices",
  operand: "docQueryAttribValueList",
  value: "data-price",
  exclusive: ["cart.isempty", "cart.couponNotApplicable"]
},
// Desktop observer for the right panel, as it is the one changing
{
  PageTypeDepend: "basket",
  method: "DocQuery",
  selector: ".cart-right-container",
  name: "__checkoutFormObserver",
  children: ["cart.skucount", "cart.totalPrice", "cart.totalPriceFinal", "cart.couponNotApplicable", "cart.skus", "cart.prices", "cart.quantities", "cart.categories", "cart.isempty", "cart.couponApplicableAmount"],
  operand: "docQueryObserve"
},
// Mobile observer for the full form block as it is completely replaced
{
  PageTypeDepend: "basket",
  method: "DocQuery",
  selector: "#checkoutForm",
  name: "__checkoutFormObserver",
  children: ["cart.skucount", "cart.totalPrice", "cart.totalPriceFinal", "cart.couponNotApplicable", "cart.skus", "cart.prices", "cart.quantities", "cart.categories", "cart.isempty", "cart.couponApplicableAmount"],
  operand: "docQueryObserve"
}, {
  PageTypeDepend: "purchase",
  method: "DocQuery",
  selector: "[class*=\"basket_summary_total\"], [class*=\"total_row\"]",
  name: "purchase.revenue",
  operand: "docQueryInnerText",
  formatter: "numericOnly"
}, {
  PageTypeDepend: "purchase",
  method: "DocQuery",
  selector: "[class*=\"order_follow_numb\"], [class*=\"cart-title-bottom\"]",
  name: "purchase.vvsTxnId",
  operand: "docQueryInnerText"
}, {
  PageTypeDepend: "purchase",
  method: "DocQuery",
  selector: ".payment_type_title, .cart-title-info",
  name: "purchase.paymentType",
  operand: "docQueryInnerText",
  formatter: "lowerCaseTRFirstWord"
}, {
  PageTypeDepend: "purchase",
  method: "DocQuery",
  selector: "[class*=\"product_sku_code\"]",
  name: "purchase.skus",
  operand: "docQueryArrayInnerText"
}, {
  PageTypeDepend: "purchase",
  method: "DocQuery",
  selector: ".cart-inside",
  name: "purchase.skus",
  operand: "docQueryAttribValueList",
  value: "data-sku"
},
// ----------------------------------------------------------------------------------------------------------------------------------------------
// SORG Elements
{
  PageTypeDepend: "Productpage",
  method: "DocSorg",
  selector: "sku",
  name: "pdp.sku"
}, {
  PageTypeDepend: "Productpage",
  method: "DocSorg",
  selector: "mpn",
  name: "pdp.mpn"
}, {
  PageTypeDepend: "Productpage",
  method: "DocSorg",
  selector: "name",
  name: "pdp.name",
  operand: "JSONFilterOther",
  value: "@type=Product"
}, {
  PageTypeDepend: "Productpage",
  method: "DocSorg",
  selector: "offers.priceValidUntil",
  name: "pdp.priceValidUntil"
}, {
  PageTypeDepend: "Productpage",
  method: "DocSorg",
  selector: "itemListElement.*.name",
  name: "view.breadcrumb"
}, {
  PageTypeDepend: "Listingpage",
  method: "DocSorg",
  selector: "mainEntity.name",
  name: "plp.name"
}, {
  PageTypeDepend: "Listingpage",
  method: "DocSorg",
  selector: "mainEntity.numberOfItems",
  name: "plp.itemCount"
}, {
  PageTypeDepend: "Listingpage",
  method: "DocSorg",
  selector: "breadcrumb.itemListElement.*.item.name",
  name: "view.breadcrumb"
},
// ----------------------------------------------------------------------------------------------------------------------------------------------
// Window custom elements
{
  PageTypeDepend: "*",
  method: "SingleWT",
  selector: "favoriteProducts",
  name: "view.favoritedMPNs"
}, {
  PageTypeDepend: "*",
  method: "SingleWT",
  selector: "isAdmin",
  name: "vvsIsShowroom",
  formatter: "toString"
}, {
  PageTypeDepend: "*",
  method: "SingleWT",
  selector: "userId",
  name: "vvsUserId"
}];
var featureEngineeringOps = {
  "view_epoch": [{
    updateMethod: "min"
  }, {
    queryMethod: "min",
    window: "session",
    featureName: "history.view_epoch_min"
  }],
  "PageType": [{
    updateMethod: "count_values"
  }, {
    queryMethod: "cv",
    window: "session",
    featureName: "history.PageType_count_session"
  }, {
    queryMethod: "cv",
    window: "alltime",
    featureName: "history.PageType_count_alltime"
  }],
  "cart.couponApplicableAmount": [{
    updateMethod: "last"
  }, {
    queryMethod: "last(1)",
    window: "session",
    featureName: "__features.lastCartCouponApplicable"
  }],
  "pdp.category": [{
    updateMethod: "count_values"
  }, {
    updateMethod: "last"
  }, {
    queryMethod: "mode",
    window: "session",
    featureName: "history.pdp_category_mode_session"
  }, {
    queryMethod: "last(1)",
    window: "session",
    featureName: "history.pdp_category_last_session"
  }],
  "cart.skus": [{
    updateMethod: "last"
  }, {
    queryMethod: "last(1)",
    window: "session",
    featureName: "__features.SKUsonLastCartView"
  }]
};
var increaseBeagleInfoLayerHWM = function increaseBeagleInfoLayerHWM() {
  var infoLayer = window.top.beagleInfoLayer;
  // update hwm to indicate change
  infoLayer.__hwm += 1;
};
var addToBeagleInfoLayer = function addToBeagleInfoLayer(key, value) {
  var infoLayer = window.top.beagleInfoLayer;
  if (key === null || key === undefined) return;
  // if value is string, add as a clean string, if object add the same
  var typedValue = typeof value === "string" ? value.toString().trim() : value;
  // if key contains . create nested object
  if (key.indexOf(".") > -1) {
    var keys = key.split(".");
    var lastKey = keys.pop();
    var obj = infoLayer;
    keys.forEach(function (key) {
      if (!obj[key]) obj[key] = {};
      obj = obj[key];
    });
    obj[lastKey] = typedValue;
  } else {
    infoLayer[key] = typedValue;
  }
  // update hwm to indicate change
  increaseBeagleInfoLayerHWM();
  // process dependent historical data for scan-found elements
  if (typedValue !== undefined && typedValue !== null) {
    updateDerivationsInCollector(key, typedValue);
    passValueToListeners(key, typedValue);
  }
};
var DATA_LISTENERS = {};
var addDataListener = function addDataListener(key, listener) {
  if (!DATA_LISTENERS[key]) {
    DATA_LISTENERS[key] = [];
  }
  DATA_LISTENERS[key].push(listener);
};
var passValueToListeners = function passValueToListeners(key, value) {
  var listeners = DATA_LISTENERS[key];
  if (listeners && Array.isArray(listeners) && listeners.length > 0) {
    for (var i = 0; i < listeners.length; i += 1) {
      var listener = listeners[i];
      if (typeof listener === "function") {
        BeagleInfoLayer_logger.log("passValueToListeners --> value ".concat(value, " to listener ").concat(i, " of key ").concat(key));
        listener(value);
      }
    }
  }
};
var getFromBeagleInfoLayer = function getFromBeagleInfoLayer(key) {
  var blocking = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var pollInterval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;
  var timeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10000;
  // TODO: check featureEngineering and search list if all marked as found but value is missing
  var infoLayer = window.top.beagleInfoLayer;
  // return null if key is missing or not an array or has no elements
  if (!key) return null;
  var obtainData = jsonGet(infoLayer, key);
  if (obtainData !== null && obtainData !== undefined) {
    // found data for key
    return Promise.resolve(obtainData);
  }
  var _iterator = BeagleInfoLayer_createForOfIteratorHelper(searchPaths),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var searchElement = _step.value;
      if (key === searchElement.name && (searchElement.isFound || searchElement.isIgnore)) {
        // data is missing but element is marked as found or ignored
        return Promise.resolve(null);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (blocking) {
    return new Promise(function (resolve) {
      var interval = setInterval(function () {
        obtainData = jsonGet(infoLayer, key);
        if (obtainData !== null && obtainData !== undefined) {
          // found data for key, clear interval and resolve
          clearInterval(interval);
          resolve(obtainData);
        }
        var _iterator2 = BeagleInfoLayer_createForOfIteratorHelper(searchPaths),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var searchElement = _step2.value;
            if (key === searchElement.name && (searchElement.isFound || searchElement.isIgnore)) {
              // data is missing but element is marked as found or ignored
              clearInterval(interval);
              resolve(null);
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }, pollInterval);
      // add timeout
      setTimeout(function () {
        clearInterval(interval);
        resolve(null);
      }, timeout); // wait blocking for "timeout" msecs
    });
  }

  return Promise.resolve(null);
};
var removeFromBeagleInfoLayer = function removeFromBeagleInfoLayer(key) {
  var infoLayer = window.top.beagleInfoLayer;
  if (key === null || key === undefined) return;
  // remove key from infoLayer
  if (key.indexOf(".") > -1) {
    var keys = key.split(".");
    var lastKey = keys.pop();
    var obj = infoLayer;
    keys.forEach(function (key) {
      if (!obj[key]) return;
      obj = obj[key];
    });
    BeagleInfoLayer_logger.log("removeFromBeagleInfoLayer", "Removing ".concat(lastKey, " from ").concat(JSON.stringify(obj)));
    delete obj[lastKey];
  } else {
    delete infoLayer[key];
  }
  increaseBeagleInfoLayerHWM();
  // process dependent historical data for scan-found elements
  updateDerivationsInCollector(key, null);
  passValueToListeners(key, null);
};
var addTreatment = function addTreatment(id, businessRuleId, variant, status) {
  var dependant_on_treatment = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  var value = {};
  var infoLayer = window.top.beagleInfoLayer;
  if (businessRuleId !== null && businessRuleId !== undefined) value.businessRuleId = businessRuleId;
  if (variant) value.variant = variant;
  switch (status) {
    case "applied":
      infoLayer.a[id] = value;
      break;
    case "skipped":
      value.dependant_on_treatment = dependant_on_treatment;
      infoLayer.e[id] = value;
      break;
    case "failed":
      infoLayer.f[id] = value;
      break;
  }
  increaseBeagleInfoLayerHWM();
};
var PARSESEARCHMAXRETRY = 10;
var PARSESEARCHSTARTDELAY = 10;
var parseSearchPathsDelay = PARSESEARCHSTARTDELAY;
var parseSearchPathsRetry = 0;
var initializeBeagleInfoLayer = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
    return regenerator_default().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // Collect core data
            prepareCoreData();

            // Trigger-start the parser loop
            parserCaller();

            // Add metrics
            addMetrics();
          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return function initializeBeagleInfoLayer() {
    return _ref.apply(this, arguments);
  };
}();
var collectDerivationsFromCollector = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {
    var baseFeatureNames, _i, _baseFeatureNames, baseFeatureName, FEData, _iterator3, _step3, FEOp, queryResponse;
    return regenerator_default().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            baseFeatureNames = Object.keys(featureEngineeringOps);
            _i = 0, _baseFeatureNames = baseFeatureNames;
          case 2:
            if (!(_i < _baseFeatureNames.length)) {
              _context2.next = 30;
              break;
            }
            baseFeatureName = _baseFeatureNames[_i];
            FEData = featureEngineeringOps[baseFeatureName];
            if (!(FEData && Array.isArray(FEData) && FEData.length > 0)) {
              _context2.next = 27;
              break;
            }
            _iterator3 = BeagleInfoLayer_createForOfIteratorHelper(FEData);
            _context2.prev = 7;
            _iterator3.s();
          case 9:
            if ((_step3 = _iterator3.n()).done) {
              _context2.next = 19;
              break;
            }
            FEOp = _step3.value;
            if (!(FEOp.queryMethod === null || FEOp.queryMethod === undefined)) {
              _context2.next = 13;
              break;
            }
            return _context2.abrupt("continue", 17);
          case 13:
            _context2.next = 15;
            return queryInCollector(baseFeatureName, FEOp.queryMethod, FEOp.window);
          case 15:
            queryResponse = _context2.sent;
            addToBeagleInfoLayer(FEOp.featureName, queryResponse);
          case 17:
            _context2.next = 9;
            break;
          case 19:
            _context2.next = 24;
            break;
          case 21:
            _context2.prev = 21;
            _context2.t0 = _context2["catch"](7);
            _iterator3.e(_context2.t0);
          case 24:
            _context2.prev = 24;
            _iterator3.f();
            return _context2.finish(24);
          case 27:
            _i++;
            _context2.next = 2;
            break;
          case 30:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[7, 21, 24, 27]]);
  }));
  return function collectDerivationsFromCollector() {
    return _ref2.apply(this, arguments);
  };
}();
var updateDerivationsInCollector = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3(baseFeatureName, baseFeatureValue) {
    var FEData, _iterator4, _step4, FEOp;
    return regenerator_default().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            // process dependent historical data for scan-found elements
            FEData = featureEngineeringOps[baseFeatureName];
            if (!(FEData && Array.isArray(FEData) && FEData.length > 0)) {
              _context3.next = 21;
              break;
            }
            _iterator4 = BeagleInfoLayer_createForOfIteratorHelper(FEData);
            _context3.prev = 3;
            _iterator4.s();
          case 5:
            if ((_step4 = _iterator4.n()).done) {
              _context3.next = 13;
              break;
            }
            FEOp = _step4.value;
            if (!(FEOp.updateMethod === null || FEOp.updateMethod === undefined)) {
              _context3.next = 9;
              break;
            }
            return _context3.abrupt("continue", 11);
          case 9:
            _context3.next = 11;
            return updateInCollector(baseFeatureName, baseFeatureValue, FEOp.updateMethod);
          case 11:
            _context3.next = 5;
            break;
          case 13:
            _context3.next = 18;
            break;
          case 15:
            _context3.prev = 15;
            _context3.t0 = _context3["catch"](3);
            _iterator4.e(_context3.t0);
          case 18:
            _context3.prev = 18;
            _iterator4.f();
            return _context3.finish(18);
          case 21:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[3, 15, 18, 21]]);
  }));
  return function updateDerivationsInCollector(_x, _x2) {
    return _ref3.apply(this, arguments);
  };
}();
var processFormatter = function processFormatter(value, formatter) {
  if (value === null || value === undefined || !formatter) {
    return null;
  }
  switch (formatter) {
    case "upperCaseTR":
      return value.toString().toUpperCase("tr-TR");
    case "formatDeliveryDate":
      return formatDeliveryDate(value);
    case "numericOnly":
      return value.replace(/\D/g, "");
    case "lowerCaseTRFirstWord":
      return value.toString().toLowerCase("tr-TR").split(" ")[0];
    case "dearray":
      if (Array.isArray(value) && value.length > 0) {
        return value[0];
      }
      return value;
    case "toString":
      return value.toString().trim();
    default:
      return value;
  }
};
var searchObj = function searchObj(obj, searchElement) {
  var value;
  var layerValue;
  try {
    switch (searchElement.operand) {
      case "JSONFilterOther":
        {
          value = jsonGet(obj, searchElement.selector);
          if (value === null || value === undefined) {
            break;
          }
          var filterParams = searchElement.value.split("=");
          if (filterParams.length !== 2) break;
          var filterName = filterParams[0];
          var filterValue = filterParams[1];
          if (!filterName || !filterValue) break;
          var filterMatch = jsonGet(obj, filterName);
          if (!filterMatch || filterMatch !== filterValue) break;
          if (value && (Array.isArray(value) ? value.length > 0 : value.toString().trim().length > 0)) {
            layerValue = value;
          }
        }
        break;
      case "docQueryObserve":
        value = obj.querySelector(searchElement.selector);
        if (value !== null && value !== undefined) {
          searchElement.isFound = true;
          // update found status of the elements in the children list
          var toBeUpdated = [];
          searchElement.children.forEach(function (child) {
            var childElements = searchPaths.filter(function (element) {
              return element.name === child;
            });
            // add childElements into toBeUpdated
            toBeUpdated.push.apply(toBeUpdated, _toConsumableArray(childElements));
          });
          // run only if the element has added or removed children
          var observer = new MutationObserver( /*#__PURE__*/function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4(mutationList) {
              var triggerRestart;
              return regenerator_default().wrap(function _callee4$(_context4) {
                while (1) {
                  switch (_context4.prev = _context4.next) {
                    case 0:
                      if (!isOwnMutation(mutationList)) {
                        _context4.next = 2;
                        break;
                      }
                      return _context4.abrupt("return");
                    case 2:
                      toBeUpdated.forEach(function (element) {
                        element.isFound = false;
                        removeFromBeagleInfoLayer(element.name);
                      });
                      triggerRestart = parseSearchPathsRetry >= PARSESEARCHMAXRETRY;
                      parseSearchPathsDelay = PARSESEARCHSTARTDELAY;
                      parseSearchPathsRetry = 0;
                      if (triggerRestart) {
                        BeagleInfoLayer_logger.log("searchObj: triggered a restart of searchpaths due: ", searchElement.name);
                        parserCaller();
                      }
                    case 7:
                    case "end":
                      return _context4.stop();
                  }
                }
              }, _callee4);
            }));
            return function (_x3) {
              return _ref4.apply(this, arguments);
            };
          }());
          observer.observe(value, {
            subtree: true,
            childList: true
          });
        }
        break;
      case "docQueryInnerText":
        value = obj.querySelector(searchElement.selector);
        if (value !== null && value !== undefined && value.innerText && value.innerText.trim().length > 0) {
          layerValue = value.innerText;
        }
        break;
      case "docQueryAttribValueList":
        {
          var attribValueList = [];
          value = obj.querySelectorAll(searchElement.selector);
          if (value === null || value === undefined || value.length === 0) break;
          var _iterator5 = BeagleInfoLayer_createForOfIteratorHelper(value),
            _step5;
          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var valuechild = _step5.value;
              var attribValue = valuechild.getAttribute(searchElement.value);
              if (attribValue) {
                attribValueList.push(attribValue);
              }
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
          if (attribValueList.length > 0) {
            layerValue = attribValueList;
          }
        }
        break;
      case "docQueryHasInnerText":
        value = obj.querySelector(searchElement.selector);
        if (value !== null && value !== undefined) {
          var setValue = value.innerText.trim().length > 0;
          layerValue = setValue.toString();
        }
        break;
      case "docQueryCountElts":
        value = obj.querySelectorAll(searchElement.selector);
        if (value !== null && value !== undefined) {
          layerValue = value.length;
        }
        break;
      case "docQueryValueIfHasInnerText":
        value = obj.querySelector(searchElement.selector);
        if (value && value.innerText && value.innerText.trim().length > 0) {
          layerValue = searchElement.value;
        }
        break;
      case "docQuerySumNumInnerText":
        {
          value = obj.querySelectorAll(searchElement.selector);
          if (value === null || value === undefined || value.length === 0) break;
          var sumPrice = 0;
          var _iterator6 = BeagleInfoLayer_createForOfIteratorHelper(value),
            _step6;
          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var child = _step6.value;
              var childText = child.innerText.trim().replace(/\D/g, "");
              if (childText.length > 0) {
                sumPrice += parseInt(childText);
              }
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }
          if (sumPrice > 0) {
            layerValue = sumPrice;
          }
        }
        break;
      case "docQueryArrayInnerText":
        {
          value = obj.querySelectorAll(searchElement.selector);
          if (value === null || value === undefined || value.length === 0) break;
          var arrayInnerText = [];
          var _iterator7 = BeagleInfoLayer_createForOfIteratorHelper(value),
            _step7;
          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var _child = _step7.value;
              var _childText = _child.innerText.trim();
              if (_childText.length > 0) {
                arrayInnerText.push(_childText);
              }
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
          if (arrayInnerText.length > 0) {
            layerValue = arrayInnerText;
          }
        }
        break;
      default:
        value = jsonGet(obj, searchElement.selector);
        if (value !== null && value !== undefined && (Array.isArray(value) ? value.length > 0 : value.toString().trim().length > 0)) {
          layerValue = value;
        }
        break;
    } // switch

    if (layerValue !== undefined && layerValue !== null) {
      if (searchElement.formatter) {
        layerValue = processFormatter(layerValue, searchElement.formatter);
      }
      addToBeagleInfoLayer(searchElement.name, layerValue);
      searchElement.isFound = true;

      // mark exclusive elements as found
      if (searchElement.exclusive && Array.isArray(searchElement.exclusive) && searchElement.exclusive.length > 0) {
        var _iterator8 = BeagleInfoLayer_createForOfIteratorHelper(searchPaths),
          _step8;
        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var exclusiveElement = _step8.value;
            if (searchElement.exclusive.includes(exclusiveElement.name)) {
              exclusiveElement.isFound = true;
            }
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
      }
    }
    if (searchElement.isFound) {
      return true;
    }
  } catch (e) {
    BeagleInfoLayer_logger.error("searchObj error: " + e);
  }
  return false;
};
var customDataDerivations = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee5() {
    var currentPageType, _yield$Promise$all, _yield$Promise$all2, isCartEmpty, totalBasePrice, couponNotApplicable, prices, quantities, totalPrice, i, couponApplicableAmount, sku, skuList;
    return regenerator_default().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return getFromBeagleInfoLayer("PageType", true, 50, 1000);
          case 2:
            currentPageType = _context5.sent;
            _context5.prev = 3;
            _context5.next = 6;
            return Promise.all([getFromBeagleInfoLayer("cart.isempty"), getFromBeagleInfoLayer("cart.totalBasePrice"), getFromBeagleInfoLayer("cart.couponNotApplicable"), getFromBeagleInfoLayer("cart.prices"), getFromBeagleInfoLayer("cart.quantities")]);
          case 6:
            _yield$Promise$all = _context5.sent;
            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 5);
            isCartEmpty = _yield$Promise$all2[0];
            totalBasePrice = _yield$Promise$all2[1];
            couponNotApplicable = _yield$Promise$all2[2];
            prices = _yield$Promise$all2[3];
            quantities = _yield$Promise$all2[4];
            totalPrice = 0;
            if (!totalBasePrice && prices && Array.isArray(prices) && prices.length > 0 && quantities && Array.isArray(quantities) && quantities.length > 0 && prices.length === quantities.length) {
              for (i = 0; i < prices.length; i++) {
                totalPrice += parseInt(prices[i]) * parseInt(quantities[i]);
              }
            } else {
              totalPrice = parseInt(totalBasePrice);
            }
            couponApplicableAmount = 0;
            if (!isCartEmpty && totalPrice && couponNotApplicable) {
              couponApplicableAmount = totalPrice - parseInt(couponNotApplicable);
            } else if (!isCartEmpty && totalPrice) {
              couponApplicableAmount = parseInt(totalPrice);
            } else {
              couponApplicableAmount = 0;
            }
            addToBeagleInfoLayer("cart.couponApplicableAmount", couponApplicableAmount);
            if (isCartEmpty) {
              addToBeagleInfoLayer("cart.totalPrice", 0);
              addToBeagleInfoLayer("cart.couponNotApplicable", 0);
            }
            _context5.next = 24;
            break;
          case 21:
            _context5.prev = 21;
            _context5.t0 = _context5["catch"](3);
            BeagleInfoLayer_logger.error("customDataDerivations cannot compute couponApplicablePrice: " + _context5.t0);
          case 24:
            if (!(currentPageType === "Productpage")) {
              _context5.next = 33;
              break;
            }
            _context5.next = 27;
            return getFromBeagleInfoLayer("pdp.sku");
          case 27:
            sku = _context5.sent;
            if (!(sku !== null && sku !== undefined)) {
              _context5.next = 31;
              break;
            }
            _context5.next = 31;
            return addToBeagleInfoLayer("__features.SKUsonPage", [sku]);
          case 31:
            _context5.next = 40;
            break;
          case 33:
            if (!(currentPageType === "basket")) {
              _context5.next = 40;
              break;
            }
            _context5.next = 36;
            return getFromBeagleInfoLayer("cart.skus");
          case 36:
            skuList = _context5.sent;
            if (!(skuList !== null && Array.isArray(skuList) && skuList.length)) {
              _context5.next = 40;
              break;
            }
            _context5.next = 40;
            return addToBeagleInfoLayer("__features.SKUsonPage", skuList);
          case 40:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, null, [[3, 21]]);
  }));
  return function customDataDerivations() {
    return _ref5.apply(this, arguments);
  };
}();
var parseSearchPaths = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee6() {
    var domStatus, wintop, dataLayer, windoc, sorgArrayInner, foundNames, prevFoundNames, notFoundNames, currentPageType, _iterator9, _step9, searchElement, _iterator10, _step10, _searchElement, _iterator11, _step11, dataLayerItem, _iterator12, _step12, sorgItem;
    return regenerator_default().wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            domStatus = document.readyState; // check if document and dom is loaded and ready for scrapping
            BeagleInfoLayer_logger.log("parseSearchPaths initialized with dom status:  " + domStatus);
            wintop = window.top;
            dataLayer = wintop.dataLayer;
            windoc = wintop.document;
            foundNames = new Set();
            prevFoundNames = new Set();
            notFoundNames = new Set(); // PageType can be inferred from URL, if found use it from there
            _context6.next = 10;
            return getFromBeagleInfoLayer("PageType");
          case 10:
            currentPageType = _context6.sent;
            if (currentPageType) {
              prevFoundNames.add("PageType");
            }

            // Loop through search lists and mark found names
            _iterator9 = BeagleInfoLayer_createForOfIteratorHelper(searchPaths);
            try {
              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                searchElement = _step9.value;
                if (searchElement.isFound) {
                  prevFoundNames.add(searchElement.name);
                }
              }
            } catch (err) {
              _iterator9.e(err);
            } finally {
              _iterator9.f();
            }
            _iterator10 = BeagleInfoLayer_createForOfIteratorHelper(searchPaths);
            _context6.prev = 15;
            _iterator10.s();
          case 17:
            if ((_step10 = _iterator10.n()).done) {
              _context6.next = 38;
              break;
            }
            _searchElement = _step10.value;
            if (!(_searchElement.isFound || _searchElement.isIgnore)) {
              _context6.next = 21;
              break;
            }
            return _context6.abrupt("continue", 36);
          case 21:
            if (!(foundNames.has(_searchElement.name) || prevFoundNames.has(_searchElement.name))) {
              _context6.next = 24;
              break;
            }
            // had already found this element on another parse item
            _searchElement.isFound = true;
            return _context6.abrupt("continue", 36);
          case 24:
            if (!(_searchElement.PageTypeDepend !== "*")) {
              _context6.next = 35;
              break;
            }
            if (currentPageType) {
              _context6.next = 32;
              break;
            }
            _context6.next = 28;
            return getFromBeagleInfoLayer("PageType");
          case 28:
            currentPageType = _context6.sent;
            if (currentPageType) {
              _context6.next = 32;
              break;
            }
            notFoundNames.add(_searchElement.name);
            return _context6.abrupt("continue", 36);
          case 32:
            if (!(_searchElement.PageTypeDepend.indexOf(currentPageType) < 0)) {
              _context6.next = 35;
              break;
            }
            // skip searchElement because of PageTypeDepend
            _searchElement.isIgnore = true;
            return _context6.abrupt("continue", 36);
          case 35:
            if (_searchElement.method === "SingleWT") {
              // SCAN Window for Single Elements
              searchAndSet(wintop, _searchElement, foundNames, notFoundNames);
            } else if (_searchElement.method === "GADataLayer") {
              // SCAN GA DATA LAYER
              _iterator11 = BeagleInfoLayer_createForOfIteratorHelper(dataLayer);
              try {
                for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                  dataLayerItem = _step11.value;
                  searchAndSet(dataLayerItem, _searchElement, foundNames, notFoundNames);
                }
              } catch (err) {
                _iterator11.e(err);
              } finally {
                _iterator11.f();
              }
            } else if (_searchElement.method === "DocSorg") {
              // SCAN SORG ARRAY
              if (!sorgArrayInner) {
                sorgArrayInner = getSORGArray();
              }
              _iterator12 = BeagleInfoLayer_createForOfIteratorHelper(sorgArrayInner);
              try {
                for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
                  sorgItem = _step12.value;
                  searchAndSet(sorgItem, _searchElement, foundNames, notFoundNames);
                }
              } catch (err) {
                _iterator12.e(err);
              } finally {
                _iterator12.f();
              }
            } else if (_searchElement.method === "DocQuery") {
              // SCAN DOCUMENT
              searchAndSet(windoc, _searchElement, foundNames, notFoundNames);
            } // DOCQUERY parse
          case 36:
            _context6.next = 17;
            break;
          case 38:
            _context6.next = 43;
            break;
          case 40:
            _context6.prev = 40;
            _context6.t0 = _context6["catch"](15);
            _iterator10.e(_context6.t0);
          case 43:
            _context6.prev = 43;
            _iterator10.f();
            return _context6.finish(43);
          case 46:
            if (notFoundNames.size === 0) {
              parseSearchPathsRetry = PARSESEARCHMAXRETRY;
              BeagleInfoLayer_logger.log("parseSearchPaths found all elements - setting retry to max");
            } else if (foundNames.size === 0) {
              // update retry counter and delay only if dom is active
              if (domStatus === "complete" || domStatus === "interactive") {
                parseSearchPathsDelay *= 2;
                parseSearchPathsRetry += 1;
              }
              BeagleInfoLayer_logger.log("parseSearchPaths processed but not found any, setting delay and retry to " + parseSearchPathsDelay + " and " + parseSearchPathsRetry + " for notfound: [" + Array.from(notFoundNames).join(" | ") + "]");
            } else {
              BeagleInfoLayer_logger.log("parseSearchPaths processed: notfound: [" + Array.from(notFoundNames).join(" | ") + "] and found " + foundNames.size);
            }
          case 47:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, null, [[15, 40, 43, 46]]);
  }));
  return function parseSearchPaths() {
    return _ref6.apply(this, arguments);
  };
}();
var searchAndSet = function searchAndSet(obj, searchElement, foundNames, notFoundNames) {
  if (searchObj(obj, searchElement)) {
    foundNames.add(searchElement.name);
  } else {
    notFoundNames.add(searchElement.name);
  }
};

// parse source
var parserCaller = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee8() {
    return regenerator_default().wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return parseSearchPaths();
          case 2:
            if (!(parseSearchPathsRetry < PARSESEARCHMAXRETRY)) {
              _context8.next = 7;
              break;
            }
            BeagleInfoLayer_logger.log("parseSearchPaths: scheduled to be recalled in " + parseSearchPathsDelay + "ms");
            setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee7() {
              return regenerator_default().wrap(function _callee7$(_context7) {
                while (1) {
                  switch (_context7.prev = _context7.next) {
                    case 0:
                      _context7.next = 2;
                      return parserCaller();
                    case 2:
                    case "end":
                      return _context7.stop();
                  }
                }
              }, _callee7);
            })), parseSearchPathsDelay);
            _context8.next = 13;
            break;
          case 7:
            BeagleInfoLayer_logger.log("parseSearchPaths: reached max retry, calling remainder historical data");
            _context8.next = 10;
            return customDataDerivations();
          case 10:
            _context8.next = 12;
            return collectDerivationsFromCollector();
          case 12:
            addToBeagleInfoLayer("__CompletedScraping", true);
          case 13:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return function parserCaller() {
    return _ref7.apply(this, arguments);
  };
}();

// Extract value from json object using given path
// If an element is *, concatenate recursively all sub-path values as string
var jsonGet = function jsonGet(obj, path) {
  if (!obj) return null;
  if (!path) return null;
  try {
    var pathArray = path.split(".");
    var current = obj;
    for (var i = 0; i < pathArray.length; i++) {
      if (current === null) return null;
      if (pathArray[i] === "*") {
        var subPath = pathArray.slice(i + 1).join(".");
        var subArray = [];
        for (var subKey in current) {
          if (current[subKey] !== undefined && current[subKey] !== null) {
            var subValue = jsonGet(current[subKey], subPath);
            if (subValue !== null && subValue !== undefined) {
              subArray.push(subValue);
            }
          }
        }
        return subArray;
      }
      current = current[pathArray[i]];
    }
    return current;
  } catch (e) {
    return null;
  }
};
var prepareCoreData = /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee9() {
    var _windowPtr$navigator, _windowPtr$navigator$, _windowPtr$navigator2, _windowPtr$navigator3, _windowPtr$screen, _windowPtr$screen2, _windowPtr$screen3, _windowPtr$screen4, _windowPtr$visualView, _windowPtr$visualView2, _windowPtr$history, _windowPtr$navigator4, _windowPtr$navigator5;
    var windowPtr, navPtr, platform, availWindow, windowDepth, vportShape, width, height, iOS, _windowPtr$screen5, _windowPtr$screen5$or, orientationAngle, temp, _navPtr$userAgentData, _navPtr$userAgentData2, _navPtr$userAgentData3, navAgent, currentURL, firstSessionReferrer, pageType;
    return regenerator_default().wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            windowPtr = window.top;
            navPtr = windowPtr.navigator;
            platform = ((_windowPtr$navigator = windowPtr.navigator) === null || _windowPtr$navigator === void 0 ? void 0 : (_windowPtr$navigator$ = _windowPtr$navigator.userAgentData) === null || _windowPtr$navigator$ === void 0 ? void 0 : _windowPtr$navigator$.platform) || ((_windowPtr$navigator2 = windowPtr.navigator) === null || _windowPtr$navigator2 === void 0 ? void 0 : _windowPtr$navigator2.platform) || ((_windowPtr$navigator3 = windowPtr.navigator) === null || _windowPtr$navigator3 === void 0 ? void 0 : _windowPtr$navigator3.userAgent);
            addToBeagleInfoLayer("device.navPlatform", platform);

            /* window view area */
            addToBeagleInfoLayer("device.windowPRatio", windowPtr.devicePixelRatio);
            availWindow = ((_windowPtr$screen = windowPtr.screen) === null || _windowPtr$screen === void 0 ? void 0 : _windowPtr$screen.availWidth) + "x" + ((_windowPtr$screen2 = windowPtr.screen) === null || _windowPtr$screen2 === void 0 ? void 0 : _windowPtr$screen2.availHeight);
            addToBeagleInfoLayer("device.windowAvail", availWindow);
            windowDepth = ((_windowPtr$screen3 = windowPtr.screen) === null || _windowPtr$screen3 === void 0 ? void 0 : _windowPtr$screen3.colorDepth) + "-" + ((_windowPtr$screen4 = windowPtr.screen) === null || _windowPtr$screen4 === void 0 ? void 0 : _windowPtr$screen4.pixelDepth);
            addToBeagleInfoLayer("device.windowDepth", windowDepth);
            vportShape = ((_windowPtr$visualView = windowPtr.visualViewport) === null || _windowPtr$visualView === void 0 ? void 0 : _windowPtr$visualView.width) + "x" + ((_windowPtr$visualView2 = windowPtr.visualViewport) === null || _windowPtr$visualView2 === void 0 ? void 0 : _windowPtr$visualView2.height);
            addToBeagleInfoLayer("device.windowVport", vportShape);
            if (screen.width) {
              width = parseInt(screen.width);
              height = screen.height ? parseInt(screen.height) : 0;
              if (width !== 0 && height !== 0) {
                iOS = /iPad|iPhone|iPod/.test(platform);
                if (iOS && windowPtr.devicePixelRatio) {
                  // ios provides DPIs, need to multiply
                  width = Math.round(width * windowPtr.devicePixelRatio);
                  height = Math.round(height * windowPtr.devicePixelRatio);
                } else {
                  orientationAngle = (_windowPtr$screen5 = windowPtr.screen) === null || _windowPtr$screen5 === void 0 ? void 0 : (_windowPtr$screen5$or = _windowPtr$screen5.orientation) === null || _windowPtr$screen5$or === void 0 ? void 0 : _windowPtr$screen5$or.angle;
                  if (Math.abs(orientationAngle) === 90 || Math.abs(orientationAngle) === 270) {
                    // we have landscape orientation switch values for all except ios
                    temp = width;
                    width = height;
                    height = temp;
                  }
                }
                addToBeagleInfoLayer("device.window", width + "x" + height);
              }
            }

            /* navigator */
            addToBeagleInfoLayer("device.navHistSize", (_windowPtr$history = windowPtr.history) === null || _windowPtr$history === void 0 ? void 0 : _windowPtr$history.length);

            // check if userAgentData is supported and userAgent is not available, use it
            if (!navPtr.userAgent) {
              if (navPtr.userAgentData) {
                // turn brands array into string
                navAgent = navPtr === null || navPtr === void 0 ? void 0 : (_navPtr$userAgentData = navPtr.userAgentData) === null || _navPtr$userAgentData === void 0 ? void 0 : (_navPtr$userAgentData2 = _navPtr$userAgentData.brands) === null || _navPtr$userAgentData2 === void 0 ? void 0 : _navPtr$userAgentData2.map(function (e) {
                  return e.brand + ":" + e.version;
                }).join(); // add mobile info
                navAgent += navPtr !== null && navPtr !== void 0 && (_navPtr$userAgentData3 = navPtr.userAgentData) !== null && _navPtr$userAgentData3 !== void 0 && _navPtr$userAgentData3.mobile ? "mobi" : " ";
                // add platform info
                navAgent += platform;
                addToBeagleInfoLayer("device.navAgent", navAgent);
              }
            } else {
              addToBeagleInfoLayer("device.navAgent", navPtr.userAgent);
            }
            addToBeagleInfoLayer("device.navHWCores", navPtr.hardwareConcurrency);
            addToBeagleInfoLayer("device.navLanguage", navPtr.language || navPtr.browserLanguage || navPtr.systemLanguage || navPtr.userLanguage);
            addToBeagleInfoLayer("device.navTouch", navPtr.maxTouchPoints);
            addToBeagleInfoLayer("device.navVendor", navPtr.vendor);
            addToBeagleInfoLayer("device.internetSpeed", (_windowPtr$navigator4 = windowPtr.navigator) === null || _windowPtr$navigator4 === void 0 ? void 0 : (_windowPtr$navigator5 = _windowPtr$navigator4.connection) === null || _windowPtr$navigator5 === void 0 ? void 0 : _windowPtr$navigator5.downlink);

            /* miscellaneous */
            currentURL = new URL(window.top.location.href);
            addToBeagleInfoLayer("u", currentURL.href);
            addToBeagleInfoLayer("d", currentURL.hostname);
            addToBeagleInfoLayer("donttrack", navPtr.doNotTrack || windowPtr.doNotTrack || navPtr.msDoNotTrack);
            addToBeagleInfoLayer("r", windowPtr.document.referrer);
            firstSessionReferrer = sessionStorage.getItem(SESSION_STORAGE_KEYS.SESSION_REFERRER);
            if (!firstSessionReferrer) {
              sessionStorage.setItem(SESSION_STORAGE_KEYS.SESSION_REFERRER, windowPtr.document.referrer);
              addToBeagleInfoLayer("fr", windowPtr.document.referrer);
            } else {
              addToBeagleInfoLayer("fr", firstSessionReferrer);
            }

            /* Vivense specific */

            // if url like x then set PageType = y
            if (currentURL.pathname.indexOf("favorilerim.html") > -1) {
              pageType = "favorites";
            } else if (currentURL.pathname.indexOf("siparis-listesi.html") > -1) {
              pageType = "basket";
            } else if (currentURL.pathname.indexOf("siparis-ozeti.html") > -1) {
              pageType = "purchase";
            } else if (currentURL.pathname.indexOf("odeme.html") > -1) {
              pageType = "payment";
            } else if (currentURL.pathname.indexOf("adres-listesi.html") > -1) {
              pageType = "address";
            } else if (currentURL.pathname.indexOf("siparislerim.html") > -1) {
              pageType = "pastorders";
            } else if (currentURL.pathname.indexOf("uye-kayit.html") > -1) {
              pageType = "register";
            } else if (currentURL.pathname.indexOf("uye-girisi.html") > -1) {
              pageType = "signin";
            } else if (currentURL.pathname.indexOf("kuponlarim.html") > -1) {
              pageType = "profile_coupons";
            } else if (currentURL.pathname.indexOf("profil-guncelle.html") > -1) {
              pageType = "profile_info";
            } else if (currentURL.pathname.indexOf("adreslerim.html") > -1) {
              pageType = "profile_addresses";
            } else if (currentURL.pathname.indexOf("duyuru-tercihleri.html") > -1) {
              pageType = "profile_notifications";
            } else if (currentURL.pathname.indexOf("indirimli-mobilya-kampanyalari.html") > -1) {
              pageType = "special_campaigns";
            }
            if (pageType) {
              addToBeagleInfoLayer("PageType", pageType);
            }
          case 28:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return function prepareCoreData() {
    return _ref9.apply(this, arguments);
  };
}();
var addMetrics = function addMetrics() {
  var windowPtr = window.top;
  var perfMetrics = {};
  var perfNavigationMetrics = windowPtr.performance.getEntriesByType("navigation")[0];
  if (windowPtr.performance && perfNavigationMetrics) {
    perfMetrics.connect = Math.round(perfNavigationMetrics.connectEnd - perfNavigationMetrics.connectStart);
    perfMetrics.request = Math.round(perfNavigationMetrics.responseEnd - perfNavigationMetrics.requestStart);
    perfMetrics.dom = Math.round(perfNavigationMetrics.domInteractive - perfNavigationMetrics.domComplete);
    perfMetrics.load = Math.round(perfNavigationMetrics.loadEventEnd - perfNavigationMetrics.loadEventStart);
    perfMetrics.duration = Math.round(perfNavigationMetrics.duration);
  }
  addToBeagleInfoLayer("metrics", perfMetrics);
};

// TODO: move this to an "element collector" module, then data is extracted from pre-collected elements
var getSORGArray = function getSORGArray() {
  var schemaOrgElts = window.top.document.querySelectorAll("[type=\"application/ld+json\"]");
  var sorgArray = [];
  var _iterator13 = BeagleInfoLayer_createForOfIteratorHelper(schemaOrgElts),
    _step13;
  try {
    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
      var sTag = _step13.value;
      try {
        var cntnt = sTag.textContent;
        var jsoncontent = JSON.parse(cntnt);
        sorgArray.push(jsoncontent);
      } catch (err) {
        // do nothing
      }
    }
  } catch (err) {
    _iterator13.e(err);
  } finally {
    _iterator13.f();
  }
  return sorgArray;
};
;// CONCATENATED MODULE: ./src/BeagleMonitor/index.js








var BeagleMonitor_logger = new src_logger("BeagleMonitor");
var HEADERS = {
  type: "text/plain"
};
var Monitor = /*#__PURE__*/function () {
  function Monitor() {
    _classCallCheck(this, Monitor);
    BeagleMonitor_logger.log("Initializing monitor");
    this.hasArrivalLogSent = false;
    this.hasMainLogSent = false;
    this.hasUpdatesSent = false;
    this.highWaterMark = null;
    this.initializeExitEventListeners();
  }

  // Attempts to send the initial log body (beagleInfoLayer's initial population) immediately
  _createClass(Monitor, [{
    key: "sendLogs",
    value: function () {
      var _sendLogs = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee(immediate) {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!immediate) {
                  _context.next = 6;
                  break;
                }
                BeagleMonitor_logger.log("In immediate sending block");
                _context.next = 4;
                return this.packAndQueueMainLog();
              case 4:
                _context.next = 12;
                break;
              case 6:
                BeagleMonitor_logger.log("In non-critical send path - awaiting scraping");
                _context.next = 9;
                return getFromBeagleInfoLayer("__CompletedScraping", true, 50, 1000);
              case 9:
                BeagleMonitor_logger.log("In non-critical send path - sending logs");
                _context.next = 12;
                return this.packAndQueueMainLog();
              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function sendLogs(_x) {
        return _sendLogs.apply(this, arguments);
      }
      return sendLogs;
    }() // Send initial log body and incremental update logs on close
  }, {
    key: "handleCloseEvent",
    value: function () {
      var _handleCloseEvent = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.packAndQueueMainLog();
              case 2:
                _context2.next = 4;
                return this.packAndQueueIncrementalLog();
              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function handleCloseEvent() {
        return _handleCloseEvent.apply(this, arguments);
      }
      return handleCloseEvent;
    }()
  }, {
    key: "packAndQueueMainLog",
    value: function () {
      var _packAndQueueMainLog = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3() {
        var requestBlob;
        return regenerator_default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!this.hasMainLogSent) {
                  _context3.next = 2;
                  break;
                }
                return _context3.abrupt("return");
              case 2:
                _context3.next = 4;
                return this.packageMainLogData();
              case 4:
                requestBlob = _context3.sent;
                if (!requestBlob) {
                  _context3.next = 11;
                  break;
                }
                _context3.next = 8;
                return this.checkForLatestChanges();
              case 8:
                BeagleMonitor_logger.log("Request blob to send: ", requestBlob);
                this.hasMainLogSent = true;
                this.queueLogs(requestBlob);
              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function packAndQueueMainLog() {
        return _packAndQueueMainLog.apply(this, arguments);
      }
      return packAndQueueMainLog;
    }()
  }, {
    key: "packAndQueueIncrementalLog",
    value: function () {
      var _packAndQueueIncrementalLog = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4() {
        var hasChanged, logData;
        return regenerator_default().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(!this.hasMainLogSent || this.hasUpdatesSent)) {
                  _context4.next = 2;
                  break;
                }
                return _context4.abrupt("return");
              case 2:
                _context4.next = 4;
                return this.checkForLatestChanges();
              case 4:
                hasChanged = _context4.sent;
                BeagleMonitor_logger.log("Update logs change status: ", hasChanged);
                if (hasChanged) {
                  _context4.next = 8;
                  break;
                }
                return _context4.abrupt("return");
              case 8:
                _context4.next = 10;
                return this.packageIncrementalLogData();
              case 10:
                logData = _context4.sent;
                if (logData) {
                  BeagleMonitor_logger.log("Sending incremental logs", logData);
                  this.hasUpdatesSent = true;
                  this.queueLogs(logData);
                }
              case 12:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
      function packAndQueueIncrementalLog() {
        return _packAndQueueIncrementalLog.apply(this, arguments);
      }
      return packAndQueueIncrementalLog;
    }()
  }, {
    key: "packAndQueueArrivalLog",
    value: function () {
      var _packAndQueueArrivalLog = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee5() {
        var requestBlob;
        return regenerator_default().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!(this.hasMainLogSent || this.hasArrivalLogSent)) {
                  _context5.next = 2;
                  break;
                }
                return _context5.abrupt("return");
              case 2:
                _context5.next = 4;
                return this.packageArrivalLogData();
              case 4:
                requestBlob = _context5.sent;
                if (requestBlob) {
                  // prepare change detection hashes at the time of main log preparation
                  BeagleMonitor_logger.log("Arrival blob to send: ", requestBlob);
                  this.hasArrivalLogSent = true;
                  this.queueLogs(requestBlob);
                }
              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));
      function packAndQueueArrivalLog() {
        return _packAndQueueArrivalLog.apply(this, arguments);
      }
      return packAndQueueArrivalLog;
    }()
  }, {
    key: "checkForLatestChanges",
    value: function () {
      var _checkForLatestChanges = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee6() {
        var hwm;
        return regenerator_default().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return getFromBeagleInfoLayer("__hwm");
              case 2:
                hwm = _context6.sent;
                if (!(this.highWaterMark !== hwm)) {
                  _context6.next = 6;
                  break;
                }
                this.highWaterMark = hwm;
                return _context6.abrupt("return", true);
              case 6:
                return _context6.abrupt("return", false);
              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));
      function checkForLatestChanges() {
        return _checkForLatestChanges.apply(this, arguments);
      }
      return checkForLatestChanges;
    }()
  }, {
    key: "packageArrivalLogData",
    value: function () {
      var _packageArrivalLogData = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee7() {
        var _yield$Promise$all, _yield$Promise$all2, url, hash, cookieGaId, view_epoch, body;
        return regenerator_default().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return Promise.all([getFromBeagleInfoLayer("u"), getFromBeagleInfoLayer("onHashPct"), getFromBeagleInfoLayer("cookieGaId"), getFromBeagleInfoLayer("view_epoch")]);
              case 2:
                _yield$Promise$all = _context7.sent;
                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 4);
                url = _yield$Promise$all2[0];
                hash = _yield$Promise$all2[1];
                cookieGaId = _yield$Promise$all2[2];
                view_epoch = _yield$Promise$all2[3];
                body = {
                  cookieGaId: cookieGaId,
                  lc: 0,
                  view_epoch: view_epoch,
                  u: url,
                  onHashPct: hash
                };
                BeagleMonitor_logger.log("Arrival log data: ", body);
                return _context7.abrupt("return", new Blob([JSON.stringify(body)], HEADERS));
              case 11:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));
      function packageArrivalLogData() {
        return _packageArrivalLogData.apply(this, arguments);
      }
      return packageArrivalLogData;
    }()
  }, {
    key: "packageMainLogData",
    value: function () {
      var _packageMainLogData = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee8() {
        var body, _i, _Object$entries, _Object$entries$_i, key, value;
        return regenerator_default().wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                body = {};
                if (window.beagleInfoLayer) {
                  _context8.next = 3;
                  break;
                }
                return _context8.abrupt("return", null);
              case 3:
                for (_i = 0, _Object$entries = Object.entries(window.beagleInfoLayer); _i < _Object$entries.length; _i++) {
                  _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), key = _Object$entries$_i[0], value = _Object$entries$_i[1];
                  if (!key.startsWith("_") && value !== null) body[key] = value;
                }
                body.lc = 1;
                return _context8.abrupt("return", new Blob([JSON.stringify(body)], HEADERS));
              case 6:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));
      function packageMainLogData() {
        return _packageMainLogData.apply(this, arguments);
      }
      return packageMainLogData;
    }()
  }, {
    key: "packageIncrementalLogData",
    value: function () {
      var _packageIncrementalLogData = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee9() {
        var _yield$Promise$all3, _yield$Promise$all4, a, e, f, s, m, cookieGaId, view_epoch, body;
        return regenerator_default().wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return Promise.all([getFromBeagleInfoLayer("a"), getFromBeagleInfoLayer("e"), getFromBeagleInfoLayer("f"), getFromBeagleInfoLayer("s"), getFromBeagleInfoLayer("m"), getFromBeagleInfoLayer("cookieGaId"), getFromBeagleInfoLayer("view_epoch")]);
              case 2:
                _yield$Promise$all3 = _context9.sent;
                _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 7);
                a = _yield$Promise$all4[0];
                e = _yield$Promise$all4[1];
                f = _yield$Promise$all4[2];
                s = _yield$Promise$all4[3];
                m = _yield$Promise$all4[4];
                cookieGaId = _yield$Promise$all4[5];
                view_epoch = _yield$Promise$all4[6];
                body = {
                  cookieGaId: cookieGaId,
                  lc: 2,
                  view_epoch: view_epoch,
                  a: a,
                  e: e,
                  f: f,
                  s: s,
                  m: m
                };
                BeagleMonitor_logger.log("Update log data: ", body);
                return _context9.abrupt("return", new Blob([JSON.stringify(body)], HEADERS));
              case 14:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));
      function packageIncrementalLogData() {
        return _packageIncrementalLogData.apply(this, arguments);
      }
      return packageIncrementalLogData;
    }()
  }, {
    key: "initializeExitEventListeners",
    value: function initializeExitEventListeners() {
      var _this = this;
      var visibilityChangeTimeout = null;
      BeagleMonitor_logger.log("Initializing exit event listener");
      window.addEventListener("beforeunload", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee10() {
        return regenerator_default().wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                BeagleMonitor_logger.log("In beforeunload event");
                clearTimeout(visibilityChangeTimeout);
                _context10.next = 4;
                return _this.handleCloseEvent();
              case 4:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      })), {
        capture: true
      });
      window.addEventListener("pagehide", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee11() {
        return regenerator_default().wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                BeagleMonitor_logger.log("In pagehide event");
                clearTimeout(visibilityChangeTimeout);
                _context11.next = 4;
                return _this.handleCloseEvent();
              case 4:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      })), {
        capture: true
      });
      window.addEventListener("visibilitychange", function () {
        if (window.top.document.visibilityState === "hidden") {
          // If page is not visible and doesn't become visible within 30 seconds, send logs
          visibilityChangeTimeout = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee12() {
            return regenerator_default().wrap(function _callee12$(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    BeagleMonitor_logger.log("In timeout");
                    _context12.next = 3;
                    return _this.handleCloseEvent();
                  case 3:
                  case "end":
                    return _context12.stop();
                }
              }
            }, _callee12);
          })), 30000);
          return;
        }
        // Clear timeout when page is visible to make sure we send the latest logs possible
        clearTimeout(visibilityChangeTimeout);
        visibilityChangeTimeout = null;
      }, {
        capture: true
      });
    }
  }, {
    key: "queueLogs",
    value: function queueLogs(logData) {
      if (!navigator.sendBeacon || typeof navigator.sendBeacon !== "function") {
        fetch(LOG_API_URL, logData);
        return;
      }
      var queued = navigator.sendBeacon(LOG_API_URL, logData);
      var queueInterval = setInterval(function () {
        if (!queued) queued = navigator.sendBeacon(LOG_API_URL, logData);else {
          clearInterval(queueInterval);
          BeagleMonitor_logger.log("Logs queued successfully");
        }
      }, 10);
      if (queued) return;
      setTimeout(function () {
        clearInterval(queueInterval);
        if (!queued) {
          BeagleMonitor_logger.log("Logs not queued");
        }
      }, 1000);
    }
  }]);
  return Monitor;
}();
/* harmony default export */ var BeagleMonitor = (Monitor);
;// CONCATENATED MODULE: ./src/BeagleTreatmentRepository/index.js




function BeagleTreatmentRepository_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = BeagleTreatmentRepository_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function BeagleTreatmentRepository_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return BeagleTreatmentRepository_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return BeagleTreatmentRepository_arrayLikeToArray(o, minLen); }
function BeagleTreatmentRepository_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }




var BeagleTreatmentRepository_logger = new src_logger("BeagleTreatmentRepository");
var TreatmentRepository = /*#__PURE__*/function () {
  function TreatmentRepository(body) {
    _classCallCheck(this, TreatmentRepository);
    var treatments = body.treatments,
      treatmentWeights = body.treatmentWeights;
    this.treatments = treatments;
    this.treatmentWeights = treatmentWeights;
    this.currentPageType = null;
  }
  _createClass(TreatmentRepository, [{
    key: "getMatchedTreatments",
    value: function () {
      var _getMatchedTreatments = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee(debugMode) {
        var _CPT,
          _this = this;
        var CPT, matchedTreatments, treatments, treatmentWeights, userSegment, userSegmentWeights, _iterator, _step, _userSegmentWeights$t, treatment, segmentedWeight, _userSegmentWeights$t2, _iterator2, _step2, action, _i, _Object$keys, _userSegmentWeights$t3, _userSegmentWeights$t4, variantKey;
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return getFromBeagleInfoLayer("__eRules.PageType", true);
              case 2:
                CPT = _context.sent;
                CPT = ((_CPT = CPT) === null || _CPT === void 0 ? void 0 : _CPT[0]) || null;
                if (CPT) {
                  _context.next = 6;
                  break;
                }
                return _context.abrupt("return", []);
              case 6:
                this.currentPageType = CPT;
                matchedTreatments = window.sessionStorage.getItem(SESSION_STORAGE_KEYS.MATCHED_TREATMENTS);
                if (!matchedTreatments) {
                  _context.next = 22;
                  break;
                }
                _context.prev = 9;
                _context.next = 12;
                return JSON.parse(matchedTreatments);
              case 12:
                matchedTreatments = _context.sent;
                matchedTreatments = matchedTreatments.filter(function (mt) {
                  return _this.checkPageType(mt.pageTypes);
                });
                BeagleTreatmentRepository_logger.log("".concat(matchedTreatments.length, " treatments user segment matched"));
                return _context.abrupt("return", matchedTreatments);
              case 18:
                _context.prev = 18;
                _context.t0 = _context["catch"](9);
                BeagleTreatmentRepository_logger.failed("Error getting matched robots:", _context.t0.message);
                return _context.abrupt("return", []);
              case 22:
                matchedTreatments = [];
                treatments = this.treatments, treatmentWeights = this.treatmentWeights;
                _context.next = 26;
                return getFromBeagleInfoLayer("s");
              case 26:
                userSegment = _context.sent;
                if (userSegment) {
                  _context.next = 29;
                  break;
                }
                return _context.abrupt("return", null);
              case 29:
                if (!treatmentWeights) {
                  _context.next = 76;
                  break;
                }
                userSegmentWeights = treatmentWeights[userSegment];
                if (userSegmentWeights) {
                  _context.next = 33;
                  break;
                }
                return _context.abrupt("return", []);
              case 33:
                _iterator = BeagleTreatmentRepository_createForOfIteratorHelper(treatments);
                _context.prev = 34;
                _iterator.s();
              case 36:
                if ((_step = _iterator.n()).done) {
                  _context.next = 68;
                  break;
                }
                treatment = _step.value;
                segmentedWeight = (_userSegmentWeights$t = userSegmentWeights[treatment.id]) === null || _userSegmentWeights$t === void 0 ? void 0 : _userSegmentWeights$t.weight;
                if (segmentedWeight) {
                  _context.next = 43;
                  break;
                }
                if (treatment.dependant_on_treatment) {
                  segmentedWeight = (_userSegmentWeights$t2 = userSegmentWeights[treatment.dependant_on_treatment]) === null || _userSegmentWeights$t2 === void 0 ? void 0 : _userSegmentWeights$t2.weight;
                } else if (debugMode && debugMode === 1) segmentedWeight = 100;
                if (segmentedWeight) {
                  _context.next = 43;
                  break;
                }
                return _context.abrupt("continue", 66);
              case 43:
                treatment.weight = segmentedWeight;
                if (treatment.actions.some(function (a) {
                  return a.variants;
                })) {
                  _context.next = 47;
                  break;
                }
                matchedTreatments.push(treatment);
                return _context.abrupt("continue", 66);
              case 47:
                _iterator2 = BeagleTreatmentRepository_createForOfIteratorHelper(treatment.actions);
                _context.prev = 48;
                _iterator2.s();
              case 50:
                if ((_step2 = _iterator2.n()).done) {
                  _context.next = 57;
                  break;
                }
                action = _step2.value;
                if (action.variants) {
                  _context.next = 54;
                  break;
                }
                return _context.abrupt("continue", 55);
              case 54:
                for (_i = 0, _Object$keys = Object.keys(action.variants); _i < _Object$keys.length; _i++) {
                  variantKey = _Object$keys[_i];
                  if ((_userSegmentWeights$t3 = userSegmentWeights[treatment.id]) !== null && _userSegmentWeights$t3 !== void 0 && _userSegmentWeights$t3.variants && (_userSegmentWeights$t4 = userSegmentWeights[treatment.id]) !== null && _userSegmentWeights$t4 !== void 0 && _userSegmentWeights$t4.variants[variantKey]) {
                    action.variants[variantKey].weight = userSegmentWeights[treatment.id].variants[variantKey];
                  }
                }
              case 55:
                _context.next = 50;
                break;
              case 57:
                _context.next = 62;
                break;
              case 59:
                _context.prev = 59;
                _context.t1 = _context["catch"](48);
                _iterator2.e(_context.t1);
              case 62:
                _context.prev = 62;
                _iterator2.f();
                return _context.finish(62);
              case 65:
                matchedTreatments.push(treatment);
              case 66:
                _context.next = 36;
                break;
              case 68:
                _context.next = 73;
                break;
              case 70:
                _context.prev = 70;
                _context.t2 = _context["catch"](34);
                _iterator.e(_context.t2);
              case 73:
                _context.prev = 73;
                _iterator.f();
                return _context.finish(73);
              case 76:
                window.sessionStorage.setItem(SESSION_STORAGE_KEYS.MATCHED_TREATMENTS, JSON.stringify(matchedTreatments));
                _context.next = 79;
                return this.getMatchedTreatments(debugMode);
              case 79:
                return _context.abrupt("return", _context.sent);
              case 80:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[9, 18], [34, 70, 73, 76], [48, 59, 62, 65]]);
      }));
      function getMatchedTreatments(_x) {
        return _getMatchedTreatments.apply(this, arguments);
      }
      return getMatchedTreatments;
    }()
  }, {
    key: "checkPageType",
    value: function checkPageType(pageTypes) {
      var currentPageType = this.currentPageType;
      if (pageTypes === null || pageTypes === undefined) return true;
      if (!Array.isArray(pageTypes)) {
        BeagleTreatmentRepository_logger.failed("Page Types should be an array");
        return false;
      }
      if (pageTypes[0].startsWith("!")) {
        pageTypes = pageTypes.map(function (pt) {
          return pt.substr(1);
        });
        return !pageTypes.includes(currentPageType);
      }
      return pageTypes.includes(currentPageType);
    }
  }], [{
    key: "getTreatments",
    value: function () {
      var _getTreatments = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {
        var TREATMENTS, treatmentsObj, treatments, timestamp, treatmentWithTimestamp, elapsedHours, _treatmentWithTimestamp;
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                BeagleTreatmentRepository_logger.log("Loading treatments");
                TREATMENTS = LOCAL_STORAGE_KEYS.TREATMENTS;
                treatmentsObj = JSON.parse(window.localStorage.getItem(TREATMENTS));
                treatments = treatmentsObj === null || treatmentsObj === void 0 ? void 0 : treatmentsObj.treatments;
                timestamp = treatmentsObj === null || treatmentsObj === void 0 ? void 0 : treatmentsObj.timestamp;
                if (!(!treatments || !timestamp)) {
                  _context2.next = 17;
                  break;
                }
                BeagleTreatmentRepository_logger.failed("Treatments not found in local storage");
                _context2.next = 9;
                return fetchTreatments();
              case 9:
                treatments = _context2.sent;
                if (treatments) {
                  _context2.next = 13;
                  break;
                }
                BeagleTreatmentRepository_logger.failed("Failed to fetch treatments");
                return _context2.abrupt("return", null);
              case 13:
                treatmentWithTimestamp = {
                  timestamp: Date.now(),
                  treatments: treatments
                };
                window.localStorage.setItem(TREATMENTS, JSON.stringify(treatmentWithTimestamp));
                window.sessionStorage.removeItem(SESSION_STORAGE_KEYS.MATCHED_TREATMENTS);
                return _context2.abrupt("return", treatments);
              case 17:
                if (!timestamp) {
                  _context2.next = 31;
                  break;
                }
                elapsedHours = (Date.now() - timestamp) / (1000 * 3600);
                if (!(elapsedHours > LOCAL_STORAGE_TTL_HOURS)) {
                  _context2.next = 31;
                  break;
                }
                BeagleTreatmentRepository_logger.failed("Treatments are expired");
                _context2.next = 23;
                return fetchTreatments();
              case 23:
                treatments = _context2.sent;
                if (treatments) {
                  _context2.next = 27;
                  break;
                }
                BeagleTreatmentRepository_logger.failed("Failed to fetch treatments");
                return _context2.abrupt("return", null);
              case 27:
                _treatmentWithTimestamp = {
                  timestamp: Date.now(),
                  treatments: treatments
                };
                window.localStorage.setItem(TREATMENTS, JSON.stringify(_treatmentWithTimestamp));
                window.sessionStorage.removeItem(SESSION_STORAGE_KEYS.MATCHED_TREATMENTS);
                return _context2.abrupt("return", treatments);
              case 31:
                BeagleTreatmentRepository_logger.success("Treatments are loaded from local storage");
                return _context2.abrupt("return", treatments);
              case 33:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      function getTreatments() {
        return _getTreatments.apply(this, arguments);
      }
      return getTreatments;
    }()
  }, {
    key: "getTreatmentWeights",
    value: function () {
      var _getTreatmentWeights = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3() {
        var weightsObj, elapsedHours;
        return regenerator_default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                weightsObj = window.localStorage.getItem(LOCAL_STORAGE_KEYS.WEIGHTS);
                if (!weightsObj) {
                  _context3.next = 8;
                  break;
                }
                weightsObj = JSON.parse(weightsObj);
                if (!weightsObj.timestamp) {
                  _context3.next = 8;
                  break;
                }
                elapsedHours = (Date.now() - weightsObj.timestamp) / (1000 * 3600);
                if (!(elapsedHours < LOCAL_STORAGE_TTL_HOURS)) {
                  _context3.next = 8;
                  break;
                }
                return _context3.abrupt("return", weightsObj.weights);
              case 8:
                _context3.next = 10;
                return fetchTreatmentWeights();
              case 10:
                weightsObj = _context3.sent;
                if (weightsObj) {
                  _context3.next = 14;
                  break;
                }
                BeagleTreatmentRepository_logger.failed("Failed to fetch weights");
                return _context3.abrupt("return", null);
              case 14:
                weightsObj = {
                  weights: weightsObj,
                  timestamp: Date.now()
                };
                window.localStorage.setItem(LOCAL_STORAGE_KEYS.WEIGHTS, JSON.stringify(weightsObj));
                return _context3.abrupt("return", weightsObj.weights);
              case 19:
                _context3.prev = 19;
                _context3.t0 = _context3["catch"](0);
                BeagleTreatmentRepository_logger.warn(_context3.t0.message);
                return _context3.abrupt("return", null);
              case 23:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, null, [[0, 19]]);
      }));
      function getTreatmentWeights() {
        return _getTreatmentWeights.apply(this, arguments);
      }
      return getTreatmentWeights;
    }()
  }]);
  return TreatmentRepository;
}();
/* harmony default export */ var BeagleTreatmentRepository = (TreatmentRepository);
;// CONCATENATED MODULE: ./src/stringUtils.js
var replaceAll = function replaceAll(str, find) {
  var replace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
  if (!str) return "";
  var index = str.indexOf(find);
  if (index < 0) return str;
  while (str.indexOf(find) >= 0) {
    var _index = str.indexOf(find);
    str = (_index > 0 ? str.substring(0, _index) : "") + replace + str.substring(_index + find.length);
  }
  return str;
};
var turkishToLower = function turkishToLower(str) {
  if (!str || typeof str !== "string") return str;
  var string = str;
  var letters = {
    "İ": "i",
    "I": "ı",
    "Ş": "ş",
    "Ğ": "ğ",
    "Ü": "ü",
    "Ö": "ö",
    "Ç": "ç"
  };
  string = string.replace(/(([İIŞĞÜÇÖ]))/g, function (letter) {
    return letters[letter];
  });
  return string.toLowerCase();
};
;// CONCATENATED MODULE: ./src/BeagleApplyActions/replace-utils.js




function replace_utils_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = replace_utils_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function replace_utils_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return replace_utils_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return replace_utils_arrayLikeToArray(o, minLen); }
function replace_utils_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }



var replace_utils_logger = new src_logger("ReplaceUtils");
var replacer = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee(value, replaceFn) {
    var _iterator, _step, _step$value, i, val, currentReplaceFn, replaceVal, _iterator2, _step2, rFn, _replaceVal, _replaceVal2;
    return regenerator_default().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!Array.isArray(value)) {
              _context.next = 27;
              break;
            }
            _iterator = replace_utils_createForOfIteratorHelper(value.entries());
            _context.prev = 2;
            _iterator.s();
          case 4:
            if ((_step = _iterator.n()).done) {
              _context.next = 17;
              break;
            }
            _step$value = _slicedToArray(_step.value, 2), i = _step$value[0], val = _step$value[1];
            currentReplaceFn = Array.isArray(replaceFn) ? replaceFn[i] : replaceFn || "";
            if (!(_typeof(currentReplaceFn) === "object")) {
              _context.next = 14;
              break;
            }
            _context.next = 10;
            return replaceObjectExtractor(currentReplaceFn);
          case 10:
            replaceVal = _context.sent;
            value[i] = replaceAll(val, "{{REPLACE}}", replaceVal);
            _context.next = 15;
            break;
          case 14:
            value[i] = replaceFnExecutor(currentReplaceFn, val);
          case 15:
            _context.next = 4;
            break;
          case 17:
            _context.next = 22;
            break;
          case 19:
            _context.prev = 19;
            _context.t0 = _context["catch"](2);
            _iterator.e(_context.t0);
          case 22:
            _context.prev = 22;
            _iterator.f();
            return _context.finish(22);
          case 25:
            _context.next = 61;
            break;
          case 27:
            if (!Array.isArray(replaceFn)) {
              _context.next = 53;
              break;
            }
            _iterator2 = replace_utils_createForOfIteratorHelper(replaceFn);
            _context.prev = 29;
            _iterator2.s();
          case 31:
            if ((_step2 = _iterator2.n()).done) {
              _context.next = 43;
              break;
            }
            rFn = _step2.value;
            if (!(_typeof(rFn) === "object")) {
              _context.next = 40;
              break;
            }
            _context.next = 36;
            return replaceObjectExtractor(rFn);
          case 36:
            _replaceVal = _context.sent;
            value = value.replace("{{REPLACE}}", _replaceVal);
            _context.next = 41;
            break;
          case 40:
            value = replaceFnExecutor(rFn, value, true);
          case 41:
            _context.next = 31;
            break;
          case 43:
            _context.next = 48;
            break;
          case 45:
            _context.prev = 45;
            _context.t1 = _context["catch"](29);
            _iterator2.e(_context.t1);
          case 48:
            _context.prev = 48;
            _iterator2.f();
            return _context.finish(48);
          case 51:
            _context.next = 61;
            break;
          case 53:
            if (!(_typeof(replaceFn) === "object")) {
              _context.next = 60;
              break;
            }
            _context.next = 56;
            return replaceObjectExtractor(replaceFn);
          case 56:
            _replaceVal2 = _context.sent;
            value = replaceAll(value, "{{REPLACE}}", _replaceVal2);
            _context.next = 61;
            break;
          case 60:
            value = replaceFnExecutor(replaceFn, value);
          case 61:
            return _context.abrupt("return", value);
          case 62:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 19, 22, 25], [29, 45, 48, 51]]);
  }));
  return function replacer(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
function replaceFnExecutor(replaceFn, value) {
  var single = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (replaceFn && value.includes("{{REPLACE}}")) {
    replace_utils_logger.log("Executing replace function: ", replaceFn);
    var replaceFunction = Function(replaceFn);
    if (single) return value.replace("{{REPLACE}}", replaceFunction());
    return replaceAll(value, "{{REPLACE}}", replaceFunction());
  }
  return value;
}
function replaceObjectExtractor(_x3) {
  return _replaceObjectExtractor.apply(this, arguments);
}
function _replaceObjectExtractor() {
  _replaceObjectExtractor = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2(replaceFn) {
    var storage, key, keyFallback, type, replaceVal, _replaceVal3;
    return regenerator_default().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            storage = replaceFn.storage, key = replaceFn.key, keyFallback = replaceFn.keyFallback, type = replaceFn.type;
            _context2.t0 = storage;
            _context2.next = _context2.t0 === "session" ? 4 : _context2.t0 === "info-layer" ? 18 : 26;
            break;
          case 4:
            replaceVal = null;
            replaceVal = window.sessionStorage.getItem(key);
            if (!replaceVal) replaceVal = window.sessionStorage.getItem(keyFallback);
            if (!type) {
              _context2.next = 17;
              break;
            }
            _context2.prev = 8;
            replaceVal = JSON.parse(replaceVal);
            replaceVal = replaceVal[replaceVal.length - 1][type];
            _context2.next = 17;
            break;
          case 13:
            _context2.prev = 13;
            _context2.t1 = _context2["catch"](8);
            replace_utils_logger.failed("Could not parse ".concat(replaceVal));
            return _context2.abrupt("return", null);
          case 17:
            return _context2.abrupt("return", replaceVal);
          case 18:
            _context2.next = 20;
            return getFromBeagleInfoLayer(key);
          case 20:
            _replaceVal3 = _context2.sent;
            if (_replaceVal3) {
              _context2.next = 25;
              break;
            }
            _context2.next = 24;
            return getFromBeagleInfoLayer(keyFallback);
          case 24:
            _replaceVal3 = _context2.sent;
          case 25:
            return _context2.abrupt("return", _replaceVal3);
          case 26:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[8, 13]]);
  }));
  return _replaceObjectExtractor.apply(this, arguments);
}
/* harmony default export */ var replace_utils = (replacer);
;// CONCATENATED MODULE: ./src/GlovProductInfoRepository/store.config.js
var store_config_config = {
  dbName: "beagle_cache",
  version: 1,
  store: {
    name: "infoCache",
    indexes: [{
      name: "ix_sku",
      fields: "sku"
    }],
    options: {
      keyPath: "sku"
    }
  }
};
/* harmony default export */ var GlovProductInfoRepository_store_config = (store_config_config);
;// CONCATENATED MODULE: ./src/GlovProductInfoRepository/index.js





function GlovProductInfoRepository_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = GlovProductInfoRepository_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function GlovProductInfoRepository_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return GlovProductInfoRepository_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GlovProductInfoRepository_arrayLikeToArray(o, minLen); }
function GlovProductInfoRepository_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }




var GlovProductInfoRepository_logger = new src_logger("GlovProductInfoRepository");
var GlovProductInfoRepository = /*#__PURE__*/function () {
  function GlovProductInfoRepository() {
    _classCallCheck(this, GlovProductInfoRepository);
    this.indexedDB = null;
    this.init();
  }
  _createClass(GlovProductInfoRepository, [{
    key: "init",
    value: function init() {
      var _window$top$indexedDB,
        _this = this;
      GlovProductInfoRepository_logger.log("Initializing indexedDB");
      var openRequest = (_window$top$indexedDB = window.top.indexedDB) === null || _window$top$indexedDB === void 0 ? void 0 : _window$top$indexedDB.open(GlovProductInfoRepository_store_config.dbName, GlovProductInfoRepository_store_config.version);
      if (!openRequest) {
        throw new Error("indexeddb is not supported");
      }
      openRequest.onupgradeneeded = function (event) {
        switch (event.oldVersion) {
          case 0:
            break;
          default:
            // TODO upgrade existing db instead of delete and create from scratch
            try {
              openRequest.result.deleteObjectStore(GlovProductInfoRepository_store_config.store.name);
            } catch (err) {
              GlovProductInfoRepository_logger.failed("Could not delete outdated database", err.message);
            }
            break;
        }
        try {
          var _config$store$indexes;
          var store = openRequest.result.createObjectStore(GlovProductInfoRepository_store_config.store.name, GlovProductInfoRepository_store_config.store.options);
          if (((_config$store$indexes = GlovProductInfoRepository_store_config.store.indexes) === null || _config$store$indexes === void 0 ? void 0 : _config$store$indexes.length) > 0) {
            var _iterator = GlovProductInfoRepository_createForOfIteratorHelper(GlovProductInfoRepository_store_config.store.indexes),
              _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var idx = _step.value;
                store.createIndex(idx.name, idx.fields);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        } catch (err) {
          GlovProductInfoRepository_logger.failed("Could not create object store on database", err.message);
        }
      };
      openRequest.onerror = function () {
        throw new Error("Error initializing beagle_cache indexed DB", openRequest.error);
      };
      openRequest.onsuccess = function () {
        _this.indexedDB = openRequest.result;
      };
    }
  }, {
    key: "getConnection",
    value: function getConnection() {
      var _this2 = this;
      return new Promise(function (resolve, reject) {
        var interval = setInterval(function () {
          if (_this2.indexedDB) {
            clearInterval(interval);
            resolve();
          }
        }, 25);
        setTimeout(function () {
          if (!_this2.indexedDB) {
            clearInterval(interval);
            reject(new Error("IndexedDB not initialized within the allotted time"));
          }
        }, 1000);
      });
    }
  }, {
    key: "initTransaction",
    value: function () {
      var _initTransaction = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
        var readwrite,
          tx,
          _args = arguments;
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                readwrite = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;
                _context.next = 3;
                return this.getConnection();
              case 3:
                tx = this.indexedDB.transaction(GlovProductInfoRepository_store_config.store.name, readwrite ? "readwrite" : "readonly");
                return _context.abrupt("return", tx.objectStore(GlovProductInfoRepository_store_config.store.name));
              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function initTransaction() {
        return _initTransaction.apply(this, arguments);
      }
      return initTransaction;
    }()
  }, {
    key: "save",
    value: function () {
      var _save = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2(payload) {
        var store, timestamp, _iterator2, _step2, load;
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.initTransaction(true);
              case 2:
                store = _context2.sent;
                timestamp = Math.round(Date.now() / 1000);
                if (Array.isArray(payload)) {
                  _iterator2 = GlovProductInfoRepository_createForOfIteratorHelper(payload);
                  try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                      load = _step2.value;
                      load.timestamp = timestamp;
                      store.put(load);
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }
                } else {
                  payload.timestamp = timestamp;
                  store.put(payload);
                }
              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function save(_x) {
        return _save.apply(this, arguments);
      }
      return save;
    }()
  }, {
    key: "clear",
    value: function () {
      var _clear = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3() {
        var _this3 = this;
        return regenerator_default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", new Promise(function (resolve) {
                  _this3.initTransaction(true).then(function (store) {
                    var clearRequest = store.clear();
                    clearRequest.onsuccess = function () {
                      resolve();
                    };
                    clearRequest.onerror = function () {
                      GlovProductInfoRepository_logger.failed("Error clearing store: ".concat(store.name));
                      resolve(null);
                    };
                  });
                }));
              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));
      function clear() {
        return _clear.apply(this, arguments);
      }
      return clear;
    }()
  }, {
    key: "get",
    value: function () {
      var _get = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4(sku) {
        var _this4 = this;
        return regenerator_default().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", new Promise(function (resolve) {
                  _this4.initTransaction().then(function (store) {
                    var getRequest = store.get(sku);
                    getRequest.onsuccess = function () {
                      var result = getRequest.result;
                      GlovProductInfoRepository_logger.log("Found value ".concat(result, " for key ").concat(sku));
                      resolve(result);
                    };
                    getRequest.onerror = function () {
                      GlovProductInfoRepository_logger.failed("Error getting value for key: ".concat(sku), getRequest.onerror);
                      resolve(null);
                    };
                  });
                }));
              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));
      function get(_x2) {
        return _get.apply(this, arguments);
      }
      return get;
    }()
  }, {
    key: "count",
    value: function () {
      var _count = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee5() {
        var _this5 = this;
        return regenerator_default().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt("return", new Promise(function (resolve) {
                  _this5.initTransaction().then(function (store) {
                    var countRequest = store.count();
                    countRequest.onsuccess = function () {
                      var result = countRequest.result;
                      GlovProductInfoRepository_logger.log("Counted ".concat(result, " entries"));
                      resolve(result);
                    };
                    countRequest.onerror = function () {
                      GlovProductInfoRepository_logger.failed("Error counting entries: ", countRequest.onerror);
                      resolve(null);
                    };
                  });
                }));
              case 1:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));
      function count() {
        return _count.apply(this, arguments);
      }
      return count;
    }()
  }, {
    key: "getCursor",
    value: function () {
      var _getCursor = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee6() {
        var _this6 = this;
        return regenerator_default().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                return _context6.abrupt("return", new Promise(function (resolve) {
                  _this6.initTransaction().then(function (store) {
                    var cursorRequest = store.openCursor();
                    cursorRequest.onsuccess = function (event) {
                      resolve(event.target.result);
                    };
                    cursorRequest.onerror = function () {
                      GlovProductInfoRepository_logger.failed("Error getting cursor", cursorRequest.onerror);
                      resolve(null);
                    };
                  });
                }));
              case 1:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));
      function getCursor() {
        return _getCursor.apply(this, arguments);
      }
      return getCursor;
    }()
  }, {
    key: "persistProductInfo",
    value: function () {
      var _persistProductInfo = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee7() {
        var existingProdInfo, cursor, timestamp, elapsedSeconds, productInfoPromise, clearPromise, _yield$Promise$all, _yield$Promise$all2, productInfoArray;
        return regenerator_default().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                addToBeagleInfoLayer("m", "check-existing-prod-info");
                _context7.next = 3;
                return this.count();
              case 3:
                existingProdInfo = _context7.sent;
                if (!existingProdInfo) {
                  _context7.next = 14;
                  break;
                }
                GlovProductInfoRepository_logger.log("Existing product info found");
                _context7.next = 8;
                return this.getCursor();
              case 8:
                cursor = _context7.sent;
                timestamp = cursor.value.timestamp;
                elapsedSeconds = Date.now() / 1000 - timestamp; // Re-fetch product info once a day
                if (!(elapsedSeconds < 86400)) {
                  _context7.next = 13;
                  break;
                }
                return _context7.abrupt("return");
              case 13:
                GlovProductInfoRepository_logger.log("Existing product info is expired");
              case 14:
                addToBeagleInfoLayer("m", "fetching-prod-info");
                productInfoPromise = fetchProductInfo();
                clearPromise = this.clear();
                _context7.next = 19;
                return Promise.all([productInfoPromise, clearPromise]);
              case 19:
                _yield$Promise$all = _context7.sent;
                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 1);
                productInfoArray = _yield$Promise$all2[0];
                if (!(!productInfoArray || !productInfoArray.length)) {
                  _context7.next = 24;
                  break;
                }
                return _context7.abrupt("return");
              case 24:
                addToBeagleInfoLayer("m", "fetched-prod-info");
                _context7.next = 27;
                return this.save(this.preparePayloads(productInfoArray));
              case 27:
                addToBeagleInfoLayer("m", "persisted-prod-info");
              case 28:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));
      function persistProductInfo() {
        return _persistProductInfo.apply(this, arguments);
      }
      return persistProductInfo;
    }()
  }, {
    key: "preparePayloads",
    value: function preparePayloads(productInfoArray) {
      var payloads = [];
      var fieldNames = productInfoArray.shift();
      fieldNames.shift();
      var _iterator3 = GlovProductInfoRepository_createForOfIteratorHelper(productInfoArray),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var info = _step3.value;
          var payload = {
            sku: info.shift()
          };
          for (var i = 0; i < fieldNames.length; i++) {
            payload[fieldNames[i]] = info[i] || 0;
          }
          payloads.push(payload);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return payloads;
    }
  }]);
  return GlovProductInfoRepository;
}();
/* harmony default export */ var src_GlovProductInfoRepository = (GlovProductInfoRepository);
;// CONCATENATED MODULE: ./src/GlovProductInfoRepository/store.js

var Store = function () {
  var instance = null;
  return {
    getInstance: function getInstance() {
      if (instance === null) {
        instance = new src_GlovProductInfoRepository();
        // Hide the constructor so the returned object can't be new'd...
        instance.constructor = null;
      }
      return instance;
    }
  };
}();
/* harmony default export */ var store = (Store);
;// CONCATENATED MODULE: ./src/BeagleApplyActions/action-condition-util.js





var action_condition_util_logger = new src_logger("ActionConditionUtils");
var checkActionCondition = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee(condition) {
    var eligibleElements, attribute, inner_condition, operator, selector, type, value, chain, conditionElements, _i, _conditionElements, element;
    return regenerator_default().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            action_condition_util_logger.log("Action condition found: ", condition);
            eligibleElements = [];
            attribute = condition.attribute, inner_condition = condition.inner_condition, operator = condition.operator, selector = condition.selector, type = condition.type, value = condition.value, chain = condition.chain;
            conditionElements = Array.from(window.top.document.querySelectorAll(selector));
            _i = 0, _conditionElements = conditionElements;
          case 5:
            if (!(_i < _conditionElements.length)) {
              _context.next = 14;
              break;
            }
            element = _conditionElements[_i];
            _context.next = 9;
            return actionConditionChecker(element, type, operator, attribute, inner_condition, value, chain);
          case 9:
            if (!_context.sent) {
              _context.next = 11;
              break;
            }
            eligibleElements.push($(element));
          case 11:
            _i++;
            _context.next = 5;
            break;
          case 14:
            return _context.abrupt("return", eligibleElements);
          case 15:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return function checkActionCondition(_x) {
    return _ref.apply(this, arguments);
  };
}();
var actionConditionChecker = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2(element, type, operator, attribute, inner_condition, value, chain) {
    var elementSku, productInfo, runTimeValue, res, _runTimeValue, _res;
    return regenerator_default().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.t0 = type;
            _context2.next = _context2.t0 === "productInfoLookup" ? 3 : 20;
            break;
          case 3:
            elementSku = element.getAttribute(attribute);
            _context2.next = 6;
            return store.getInstance().get(elementSku);
          case 6:
            productInfo = _context2.sent;
            runTimeValue = productInfo === null || productInfo === void 0 ? void 0 : productInfo[operator]; // runTimeValue may be 0
            if (!(runTimeValue === null || runTimeValue === undefined)) {
              _context2.next = 11;
              break;
            }
            action_condition_util_logger.failed("Product info is empty");
            return _context2.abrupt("return", false);
          case 11:
            if (conditionChecker(runTimeValue, inner_condition, value)) {
              _context2.next = 13;
              break;
            }
            return _context2.abrupt("return", false);
          case 13:
            if (!chain) {
              _context2.next = 19;
              break;
            }
            _context2.next = 16;
            return actionConditionChecker(element, chain.type, chain.operator, chain.attribute, chain.inner_condition, chain.value, chain.chain);
          case 16:
            res = _context2.sent;
            if (res) {
              _context2.next = 19;
              break;
            }
            return _context2.abrupt("return", false);
          case 19:
            return _context2.abrupt("break", 29);
          case 20:
            _runTimeValue = element.getAttribute(attribute);
            if (conditionChecker(_runTimeValue, inner_condition, value)) {
              _context2.next = 23;
              break;
            }
            return _context2.abrupt("return", false);
          case 23:
            if (!chain) {
              _context2.next = 29;
              break;
            }
            _context2.next = 26;
            return actionConditionChecker(element, chain.type, chain.operator, chain.attribute, chain.inner_condition, chain.value, chain.chain);
          case 26:
            _res = _context2.sent;
            if (_res) {
              _context2.next = 29;
              break;
            }
            return _context2.abrupt("return", false);
          case 29:
            return _context2.abrupt("return", true);
          case 30:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return function actionConditionChecker(_x2, _x3, _x4, _x5, _x6, _x7, _x8) {
    return _ref2.apply(this, arguments);
  };
}();
/* harmony default export */ var action_condition_util = (checkActionCondition);
// EXTERNAL MODULE: ./out/GlovAiClientSDK/bundle.js
var bundle = __webpack_require__(63);
;// CONCATENATED MODULE: ./src/BeagleApplyActions/index.js



function BeagleApplyActions_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = BeagleApplyActions_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function BeagleApplyActions_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return BeagleApplyActions_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return BeagleApplyActions_arrayLikeToArray(o, minLen); }
function BeagleApplyActions_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }









function applyActions(_x) {
  return _applyActions.apply(this, arguments);
}
function _applyActions() {
  _applyActions = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee8(actions) {
    var logger, POPUP_DISPLAY_FLAG, transformer, prepareDescElm, prepareFinalTitle, replaceWithVal, getProductInfo, handleDocumentTitleTabChange, handlePopupClick, handleModalClick, displayPopup, displayModal, createPopup, swapNodes, waitForJQuery, actionApplicator, result;
    return regenerator_default().wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            logger = new src_logger("BeagleApplyActions");
            POPUP_DISPLAY_FLAG = SESSION_STORAGE_KEYS.POPUP_DISPLAY_FLAG;
            transformer = /*#__PURE__*/function () {
              var _transformer = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee(action) {
                var element,
                  operator,
                  type,
                  applyEvent,
                  contentSelector,
                  selector,
                  selectorFallback,
                  mdCondition,
                  move_selector_1,
                  move_selector_2,
                  replaceFn,
                  pType,
                  attribute,
                  productInfoStorage,
                  value,
                  mc,
                  elm,
                  mobile,
                  _iterator,
                  _step,
                  event,
                  _yield$Promise$all,
                  _yield$Promise$all2,
                  r,
                  d,
                  styleChangesMap,
                  _iterator2,
                  _step2,
                  _event,
                  property,
                  propertyValue,
                  n1,
                  n2,
                  source,
                  destination,
                  res,
                  _i,
                  _Array$from,
                  _e$innerText,
                  e,
                  finalTitle,
                  descriptionElm,
                  _args = arguments;
                return regenerator_default().wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        element = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;
                        logger.log("Applying action: ", JSON.stringify(action));
                        operator = action.operator, type = action.type, applyEvent = action.applyEvent, contentSelector = action.contentSelector, selector = action.selector, selectorFallback = action.selectorFallback, mdCondition = action.mdCondition, move_selector_1 = action.move_selector_1, move_selector_2 = action.move_selector_2, replaceFn = action.replaceFn, pType = action.pType, attribute = action.attribute, productInfoStorage = action.productInfoStorage;
                        if (!(operator === "noop")) {
                          _context.next = 6;
                          break;
                        }
                        logger.failed("Noop Operator: No operation is applied on target ");
                        return _context.abrupt("return", true);
                      case 6:
                        value = action.value; // If an element is passed to transformer, selector is relative to passed element
                        element = element ? element.find(selector) : $(selector);
                        mc = mdCondition ? window.matchMedia(mdCondition).matches : true;
                        if (mc) {
                          _context.next = 12;
                          break;
                        }
                        logger.failed("Media condition mismatch: ", mdCondition);
                        return _context.abrupt("return", false);
                      case 12:
                        if (!(move_selector_1 && !move_selector_2 || move_selector_2 && !move_selector_1)) {
                          _context.next = 15;
                          break;
                        }
                        logger.failed("Both move selectors are required");
                        return _context.abrupt("return", false);
                      case 15:
                        if (!(move_selector_1 && move_selector_2)) {
                          _context.next = 24;
                          break;
                        }
                        if ($(move_selector_1).length) {
                          _context.next = 19;
                          break;
                        }
                        logger.failed("Move selector 1 not found: ", move_selector_1);
                        return _context.abrupt("return", false);
                      case 19:
                        if ($(move_selector_2).length) {
                          _context.next = 22;
                          break;
                        }
                        logger.failed("Move selector 2 not found: ", move_selector_2);
                        return _context.abrupt("return", false);
                      case 22:
                        _context.next = 39;
                        break;
                      case 24:
                        if (selector) {
                          _context.next = 29;
                          break;
                        }
                        logger.failed("Selector not specified");
                        return _context.abrupt("return", false);
                      case 29:
                        if (element.length) {
                          _context.next = 39;
                          break;
                        }
                        if (!(!$(selectorFallback).length && operator === "remove")) {
                          _context.next = 32;
                          break;
                        }
                        return _context.abrupt("return", true);
                      case 32:
                        if (!(selector !== "no-selector")) {
                          _context.next = 39;
                          break;
                        }
                        logger.failed("Selector not found: ", selector);
                        logger.log("Trying fallback selector: ", selectorFallback);
                        if (selectorFallback) element = $(selectorFallback);
                        if (element.length) {
                          _context.next = 39;
                          break;
                        }
                        logger.failed("Fallback selector not found");
                        return _context.abrupt("return", false);
                      case 39:
                        if (!replaceFn) {
                          _context.next = 43;
                          break;
                        }
                        _context.next = 42;
                        return replace_utils(value, replaceFn);
                      case 42:
                        value = _context.sent;
                      case 43:
                        if (!(operator === "remove")) {
                          _context.next = 47;
                          break;
                        }
                        if (element.length) {
                          logger.log("Removing: ", selector);
                          element.remove();
                        } else logger.log("Cannot found element with selector: ", selector);
                        _context.next = 234;
                        break;
                      case 47:
                        if (!(operator === "insert")) {
                          _context.next = 121;
                          break;
                        }
                        _context.t0 = type;
                        _context.next = _context.t0 === "before" ? 51 : _context.t0 === "after" ? 55 : _context.t0 === "append" ? 58 : _context.t0 === "modal" ? 61 : _context.t0 === "popup" ? 66 : 117;
                        break;
                      case 51:
                        logger.log("Inserting before: ", value);
                        if (String(value).includes("nd-add-to-win")) {
                          $(".nd-add-to-win").remove();
                        }
                        element.before(value);
                        return _context.abrupt("break", 119);
                      case 55:
                        logger.log("Inserting after: ", value);
                        element.after(value);
                        return _context.abrupt("break", 119);
                      case 58:
                        logger.log("Appending value: ", value);
                        element.append(value);
                        return _context.abrupt("break", 119);
                      case 61:
                        element.off("click");
                        createPopup(value, contentSelector, true);
                        elm = document.querySelector(selector);
                        elm.addEventListener("click", function (e) {
                          if (elm == e.target) {
                            e.stopPropagation();
                          }
                          displayModal(value, contentSelector);
                        }, true);
                        return _context.abrupt("break", 119);
                      case 66:
                        if (!(parseInt(sessionStorage.getItem(POPUP_DISPLAY_FLAG)) !== 0)) {
                          _context.next = 69;
                          break;
                        }
                        logger.log("Popup already displayed in session");
                        return _context.abrupt("break", 119);
                      case 69:
                        logger.log("Creating Popup: ", value);
                        if (!pType) {
                          _context.next = 74;
                          break;
                        }
                        _context.next = 73;
                        return getProductInfo(pType, value, productInfoStorage);
                      case 73:
                        value = _context.sent;
                      case 74:
                        createPopup(value, contentSelector);
                        if (!applyEvent) {
                          _context.next = 115;
                          break;
                        }
                        mobile = window.matchMedia(MOBILE_MEDIA_QUERY).matches;
                        _iterator = BeagleApplyActions_createForOfIteratorHelper(applyEvent);
                        _context.prev = 78;
                        _iterator.s();
                      case 80:
                        if ((_step = _iterator.n()).done) {
                          _context.next = 105;
                          break;
                        }
                        event = _step.value;
                        _context.t1 = event;
                        _context.next = _context.t1 === "exitIntent" ? 85 : _context.t1 === "copyIntent" ? 100 : 103;
                        break;
                      case 85:
                        logger.log("Adding exit intent listener");
                        if (!mobile) {
                          _context.next = 98;
                          break;
                        }
                        window.top.addEventListener("visibilitychange", displayPopup);
                        _context.next = 90;
                        return Promise.all([getFromBeagleInfoLayer("r", true), getFromBeagleInfoLayer("d", true)]);
                      case 90:
                        _yield$Promise$all = _context.sent;
                        _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);
                        r = _yield$Promise$all2[0];
                        d = _yield$Promise$all2[1];
                        if (typeof r === "string" && typeof d === "string" && !r.includes(d)) {
                          if (window.history && typeof window.history.pushState === "function") {
                            if (window.top.document.readyState !== "complete") {
                              window.top.addEventListener("load", function () {
                                if (window.history.state !== "bg_limbo") window.history.pushState("bg_limbo", "");
                                window.top.addEventListener("popstate", displayPopup, {
                                  once: true
                                });
                              });
                            } else {
                              if (window.history.state !== "bg_limbo") window.history.pushState("bg_limbo", "");
                              window.top.addEventListener("popstate", displayPopup, {
                                once: true
                              });
                            }
                          }
                        }
                        idleTimer(IDLE_TIMEOUT, displayPopup);
                        _context.next = 99;
                        break;
                      case 98:
                        window.top.document.documentElement.addEventListener("mouseleave", displayPopup, {
                          once: true
                        });
                      case 99:
                        return _context.abrupt("break", 103);
                      case 100:
                        logger.log("Adding copy intent listener");
                        window.top.document.documentElement.addEventListener("copy", displayPopup, {
                          once: true
                        });
                        return _context.abrupt("break", 103);
                      case 103:
                        _context.next = 80;
                        break;
                      case 105:
                        _context.next = 110;
                        break;
                      case 107:
                        _context.prev = 107;
                        _context.t2 = _context["catch"](78);
                        _iterator.e(_context.t2);
                      case 110:
                        _context.prev = 110;
                        _iterator.f();
                        return _context.finish(110);
                      case 113:
                        _context.next = 116;
                        break;
                      case 115:
                        // append popup to body after timeout expires
                        setTimeout(function () {
                          displayPopup();
                        }, timeout);
                      case 116:
                        return _context.abrupt("break", 119);
                      case 117:
                        logger.failed("Type: ".concat(type, " not found for operator: ").concat(operator));
                        return _context.abrupt("break", 119);
                      case 119:
                        _context.next = 234;
                        break;
                      case 121:
                        if (!(operator === "edit")) {
                          _context.next = 149;
                          break;
                        }
                        _context.t3 = type;
                        _context.next = _context.t3 === "text" ? 125 : _context.t3 === "html" ? 128 : _context.t3 === "styleApplicator" ? 131 : _context.t3 === "addClass" ? 136 : _context.t3 === "removeClass" ? 139 : _context.t3 === "documentTitle" ? 142 : 145;
                        break;
                      case 125:
                        logger.log("Editing text: ", value);
                        element.text(value);
                        return _context.abrupt("break", 147);
                      case 128:
                        logger.log("Editing html: ", value);
                        element.html(value);
                        return _context.abrupt("break", 147);
                      case 131:
                        logger.log("Applying style: ", value);
                        styleChangesMap = JSON.parse(value);
                        logger.log("Style Changes Map: ", styleChangesMap);
                        styleApplicator(element, styleChangesMap);
                        return _context.abrupt("break", 147);
                      case 136:
                        logger.log("addding class to ".concat(element, " named ").concat(value));
                        element.addClass(value);
                        return _context.abrupt("break", 147);
                      case 139:
                        logger.log("remove class from ".concat(element, " named ").concat(value));
                        element.removeClass(value);
                        return _context.abrupt("break", 147);
                      case 142:
                        logger.log("changing document title from ".concat(element, " to ").concat(value));
                        if (applyEvent) {
                          _iterator2 = BeagleApplyActions_createForOfIteratorHelper(applyEvent);
                          try {
                            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                              _event = _step2.value;
                              if (_event == "tabChange") {
                                (function () {
                                  logger.log("catching event tabchange..");
                                  var originalTitle = window.top.document.title;
                                  window.top.document.addEventListener("visibilitychange", function (e) {
                                    setTimeout(function () {
                                      handleDocumentTitleTabChange(e, value, originalTitle);
                                    }, 15000);
                                  });
                                })();
                              }
                            }
                          } catch (err) {
                            _iterator2.e(err);
                          } finally {
                            _iterator2.f();
                          }
                        }
                        return _context.abrupt("break", 147);
                      case 145:
                        logger.log("Unknown edit type: ", type);
                        return _context.abrupt("break", 147);
                      case 147:
                        _context.next = 234;
                        break;
                      case 149:
                        if (!(operator === "setattribute")) {
                          _context.next = 166;
                          break;
                        }
                        logger.log("Setting attribute: ", attribute, value);
                        _context.t4 = attribute;
                        _context.next = _context.t4 === "src" ? 154 : _context.t4 === "style" ? 156 : 160;
                        break;
                      case 154:
                        element.css("content", "url(".concat(value.trim(), ")"));
                        return _context.abrupt("break", 164);
                      case 156:
                        // eslint-disable-next-line no-case-declarations
                        property = value.split(":")[0].trim(); // eslint-disable-next-line no-case-declarations
                        propertyValue = value.split(":")[1].trim();
                        element.css(property, propertyValue, "!important");
                        return _context.abrupt("break", 164);
                      case 160:
                        if (value.includes("function")) {
                          value = Function(value);
                        }
                        element.attr(attribute, value);
                        logger.log("Unhandled attribute: Setting attribute: ", attribute, value);
                        return _context.abrupt("break", 164);
                      case 164:
                        _context.next = 234;
                        break;
                      case 166:
                        if (!(operator === "replace")) {
                          _context.next = 171;
                          break;
                        }
                        logger.log("Replacing: ", value);
                        element.replaceAll(value);
                        _context.next = 234;
                        break;
                      case 171:
                        if (!(operator === "swap")) {
                          _context.next = 178;
                          break;
                        }
                        logger.log("Swapping: ", move_selector_1, move_selector_2);
                        n1 = window.top.document.querySelector(move_selector_1);
                        n2 = window.top.document.querySelector(move_selector_2);
                        swapNodes(n1, n2);
                        _context.next = 234;
                        break;
                      case 178:
                        if (!(operator === "injectscript")) {
                          _context.next = 183;
                          break;
                        }
                        logger.log("Injecting script: ", value);
                        element.append("<script>".concat(value, "</script>"));
                        _context.next = 234;
                        break;
                      case 183:
                        if (!(operator === "move")) {
                          _context.next = 191;
                          break;
                        }
                        logger.log("Moving ".concat(move_selector_1, " to ").concat(move_selector_2));
                        source = window.top.document.querySelector(move_selector_1);
                        destination = window.top.document.querySelector(move_selector_2);
                        source.remove();
                        destination.prepend(source);
                        _context.next = 234;
                        break;
                      case 191:
                        if (!(operator === "productInfoLookup")) {
                          _context.next = 198;
                          break;
                        }
                        _context.next = 194;
                        return getProductInfo(pType, value, productInfoStorage);
                      case 194:
                        res = _context.sent;
                        element.before(res);
                        _context.next = 234;
                        break;
                      case 198:
                        if (!(operator === "text-transform")) {
                          _context.next = 217;
                          break;
                        }
                        _context.t5 = type;
                        _context.next = _context.t5 === "capitalize" ? 202 : _context.t5 === "PLACEHOLDER" ? 213 : 214;
                        break;
                      case 202:
                        _i = 0, _Array$from = Array.from(element);
                      case 203:
                        if (!(_i < _Array$from.length)) {
                          _context.next = 212;
                          break;
                        }
                        e = _Array$from[_i];
                        if (!((_e$innerText = e.innerText) !== null && _e$innerText !== void 0 && _e$innerText.includes("\n"))) {
                          _context.next = 208;
                          break;
                        }
                        e.innerText = turkishToLower(e.innerText).split("\n").map(function (sentence) {
                          return sentence.split(" ").map(function (word) {
                            return word.charAt(0).toLocaleUpperCase() + word.slice(1);
                          }).join(" ");
                        }).join("\n");
                        return _context.abrupt("continue", 209);
                      case 208:
                        e.innerText = turkishToLower(e.innerText).split(" ").map(function (word) {
                          return word.charAt(0).toLocaleUpperCase() + word.slice(1);
                        }).join(" ");
                      case 209:
                        _i++;
                        _context.next = 203;
                        break;
                      case 212:
                        return _context.abrupt("break", 215);
                      case 213:
                        return _context.abrupt("break", 215);
                      case 214:
                        return _context.abrupt("break", 215);
                      case 215:
                        _context.next = 234;
                        break;
                      case 217:
                        if (!(operator === "ai-suggest")) {
                          _context.next = 233;
                          break;
                        }
                        _context.t6 = type;
                        _context.next = _context.t6 === "title-change" ? 221 : _context.t6 === "add-description" ? 226 : 231;
                        break;
                      case 221:
                        _context.next = 223;
                        return prepareFinalTitle();
                      case 223:
                        finalTitle = _context.sent;
                        element.contents().filter(function () {
                          return this.nodeType == 3;
                        })[0].nodeValue = finalTitle;
                        return _context.abrupt("break", 231);
                      case 226:
                        _context.next = 228;
                        return prepareDescElm(value);
                      case 228:
                        descriptionElm = _context.sent;
                        element.before(descriptionElm);
                        return _context.abrupt("break", 231);
                      case 231:
                        _context.next = 234;
                        break;
                      case 233:
                        logger.failed("No such operator exists yet", operator);
                      case 234:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, null, [[78, 107, 110, 113]]);
              }));
              function transformer(_x2) {
                return _transformer.apply(this, arguments);
              }
              return transformer;
            }();
            prepareDescElm = /*#__PURE__*/function () {
              var _ref = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2(value) {
                var regex, _yield$getFromBeagleI, sku, productInfo, updatedHtmlString;
                return regenerator_default().wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        regex = /<p[^>]*>([\s\S]*?)<\/p>/;
                        _context2.next = 3;
                        return getFromBeagleInfoLayer("pdp", true);
                      case 3:
                        _yield$getFromBeagleI = _context2.sent;
                        sku = _yield$getFromBeagleI.sku;
                        _context2.next = 7;
                        return store.getInstance().get(sku);
                      case 7:
                        productInfo = _context2.sent;
                        updatedHtmlString = value.replace(regex, "<p>$1".concat(productInfo.marketingCopy, "</p>"));
                        return _context2.abrupt("return", updatedHtmlString);
                      case 10:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));
              return function prepareDescElm(_x3) {
                return _ref.apply(this, arguments);
              };
            }();
            prepareFinalTitle = /*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3() {
                var _yield$getFromBeagleI2, name, sku, productInfo, res;
                return regenerator_default().wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        _context3.next = 2;
                        return getFromBeagleInfoLayer("pdp", true);
                      case 2:
                        _yield$getFromBeagleI2 = _context3.sent;
                        name = _yield$getFromBeagleI2.name;
                        sku = _yield$getFromBeagleI2.sku;
                        _context3.next = 7;
                        return store.getInstance().get(sku);
                      case 7:
                        productInfo = _context3.sent;
                        res = name + ", " + productInfo.titleAugment + " ";
                        return _context3.abrupt("return", res);
                      case 10:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3);
              }));
              return function prepareFinalTitle() {
                return _ref2.apply(this, arguments);
              };
            }();
            replaceWithVal = function replaceWithVal(value, htmlStr) {
              if (value && htmlStr.includes("{{REPLACE_PRODUCTINFO}}")) {
                htmlStr = replaceAll(htmlStr, "{{REPLACE_PRODUCTINFO}}", value);
              }
              return htmlStr;
            };
            getProductInfo = /*#__PURE__*/function () {
              var _ref3 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4(type, value, productInfoStorage) {
                var skuList, res, productInfo;
                return regenerator_default().wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        if (!(productInfoStorage === "basket")) {
                          _context4.next = 6;
                          break;
                        }
                        _context4.next = 3;
                        return getFromBeagleInfoLayer("__features.SKUsonLastCartView", true);
                      case 3:
                        _context4.t0 = _context4.sent;
                        _context4.next = 9;
                        break;
                      case 6:
                        _context4.next = 8;
                        return getFromBeagleInfoLayer("__features.SKUsonPage", true);
                      case 8:
                        _context4.t0 = _context4.sent;
                      case 9:
                        skuList = _context4.t0;
                        res = null;
                        if (!(!skuList || skuList.length === 0)) {
                          _context4.next = 14;
                          break;
                        }
                        logger.log("No sku found");
                        return _context4.abrupt("return", null);
                      case 14:
                        _context4.next = 16;
                        return store.getInstance().get(skuList[0]);
                      case 16:
                        productInfo = _context4.sent;
                        _context4.t1 = type;
                        _context4.next = _context4.t1 === "transactionIn2Weeks" ? 20 : _context4.t1 === "addToCartIn2Weeks" ? 23 : _context4.t1 === "productViewCount" ? 26 : 29;
                        break;
                      case 20:
                        res = replaceWithVal(productInfo.saleCntVisitorsIn15.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."), value);
                        logger.log("Replacing transcationIn2Weeks ", productInfo.saleCntVisitorsIn15);
                        return _context4.abrupt("break", 30);
                      case 23:
                        res = replaceWithVal(productInfo.cartCntVisitorsIn15.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."), value);
                        logger.log("Replacing AddToCartCount ", productInfo.cartCntVisitorsIn15);
                        return _context4.abrupt("break", 30);
                      case 26:
                        res = replaceWithVal(productInfo.viewCntVisitorsIn1.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "."), value);
                        logger.log("Replacing productViewCount for", productInfo.viewCntVisitorsIn1);
                        return _context4.abrupt("break", 30);
                      case 29:
                        logger.failed("no such type found for productInfoLookup operator: " + type);
                      case 30:
                        return _context4.abrupt("return", res);
                      case 31:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4);
              }));
              return function getProductInfo(_x4, _x5, _x6) {
                return _ref3.apply(this, arguments);
              };
            }();
            handleDocumentTitleTabChange = /*#__PURE__*/function () {
              var _ref4 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee5(event, titles, originalTitle) {
                var parsedTitles, _iterator3, _step3, parsedTitle;
                return regenerator_default().wrap(function _callee5$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        parsedTitles = !Array.isArray(titles) ? [titles] : titles;
                        _iterator3 = BeagleApplyActions_createForOfIteratorHelper(parsedTitles);
                        _context5.prev = 2;
                        _iterator3.s();
                      case 4:
                        if ((_step3 = _iterator3.n()).done) {
                          _context5.next = 18;
                          break;
                        }
                        parsedTitle = _step3.value;
                        if (!window.top.document.hidden) {
                          _context5.next = 15;
                          break;
                        }
                        window.top.document.title = parsedTitle;
                        _context5.next = 10;
                        return delay(2000);
                      case 10:
                        window.top.document.title = originalTitle;
                        _context5.next = 13;
                        return delay(2000);
                      case 13:
                        _context5.next = 16;
                        break;
                      case 15:
                        window.top.document.title = originalTitle;
                      case 16:
                        _context5.next = 4;
                        break;
                      case 18:
                        _context5.next = 23;
                        break;
                      case 20:
                        _context5.prev = 20;
                        _context5.t0 = _context5["catch"](2);
                        _iterator3.e(_context5.t0);
                      case 23:
                        _context5.prev = 23;
                        _iterator3.f();
                        return _context5.finish(23);
                      case 26:
                        if (!window.top.document.hidden) {
                          window.top.document.title = originalTitle;
                        } else {
                          handleDocumentTitleTabChange(event, titles, originalTitle);
                        }
                      case 27:
                      case "end":
                        return _context5.stop();
                    }
                  }
                }, _callee5, null, [[2, 20, 23, 26]]);
              }));
              return function handleDocumentTitleTabChange(_x7, _x8, _x9) {
                return _ref4.apply(this, arguments);
              };
            }();
            handlePopupClick = function handlePopupClick(event) {
              var id = event.target.id;
              if (id && id === "nd-popup__wrapper") {
                $("#nd-popup__wrapper").remove();
                window.removeEventListener("click", handlePopupClick, true);
                window.removeEventListener("touchend", handlePopupClick, true);
              }
            };
            handleModalClick = function handleModalClick(event) {
              var classList = event.target.classList;
              if (classList && classList.contains("nd-modal__wrapper")) {
                $(".nd-modal__wrapper").hide();
                window.removeEventListener("click", handleModalClick, true);
                window.removeEventListener("touchend", handleModalClick, true);
              }
            };
            displayPopup = function displayPopup() {
              if (window.top.document.hidden) return;
              if (parseInt(sessionStorage.getItem(POPUP_DISPLAY_FLAG)) > 0) return;
              sessionStorage.setItem(POPUP_DISPLAY_FLAG, 1);
              var qPopup = window.top.document.querySelector("#grt-shadow-host");
              if (qPopup) qPopup.style["display"] = "none";
              window.top.document.getElementById("nd-popup__wrapper").style["display"] = "block";
              window.addEventListener("click", handlePopupClick, true);
              window.addEventListener("touchend", handlePopupClick, true);
              window.top.document.documentElement.removeEventListener("mouseleave", displayPopup, {
                once: true
              });
              window.top.document.documentElement.removeEventListener("copy", displayPopup, {
                once: true
              });
              window.top.removeEventListener("visibilitychange", displayPopup);
              window.top.removeEventListener("popstate", displayPopup, {
                once: true
              });
              setTimeout(function () {
                $("#nd-popup__wrapper").remove();
                window.removeEventListener("click", handlePopupClick, true);
                window.removeEventListener("touchend", handlePopupClick, true);
              }, 15000);
            };
            displayModal = function displayModal(value, contentSelector) {
              if (window.top.document.hidden) return;
              var qPopup = window.top.document.querySelector("#grt-shadow-host");
              if (qPopup) qPopup.style["display"] = "none";
              if (!window.top.document.querySelector(".nd-modal__wrapper")) createPopup(value, contentSelector, true);
              window.top.document.querySelector(".nd-modal__wrapper").style["display"] = "block";
              window.addEventListener("click", handleModalClick, true);
            };
            createPopup = function createPopup(value, contentSelector) {
              var isModal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
              // Create popup wrapper
              var popupWrapper = window.top.document.createElement("div");
              // eslint-disable-next-line max-len
              popupWrapper.classList.add("nd-popup__wrapper");
              if (isModal) popupWrapper.classList.add("nd-modal__wrapper");
              if (!isModal) popupWrapper.id = "nd-popup__wrapper";

              // Create popup close button
              var popupCloseButton = window.top.document.createElement("button");
              var popupCloseButtonStyle = isModal ? "nd-popup__button-close__colored" : "nd-popup__button-close";
              popupCloseButton.classList.add(popupCloseButtonStyle);
              popupCloseButton.innerText = "X";
              if (isModal) {
                popupCloseButton.onclick = function () {
                  $(".nd-modal__wrapper").hide();
                  window.removeEventListener("click", handleModalClick, true);
                };
              } else {
                popupCloseButton.onclick = function () {
                  $("#nd-popup__wrapper").remove();
                  window.removeEventListener("click", handlePopupClick, true);
                };
              }
              if (contentSelector) {
                var contents = Array.from(window.top.document.querySelectorAll(contentSelector));
                while (value.includes("{{REPLACE}}") && contents.length > 0) {
                  value = value.replace("{{REPLACE}}", contents.shift().src);
                }
              }

              // Create popup from action and append close button
              var template = window.top.document.createElement("template");
              template.innerHTML = value.trim();
              var popup = template.content.firstChild;
              popup.appendChild(popupCloseButton);
              popupWrapper.appendChild(popup);

              // Remove old popup if exists before appending new one
              $("#nd-popup__wrapper").remove();
              window.top.document.body.appendChild(popupWrapper);
            };
            swapNodes = function swapNodes(n1, n2) {
              var p1 = n1.parentNode;
              var p2 = n2.parentNode;
              var i1;
              var i2;
              if (!p1 || !p2 || p1.isEqualNode(n2) || p2.isEqualNode(n1)) return;
              for (var i = 0; i < p1.children.length; i++) {
                if (p1.children[i].isEqualNode(n1)) {
                  i1 = i;
                }
              }
              for (var _i2 = 0; _i2 < p2.children.length; _i2++) {
                if (p2.children[_i2].isEqualNode(n2)) {
                  i2 = _i2;
                }
              }
              if (p1.isEqualNode(p2) && i1 < i2) {
                i2++;
              }
              p1.insertBefore(n2, p1.children[i1]);
              p2.insertBefore(n1, p2.children[i2]);
            };
            waitForJQuery = function waitForJQuery() {
              return new Promise(function (resolve) {
                if (!window.jQuery) {
                  logger.log("jQuery not found, retrying");
                  var jQueryInterval = setInterval(function () {
                    if (window.jQuery) {
                      clearInterval(jQueryInterval);
                      resolve(true);
                    }
                  }, 25);
                  setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee6() {
                    return regenerator_default().wrap(function _callee6$(_context6) {
                      while (1) {
                        switch (_context6.prev = _context6.next) {
                          case 0:
                            clearInterval(jQueryInterval);
                            resolve(false);
                          case 2:
                          case "end":
                            return _context6.stop();
                        }
                      }
                    }, _callee6);
                  })), 2000);
                } else resolve(true);
              });
            };
            actionApplicator = /*#__PURE__*/function () {
              var _ref6 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee7(actions) {
                var _iterator4, _step4, action, _result, eligibleElements, _iterator5, _step5, element;
                return regenerator_default().wrap(function _callee7$(_context7) {
                  while (1) {
                    switch (_context7.prev = _context7.next) {
                      case 0:
                        _context7.next = 2;
                        return waitForJQuery();
                      case 2:
                        if (!_context7.sent) {
                          _context7.next = 59;
                          break;
                        }
                        _iterator4 = BeagleApplyActions_createForOfIteratorHelper(actions);
                        _context7.prev = 4;
                        _iterator4.s();
                      case 6:
                        if ((_step4 = _iterator4.n()).done) {
                          _context7.next = 49;
                          break;
                        }
                        action = _step4.value;
                        _context7.prev = 8;
                        _result = false;
                        if (!action.condition) {
                          _context7.next = 36;
                          break;
                        }
                        _context7.next = 13;
                        return action_condition_util(action.condition);
                      case 13:
                        eligibleElements = _context7.sent;
                        _iterator5 = BeagleApplyActions_createForOfIteratorHelper(eligibleElements);
                        _context7.prev = 15;
                        _iterator5.s();
                      case 17:
                        if ((_step5 = _iterator5.n()).done) {
                          _context7.next = 26;
                          break;
                        }
                        element = _step5.value;
                        _context7.next = 21;
                        return transformer(action, element);
                      case 21:
                        _result = _context7.sent;
                        if (!(_result === false)) {
                          _context7.next = 24;
                          break;
                        }
                        return _context7.abrupt("return", false);
                      case 24:
                        _context7.next = 17;
                        break;
                      case 26:
                        _context7.next = 31;
                        break;
                      case 28:
                        _context7.prev = 28;
                        _context7.t0 = _context7["catch"](15);
                        _iterator5.e(_context7.t0);
                      case 31:
                        _context7.prev = 31;
                        _iterator5.f();
                        return _context7.finish(31);
                      case 34:
                        _context7.next = 39;
                        break;
                      case 36:
                        _context7.next = 38;
                        return transformer(action);
                      case 38:
                        _result = _context7.sent;
                      case 39:
                        if (!(_result === false)) {
                          _context7.next = 41;
                          break;
                        }
                        return _context7.abrupt("return", false);
                      case 41:
                        _context7.next = 47;
                        break;
                      case 43:
                        _context7.prev = 43;
                        _context7.t1 = _context7["catch"](8);
                        logger.failed("Couldn't apply action ".concat(JSON.stringify(action), " with error ").concat(_context7.t1.message));
                        return _context7.abrupt("return", _context7.t1);
                      case 47:
                        _context7.next = 6;
                        break;
                      case 49:
                        _context7.next = 54;
                        break;
                      case 51:
                        _context7.prev = 51;
                        _context7.t2 = _context7["catch"](4);
                        _iterator4.e(_context7.t2);
                      case 54:
                        _context7.prev = 54;
                        _iterator4.f();
                        return _context7.finish(54);
                      case 57:
                        _context7.next = 61;
                        break;
                      case 59:
                        logger.failed("Jquery not found on window");
                        return _context7.abrupt("return", false);
                      case 61:
                      case "end":
                        return _context7.stop();
                    }
                  }
                }, _callee7, null, [[4, 51, 54, 57], [8, 43], [15, 28, 31, 34]]);
              }));
              return function actionApplicator(_x10) {
                return _ref6.apply(this, arguments);
              };
            }(); // Apply actions
            _context8.next = 18;
            return actionApplicator(actions);
          case 18:
            result = _context8.sent;
            return _context8.abrupt("return", result);
          case 20:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _applyActions.apply(this, arguments);
}
/* harmony default export */ var BeagleApplyActions = (applyActions);
;// CONCATENATED MODULE: ./node_modules/async-mutex/index.mjs
const E_TIMEOUT = new Error('timeout while waiting for mutex to become available');
const E_ALREADY_LOCKED = new Error('mutex already locked');
const E_CANCELED = new Error('request for lock canceled');

var __awaiter$2 = ( false) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Semaphore {
    constructor(_value, _cancelError = E_CANCELED) {
        this._value = _value;
        this._cancelError = _cancelError;
        this._weightedQueues = [];
        this._weightedWaiters = [];
    }
    acquire(weight = 1) {
        if (weight <= 0)
            throw new Error(`invalid weight ${weight}: must be positive`);
        return new Promise((resolve, reject) => {
            if (!this._weightedQueues[weight - 1])
                this._weightedQueues[weight - 1] = [];
            this._weightedQueues[weight - 1].push({ resolve, reject });
            this._dispatch();
        });
    }
    runExclusive(callback, weight = 1) {
        return __awaiter$2(this, void 0, void 0, function* () {
            const [value, release] = yield this.acquire(weight);
            try {
                return yield callback(value);
            }
            finally {
                release();
            }
        });
    }
    waitForUnlock(weight = 1) {
        if (weight <= 0)
            throw new Error(`invalid weight ${weight}: must be positive`);
        return new Promise((resolve) => {
            if (!this._weightedWaiters[weight - 1])
                this._weightedWaiters[weight - 1] = [];
            this._weightedWaiters[weight - 1].push(resolve);
            this._dispatch();
        });
    }
    isLocked() {
        return this._value <= 0;
    }
    getValue() {
        return this._value;
    }
    setValue(value) {
        this._value = value;
        this._dispatch();
    }
    release(weight = 1) {
        if (weight <= 0)
            throw new Error(`invalid weight ${weight}: must be positive`);
        this._value += weight;
        this._dispatch();
    }
    cancel() {
        this._weightedQueues.forEach((queue) => queue.forEach((entry) => entry.reject(this._cancelError)));
        this._weightedQueues = [];
    }
    _dispatch() {
        var _a;
        for (let weight = this._value; weight > 0; weight--) {
            const queueEntry = (_a = this._weightedQueues[weight - 1]) === null || _a === void 0 ? void 0 : _a.shift();
            if (!queueEntry)
                continue;
            const previousValue = this._value;
            const previousWeight = weight;
            this._value -= weight;
            weight = this._value + 1;
            queueEntry.resolve([previousValue, this._newReleaser(previousWeight)]);
        }
        this._drainUnlockWaiters();
    }
    _newReleaser(weight) {
        let called = false;
        return () => {
            if (called)
                return;
            called = true;
            this.release(weight);
        };
    }
    _drainUnlockWaiters() {
        for (let weight = this._value; weight > 0; weight--) {
            if (!this._weightedWaiters[weight - 1])
                continue;
            this._weightedWaiters[weight - 1].forEach((waiter) => waiter());
            this._weightedWaiters[weight - 1] = [];
        }
    }
}

var __awaiter$1 = ( false) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Mutex {
    constructor(cancelError) {
        this._semaphore = new Semaphore(1, cancelError);
    }
    acquire() {
        return __awaiter$1(this, void 0, void 0, function* () {
            const [, releaser] = yield this._semaphore.acquire();
            return releaser;
        });
    }
    runExclusive(callback) {
        return this._semaphore.runExclusive(() => callback());
    }
    isLocked() {
        return this._semaphore.isLocked();
    }
    waitForUnlock() {
        return this._semaphore.waitForUnlock();
    }
    release() {
        if (this._semaphore.isLocked())
            this._semaphore.release();
    }
    cancel() {
        return this._semaphore.cancel();
    }
}

var __awaiter = ( false) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function withTimeout(sync, timeout, timeoutError = E_TIMEOUT) {
    return {
        acquire: (weight) => {
            if (weight !== undefined && weight <= 0) {
                throw new Error(`invalid weight ${weight}: must be positive`);
            }
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let isTimeout = false;
                const handle = setTimeout(() => {
                    isTimeout = true;
                    reject(timeoutError);
                }, timeout);
                try {
                    const ticket = yield sync.acquire(weight);
                    if (isTimeout) {
                        const release = Array.isArray(ticket) ? ticket[1] : ticket;
                        release();
                    }
                    else {
                        clearTimeout(handle);
                        resolve(ticket);
                    }
                }
                catch (e) {
                    if (!isTimeout) {
                        clearTimeout(handle);
                        reject(e);
                    }
                }
            }));
        },
        runExclusive(callback, weight) {
            return __awaiter(this, void 0, void 0, function* () {
                let release = () => undefined;
                try {
                    const ticket = yield this.acquire(weight);
                    if (Array.isArray(ticket)) {
                        release = ticket[1];
                        return yield callback(ticket[0]);
                    }
                    else {
                        release = ticket;
                        return yield callback();
                    }
                }
                finally {
                    release();
                }
            });
        },
        release(weight) {
            sync.release(weight);
        },
        cancel() {
            return sync.cancel();
        },
        waitForUnlock: (weight) => {
            if (weight !== undefined && weight <= 0) {
                throw new Error(`invalid weight ${weight}: must be positive`);
            }
            return new Promise((resolve, reject) => {
                sync.waitForUnlock(weight).then(resolve);
                setTimeout(() => reject(timeoutError), timeout);
            });
        },
        isLocked: () => sync.isLocked(),
        getValue: () => sync.getValue(),
        setValue: (value) => sync.setValue(value),
    };
}

// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types
function tryAcquire(sync, alreadyAcquiredError = E_ALREADY_LOCKED) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return withTimeout(sync, 0, alreadyAcquiredError);
}



;// CONCATENATED MODULE: ./src/BeagleOn/robotEngine.js







function robotEngine_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = robotEngine_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function robotEngine_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return robotEngine_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return robotEngine_arrayLikeToArray(o, minLen); }
function robotEngine_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }






var robotEngine_logger = new src_logger("BeagleRobotEngine");
var OBSERVER_CONFIG = {
  subtree: true,
  childList: true,
  attributes: true
};
var RobotEngine = /*#__PURE__*/function () {
  function RobotEngine(body) {
    _classCallCheck(this, RobotEngine);
    var debugFilteredTreatments = body.debugFilteredTreatments,
      debugMode = body.debugMode,
      matchedTreatments = body.matchedTreatments,
      identifier = body.identifier,
      pageType = body.pageType;
    this.engagementLock = {};
    this.pageType = pageType;
    this.debugMode = debugMode;
    this.identifier = identifier;
    this.reApplyTreatmentsMap = {};
    this.addedDataListenerIds = [];
    this.matchedTreatments = matchedTreatments;
    this.debugFilteredTreatments = debugFilteredTreatments;
    this.isMobile = window.matchMedia(MOBILE_MEDIA_QUERY).matches;
  }
  _createClass(RobotEngine, [{
    key: "engageRobots",
    value: function () {
      var _engageRobots = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
        var robotPromises, _iterator, _step, treatment;
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                robotPromises = [];
                _iterator = robotEngine_createForOfIteratorHelper(this.matchedTreatments);
                _context.prev = 2;
                _iterator.s();
              case 4:
                if ((_step = _iterator.n()).done) {
                  _context.next = 17;
                  break;
                }
                treatment = _step.value;
                _context.prev = 6;
                if (!treatment.dependant_on_treatment) {
                  _context.next = 9;
                  break;
                }
                return _context.abrupt("continue", 15);
              case 9:
                robotPromises.push(this.engageRobot(treatment));
                _context.next = 15;
                break;
              case 12:
                _context.prev = 12;
                _context.t0 = _context["catch"](6);
                robotEngine_logger.failed("Error engaging robot ".concat(treatment.id, ": ").concat(_context.t0.message || _context.t0));
              case 15:
                _context.next = 4;
                break;
              case 17:
                _context.next = 22;
                break;
              case 19:
                _context.prev = 19;
                _context.t1 = _context["catch"](2);
                _iterator.e(_context.t1);
              case 22:
                _context.prev = 22;
                _iterator.f();
                return _context.finish(22);
              case 25:
                _context.next = 27;
                return Promise.all(robotPromises);
              case 27:
                this.initiateReapplyRobotMap();
              case 28:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[2, 19, 22, 25], [6, 12]]);
      }));
      function engageRobots() {
        return _engageRobots.apply(this, arguments);
      }
      return engageRobots;
    }()
  }, {
    key: "engageRobot",
    value: function () {
      var _engageRobot = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3(treatment) {
        var _this = this;
        var id, actions, eligibilityRuleSet, device, dependant_on_treatment, businessRuleSet, weight, delay, helpers, debugMode, debugFilteredTreatments, engagementLock, identifier, isMobile, matchedTreatments, prepareAndApply, release, treatmentSkipRatio, determiningIdentifier, treatmentPct, businessRuleId;
        return regenerator_default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                id = treatment.id, actions = treatment.actions, eligibilityRuleSet = treatment.eligibilityRuleSet, device = treatment.device, dependant_on_treatment = treatment.dependant_on_treatment, businessRuleSet = treatment.businessRuleSet, weight = treatment.weight, delay = treatment.delay, helpers = treatment.helpers;
                debugMode = this.debugMode, debugFilteredTreatments = this.debugFilteredTreatments, engagementLock = this.engagementLock, identifier = this.identifier, isMobile = this.isMobile, matchedTreatments = this.matchedTreatments, prepareAndApply = this.prepareAndApply; // one engagement at a time
                engagementLock[id] = engagementLock[id] || new Mutex();
                _context3.next = 5;
                return engagementLock[id].acquire();
              case 5:
                release = _context3.sent;
                _context3.prev = 6;
                if (!(debugMode && debugFilteredTreatments && !debugFilteredTreatments.includes(id))) {
                  _context3.next = 9;
                  break;
                }
                return _context3.abrupt("return");
              case 9:
                if (!(device === "mobile" && !isMobile)) {
                  _context3.next = 12;
                  break;
                }
                robotEngine_logger.failed("Treatment device 'mobile' mismatch");
                return _context3.abrupt("return");
              case 12:
                if (!(device === "desktop" && isMobile)) {
                  _context3.next = 15;
                  break;
                }
                robotEngine_logger.failed("Treatment device 'desktop' mismatch");
                return _context3.abrupt("return");
              case 15:
                robotEngine_logger.log("Starting base rule set check for treatment: " + id);
                _context3.t0 = !eligibilityRuleSet;
                if (_context3.t0) {
                  _context3.next = 21;
                  break;
                }
                _context3.next = 20;
                return this.checkEligibilityRuleSet(eligibilityRuleSet);
              case 20:
                _context3.t0 = _context3.sent;
              case 21:
                if (!_context3.t0) {
                  _context3.next = 55;
                  break;
                }
                treatmentSkipRatio = weight === 100 ? 0 : 100 - weight || TREATMENT_RATIO;
                robotEngine_logger.log("Treatment skip ratio: " + treatmentSkipRatio);
                // Determining identifier for calculating treatment percentage (treatmentPct)
                determiningIdentifier = dependant_on_treatment || id; // treatmentPct is the percentage value for the treatment used to determine if it should be skipped or not
                // treatmentPct is 100 when debug mode is 1, ensuring no treatments are skipped
                if (!(debugMode === 1)) {
                  _context3.next = 29;
                  break;
                }
                _context3.t1 = 100;
                _context3.next = 32;
                break;
              case 29:
                _context3.next = 31;
                return determinePct(identifier + determiningIdentifier);
              case 31:
                _context3.t1 = _context3.sent;
              case 32:
                treatmentPct = _context3.t1;
                robotEngine_logger.log("TreatmentPct: " + treatmentPct + " with debug mode ".concat(debugMode ? "on" : "off"));
                businessRuleId = null;
                if (!businessRuleSet) {
                  _context3.next = 41;
                  break;
                }
                robotEngine_logger.log("Starting sub variant rule set check for treatment: " + id);
                _context3.next = 39;
                return this.checkBusinessRules(businessRuleSet);
              case 39:
                businessRuleId = _context3.sent;
                if (businessRuleId !== null) {
                  robotEngine_logger.log("Applying business rule transformation with id: ", businessRuleId);
                } else robotEngine_logger.log("Applying treatment with default values");
              case 41:
                if (!(treatmentPct < treatmentSkipRatio)) {
                  _context3.next = 45;
                  break;
                }
                robotEngine_logger.log("Treatment ".concat(id, " skipped due to treatment split ratio"));
                addTreatment(id, businessRuleId, null, "skipped", dependant_on_treatment);
                return _context3.abrupt("return");
              case 45:
                if (delay) {
                  _context3.next = 52;
                  break;
                }
                _context3.next = 48;
                return prepareAndApply(id, identifier, actions, businessRuleId, debugMode);
              case 48:
                _context3.next = 50;
                return this.engageHelpers(helpers, matchedTreatments);
              case 50:
                _context3.next = 53;
                break;
              case 52:
                setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {
                  return regenerator_default().wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.next = 2;
                          return prepareAndApply(id, identifier, actions, businessRuleId, debugMode);
                        case 2:
                          _context2.next = 4;
                          return _this.engageHelpers(helpers, matchedTreatments);
                        case 4:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                })), delay);
              case 53:
                _context3.next = 56;
                break;
              case 55:
                robotEngine_logger.failed("Rule check failed for treatment:", id);
              case 56:
                _context3.prev = 56;
                release();
                this.addReapplyEvent(treatment);
                this.addRuleSetDataListeners(treatment);
                return _context3.finish(56);
              case 61:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[6,, 56, 61]]);
      }));
      function engageRobot(_x) {
        return _engageRobot.apply(this, arguments);
      }
      return engageRobot;
    }()
  }, {
    key: "engageHelpers",
    value: function () {
      var _engageHelpers = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4(helpers, matchedTreatments) {
        var helperRobotPromises, _iterator2, _step2, treatment;
        return regenerator_default().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(Array.isArray(helpers) && helpers.length)) {
                  _context4.next = 22;
                  break;
                }
                helperRobotPromises = [];
                _iterator2 = robotEngine_createForOfIteratorHelper(matchedTreatments);
                _context4.prev = 3;
                _iterator2.s();
              case 5:
                if ((_step2 = _iterator2.n()).done) {
                  _context4.next = 12;
                  break;
                }
                treatment = _step2.value;
                if (helpers.includes(treatment.id)) {
                  _context4.next = 9;
                  break;
                }
                return _context4.abrupt("continue", 10);
              case 9:
                helperRobotPromises.push(this.engageRobot(treatment));
              case 10:
                _context4.next = 5;
                break;
              case 12:
                _context4.next = 17;
                break;
              case 14:
                _context4.prev = 14;
                _context4.t0 = _context4["catch"](3);
                _iterator2.e(_context4.t0);
              case 17:
                _context4.prev = 17;
                _iterator2.f();
                return _context4.finish(17);
              case 20:
                _context4.next = 22;
                return Promise.all(helperRobotPromises);
              case 22:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[3, 14, 17, 20]]);
      }));
      function engageHelpers(_x2, _x3) {
        return _engageHelpers.apply(this, arguments);
      }
      return engageHelpers;
    }()
  }, {
    key: "prepareAndApply",
    value: function () {
      var _prepareAndApply = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee5(id, identifier, actions, businessRuleId, debugMode) {
        var _yield$prepareActions, _yield$prepareActions2, prepared, variant, res;
        return regenerator_default().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return prepareActions(identifier, actions, businessRuleId, debugMode);
              case 2:
                _yield$prepareActions = _context5.sent;
                _yield$prepareActions2 = _slicedToArray(_yield$prepareActions, 2);
                prepared = _yield$prepareActions2[0];
                variant = _yield$prepareActions2[1];
                _context5.next = 8;
                return BeagleApplyActions(prepared);
              case 8:
                res = _context5.sent;
                if (res === false) {
                  addTreatment(id, businessRuleId, variant, "failed");
                } else {
                  addTreatment(id, businessRuleId, variant, "applied");
                }
              case 10:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));
      function prepareAndApply(_x4, _x5, _x6, _x7, _x8) {
        return _prepareAndApply.apply(this, arguments);
      }
      return prepareAndApply;
    }()
  }, {
    key: "addReapplyEvent",
    value: function addReapplyEvent(treatment) {
      var pageType = this.pageType,
        reApplyTreatmentsMap = this.reApplyTreatmentsMap;
      var id = treatment.id,
        reapply_event = treatment.reapply_event,
        reapply_event_page_type = treatment.reapply_event_page_type;
      if (reapply_event) {
        if (!reapply_event_page_type || reapply_event_page_type === pageType) {
          var reapply_event_array = reapply_event;
          if (!Array.isArray(reapply_event)) reapply_event_array = [reapply_event];
          robotEngine_logger.log("Reapply event '".concat(reapply_event, "' found for treatment: ").concat(id));
          var _iterator3 = robotEngine_createForOfIteratorHelper(reapply_event_array),
            _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var reapplyEvent = _step3.value;
              var previousValue = reApplyTreatmentsMap[reapplyEvent] ? reApplyTreatmentsMap[reapplyEvent] : [];
              if (previousValue.includes(id)) {
                robotEngine_logger.log("Treatment already added for reapply event");
              } else reApplyTreatmentsMap[reapplyEvent] = [].concat(_toConsumableArray(previousValue), [id]);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
      }
    }
  }, {
    key: "initiateReapplyRobotMap",
    value: function initiateReapplyRobotMap() {
      var _this2 = this;
      var reApplyTreatmentsMap = this.reApplyTreatmentsMap,
        matchedTreatments = this.matchedTreatments;
      var _loop = function _loop() {
        var key = _Object$keys[_i];
        var treatmentIds = reApplyTreatmentsMap[key];
        var reApplyTreatments = matchedTreatments.filter(function (t) {
          return treatmentIds.includes(t.id);
        });
        switch (key) {
          case "infinite_scroll":
            {
              var observer = new ResizeObserver(function () {
                var _iterator4 = robotEngine_createForOfIteratorHelper(reApplyTreatments),
                  _step4;
                try {
                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                    var treatment = _step4.value;
                    robotEngine_logger.log("Retrying treatment ".concat(treatment.id, " from infinite_scroll"));
                    _this2.engageRobot(treatment);
                  }
                } catch (err) {
                  _iterator4.e(err);
                } finally {
                  _iterator4.f();
                }
              });
              observer.observe(window.top.document.documentElement);
            }
            break;
          case "timeout":
            {
              setTimeout(function () {
                var _iterator5 = robotEngine_createForOfIteratorHelper(reApplyTreatments),
                  _step5;
                try {
                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                    var treatment = _step5.value;
                    robotEngine_logger.log("Retrying treatment ".concat(treatment.id, " from timeout"));
                    _this2.engageRobot(treatment);
                  }
                } catch (err) {
                  _iterator5.e(err);
                } finally {
                  _iterator5.f();
                }
              }, 500);
            }
            break;
          case "element_change":
            {
              var _iterator6 = robotEngine_createForOfIteratorHelper(reApplyTreatments),
                _step6;
              try {
                var _loop2 = function _loop2() {
                  var treatment = _step6.value;
                  var reapplySelectorList = Array.isArray(treatment.reapply_selector) ? treatment.reapply_selector : [treatment.reapply_selector];
                  var _iterator7 = robotEngine_createForOfIteratorHelper(reapplySelectorList),
                    _step7;
                  try {
                    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                      var selector = _step7.value;
                      var element = window.top.document.querySelector(selector);
                      if (element) {
                        var _observer = new MutationObserver(function () {
                          robotEngine_logger.log("Retrying treatment ".concat(treatment.id, " from element_change"));
                          _this2.engageRobot(treatment);
                        });
                        _observer.observe(element, OBSERVER_CONFIG);
                      }
                    }
                  } catch (err) {
                    _iterator7.e(err);
                  } finally {
                    _iterator7.f();
                  }
                };
                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                  _loop2();
                }
              } catch (err) {
                _iterator6.e(err);
              } finally {
                _iterator6.f();
              }
            }
            break;
          case "on_scroll":
            {
              // add window scroll listener, call engageRobot on scroll, do not trigger more than once per 250ms
              var lastScrollTop = 0;
              var lastScrollTime = 0;
              window.addEventListener("scroll", function () {
                var now = new Date().getTime();
                var st = window.pageYOffset || window.top.document.documentElement.scrollTop;
                if (now - lastScrollTime > 250 && Math.abs(lastScrollTop - st) > 5) {
                  lastScrollTop = st;
                  lastScrollTime = now;
                  var _iterator8 = robotEngine_createForOfIteratorHelper(reApplyTreatments),
                    _step8;
                  try {
                    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                      var treatment = _step8.value;
                      robotEngine_logger.log("Retrying treatment ".concat(treatment.id, " from on_scroll"));
                      _this2.engageRobot(treatment);
                    }
                  } catch (err) {
                    _iterator8.e(err);
                  } finally {
                    _iterator8.f();
                  }
                }
              }, false);
            }
            break;
          case "query_search_change":
            {
              var queryString = window.location.search;
              var _observer2 = new MutationObserver(function () {
                if (window.location.search !== queryString) {
                  queryString = window.location.search;
                  var _iterator9 = robotEngine_createForOfIteratorHelper(reApplyTreatments),
                    _step9;
                  try {
                    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                      var treatment = _step9.value;
                      robotEngine_logger.log("Retrying treatment ".concat(treatment.id, " from query_search_change"));
                      _this2.engageRobot(treatment);
                    }
                  } catch (err) {
                    _iterator9.e(err);
                  } finally {
                    _iterator9.f();
                  }
                }
              });
              _observer2.observe(document, OBSERVER_CONFIG);
            }
            break;
          case "interval":
            var _iterator10 = robotEngine_createForOfIteratorHelper(reApplyTreatments),
              _step10;
            try {
              var _loop3 = function _loop3() {
                var treatment = _step10.value;
                var reapplyInterval = setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee6() {
                  var applied;
                  return regenerator_default().wrap(function _callee6$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          _context6.next = 2;
                          return getFromBeagleInfoLayer("a", true);
                        case 2:
                          applied = _context6.sent;
                          if (!(applied !== null && applied !== void 0 && applied[treatment.id])) {
                            _context6.next = 7;
                            break;
                          }
                          clearInterval(reapplyInterval);
                          _context6.next = 10;
                          break;
                        case 7:
                          robotEngine_logger.log("Retrying treatment ".concat(treatment.id, " from interval"));
                          _context6.next = 10;
                          return _this2.engageRobot(treatment);
                        case 10:
                        case "end":
                          return _context6.stop();
                      }
                    }
                  }, _callee6);
                })), 50);
                setTimeout(function () {
                  clearInterval(reapplyInterval);
                }, 2500);
              };
              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                _loop3();
              }
            } catch (err) {
              _iterator10.e(err);
            } finally {
              _iterator10.f();
            }
            break;
          case "info_layer_change":
            var _iterator11 = robotEngine_createForOfIteratorHelper(reApplyTreatments),
              _step11;
            try {
              for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                var treatment = _step11.value;
                var boundEngageTreatment = _this2.engageRobot.bind(_this2, treatment);
                addDataListener(treatment.reapply_selector, boundEngageTreatment);
              }
            } catch (err) {
              _iterator11.e(err);
            } finally {
              _iterator11.f();
            }
            break;
          default:
            robotEngine_logger.failed("Reapply event not found: ", key);
            break;
        }
      };
      for (var _i = 0, _Object$keys = Object.keys(reApplyTreatmentsMap); _i < _Object$keys.length; _i++) {
        _loop();
      }
    }
  }, {
    key: "addRuleSetDataListeners",
    value: function () {
      var _addRuleSetDataListeners = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee7(treatment) {
        var _treatment$eligibilit, eligibilityRuleSet, _treatment$businessRu, businessRuleSet, id, selectors, boundEngageTreatment, _iterator12, _step12, selector;
        return regenerator_default().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _treatment$eligibilit = treatment.eligibilityRuleSet, eligibilityRuleSet = _treatment$eligibilit === void 0 ? [] : _treatment$eligibilit, _treatment$businessRu = treatment.businessRuleSet, businessRuleSet = _treatment$businessRu === void 0 ? [] : _treatment$businessRu, id = treatment.id;
                if (!this.addedDataListenerIds.includes(id)) {
                  _context7.next = 3;
                  break;
                }
                return _context7.abrupt("return");
              case 3:
                selectors = this.extractDataListenerSelectors([].concat(_toConsumableArray(eligibilityRuleSet), _toConsumableArray(businessRuleSet)));
                boundEngageTreatment = this.engageRobot.bind(this, treatment);
                _iterator12 = robotEngine_createForOfIteratorHelper(selectors);
                try {
                  for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
                    selector = _step12.value;
                    addDataListener("__eRules.".concat(selector), boundEngageTreatment);
                  }
                } catch (err) {
                  _iterator12.e(err);
                } finally {
                  _iterator12.f();
                }
                this.addedDataListenerIds.push(id);
              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));
      function addRuleSetDataListeners(_x9) {
        return _addRuleSetDataListeners.apply(this, arguments);
      }
      return addRuleSetDataListeners;
    }()
  }, {
    key: "extractDataListenerSelectors",
    value: function extractDataListenerSelectors(ruleSet) {
      var previousSelectors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var selectors = previousSelectors || [];
      var _iterator13 = robotEngine_createForOfIteratorHelper(ruleSet),
        _step13;
      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var rule = _step13.value;
          if (typeof rule === "string") {
            if (rule.startsWith("!")) rule = rule.slice(1);
            selectors.push(rule.split(".")[0]);
            continue;
          }
          this.extractDataListenerSelectors(rule.set, selectors);
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
      return _toConsumableArray(new Set(selectors));
    }
  }, {
    key: "checkEligibility",
    value: function () {
      var _checkEligibility = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee8(eligibilityRule) {
        var oppositeFlag, _eligibilityRule$spli, _eligibilityRule$spli2, eligibilityScope, eligibilityName, res;
        return regenerator_default().wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                robotEngine_logger.log("Checking eligibility ".concat(eligibilityRule));
                oppositeFlag = false;
                _eligibilityRule$spli = eligibilityRule.split("."), _eligibilityRule$spli2 = _slicedToArray(_eligibilityRule$spli, 2), eligibilityScope = _eligibilityRule$spli2[0], eligibilityName = _eligibilityRule$spli2[1];
                if (eligibilityScope.startsWith("!")) {
                  oppositeFlag = true;
                  eligibilityScope = eligibilityScope.slice(1);
                }
                _context8.next = 6;
                return getFromBeagleInfoLayer("__eRules.".concat(eligibilityScope));
              case 6:
                res = _context8.sent;
                if (!(!res || !Array.isArray(res))) {
                  _context8.next = 9;
                  break;
                }
                return _context8.abrupt("return", false);
              case 9:
                if (!(oppositeFlag && res.includes(eligibilityName))) {
                  _context8.next = 11;
                  break;
                }
                return _context8.abrupt("return", false);
              case 11:
                if (!(!oppositeFlag && !res.includes(eligibilityName))) {
                  _context8.next = 13;
                  break;
                }
                return _context8.abrupt("return", false);
              case 13:
                robotEngine_logger.log("".concat(eligibilityRule, " is eligible"));
                return _context8.abrupt("return", true);
              case 15:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));
      function checkEligibility(_x10) {
        return _checkEligibility.apply(this, arguments);
      }
      return checkEligibility;
    }()
  }, {
    key: "checkEligibilityRuleSet",
    value: function () {
      var _checkEligibilityRuleSet = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee9(eligibilityRuleSet) {
        var eligibilitySetType,
          previousIsEligible,
          isEligible,
          _iterator14,
          _step14,
          eligibilityRule,
          _args9 = arguments;
        return regenerator_default().wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                eligibilitySetType = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : null;
                previousIsEligible = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : null;
                robotEngine_logger.log("Checking robot eligibility");
                if (Array.isArray(eligibilityRuleSet)) {
                  _context9.next = 6;
                  break;
                }
                robotEngine_logger.failed("Eligibility Rule Set ".concat(eligibilityRuleSet, " is not an array"));
                return _context9.abrupt("return", false);
              case 6:
                isEligible = previousIsEligible;
                _iterator14 = robotEngine_createForOfIteratorHelper(eligibilityRuleSet);
                _context9.prev = 8;
                _iterator14.s();
              case 10:
                if ((_step14 = _iterator14.n()).done) {
                  _context9.next = 57;
                  break;
                }
                eligibilityRule = _step14.value;
                if (!(typeof eligibilityRule === "string")) {
                  _context9.next = 49;
                  break;
                }
                if (eligibilitySetType) {
                  _context9.next = 21;
                  break;
                }
                _context9.next = 16;
                return this.checkEligibility(eligibilityRule);
              case 16:
                isEligible = _context9.sent;
                if (isEligible) {
                  _context9.next = 19;
                  break;
                }
                return _context9.abrupt("return", false);
              case 19:
                _context9.next = 47;
                break;
              case 21:
                if (!eligibilitySetType) {
                  _context9.next = 47;
                  break;
                }
                if (!(isEligible === null)) {
                  _context9.next = 27;
                  break;
                }
                _context9.next = 25;
                return this.checkEligibility(eligibilityRule);
              case 25:
                isEligible = _context9.sent;
                return _context9.abrupt("continue", 55);
              case 27:
                _context9.t0 = eligibilitySetType;
                _context9.next = _context9.t0 === "or" ? 30 : _context9.t0 === "and" ? 37 : 44;
                break;
              case 30:
                _context9.t1 = isEligible;
                if (_context9.t1) {
                  _context9.next = 35;
                  break;
                }
                _context9.next = 34;
                return this.checkEligibility(eligibilityRule, eligibilitySetType);
              case 34:
                _context9.t1 = _context9.sent;
              case 35:
                isEligible = _context9.t1;
                return _context9.abrupt("break", 47);
              case 37:
                _context9.t2 = isEligible;
                if (!_context9.t2) {
                  _context9.next = 42;
                  break;
                }
                _context9.next = 41;
                return this.checkEligibility(eligibilityRule, eligibilitySetType);
              case 41:
                _context9.t2 = _context9.sent;
              case 42:
                isEligible = _context9.t2;
                return _context9.abrupt("break", 47);
              case 44:
                robotEngine_logger.failed("Unknown eligibilitySetType: ", eligibilitySetType);
                isEligible = false;
                return _context9.abrupt("break", 47);
              case 47:
                _context9.next = 55;
                break;
              case 49:
                if (!(_typeof(eligibilityRule) === "object")) {
                  _context9.next = 55;
                  break;
                }
                _context9.next = 52;
                return this.checkEligibilityRuleSet(eligibilityRule.set, eligibilityRule.type, isEligible);
              case 52:
                isEligible = _context9.sent;
                if (isEligible) {
                  _context9.next = 55;
                  break;
                }
                return _context9.abrupt("return", false);
              case 55:
                _context9.next = 10;
                break;
              case 57:
                _context9.next = 62;
                break;
              case 59:
                _context9.prev = 59;
                _context9.t3 = _context9["catch"](8);
                _iterator14.e(_context9.t3);
              case 62:
                _context9.prev = 62;
                _iterator14.f();
                return _context9.finish(62);
              case 65:
                return _context9.abrupt("return", isEligible);
              case 66:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this, [[8, 59, 62, 65]]);
      }));
      function checkEligibilityRuleSet(_x11) {
        return _checkEligibilityRuleSet.apply(this, arguments);
      }
      return checkEligibilityRuleSet;
    }() // Return index of businessRule, this is the businessRuleId
  }, {
    key: "checkBusinessRules",
    value: function () {
      var _checkBusinessRules = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee10(businessRuleSet) {
        var _iterator15, _step15, _step15$value, index, businessRule;
        return regenerator_default().wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _iterator15 = robotEngine_createForOfIteratorHelper(businessRuleSet.entries());
                _context10.prev = 1;
                _iterator15.s();
              case 3:
                if ((_step15 = _iterator15.n()).done) {
                  _context10.next = 11;
                  break;
                }
                _step15$value = _slicedToArray(_step15.value, 2), index = _step15$value[0], businessRule = _step15$value[1];
                _context10.next = 7;
                return this.checkEligibilityRuleSet([businessRule]);
              case 7:
                if (!_context10.sent) {
                  _context10.next = 9;
                  break;
                }
                return _context10.abrupt("return", index);
              case 9:
                _context10.next = 3;
                break;
              case 11:
                _context10.next = 16;
                break;
              case 13:
                _context10.prev = 13;
                _context10.t0 = _context10["catch"](1);
                _iterator15.e(_context10.t0);
              case 16:
                _context10.prev = 16;
                _iterator15.f();
                return _context10.finish(16);
              case 19:
                return _context10.abrupt("return", null);
              case 20:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this, [[1, 13, 16, 19]]);
      }));
      function checkBusinessRules(_x12) {
        return _checkBusinessRules.apply(this, arguments);
      }
      return checkBusinessRules;
    }()
  }]);
  return RobotEngine;
}();

;// CONCATENATED MODULE: ./src/BeagleRuleEngine/dataLayerChecker.js





var dataLayerChecker_logger = new src_logger("BeagleInfoLayerChecker");
var checkDataLayerRule = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee(rule) {
    var operator, condition, value, runtimeValue;
    return regenerator_default().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            dataLayerChecker_logger.log("Checking rule", JSON.stringify(rule));
            operator = rule.operator, condition = rule.condition, value = rule.value;
            _context.next = 4;
            return dataLayerFinder(operator);
          case 4:
            runtimeValue = _context.sent;
            return _context.abrupt("return", conditionChecker(runtimeValue, condition, value));
          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return function checkDataLayerRule(_x) {
    return _ref.apply(this, arguments);
  };
}();
var dataLayerFinder = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2(key) {
    var res;
    return regenerator_default().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            dataLayerChecker_logger.log("Searching beagleInfoLayer for key ", key);
            _context2.next = 3;
            return getFromBeagleInfoLayer(key);
          case 3:
            res = _context2.sent;
            if (!(res !== null && res !== undefined)) {
              _context2.next = 7;
              break;
            }
            dataLayerChecker_logger.success("Found key ".concat(key, " with value ").concat(res));
            return _context2.abrupt("return", res);
          case 7:
            dataLayerChecker_logger.failed("Key ".concat(key, " not found in beagleInfoLayer"));
            return _context2.abrupt("return", null);
          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return function dataLayerFinder(_x2) {
    return _ref2.apply(this, arguments);
  };
}();
;// CONCATENATED MODULE: ./src/BeagleRuleEngine/elementChecker.js


var elementChecker_logger = new src_logger("BeagleElementChecker");
var checkElementRule = function checkElementRule(rule) {
  elementChecker_logger.log("Checking rule", JSON.stringify(rule));
  var operator = rule.operator,
    condition = rule.condition,
    value = rule.value,
    selector = rule.selector,
    selectorAll = rule.selectorAll,
    _rule$selectorFallbac = rule.selectorFallback,
    selectorFallback = _rule$selectorFallbac === void 0 ? null : _rule$selectorFallbac;
  var mainSelector = selector;
  if (mainSelector && !window.top.document.querySelector(mainSelector)) {
    mainSelector = selectorFallback ? selectorFallback : mainSelector;
  }
  if (operator === null) {
    return conditionChecker(window.top.document.querySelector(mainSelector), condition, value);
  }
  if (mainSelector && !window.top.document.querySelector(mainSelector)) {
    elementChecker_logger.failed("Selector not found on page");
    return false;
  }
  if (selectorAll && !window.top.document.querySelectorAll(selectorAll)) {
    elementChecker_logger.failed("Selector not found on page");
    return false;
  }
  var element;
  if (mainSelector) element = window.top.document.querySelector(mainSelector);else if (selectorAll) element = Array.from(window.top.document.querySelectorAll(selectorAll));
  switch (operator) {
    case "text-number":
      {
        var tempVal;
        if (Array.isArray(element)) {
          tempVal = element.reduce(function (returnVal, elem) {
            returnVal += parseInt(elem.textContent.replace("TL", "").replace(".", ""));
            return returnVal;
          }, 0);
        } else {
          tempVal = parseInt(window.top.document.querySelector(mainSelector).textContent.replace("TL", "").replace(".", ""));
        }
        var runTimeValue = parseInt(tempVal);
        return conditionChecker(runTimeValue, condition, value);
      }
    case "classList":
      return conditionChecker(Array.from(element.classList), condition, value);
    case "count":
      {
        if (Array.isArray(element) && element.length > 0) {
          return conditionChecker(element.length, condition, value);
        } else if (element) {
          return conditionChecker(1, condition, value);
        } else {
          return conditionChecker(0, condition, value);
        }
      }
    case "style":
      {
        var elementStyles = getComputedStyle(element);
        var styleKey = value.split(":")[0].trim();
        var styleValue = value.split(":")[1].trim();
        var _runTimeValue = elementStyles[styleKey];
        return conditionChecker(_runTimeValue, condition, styleValue);
      }
    default:
      elementChecker_logger.failed("Operator not defined");
      return false;
  }
};
;// CONCATENATED MODULE: ./src/BeagleRuleEngine/functionChecker.js


var functionChecker_logger = new src_logger("BeagleFunctionChecker");
var checkFunctionRule = function checkFunctionRule(rule) {
  functionChecker_logger.log("Checking rule", JSON.stringify(rule));
  var operator = rule.operator,
    condition = rule.condition,
    value = rule.value;
  if (!operator) {
    functionChecker_logger.failed("Rule function not defined");
    return false;
  }
  var ruleFunction = Function(operator);
  var runtimeValue = ruleFunction();
  return conditionChecker(runtimeValue, condition, value);
};
;// CONCATENATED MODULE: ./src/BeagleRuleEngine/sessionChecker.js



var sessionChecker_logger = new src_logger("BeagleSessionChecker");
var checkSessionRule = function checkSessionRule(rule) {
  sessionChecker_logger.log("Checking rule", JSON.stringify(rule));
  var operator = rule.operator,
    condition = rule.condition,
    value = rule.value;
  switch (operator) {
    case "duration":
      return durationHandler(condition, value);
    case "history":
      return historyHandler(condition, value);
    default:
      return null;
  }
};
var getSessionTimestamp = function getSessionTimestamp() {
  try {
    return new Date(parseInt(window.sessionStorage.getItem(SESSION_STORAGE_KEYS.SESSION_TIMESTAMP)));
  } catch (err) {
    sessionChecker_logger.failed("Could not get session timestamp", err);
    return Date.now();
  }
};
var durationHandler = function durationHandler(condition, value) {
  var duration = (Date.now() - getSessionTimestamp()) / 1000;
  return conditionChecker(duration, condition, parseInt(value));
};
var historyHandler = function historyHandler(condition, value) {
  var _window$sessionStorag;
  var currentHistory = (_window$sessionStorag = window.sessionStorage.getItem(SESSION_STORAGE_KEYS.SESSION_HISTORY)) === null || _window$sessionStorag === void 0 ? void 0 : _window$sessionStorag.split(",");
  return conditionChecker(currentHistory, condition, value);
};
;// CONCATENATED MODULE: ./src/BeagleRuleEngine/urlChecker.js


var urlChecker_logger = new src_logger("BeagleUrlChecker");
var checkUrlRule = function checkUrlRule(rule) {
  urlChecker_logger.log("Checking rule", JSON.stringify(rule));
  var operator = rule.operator,
    condition = rule.condition,
    value = rule.value;
  switch (operator) {
    case "path":
      {
        var requestURL = window.top.location.href;
        var path = new URL(requestURL).pathname;
        urlChecker_logger.log("Checking path ".concat(path, " matches rule path ").concat(value));
        return conditionChecker(path, condition, value);
      }
    case "PLACEHOLDER":
      {
        return null;
      }
    default:
      return null;
  }
};
;// CONCATENATED MODULE: ./src/BeagleRuleEngine/envChecker.js



var envChecker_logger = new src_logger("BeagleEnvChecker");
var checkEnvRule = function checkEnvRule(rule) {
  envChecker_logger.log("Checking rule", JSON.stringify(rule));
  var operator = rule.operator,
    condition = rule.condition,
    value = rule.value;
  switch (operator) {
    case "device_type":
      {
        var isMobile = window.matchMedia(MOBILE_MEDIA_QUERY).matches ? "mobile" : "desktop";
        return conditionChecker(isMobile, condition, value);
      }
    case "PLACEHOLDER":
      {
        return null;
      }
    default:
      return null;
  }
};
;// CONCATENATED MODULE: ./src/BeagleRuleEngine/productInfoChecker.js







var productInfoChecker_logger = new src_logger("BeagleProductInfoChecker");
var checkProductInfoRule = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee(rule) {
    var _skuList$Object$keys$;
    var operator, condition, value, skuList, runtimeValue, sku;
    return regenerator_default().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            productInfoChecker_logger.log("Checking rule", JSON.stringify(rule));
            operator = rule.operator, condition = rule.condition, value = rule.value;
            _context.next = 4;
            return getFromBeagleInfoLayer("__features.SKUsonPage", true);
          case 4:
            skuList = _context.sent;
            if (!(!skuList || _typeof(skuList) === "object" && !Object.keys(skuList).length)) {
              _context.next = 7;
              break;
            }
            return _context.abrupt("return", false);
          case 7:
            runtimeValue = null;
            sku = (_skuList$Object$keys$ = skuList[Object.keys(skuList)[0]]) === null || _skuList$Object$keys$ === void 0 ? void 0 : _skuList$Object$keys$.id;
            _context.t0 = operator;
            _context.next = _context.t0 === "transactionIn2Weeks" ? 12 : _context.t0 === "addToCartIn2Weeks" ? 17 : _context.t0 === "productViewCount" ? 22 : 27;
            break;
          case 12:
            productInfoChecker_logger.log("Getting TransactionCount for sku ", sku);
            _context.next = 15;
            return getTransactionCount(sku);
          case 15:
            runtimeValue = _context.sent;
            return _context.abrupt("break", 27);
          case 17:
            productInfoChecker_logger.log("Getting AddToCartCount for sku ", sku);
            _context.next = 20;
            return getAddToCartCount(sku);
          case 20:
            runtimeValue = _context.sent;
            return _context.abrupt("break", 27);
          case 22:
            productInfoChecker_logger.log("Getting productViewCount for sku ", sku);
            _context.next = 25;
            return getPreviewCount(sku);
          case 25:
            runtimeValue = _context.sent;
            return _context.abrupt("break", 27);
          case 27:
            return _context.abrupt("return", conditionChecker(runtimeValue, condition, value));
          case 28:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return function checkProductInfoRule(_x) {
    return _ref.apply(this, arguments);
  };
}();
var getTransactionCount = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2(sku) {
    var productInfo;
    return regenerator_default().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return store.getInstance().get(sku);
          case 2:
            productInfo = _context2.sent;
            if (!(sku && productInfo)) {
              _context2.next = 5;
              break;
            }
            return _context2.abrupt("return", productInfo.saleCntVisitorsIn15);
          case 5:
            return _context2.abrupt("return", -1);
          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return function getTransactionCount(_x2) {
    return _ref2.apply(this, arguments);
  };
}();
var getAddToCartCount = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3(sku) {
    var productInfo;
    return regenerator_default().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return store.getInstance().get(sku);
          case 2:
            productInfo = _context3.sent;
            if (!(sku && productInfo)) {
              _context3.next = 5;
              break;
            }
            return _context3.abrupt("return", productInfo.cartCntVisitorsIn15);
          case 5:
            return _context3.abrupt("return", -1);
          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return function getAddToCartCount(_x3) {
    return _ref3.apply(this, arguments);
  };
}();
var getPreviewCount = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4(sku) {
    var productInfo;
    return regenerator_default().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return store.getInstance().get(sku);
          case 2:
            productInfo = _context4.sent;
            if (!(sku && productInfo)) {
              _context4.next = 5;
              break;
            }
            return _context4.abrupt("return", productInfo.viewCntVisitorsIn1);
          case 5:
            return _context4.abrupt("return", -1);
          case 6:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return function getPreviewCount(_x4) {
    return _ref4.apply(this, arguments);
  };
}();
;// CONCATENATED MODULE: ./src/BeagleRuleEngine/index.js






function BeagleRuleEngine_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = BeagleRuleEngine_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function BeagleRuleEngine_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return BeagleRuleEngine_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return BeagleRuleEngine_arrayLikeToArray(o, minLen); }
function BeagleRuleEngine_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }












var BeagleRuleEngine_logger = new src_logger("BeagleRuleEngine");
var RuleEngine = /*#__PURE__*/function () {
  function RuleEngine(body) {
    _classCallCheck(this, RuleEngine);
    var eligibilityRules = body.eligibilityRules,
      baseRuleSet = body.baseRuleSet;
    this.baseRuleSet = baseRuleSet;
    this.eligibilityRules = eligibilityRules;
    this.addedDataListeners = [];
    this.mutex = new Mutex();
  }
  _createClass(RuleEngine, [{
    key: "checkRules",
    value: function () {
      var _checkRules = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
        var _iterator, _step, rule, ruleSatisfied;
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _iterator = BeagleRuleEngine_createForOfIteratorHelper(this.baseRuleSet);
                _context.prev = 1;
                _iterator.s();
              case 3:
                if ((_step = _iterator.n()).done) {
                  _context.next = 12;
                  break;
                }
                rule = _step.value;
                _context.next = 7;
                return this.checkRule(rule);
              case 7:
                ruleSatisfied = _context.sent;
                if (ruleSatisfied) {
                  _context.next = 10;
                  break;
                }
                return _context.abrupt("return", false);
              case 10:
                _context.next = 3;
                break;
              case 12:
                _context.next = 17;
                break;
              case 14:
                _context.prev = 14;
                _context.t0 = _context["catch"](1);
                _iterator.e(_context.t0);
              case 17:
                _context.prev = 17;
                _iterator.f();
                return _context.finish(17);
              case 20:
                return _context.abrupt("return", true);
              case 21:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[1, 14, 17, 20]]);
      }));
      function checkRules() {
        return _checkRules.apply(this, arguments);
      }
      return checkRules;
    }()
  }, {
    key: "checkRule",
    value: function () {
      var _checkRule = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2(rule) {
        var chain, chain_condition, type, ruleSatisfied;
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                chain = rule.chain, chain_condition = rule.chain_condition, type = rule.type;
                ruleSatisfied = null; // check rule
                _context2.t0 = type;
                _context2.next = _context2.t0 === "session" ? 5 : _context2.t0 === "element" ? 7 : _context2.t0 === "dataLayer" ? 9 : _context2.t0 === "url" ? 13 : _context2.t0 === "function" ? 15 : _context2.t0 === "environment" ? 17 : _context2.t0 === "productInfoLookup" ? 19 : 23;
                break;
              case 5:
                ruleSatisfied = checkSessionRule(rule);
                return _context2.abrupt("break", 25);
              case 7:
                ruleSatisfied = checkElementRule(rule);
                return _context2.abrupt("break", 25);
              case 9:
                _context2.next = 11;
                return checkDataLayerRule(rule);
              case 11:
                ruleSatisfied = _context2.sent;
                return _context2.abrupt("break", 25);
              case 13:
                ruleSatisfied = checkUrlRule(rule);
                return _context2.abrupt("break", 25);
              case 15:
                ruleSatisfied = checkFunctionRule(rule);
                return _context2.abrupt("break", 25);
              case 17:
                ruleSatisfied = checkEnvRule(rule);
                return _context2.abrupt("break", 25);
              case 19:
                _context2.next = 21;
                return checkProductInfoRule(rule);
              case 21:
                ruleSatisfied = _context2.sent;
                return _context2.abrupt("break", 25);
              case 23:
                BeagleRuleEngine_logger.failed("No such rule type: ".concat(type));
                return _context2.abrupt("return", null);
              case 25:
                if (!chain) {
                  _context2.next = 51;
                  break;
                }
                _context2.t1 = chain_condition;
                _context2.next = _context2.t1 === "and" ? 29 : _context2.t1 === "or" ? 36 : _context2.t1 === "xor" ? 43 : 49;
                break;
              case 29:
                _context2.t2 = ruleSatisfied;
                if (!_context2.t2) {
                  _context2.next = 34;
                  break;
                }
                _context2.next = 33;
                return this.checkRule(chain);
              case 33:
                _context2.t2 = _context2.sent;
              case 34:
                ruleSatisfied = _context2.t2;
                return _context2.abrupt("break", 51);
              case 36:
                _context2.t3 = ruleSatisfied;
                if (_context2.t3) {
                  _context2.next = 41;
                  break;
                }
                _context2.next = 40;
                return this.checkRule(chain);
              case 40:
                _context2.t3 = _context2.sent;
              case 41:
                ruleSatisfied = _context2.t3;
                return _context2.abrupt("break", 51);
              case 43:
                _context2.t4 = ruleSatisfied;
                _context2.next = 46;
                return this.checkRule(chain);
              case 46:
                _context2.t5 = _context2.sent;
                ruleSatisfied = _context2.t4 != _context2.t5;
                return _context2.abrupt("break", 51);
              case 49:
                BeagleRuleEngine_logger.failed("No such chain condition");
                return _context2.abrupt("break", 51);
              case 51:
                return _context2.abrupt("return", ruleSatisfied ? rule.name || true : false);
              case 52:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function checkRule(_x) {
        return _checkRule.apply(this, arguments);
      }
      return checkRule;
    }()
  }, {
    key: "assesEligibilityRules",
    value: function () {
      var _assesEligibilityRules = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3() {
        var keyPromisesMap, _i, _Object$entries, _Object$entries$_i, key, rules, _iterator2, _step2, rule, _i2, _Object$entries2, _Object$entries2$_i, _key, rulePromises, satisfiedRuleIds;
        return regenerator_default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                addToBeagleInfoLayer("m", "assessing-eligibility-rules");
                keyPromisesMap = {};
                for (_i = 0, _Object$entries = Object.entries(this.eligibilityRules); _i < _Object$entries.length; _i++) {
                  _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), key = _Object$entries$_i[0], rules = _Object$entries$_i[1];
                  keyPromisesMap[key] = [];
                  _iterator2 = BeagleRuleEngine_createForOfIteratorHelper(rules);
                  try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                      rule = _step2.value;
                      keyPromisesMap[key].push(this.checkRule(rule));
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }
                }
                _i2 = 0, _Object$entries2 = Object.entries(keyPromisesMap);
              case 4:
                if (!(_i2 < _Object$entries2.length)) {
                  _context3.next = 14;
                  break;
                }
                _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2), _key = _Object$entries2$_i[0], rulePromises = _Object$entries2$_i[1];
                _context3.next = 8;
                return Promise.all(rulePromises);
              case 8:
                satisfiedRuleIds = _context3.sent;
                addToBeagleInfoLayer("__eRules.".concat(_key), satisfiedRuleIds.filter(function (id) {
                  return id !== false;
                }));
                this.setUpListeners(_key, this.eligibilityRules[_key]);
              case 11:
                _i2++;
                _context3.next = 4;
                break;
              case 14:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function assesEligibilityRules() {
        return _assesEligibilityRules.apply(this, arguments);
      }
      return assesEligibilityRules;
    }()
  }, {
    key: "assesEligibilityRulesCallBack",
    value: function () {
      var _assesEligibilityRulesCallBack = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4(key, rules) {
        var _this = this;
        var release, _iterator3, _step3, _loop, _ret;
        return regenerator_default().wrap(function _callee4$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!(!key || !rules || !rules.length)) {
                  _context5.next = 2;
                  break;
                }
                return _context5.abrupt("return");
              case 2:
                _context5.next = 4;
                return this.mutex.acquire();
              case 4:
                release = _context5.sent;
                BeagleRuleEngine_logger.log("Lock acquired for key ".concat(key));
                _context5.prev = 6;
                _iterator3 = BeagleRuleEngine_createForOfIteratorHelper(rules);
                _context5.prev = 8;
                _loop = /*#__PURE__*/regenerator_default().mark(function _loop() {
                  var rule, isEligible, current, filtered;
                  return regenerator_default().wrap(function _loop$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          rule = _step3.value;
                          _context4.next = 3;
                          return _this.checkRule(rule);
                        case 3:
                          isEligible = _context4.sent;
                          _context4.next = 6;
                          return getFromBeagleInfoLayer("__eRules.".concat(key));
                        case 6:
                          _context4.t0 = _context4.sent;
                          if (_context4.t0) {
                            _context4.next = 9;
                            break;
                          }
                          _context4.t0 = [];
                        case 9:
                          current = _context4.t0;
                          if (!isEligible) {
                            _context4.next = 19;
                            break;
                          }
                          if (!current.includes(rule.name)) {
                            _context4.next = 13;
                            break;
                          }
                          return _context4.abrupt("return", "continue");
                        case 13:
                          current.push(rule.name);
                          addToBeagleInfoLayer("__eRules.".concat(key), current);
                          if (!(key === "PageType")) {
                            _context4.next = 17;
                            break;
                          }
                          return _context4.abrupt("return", "break");
                        case 17:
                          _context4.next = 23;
                          break;
                        case 19:
                          if (current.includes(rule.name)) {
                            _context4.next = 21;
                            break;
                          }
                          return _context4.abrupt("return", "continue");
                        case 21:
                          filtered = current.filter(function (k) {
                            return k !== rule.name;
                          });
                          addToBeagleInfoLayer("__eRules.".concat(key), filtered);
                        case 23:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _loop);
                });
                _iterator3.s();
              case 11:
                if ((_step3 = _iterator3.n()).done) {
                  _context5.next = 20;
                  break;
                }
                return _context5.delegateYield(_loop(), "t0", 13);
              case 13:
                _ret = _context5.t0;
                if (!(_ret === "continue")) {
                  _context5.next = 16;
                  break;
                }
                return _context5.abrupt("continue", 18);
              case 16:
                if (!(_ret === "break")) {
                  _context5.next = 18;
                  break;
                }
                return _context5.abrupt("break", 20);
              case 18:
                _context5.next = 11;
                break;
              case 20:
                _context5.next = 25;
                break;
              case 22:
                _context5.prev = 22;
                _context5.t1 = _context5["catch"](8);
                _iterator3.e(_context5.t1);
              case 25:
                _context5.prev = 25;
                _iterator3.f();
                return _context5.finish(25);
              case 28:
                _context5.next = 33;
                break;
              case 30:
                _context5.prev = 30;
                _context5.t2 = _context5["catch"](6);
                BeagleRuleEngine_logger.failed("Error assessing rules for key: ".concat(key, " - ").concat(_context5.t2.message));
              case 33:
                _context5.prev = 33;
                BeagleRuleEngine_logger.log("Releasing lock for key: ".concat(key));
                release();
                return _context5.finish(33);
              case 37:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee4, this, [[6, 30, 33, 37], [8, 22, 25, 28]]);
      }));
      function assesEligibilityRulesCallBack(_x2, _x3) {
        return _assesEligibilityRulesCallBack.apply(this, arguments);
      }
      return assesEligibilityRulesCallBack;
    }()
  }, {
    key: "setUpListeners",
    value: function () {
      var _setUpListeners = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee5(key, rules) {
        var _this2 = this;
        var _this$extractRuleAttr, dataLayerRules, elementRules, _i3, _Object$entries3, _Object$entries3$_i, operator, _rules, boundAssesEligibilityRulesCallBack, _loop2, _i4, _Object$entries4;
        return regenerator_default().wrap(function _callee5$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _this$extractRuleAttr = this.extractRuleAttributes(rules), dataLayerRules = _this$extractRuleAttr.dataLayerRules, elementRules = _this$extractRuleAttr.elementRules;
                for (_i3 = 0, _Object$entries3 = Object.entries(dataLayerRules); _i3 < _Object$entries3.length; _i3++) {
                  _Object$entries3$_i = _slicedToArray(_Object$entries3[_i3], 2), operator = _Object$entries3$_i[0], _rules = _Object$entries3$_i[1];
                  boundAssesEligibilityRulesCallBack = this.assesEligibilityRulesCallBack.bind(this, key, _rules);
                  addDataListener(operator, boundAssesEligibilityRulesCallBack);
                }
                _loop2 = function _loop2() {
                  var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i4], 2),
                    selector = _Object$entries4$_i[0],
                    rules = _Object$entries4$_i[1];
                  var observer = new MutationObserver(function (mutationList) {
                    if (window.top.document.readyState !== "complete") return;
                    var nodes = [];
                    var _iterator4 = BeagleRuleEngine_createForOfIteratorHelper(mutationList),
                      _step4;
                    try {
                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                        var mutationRecord = _step4.value;
                        nodes = [].concat(_toConsumableArray(nodes), _toConsumableArray(Array.from(mutationRecord.addedNodes)), _toConsumableArray(Array.from(mutationRecord.removedNodes)));
                      }
                      // exclude mutations that only update text
                    } catch (err) {
                      _iterator4.e(err);
                    } finally {
                      _iterator4.f();
                    }
                    if (nodes.every(function (n) {
                      return n.tagName === undefined;
                    })) return;
                    _this2.assesEligibilityRulesCallBack(key, rules);
                  });
                  if (selector === "body") {
                    observer.observe(window.top.document.body, {
                      subtree: true,
                      childList: true
                    });
                  } else {
                    observer.observe(window.top.document.querySelector(selector).parentNode, {
                      subtree: true,
                      childList: true
                    });
                  }
                };
                for (_i4 = 0, _Object$entries4 = Object.entries(elementRules); _i4 < _Object$entries4.length; _i4++) {
                  _loop2();
                }
              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee5, this);
      }));
      function setUpListeners(_x4, _x5) {
        return _setUpListeners.apply(this, arguments);
      }
      return setUpListeners;
    }()
  }, {
    key: "extractRuleAttributes",
    value: function extractRuleAttributes(rules) {
      var dataLayerRules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var elementRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      if (!rules || !rules.length) return;
      var _iterator5 = BeagleRuleEngine_createForOfIteratorHelper(rules),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var rule = _step5.value;
          var type = rule.type;
          switch (type) {
            case "dataLayer":
              if (!dataLayerRules[rule.operator]) {
                dataLayerRules[rule.operator] = [];
              }
              dataLayerRules[rule.operator].push(rule);
              break;
            case "element":
              if (document.querySelector(rule.selector)) {
                elementRules[rule.selector] = elementRules[rule.selector] ? [].concat(_toConsumableArray(elementRules[rule.selector]), [rule]) : [rule];
                break;
              }
              if (document.querySelectorAll(rule.selectorAll).length) {
                elementRules[rule.selectorAll] = elementRules[rule.selectorAll] ? [].concat(_toConsumableArray(elementRules[rule.selectorAll]), [rule]) : [rule];
                break;
              }
              elementRules["body"] = elementRules["body"] ? [].concat(_toConsumableArray(elementRules["body"]), [rule]) : [rule];
              break;
          }
          if (rule.chain) {
            this.extractRuleAttributes([rule.chain], dataLayerRules, elementRules);
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      return {
        dataLayerRules: dataLayerRules,
        elementRules: elementRules
      };
    }
  }], [{
    key: "getEligibilityRules",
    value: function () {
      var _getEligibilityRules = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee6() {
        var eligibilityRulesObj, elapsedHours;
        return regenerator_default().wrap(function _callee6$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.prev = 0;
                eligibilityRulesObj = window.localStorage.getItem(LOCAL_STORAGE_KEYS.ELIGIBILITY_RULES);
                if (!eligibilityRulesObj) {
                  _context7.next = 8;
                  break;
                }
                eligibilityRulesObj = JSON.parse(eligibilityRulesObj);
                if (!eligibilityRulesObj.timestamp) {
                  _context7.next = 8;
                  break;
                }
                elapsedHours = (Date.now() - eligibilityRulesObj.timestamp) / (1000 * 3600);
                if (!(elapsedHours < LOCAL_STORAGE_TTL_HOURS)) {
                  _context7.next = 8;
                  break;
                }
                return _context7.abrupt("return", eligibilityRulesObj.rules);
              case 8:
                _context7.next = 10;
                return fetchEligibilityRules();
              case 10:
                eligibilityRulesObj = _context7.sent;
                if (eligibilityRulesObj) {
                  _context7.next = 14;
                  break;
                }
                BeagleRuleEngine_logger.failed("Failed to fetch eligibility rules");
                return _context7.abrupt("return", null);
              case 14:
                eligibilityRulesObj = {
                  rules: eligibilityRulesObj,
                  timestamp: Date.now()
                };
                window.localStorage.setItem(LOCAL_STORAGE_KEYS.ELIGIBILITY_RULES, JSON.stringify(eligibilityRulesObj));
                return _context7.abrupt("return", eligibilityRulesObj.rules);
              case 19:
                _context7.prev = 19;
                _context7.t0 = _context7["catch"](0);
                BeagleRuleEngine_logger.failed("Could not get eligibility rules: ", _context7.t0.message);
                return _context7.abrupt("return", null);
              case 23:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee6, null, [[0, 19]]);
      }));
      function getEligibilityRules() {
        return _getEligibilityRules.apply(this, arguments);
      }
      return getEligibilityRules;
    }()
  }]);
  return RuleEngine;
}();

;// CONCATENATED MODULE: ./src/BeagleOn/index.js









var BeagleOn_logger = new src_logger("BeagleOnComponent");
var beagleOn = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee(identifier, debugMode, pageType, treatmentWeights) {
    var persistProductInfoPromise, eligibilityRulesAssessPromise, treatmentsPromise, searchParams, debugFilteredTreatments, treatments, treatmentRepository, matchedTreatments, robotEngine;
    return regenerator_default().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            persistProductInfoPromise = store.getInstance().persistProductInfo();
            eligibilityRulesAssessPromise = assesEligibilityRules();
            treatmentsPromise = BeagleTreatmentRepository.getTreatments();
            injectStyleSheet();
            initiateSessionStorages();
            addToBeagleInfoLayer("m", "on-init");
            searchParams = window.location.search;
            debugFilteredTreatments = null;
            if (debugMode && searchParams.includes("filter=")) {
              debugFilteredTreatments = searchParams.slice(searchParams.indexOf("[") + 1, searchParams.lastIndexOf("]")).split(",").map(function (item) {
                return parseInt(item, 10);
              });
            }
            _context.next = 11;
            return treatmentsPromise;
          case 11:
            treatments = _context.sent;
            if (treatments) {
              _context.next = 15;
              break;
            }
            addToBeagleInfoLayer("m", "no-robot-weights");
            throw new Error("Failed to fetch treatments/weights");
          case 15:
            BeagleOn_logger.success("Found treatments: ", treatments);
            addToBeagleInfoLayer("m", "fetched-treatments");
            treatmentRepository = new BeagleTreatmentRepository({
              treatments: treatments,
              treatmentWeights: treatmentWeights
            });
            _context.next = 20;
            return treatmentRepository.getMatchedTreatments(debugMode);
          case 20:
            matchedTreatments = _context.sent;
            if (!(matchedTreatments === null)) {
              _context.next = 25;
              break;
            }
            addToBeagleInfoLayer("m", "no-user-segment");
            removeDocumentHide();
            return _context.abrupt("return");
          case 25:
            if (matchedTreatments.length) {
              _context.next = 30;
              break;
            }
            BeagleOn_logger.log("No treatments matched, returning without further action");
            addToBeagleInfoLayer("m", "no-robot-matched");
            removeDocumentHide();
            return _context.abrupt("return");
          case 30:
            addToBeagleInfoLayer("m", "found-matched-robots");
            _context.prev = 31;
            _context.next = 34;
            return eligibilityRulesAssessPromise;
          case 34:
            _context.next = 40;
            break;
          case 36:
            _context.prev = 36;
            _context.t0 = _context["catch"](31);
            addToBeagleInfoLayer("m", "no-rules-assessed");
            throw new Error("Could not asses eligibility rules");
          case 40:
            addToBeagleInfoLayer("m", "rules-assessed");
            _context.prev = 41;
            _context.next = 44;
            return persistProductInfoPromise;
          case 44:
            _context.next = 50;
            break;
          case 46:
            _context.prev = 46;
            _context.t1 = _context["catch"](41);
            addToBeagleInfoLayer("m", "product-into-no-persist");
            throw new Error("Could not persist product info");
          case 50:
            addToBeagleInfoLayer("m", "engaging-robots");
            robotEngine = new RobotEngine({
              debugFilteredTreatments: debugFilteredTreatments,
              debugMode: debugMode,
              matchedTreatments: matchedTreatments,
              identifier: identifier,
              pageType: pageType
            });
            _context.next = 54;
            return robotEngine.engageRobots();
          case 54:
            removeDocumentHide();
            addToBeagleInfoLayer("m", "robots-engaged");
            _context.t2 = BeagleOn_logger;
            _context.next = 59;
            return getFromBeagleInfoLayer("a");
          case 59:
            _context.t3 = _context.sent;
            _context.t2.success.call(_context.t2, "Applied treatments: ", _context.t3);
          case 61:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[31, 36], [41, 46]]);
  }));
  return function beagleOn(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();
function assesEligibilityRules() {
  return _assesEligibilityRules.apply(this, arguments);
}
function _assesEligibilityRules() {
  _assesEligibilityRules = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {
    var eligibilityRules, ruleEngine;
    return regenerator_default().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            addToBeagleInfoLayer("m", "fetching-eligibility-rules");
            _context2.next = 3;
            return RuleEngine.getEligibilityRules();
          case 3:
            eligibilityRules = _context2.sent;
            if (eligibilityRules) {
              _context2.next = 6;
              break;
            }
            return _context2.abrupt("return");
          case 6:
            addToBeagleInfoLayer("m", "fetched-eligibility-rules");
            ruleEngine = new RuleEngine({
              eligibilityRules: eligibilityRules
            });
            _context2.next = 10;
            return ruleEngine.assesEligibilityRules();
          case 10:
            addToBeagleInfoLayer("m", "assessed-eligibility-rules");
          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _assesEligibilityRules.apply(this, arguments);
}
/* harmony default export */ var BeagleOn = (beagleOn);
;// CONCATENATED MODULE: ./src/BeagleInfoLayer/segment-computer.js





var segment_computer_logger = new src_logger("SegmentationComputer");
function computeSegment(_x) {
  return _computeSegment.apply(this, arguments);
}
function _computeSegment() {
  _computeSegment = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee(treatmentWeights) {
    var _i, _Object$keys, _treatmentWeights$seg, segment, ruleSet, segmentRuleEngine;
    return regenerator_default().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            segment_computer_logger.log("Determining user segment");
            _context.prev = 1;
            _i = 0, _Object$keys = Object.keys(treatmentWeights);
          case 3:
            if (!(_i < _Object$keys.length)) {
              _context.next = 18;
              break;
            }
            segment = _Object$keys[_i];
            ruleSet = (_treatmentWeights$seg = treatmentWeights[segment]) === null || _treatmentWeights$seg === void 0 ? void 0 : _treatmentWeights$seg.ruleSet;
            if (ruleSet) {
              _context.next = 8;
              break;
            }
            return _context.abrupt("continue", 15);
          case 8:
            segmentRuleEngine = new RuleEngine({
              baseRuleSet: ruleSet,
              businessRuleSet: []
            });
            _context.next = 11;
            return segmentRuleEngine.checkRules();
          case 11:
            if (!_context.sent) {
              _context.next = 15;
              break;
            }
            segment_computer_logger.log("User segment matched: ".concat(segment));
            addToBeagleInfoLayer("s", segment);
            return _context.abrupt("return", segment);
          case 15:
            _i++;
            _context.next = 3;
            break;
          case 18:
            segment_computer_logger.log("User segment not matched");
            return _context.abrupt("return", null);
          case 22:
            _context.prev = 22;
            _context.t0 = _context["catch"](1);
            segment_computer_logger.failed("Could not compute user segment");
            return _context.abrupt("return", null);
          case 26:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 22]]);
  }));
  return _computeSegment.apply(this, arguments);
}
;// CONCATENATED MODULE: ./src/BeagleClientSDK/index.js










var SHUTDOWN = false;
_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
  var monitor, logger, earlyLogSent, hideRemoved, _String$prototype, treatmentWeightsPromise, identifier, cookiePct, userSegment, treatmentWeights, oosReason, isLabelSent, timeoutCounter, debugMode, processAdminUser, isAdmin, isOn, pageType;
  return regenerator_default().wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          switchToEaseOut();
          monitor = null;
          logger = new src_logger();
          logger.info("Beagle initializing");
          window.dataLayer = window.dataLayer || [];
          earlyLogSent = false;
          hideRemoved = false;
          _context.prev = 7;
          /* ======================================== INIT TASKS ===================================== */

          addToBeagleInfoLayer("GLOV_ON", "not-sent | initializing");
          treatmentWeightsPromise = BeagleTreatmentRepository.getTreatmentWeights();
          monitor = new BeagleMonitor();
          initializeBeagleInfoLayer();
          _context.next = 14;
          return getIdentifier();
        case 14:
          identifier = _context.sent;
          logger.log("Found identifier: ", identifier);
          addToBeagleInfoLayer("cookieGaId", identifier);
          _context.next = 19;
          return determinePct(identifier);
        case 19:
          cookiePct = _context.sent;
          addToBeagleInfoLayer("onHashPct", cookiePct);
          addToBeagleInfoLayer("view_epoch", Date.now() + Math.random());
          addToBeagleInfoLayer("v", VERSION);
          addToBeagleInfoLayer("sr", SPLIT_RATIO);

          // data-less log to detect bounces
          _context.next = 26;
          return monitor.packAndQueueArrivalLog();
        case 26:
          setTimeout(function () {
            removeDocumentHide();
          }, 2000);

          /* ================================= EARLY PRUNE OUT-OF-SCOPE ============================== */
          userSegment = null;
          treatmentWeights = null;
          oosReason = window.localStorage.getItem(LOCAL_STORAGE_KEYS.OUT_OF_SCOPE);
          if (!(oosReason !== "unsupported")) {
            _context.next = 40;
            break;
          }
          _context.next = 33;
          return treatmentWeightsPromise;
        case 33:
          treatmentWeights = _context.sent;
          if (treatmentWeights) {
            _context.next = 37;
            break;
          }
          addToBeagleInfoLayer("m", "no-robot-weights");
          throw new Error("Unable to fetch weights");
        case 37:
          _context.next = 39;
          return computeSegment(treatmentWeights);
        case 39:
          userSegment = _context.sent;
        case 40:
          if (!(cookiePct === null || !navigator.sendBeacon || typeof navigator.sendBeacon !== "function" || typeof (String === null || String === void 0 ? void 0 : (_String$prototype = String.prototype) === null || _String$prototype === void 0 ? void 0 : _String$prototype.padStart) !== "function" || oosReason && oosReason === "unsupported" || !userSegment)) {
            _context.next = 45;
            break;
          }
          window.dataLayer.push({
            event: "GLOV",
            GLOV_ON: "unsupported"
          });
          window.localStorage.setItem(LOCAL_STORAGE_KEYS.OUT_OF_SCOPE, "unsupported");
          addToBeagleInfoLayer("GLOV_ON", "unsupported | device");
          throw new Error("unsupported-device");
        case 45:
          isLabelSent = window.localStorage.getItem(LOCAL_STORAGE_KEYS.IS_LABEL_SENT);
          timeoutCounter = parseInt(sessionStorage.getItem(SESSION_STORAGE_KEYS.TIMEOUT_COUNT)) || 0; // check if debug mode is on, also adds dbm to beagleInfoLayer and sets oosReason
          debugMode = getDebugMode("employee"); // if timed-out too many times for very first interactsions, make out of scope for the session
          if (!(!debugMode && !oosReason && !isLabelSent && timeoutCounter > MAX_TIMEOUT_PER_SESSION)) {
            _context.next = 52;
            break;
          }
          window.dataLayer.push({
            event: "GLOV",
            GLOV_ON: "unsupported"
          });
          addToBeagleInfoLayer("GLOV_ON", "unsupported | timeout");
          throw new Error("max-timeout");
        case 52:
          /* =================================== ADMIN USER CHECK ==================================== */
          // TODO: rename showroom logic to admin, and map vvsIsShowroom to a configurable admin param
          // if admin user, make out of scope and mark as employee
          processAdminUser = function processAdminUser() {
            window.dataLayer.push({
              event: "GLOV",
              GLOV_ON: "employee"
            });
            window.localStorage.setItem(LOCAL_STORAGE_KEYS.OUT_OF_SCOPE, "employee");
            window.localStorage.setItem(LOCAL_STORAGE_KEYS.IS_ADMIN, true);
            addToBeagleInfoLayer("GLOV_ON", "employee | admin");
            throw new Error("admin-employee");
          };
          isAdmin = window.localStorage.getItem(LOCAL_STORAGE_KEYS.IS_ADMIN); // if not found in localStorage, check beagleInfoLayer with blocking mdoe
          if (!(isAdmin === null || isAdmin === undefined)) {
            _context.next = 60;
            break;
          }
          _context.next = 57;
          return getFromBeagleInfoLayer("vvsIsShowroom", true);
        case 57:
          isAdmin = _context.sent;
          _context.next = 61;
          break;
        case 60:
          if (isAdmin === "false" || isAdmin === false) {
            // async call to getFromBeagleInfoLayer, then set localStorage
            getFromBeagleInfoLayer("vvsIsShowroom", true).then(function (isAdmin) {
              if (isAdmin && (isAdmin === "true" || isAdmin === true)) {
                processAdminUser();
              }
            });
          }
        case 61:
          if (!(isAdmin && (isAdmin === "true" || isAdmin === true))) {
            _context.next = 65;
            break;
          }
          processAdminUser();
          _context.next = 72;
          break;
        case 65:
          if (!(isAdmin === null || isAdmin === undefined)) {
            _context.next = 71;
            break;
          }
          sessionStorage.setItem(SESSION_STORAGE_KEYS.TIMEOUT_COUNT, timeoutCounter + 1);
          addToBeagleInfoLayer("GLOV_ON", "not-sent | timeout");
          throw new Error("no-admin-status");
        case 71:
          window.localStorage.setItem(LOCAL_STORAGE_KEYS.IS_ADMIN, false);
        case 72:
          if (window.top.document.documentElement.classList.contains("glov-ease")) {
            _context.next = 76;
            break;
          }
          sessionStorage.setItem(SESSION_STORAGE_KEYS.TIMEOUT_COUNT, timeoutCounter + 1);
          addToBeagleInfoLayer("GLOV_ON", "not-sent | timeout");
          throw new Error("anti-flicker-timeout");
        case 76:
          /* ===================================== ON/OFF CHECK ====================================== */
          // isOn can be true (ON), false (OFF)
          isOn = null;
          if (!debugMode) {
            _context.next = 84;
            break;
          }
          logger.log("Debug mode on: all applicable treatments will be applied");
          isOn = true;
          window.dataLayer.push({
            event: "GLOV",
            GLOV_ON: "employee"
          });
          addToBeagleInfoLayer("GLOV_ON", "employee | tester");
          _context.next = 100;
          break;
        case 84:
          if (!(oosReason && oosReason === "employee")) {
            _context.next = 91;
            break;
          }
          logger.warn("User is out of scope");
          // set isOn to true/false when not debugMode but out of scope i.e. nd_debug=0 for testability
          isOn = cookiePct >= SPLIT_RATIO;
          window.dataLayer.push({
            event: "GLOV",
            GLOV_ON: "employee"
          });
          addToBeagleInfoLayer("GLOV_ON", "employee | tester");
          _context.next = 100;
          break;
        case 91:
          if (!oosReason) {
            _context.next = 96;
            break;
          }
          addToBeagleInfoLayer("GLOV_ON", "not-sent | unknown");
          throw new Error("Unknown out of scope reason");
        case 96:
          // if greater than SPLIT_RATIO, then in ON mode
          if (cookiePct >= SPLIT_RATIO) {
            isOn = true;
            window.dataLayer.push({
              event: "GLOV",
              GLOV_ON: "true"
            });
          } else if (cookiePct >= SPLIT_RATIO / 2) {
            isOn = false;
            window.dataLayer.push({
              event: "GLOV",
              GLOV_ON: "false2"
            });
          } else {
            isOn = false;
            window.dataLayer.push({
              event: "GLOV",
              GLOV_ON: "false1"
            });
          }
          addToBeagleInfoLayer("isOn", isOn);
          window.localStorage.setItem(LOCAL_STORAGE_KEYS.IS_LABEL_SENT, true);
          addToBeagleInfoLayer("GLOV_ON", isOn.toString());
        case 100:
          _context.next = 102;
          return getFromBeagleInfoLayer("PageType", true);
        case 102:
          pageType = _context.sent;
          if (!(pageType === "purchase")) {
            _context.next = 113;
            break;
          }
          _context.next = 106;
          return getFromBeagleInfoLayer("purchase.revenue", true, 50, 5000);
        case 106:
          _context.next = 108;
          return getFromBeagleInfoLayer("purchase.paymentType", true, 50, 5000);
        case 108:
          _context.next = 110;
          return monitor.sendLogs(true);
        case 110:
          // if purchase is complete, do not apply any treatments on the confirmation page
          SHUTDOWN = true;
          _context.next = 114;
          break;
        case 113:
          // send logs when ready, start scraping and sending asyncly
          monitor.sendLogs(false);
        case 114:
          earlyLogSent = true;

          /* ======================================= ROBOT PATHs ===================================== */
          if (!(isOn === true)) {
            _context.next = 119;
            break;
          }
          if (!SHUTDOWN) {
            logger.log("Beagle ON Group Path");
            BeagleOn(identifier, debugMode, pageType, treatmentWeights);
          } else {
            logger.info("Beagle ON Group SHUTDOWN Path");
            removeDocumentHide();
            hideRemoved = true;
          }
          _context.next = 126;
          break;
        case 119:
          if (!(isOn === false)) {
            _context.next = 125;
            break;
          }
          logger.info("Beagle OFF Group Path");
          removeDocumentHide();
          hideRemoved = true;
          _context.next = 126;
          break;
        case 125:
          throw new Error("isOn is undefined or null");
        case 126:
          _context.next = 134;
          break;
        case 128:
          _context.prev = 128;
          _context.t0 = _context["catch"](7);
          logger.warn("Beagle Early Scope-out or ERROR: ", _context.t0.message);
          addToBeagleInfoLayer("m", _context.t0.message);
          if (!earlyLogSent && monitor) monitor.sendLogs(false);
          if (!hideRemoved) removeDocumentHide();
        case 134:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, null, [[7, 128]]);
}))();
}();
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
