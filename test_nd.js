!function(){var e={757:function(e,t,n){e.exports=n(666)},666:function(e){var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof h?t:h,a=Object.create(o.prototype),i=new T(r||[]);return a._invoke=function(e,t,n){var r=d;return function(o,a){if(r===p)throw new Error("Generator is already running");if(r===g){if("throw"===o)throw a;return P()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var c=L(i,n);if(c){if(c===v)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=g,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var s=l(e,t,n);if("normal"===s.type){if(r=n.done?g:f,s.arg===v)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=g,n.method="throw",n.arg=s.arg)}}}(e,n,i),a}function l(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d="suspendedStart",f="suspendedYield",p="executing",g="completed",v={};function h(){}function m(){}function y(){}var w={};s(w,a,(function(){return this}));var b=Object.getPrototypeOf,k=b&&b(b(A([])));k&&k!==n&&r.call(k,a)&&(w=k);var x=y.prototype=h.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function I(e,t){function n(o,a,i,c){var s=l(e[o],e,a);if("throw"!==s.type){var u=s.arg,d=u.value;return d&&"object"==typeof d&&r.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,i,c)}),(function(e){n("throw",e,i,c)})):t.resolve(d).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,c)}))}c(s.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function L(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,L(e,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=l(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,v):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function A(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:P}}function P(){return{value:t,done:!0}}return m.prototype=y,s(x,"constructor",y),s(y,"constructor",m),m.displayName=s(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,s(e,c,"GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},S(I.prototype),s(I.prototype,i,(function(){return this})),e.AsyncIterator=I,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new I(u(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(x),s(x,c,"Generator"),s(x,a,(function(){return this})),s(x,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=A,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(O),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return c.type="throw",c.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],c=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var s=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(s&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:A(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),v}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){"use strict";function e(e,t,n,r,o,a,i){try{var c=e[a](i),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(r,o)}function t(t){return function(){var n=this,r=arguments;return new Promise((function(o,a){var i=t.apply(n,r);function c(t){e(i,o,a,c,s,"next",t)}function s(t){e(i,o,a,c,s,"throw",t)}c(void 0)}))}}var r=n(757),o=n.n(r);function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var s=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";if(!e)return"";var r=e.indexOf(t);if(r<0)return e;for(;e.indexOf(t)>=0;){var o=e.indexOf(t);e=(o>0?e.substring(0,o):"")+n+e.substring(o+t.length)}return e},u=window.location.href.includes("staging.vivense")?"https://ndvivense.glov.ai/weights_staging.json":"https://ndvivense.glov.ai/weights.json",l=window.location.href.includes("staging.vivense")?"https://ndvivense.glov.ai/nd-styles_staging.css":"https://ndvivense.glov.ai/nd-styles.css?id=".concat(s((new Date).toISOString().substring(0,13).replace("T",""),"-","")),d="https://europe-west3-nextday-34eb3.cloudfunctions.net/api/logResponse",f="(max-width: 440px)",p="__nextday_session_id",g="ND_SessionTimestamp",v="BN_SessionHistory",h="ND_PageViews",m="ND_PopupDisplayFlag",y="ND_SkuList",w="ND_CABasketPrice",b="ND_Debug",k="ND_OutOfScope",x="ND_UserId",S=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Nextday Client SDK";a(this,e),this.origin=t,this.DEBUG=window.localStorage.getItem(b)}return c(e,[{key:"info",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).info.apply(e,["[".concat(t,"]")].concat(r))}},{key:"log",value:function(){var e=this.DEBUG,t=this.origin;if(e){for(var n,r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];(n=console).log.apply(n,["[".concat(t,"]")].concat(o))}}},{key:"warn",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).warn.apply(e,["[".concat(t,"]")].concat(r))}},{key:"error",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).error.apply(e,["[".concat(t,"]")].concat(r))}}]),e}(),I=S;function L(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function C(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function O(e,t){if(e){if("string"==typeof e)return C(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?C(e,t):void 0}}function T(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}}(e,t)||O(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function A(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var P=new I("Nextday DataLayer Checker"),_=function(e){P.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value,o=E(t);return se(o,n,r)},E=function(e){P.log("Searching beagleInfoLayer for key ",e);var t=window.beagleInfoLayer[e];if(e.includes("."))try{var n=e.split(".");t=window.beagleInfoLayer[n[0]];for(var r=1;r<n.length;r++)t=t[n[r]]}catch(n){P.log("Couldn't extract key ".concat(e," from beagleInfoLayer")),t=null}if(t)return P.log("Found key ".concat(e," with value ").concat(t)),t;P.log("Key ".concat(e," not found in beagleInfoLayer")),P.log("Searching dataLayer for key ",e);var o,a=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return A(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?A(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}(window.dataLayer);try{for(a.s();!(o=a.n()).done;){var i=o.value;if(Object.keys(i).includes(e))return P.log("Found key ".concat(e," with value ").concat(i[e])),i[e]}}catch(e){a.e(e)}finally{a.f()}return P.log("Key ".concat(e," not found in dataLayer")),null},N=new I("Nextday Url Checker"),j=function(e){N.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("path"===t){var o=window.location.href,a=o.includes("ajax/mobile-search/loadOtherPages.php")?decodeURIComponent(new URL(o).search.replace("?originalPath=","")):new URL(o).pathname;return N.log("Checking path ".concat(a," matches rule path ").concat(r)),se(a,n,r)}};function D(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function R(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?D(Object(n),!0).forEach((function(t){L(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):D(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function q(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return M(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?M(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function M(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}window.beagleInfoLayer=window.beagleInfoLayer||{checkpoints:[],a:{},e:{},f:{}};var V={PageType:/(?:PageType'[ ]*:[ ]*')(.*)(?:')/,content_name:/(?:content_name[ ]*:[ ]*")(.*)(?:")/,content_name_alt:/(?:content_name'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAPageType:/(?:PageType'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAOrderId:/(?:purchase[\s\S]*actionField[\s\S]*'id'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAOrderRev:/(?:purchase[\s\S]*actionField[\s\S]*'revenue'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAOrderType:/(?:purchase[\s\S]*actionField[\s\S]*'dimension15'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAIsAdmin:/(?:dataLayer[\s\S]*'isAdmin'[ ]*:[ ]*")(.*)(?:")/},U={BeagleLoaded:1,Initialized:2,UserOnOff:3,ScriptTimeOut:7,TreatmentRepositoryCreated:4,TreatmentsApplied:5,ReapplyTreatmentListeners:6,TimeoutThresholdReached:8},F=new I("BeagleInfoLayer"),B=function(){var e=t(o().mark((function e(){var t,n,r,a,i,c,s,u,l;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:F.log("Initializing beagleInfoLayer"),t=document.scripts,n=t.length;try{H()}catch(e){console.warn("Could not prepare log data: ",e.message)}if(t&&n){e.next=7;break}return F.warn("Could not parse body"),e.abrupt("return");case 7:r=0,a=t.length-1;case 9:if(!(a>-1)){e.next=35;break}i=t[a].textContent,c=0,s=Object.keys(V);case 12:if(!(c<s.length)){e.next=32;break}if(u=s[c],!(l=(l=V[u].exec(i))?l[1]:null)){e.next=29;break}u.indexOf("_alt")>0&&(u=u.substring(0,u.lastIndexOf("_alt"))),e.prev=18,G(u,decodeURIComponent(JSON.parse('"'+l+'"'))),e.next=26;break;case 22:return e.prev=22,e.t0=e.catch(18),F.warn("Could not decode foundVal ".concat(l)),e.abrupt("continue",29);case 26:if((r+=1)!==Object.keys(V).length){e.next=29;break}return e.abrupt("return");case 29:c++,e.next=12;break;case 32:a--,e.next=9;break;case 35:return e.next=37,de(10);case 37:if(n===t.length){e.next=41;break}return F.log("New scripts detected, re-initializing beagleInfoLayer"),e.next=41,B();case 41:case"end":return e.stop()}}),e,null,[[18,22]])})));return function(){return e.apply(this,arguments)}}(),J=function(e){try{F.log("Checkpoint: '".concat(e,"' Reached!")),window.beagleInfoLayer.checkpoints.push({checkpoint:Object.keys(U).find((function(t){return U[t]===e})),id:e,time:Date.now()})}catch(e){F.warn(e)}},G=function(e,t){null!=e&&null!=t&&(window.beagleInfoLayer[e]=t)},W=function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,a={businessRuleId:t,variant:n};switch(r){case"applied":window.beagleInfoLayer.a[e]=a;break;case"skipped":a.dependant_on_treatment=o,window.beagleInfoLayer.e[e]=a;break;case"failed":window.beagleInfoLayer.f[e]=a}},H=function(){var e,t,n,r,o,a,i,c,s,u,l,d,f,g,v,h,m,y,w,b,k,x,S,I,L,C,O,T,A,P,_,E,N,j,D,M,V,U,B,J,W,H,$,z,K=crypto.randomUUID(),Q=sessionStorage.getItem(p),Y=new URL(window.location.href),X=(null===(e=window.navigator)||void 0===e||null===(t=e.userAgentData)||void 0===t?void 0:t.platform)||(null===(n=window.navigator)||void 0===n?void 0:n.platform)||(null===(r=window.navigator)||void 0===r?void 0:r.userAgent),Z={},ee=q(window.dataLayer);try{for(ee.s();!(z=ee.n()).done;){var ne=z.value;Z=R(R({},Z),ne)}}catch(e){ee.e(e)}finally{ee.f()}var re=JSON.parse(te(document.cookie,"VL_CM_0")),oe={};if(re&&re.Items){var ae,ie=q(re.Items);try{for(ie.s();!(ae=ie.n()).done;){var ce=ae.value;oe[ce.K]=decodeURIComponent(ce.V)}}catch(e){ie.e(e)}finally{ie.f()}}G("cookieVLPVinVisit",oe.VL_PVCountInVisit),G("cookieVLVisitDuration",oe.VL_TotalDuration),G("cookieVLTotalPV",oe.VL_TotalPV),G("cookieVLTotalVisit",oe.VL_TotalVisit),G("gaPageType",Z.PageType),G("gaProductName",Z.content_name),G("gaViewType",Z.content_type),G("gaProductCategory",Z.content_category),G("gaProductID",Z.content_ids),G("vvsProductCategory",Z.vivense_category),G("gaListingName",null===(o=Z.ecommerce)||void 0===o||null===(a=o.detail)||void 0===a||null===(i=a.actionField)||void 0===i?void 0:i.list),G("vvsIsShowroom",void 0===window.isAdmin?Z.isAdmin:window.isAdmin),G("vvsProductGroup",Z.productGroup),G("vvsUserId",Z.userId),G("vvsCategory",Z.vivense_category),G("gaCategoryProductCont",Z.category_product_count),G("gaCartProducts",(null===(c=Z.ecommerce)||void 0===c||null===(s=c.checkout)||void 0===s?void 0:s.products)||(null===(u=Z.ecommerce)||void 0===u||null===(l=u.purchase)||void 0===l?void 0:l.products)),G("vvsPDPProduct",null===(d=Z.vivenseProducts)||void 0===d?void 0:d.pop()),G("gaPurchaseId",null===(f=Z.ecommerce)||void 0===f||null===(g=f.purchase)||void 0===g||null===(v=g.actionField)||void 0===v?void 0:v.id),G("gaPurchaseRevenue",null===(h=Z.ecommerce)||void 0===h||null===(m=h.purchase)||void 0===m||null===(y=m.actionField)||void 0===y?void 0:y.revenue),G("gaPurchasePayType",null===(w=Z.ecommerce)||void 0===w||null===(b=w.purchase)||void 0===b||null===(k=b.actionField)||void 0===k?void 0:k.dimension15),G("windowParams",window.location.search),G("windowPRatio",window.devicePixelRatio),G("windowInner",window.innerWidth);var se={};se.availHeight=null===(x=window.screen)||void 0===x?void 0:x.availHeight,se.availHeight=null===(S=window.screen)||void 0===S?void 0:S.availHeight,se.availLeft=null===(I=window.screen)||void 0===I?void 0:I.availLeft,se.availTop=null===(L=window.screen)||void 0===L?void 0:L.availTop,se.availWidth=null===(C=window.screen)||void 0===C?void 0:C.availWidth,se.colorDepth=null===(O=window.screen)||void 0===O?void 0:O.colorDepth,se.height=null===(T=window.screen)||void 0===T?void 0:T.height,se.pixelDepth=null===(A=window.screen)||void 0===A?void 0:A.pixelDepth,se.width=null===(P=window.screen)||void 0===P?void 0:P.width,G("windowScreen",se);var ue={};if(ue.height=null===(_=window.visualViewport)||void 0===_?void 0:_.height,ue.offsetLeft=null===(E=window.visualViewport)||void 0===E?void 0:E.offsetLeft,ue.offsetTop=null===(N=window.visualViewport)||void 0===N?void 0:N.offsetTop,ue.onresize=null===(j=window.visualViewport)||void 0===j?void 0:j.onresize,ue.onscroll=null===(D=window.visualViewport)||void 0===D?void 0:D.onscroll,ue.pageLeft=null===(M=window.visualViewport)||void 0===M?void 0:M.pageLeft,ue.pageTop=null===(V=window.visualViewport)||void 0===V?void 0:V.pageTop,ue.scale=null===(U=window.visualViewport)||void 0===U?void 0:U.scale,ue.width=null===(B=window.visualViewport)||void 0===B?void 0:B.width,G("windowVPort",ue),screen.width){var le=parseInt(screen.width),de=screen.height?parseInt(screen.height):0;if(0!==le&&0!==de){if(/iPad|iPhone|iPod/.test(X)&&window.devicePixelRatio)le=Math.round(le*window.devicePixelRatio),de=Math.round(de*window.devicePixelRatio);else if(90===Math.abs(window.orientation)){var fe=le;le=de,de=fe}G("window",le+"x"+de)}}if(G("navHistSize",null===(J=window.history)||void 0===J?void 0:J.length),G("navAgent",navigator.userAgent),!window.beagleInfoLayer.navAgent&&navigator.userAgentData){var pe,ve,he,me,ye,we=null===(pe=navigator)||void 0===pe||null===(ve=pe.userAgentData)||void 0===ve||null===(he=ve.brands)||void 0===he?void 0:he.map((function(e){return e.brand+":"+e.version})).join();we+=null!==(me=navigator)&&void 0!==me&&null!==(ye=me.userAgentData)&&void 0!==ye&&ye.mobile?"mobi":" ",G("navAgent",we+=X)}G("navHWCores",navigator.hardwareConcurrency),G("navLanguage",navigator.language||navigator.browserLanguage||navigator.systemLanguage||navigator.userLanguage),G("navTouch",navigator.maxTouchPoints),G("navPlatform",X),G("navVendor",navigator.vendor),G("cookieGaId",te(document.cookie,"_ga")),G("cookieLastBreadCrumb",te(document.cookie,"lastbreadcrumb")),G("cookieLastCategory",te(document.cookie,"lastcategory")),G("cookieFirstEntry",decodeURIComponent(te(document.cookie,"vivensefirst")));var be={};if(window.performance&&window.performance.getEntriesByType("navigation")[0]){var ke=window.performance.getEntriesByType("navigation")[0];be.pld=Math.round(ke.domContentLoadedEventEnd-ke.connectStart),be.net=Math.round(ke.connectEnd-ke.fetchStart),be.srv=Math.round(ke.responseStart-ke.requestStart),be.tfr=Math.round(ke.responseEnd-ke.responseStart),be.dmi=Math.round(ke.domInteractive-ke.responseEnd),be.dcp=Math.round(ke.domComplete-ke.domInteractive),be.onl=Math.round(ke.loadEventEnd-ke.loadEventStart)}G("perfMetrics",be),G("internetSpeed",null===(W=window.navigator)||void 0===W||null===(H=W.connection)||void 0===H?void 0:H.downlink);var xe,Se,Ie=q(document.querySelectorAll('[type="application/ld+json"]'));try{for(Ie.s();!(xe=Ie.n()).done;){var Le=xe.value;try{var Ce=Le.textContent,Oe=JSON.parse(Ce),Te="@";switch(Oe["@type"]){case"Organization":case"WebSite":break;case"CollectionPage":var Ae,Pe=q(Oe.breadcrumb.itemListElement);try{for(Pe.s();!(Ae=Pe.n()).done;)Te+=" | "+Ae.value.item.name}catch(e){Pe.e(e)}finally{Pe.f()}G("sorgBreadcrumb",Te);var _e={};_e.name=Oe.mainEntity.name,_e.countItems=Oe.mainEntity.numberOfItems,G("sorgListing",_e);break;case"BreadcrumbList":var Ee,Ne=q(Oe.itemListElement);try{for(Ne.s();!(Ee=Ne.n()).done;)Te+=" | "+Ee.value.name}catch(e){Ne.e(e)}finally{Ne.f()}G("sorgBreadcrumb",Te);break;case"Product":var je={};je.sku=Oe.sku,je.name=Oe.name,Oe.offers&&(je.price=Oe.offers.price,je.priceCurrency=Oe.offers.priceCurrency,je.priceValidUntil=Oe.offers.priceValidUntil),G("sorgProduct",je);break;default:console.log(Oe)}}catch(e){F.warn(e.message)}}}catch(e){Ie.e(e)}finally{Ie.f()}G("v","0.0.27"),G("n","nextday-session_id-".concat(Q)),G("sr",50),G("donttrack",navigator.doNotTrack||window.doNotTrack||navigator.msDoNotTrack),G("u",Y.href),G("d",Y.hostname),G("r",document.referrer),G("vId",K),G("isOn",null);try{G("vvsCntFavProds",window.favoriteProducts?JSON.parse(window.favoriteProducts).length:null)}catch(e){G("vvsCntFavProds",null),F.warn(e.message)}G("vvsHasSetEmail",window.userEmail.length>0),G("vvsLoginType",window.userId>0?"member":"guest"),Se=document.querySelector('[class*="basket_summary_total"], [class*="total_row"]'),G("vvsPurcPriceElt",Se?Se.innerText:null),Se=document.querySelector('[class*="order_follow_numb"], [class*="cart-title-bottom"]'),G("vvsPurchaseOrderID",Se?Se.innerText:null),Se=document.querySelector('[class*="payment_type_title"], [class*="cart-title-info"]'),G("vvsPurcTypeElt",Se?Se.innerText:null),Se=document.querySelector('[id*="breadcrumb-ol"], [class*="long-breadcrumb"]'),G("vvsViewCrumb",Se?Se.innerText:null),Se=document.querySelector('[class*="order-final-number"]'),G("vvsCartTotal",Se?Se.innerText:null),Se=document.querySelector('[class*="basket_total_price"]'),G("vvsViewBasketTotal",Se?Se.innerText:null),Se=document.querySelector('[id*="cart_quantity"], [class*="basket_length"]'),G("vvsViewBasketCount",Se?Se.innerText:null),Se=document.querySelector('[class*="welcome_username"]'),G("vvsViewLoggedin",!!Se&&Se.innerText.length>0),Se=document.querySelectorAll('[class*="vivense-showrooms"] > *'),G("vvsPDPShowroomCount",Se?Se.length:null),Se=document.querySelector('[class*="delivery-date"]'),G("vvsPDPDeliveryDate",Se?Se.innerText:null),G("vvsPDPDeliveryDateFormatted",ge(null===($=Se)||void 0===$?void 0:$.innerText)),Se=document.querySelector('[class*="product-title"], [class*="header-bottom"]'),G("vvsPDPTitle",Se?Se.innerText:null),Se=document.querySelector('[class*="count-of-product"]'),G("vvsPLPItemCount",Se?Se.innerText:null),Se=document.querySelector('[class*="subcategories-title"]'),G("vvsPLPName",Se?Se.innerText:null)};function z(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return K(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?K(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function K(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Q=new I("Nextday Utils"),Y={ocak:0,"şubat":1,mart:2,nisan:3,"mayıs":4,haziran:5,temmuz:6,"ağustos":7,"eylül":8,ekim:9,"kasım":10,"aralık":11};"randomUUID"in crypto||(crypto.randomUUID=function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(e){return(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)}))});var X=function(){document.documentElement.classList.remove("nextDay-hide")},Z=function(){var e=t(o().mark((function e(){var t;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return Q.log("Fetching treatments"),e.next=3,fetch("https://host-b96.pages.dev/treatments.json");case 3:return t=e.sent,e.next=6,t.json();case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),ee=function(){var e=t(o().mark((function e(){var t;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return Q.log("Fetching treatment weights"),e.next=3,fetch(u);case 3:return t=e.sent,e.next=6,t.json();case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),te=function(e,t){if(!e)return null;var n=e.split(";").map((function(e){return e.split("=")})).reduce((function(e,t){return t[0]&&t[1]&&(e[decodeURIComponent(t[0].trim())]=decodeURIComponent(t[1].trim())),e}),{})[t];return n?("_ga"===t&&(n=n.split(".")[2]),n):null},ne=function(){var e=t(o().mark((function e(t){var n,r,a,i;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=8+(n=9),t){e.next=5;break}return e.abrupt("return",-1);case 5:return e.next=7,re(t);case 7:return a=e.sent,i=parseInt(a.substring(n,r),16),e.abrupt("return",i%100);case 10:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),re=function(){var e=t(o().mark((function e(t){var n,r,a;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=(new TextEncoder).encode(t),e.next=3,crypto.subtle.digest("SHA-1",n);case 3:return r=e.sent,a=Array.from(new Uint8Array(r)),e.abrupt("return",a.map((function(e){return e.toString(16).padStart(2,"0")})).join(""));case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),oe=function(e){var t=document.documentElement.scrollTop,n=setInterval((function(){var r=document.documentElement.scrollTop;t-400>r?(clearInterval(n),e()):t=r}),500)},ae=function(e,t){Q.log("Applying style changes",t,"to elements",e);for(var n=0;n<e.length;n++)for(var r=e[n],o=0,a=Object.entries(t);o<a.length;o++){var i=T(a[o],2),c=i[0],s=i[1];r.style[c]=s}},ie=function(){var e=t(o().mark((function e(){var t;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(t=document.createElement("link")).rel="stylesheet",t.type="text/css",t.href=l,document.head.appendChild(t);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),ce=function(){var e=t(o().mark((function e(t,n,r){var a,i,c,s,u,l,d,f,p,g,v,h,m,y,w,b,k,x,S,I,L;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:a=JSON.parse(JSON.stringify(n)),i=null,c=z(a),e.prev=3,c.s();case 5:if((s=c.n()).done){e.next=55;break}if(u=s.value,l=u.businessRuleTransformations,d=u.variants,l||d){e.next=10;break}return e.abrupt("continue",53);case 10:if(r&&l){f=z(l);try{for(f.s();!(p=f.n()).done;)if((g=p.value).id===r)for(v in g)"id"!==v&&(u[v]=g[v])}catch(e){f.e(e)}finally{f.f()}}if(!d){e.next=53;break}h=0,m=Object.keys(d);case 13:if(!(h<m.length)){e.next=53;break}return y=m[h],e.next=17,ne(t+y);case 17:if(!(e.sent<u.variants[y].weight)){e.next=50;break}if(i=y,!r||!d[y].businessRuleTransformations){e.next=48;break}w=z(d[y].businessRuleTransformations),e.prev=22,w.s();case 24:if((b=w.n()).done){e.next=38;break}if((k=b.value).id!=r){e.next=36;break}x=0,S=Object.keys(k);case 28:if(!(x<S.length)){e.next=36;break}if("id"!==(I=S[x])){e.next=32;break}return e.abrupt("continue",33);case 32:u[I]=k[I];case 33:x++,e.next=28;break;case 36:e.next=24;break;case 38:e.next=43;break;case 40:e.prev=40,e.t0=e.catch(22),w.e(e.t0);case 43:return e.prev=43,w.f(),e.finish(43);case 46:e.next=49;break;case 48:for(L in d[y])"weight"!==L&&"businessRuleTransformations"!==L&&(u[L]=d[y][L]);case 49:return e.abrupt("break",53);case 50:h++,e.next=13;break;case 53:e.next=5;break;case 55:e.next=60;break;case 57:e.prev=57,e.t1=e.catch(3),c.e(e.t1);case 60:return e.prev=60,c.f(),e.finish(60);case 63:return e.abrupt("return",[a,i]);case 64:case"end":return e.stop()}}),e,null,[[3,57,60,63],[22,40,43,46]])})));return function(t,n,r){return e.apply(this,arguments)}}(),se=function(e,t,n){if("notExist"===t)return e?(Q.log("conditionChecker: -not satisfied- target does exist"),!1):(Q.log("conditionChecker: -satisfied- target does not exist"),!0);if(null==e||null==t)return Q.log("conditionChecker: runTimeValue or condition is not defined"),!1;switch(t){case"exist":return e?(Q.log("conditionChecker: -satisfied- target does exist"),!0):(Q.log("conditionChecker: -not satisfied- target does not exist"),!1);case"contains":return e.includes(n)?(Q.log("conditionChecker: -satisfied- target contains value"),!0):(Q.log("conditionChecker: -not satisfied- target does not contain value"),!1);case"notContains":return e.includes(n)?(Q.log("conditionChecker: -not satisfied- target contains value"),!1):(Q.log("conditionChecker: -satisfied- target does not contain value"),!0);case"equal":return e===n?(Q.log("conditionChecker: -satisfied- target equals value"),!0):(Q.log("conditionChecker: -not satisfied- target does not equal value"),!1);case"notEqual":return e!==n?(Q.log("conditionChecker: -satisfied- target does not equal value"),!0):(Q.log("conditionChecker: -not satisfied- target equals value"),!1);case"greaterThan":return e>n?(Q.log("conditionChecker: -satisfied- target is greater than value"),!0):(Q.log("conditionChecker: -not satisfied- target is not greater than value"),!1);case"lessThan":return e<n?(Q.log("conditionChecker: -satisfied- target is less than value"),!0):(Q.log("conditionChecker: -not satisfied- target is not less than value"),!1);case"greaterEquals":return e>=n?(Q.log("conditionChecker: -satisfied- target is greater or equal than value"),!0):(Q.log("conditionChecker: -not satisfied- target is not greater or equal than value"),!1);case"lessEquals":return e<=n?(Q.log("conditionChecker: -satisfied- target is less or equal than value"),!0):(Q.log("conditionChecker: -not satisfied- target is not less or equal than value"),!1);case"between":var r=T(n.split(","),2),o=r[0],a=r[1];return o=parseInt(o),a=parseInt(a),e>=o&&e<=a?(Q.log("conditionChecker: -satisfied- target is between min and max"),!0):(Q.log("conditionChecker: -not satisfied- target is not between min and max"),!1);default:return Q.log("conditionChecker: condition is not defined ",t),!1}},ue=function(){var e=b,t=k,n=window.location.search;if(n.includes("nd_debug=1"))return window.localStorage.setItem(e,1),window.localStorage.setItem(t,!0),G("dbm","on"),1;if(n.includes("nd_debug=2"))return window.localStorage.setItem(e,2),window.localStorage.setItem(t,!0),G("dbm","on"),2;if(n.includes("nd_debug=0"))return window.localStorage.removeItem(e),window.localStorage.setItem(t,!0),G("dbm","off"),0;var r=parseInt(window.localStorage.getItem(e));return G("dbm",r?"on":"off"),r||0},le=function(){var e=t(o().mark((function e(){var t,n=arguments;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.length>0&&void 0!==n[0]?n[0]:"_ga",e.abrupt("return",new Promise((function(e,n){var r=window.localStorage.getItem(x);if(r&&e(r),r=te(document.cookie,t))window.localStorage.setItem(x,r),e(r);else{var o=setInterval((function(){(r=te(document.cookie,t))&&(clearInterval(o),window.localStorage.setItem(x,r),e(r))}),10);setTimeout((function(){clearInterval(o),n(new Error("Could not extract cookie identifier"))}),1e3)}})));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),de=function(e){return new Promise((function(t){return setTimeout(t,e)}))},fe=function(){var e=y,t=[],n={operator:"PageType",condition:"equal",value:"Homepage"};if(_(n))return null;if(n.value="Listingpage",_(n))return Array.from(document.querySelectorAll(".product-card")).forEach((function(e){t.push(e.getAttribute("data-product-sku"))})),t.length?(sessionStorage.setItem(e,JSON.stringify(t)),t):(Q.log("Product SKUs not found on Listingpage"),null);if(n.value="Productpage",_(n)){var r,o,a,i=document.querySelector(".product-sku");return i?(t.push(i.getAttribute("data-sku")||(null===(r=i.textContent)||void 0===r||null===(o=r.trim())||void 0===o||null===(a=o.replace(/\)/g,""))||void 0===a?void 0:a.replace(/\(/g,""))),sessionStorage.setItem(e,JSON.stringify(t)),t):(Q.log("Product SKU not found on Productpage"),null)}return n.operator="path",n.value="/siparis-listesi.html",j(n)?(Array.from(document.querySelectorAll(".cart-inside")).forEach((function(e){t.push(e.getAttribute("data-sku"))})),t.length?(sessionStorage.setItem(e,JSON.stringify(t)),t):(Q.log("Product SKUs not found on basket page"),null)):(Q.log("Unidentified page type"),null)},pe=function(){return navigator.sendBeacon&&"function"==typeof navigator.sendBeacon},ge=function(e){if(!e||"string"!=typeof e)return e;var t={startMonthIndex:void 0,endMonthIndex:void 0,startDay:void 0,endDay:void 0},n=e.match("([\\d]+)-([\\d]+)\\s?([\\wıüğşöçİÖÇĞÜ]+)");if(n&&4===n.length)t.startDay=parseInt(n[1]),t.endDay=parseInt(n[2]),t.startMonthIndex=Y[n[3].toLowerCase()],t.endMonthIndex=t.startMonthIndex;else{if(!(n=e.match("([\\d]+)\\s+([\\wıüğşöçİÖÇĞÜ]+)-([\\d]+)\\s+([\\wıüğşöçİÖÇĞÜ]+)"))||5!==n.length)return e;t.startDay=parseInt(n[1]),t.startMonthIndex=Y[n[2].toLowerCase()],t.endDay=parseInt(n[3]),t.endMonthIndex=Y[n[4].toLowerCase()]}try{var r=new Date;if(!t.startMonthIndex||!t.endMonthIndex)return e;var o=t.startMonthIndex>=r.getMonth()?r.getFullYear():r.getFullYear()+1,a=t.endMonthIndex>=r.getMonth()?r.getFullYear():r.getFullYear()+1,i=new Date(o,t.startMonthIndex,t.startDay),c=new Date(a,t.endMonthIndex,t.endDay),s=Math.ceil(Math.abs(i-r)/864e5),u=Math.ceil(Math.abs(c-r)/864e5),l=s<7?0:Math.ceil(s/7),d=u<7?0:Math.ceil(u/7);return 0===l&&0===d?"".concat(s," - ").concat(u," Gün"):0===l&&d>=1?"".concat(s," Gün - ").concat(d," Hafta"):l===d?"".concat(l," Hafta"):"".concat(l," - ").concat(d," Hafta")}catch(t){return e}};function ve(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function he(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ve(Object(n),!0).forEach((function(t){L(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ve(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var me=function(){function e(){a(this,e),this.logger=new I("Nextday Monitor"),this.logger.log("Initializing monitor"),this.appliedTreatmentsHash=null,this.appliedTreatmentsChanges=!1,this.eligibleNotAppliedTreatmentsHash=null,this.eligibleNotAppliedTreatmentsChanges=!1,this.headers={type:"application/json"},this.isLogged=!1,this.initializeExitEventListeners()}var n,r,i;return c(e,[{key:"sendLogs",value:(i=t(o().mark((function e(){var t,n,r,a=this,i=arguments;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=i.length>0&&void 0!==i[0]?i[0]:null,n=i.length>1&&void 0!==i[1]&&i[1],(r=this.logger).log("Sending logs"),"complete"!==document.readyState?(r.log("Document ready state is not complete"),window.addEventListener("load",(function(){r.log("In onload event"),a.handleQueueLogs(a.packageLogData(t),n)}),!0)):this.handleQueueLogs(this.packageLogData(t),n);case 5:case"end":return e.stop()}}),e,this)}))),function(){return i.apply(this,arguments)})},{key:"handleQueueLogs",value:(r=t(o().mark((function e(t){var n,r=arguments;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r.length>1&&void 0!==r[1]&&r[1]||!this.isLogged){e.next=3;break}return e.abrupt("return");case 3:if(n=this.logger,t){e.next=7;break}return n.log("Could not create request blob"),e.abrupt("return");case 7:return n.log("Request blob to send: ",t),this.queueLogs(t),this.isLogged=!0,e.next=12,re(JSON.stringify(window.beagleInfoLayer.a));case 12:return this.appliedTreatmentsHash=e.sent,e.next=15,re(JSON.stringify(window.beagleInfoLayer.e));case 15:this.eligibleNotAppliedTreatmentsHash=e.sent;case 16:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"updateLatestChanges",value:(n=t(o().mark((function e(){var t,n;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this.logger.log("Checking if there are changes"),e.next=4,re(JSON.stringify(window.beagleInfoLayer.a));case 4:return t=e.sent,e.next=7,re(JSON.stringify(window.beagleInfoLayer.e));case 7:n=e.sent,t!==this.appliedTreatmentsHash&&(this.appliedTreatmentsChanges=!0,this.appliedTreatmentsHash=t),n!==this.eligibleNotAppliedTreatmentsHash&&(this.eligibleNotAppliedTreatmentsChanges=!0,this.eligibleNotAppliedTreatmentsHash=n);case 10:case"end":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:"packageLogData",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=this.headers,n=he({},window.beagleInfoLayer),r=e||(Object.keys(n.a||{}).length?"Treatments applied":"No treatments applied");return n.t=Date.now(),n.m=r,new Blob([JSON.stringify(n)],t)}},{key:"packageUpdateLogData",value:function(){var e=this.headers,t=this.appliedTreatmentsChanges,n=this.eligibleNotAppliedTreatmentsChanges;if(!t&&!n)return!1;var r={t:Date.now(),a:t?window.beagleInfoLayer.a:{},e:n?window.beagleInfoLayer.e:{},vId:window.beagleInfoLayer.vId};return new Blob([JSON.stringify(r)],e)}},{key:"initializeExitEventListeners",value:function(){var e=this,t=this.logger,n=!1;t.log("Initializing exit event listener"),window.addEventListener("beforeunload",(function(){if(e.isLogged){if(!n){n=!0,t.log("In beforeunload event");var r=e.packageUpdateLogData();r?e.queueLogs(r):t.log("No changes to log")}}else e.handleQueueLogs(e.packageLogData())}),{capture:!0}),window.addEventListener("pagehide",(function(){if(e.isLogged){if(!n){n=!0,t.log("In pagehide event");var r=e.packageUpdateLogData();r?e.queueLogs(r):t.log("No changes to log")}}else e.handleQueueLogs(e.packageLogData())}),{capture:!0})}},{key:"queueLogs",value:function(e){var t=this.logger;if(pe()){var n=navigator.sendBeacon(d,e),r=setInterval((function(){n?(clearInterval(r),t.log("Logs queued successfully")):n=navigator.sendBeacon(d,e)}),10);setTimeout((function(){clearInterval(r),n||t.log("Logs not queued")}),1e3)}else fetch(d,e)}}]),e}(),ye=me,we=new I("Nextday Api"),be=function(){var e=t(o().mark((function e(){var t,n,r;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(we.log("Starting product info lookup"),t=fe()){e.next=5;break}return we.log("No sku found"),e.abrupt("return",null);case 5:return(n=new Headers).append("Content-Type","application/json"),e.prev=7,e.next=10,fetch("https://catalog-api.adoraai.com",{method:"POST",body:JSON.stringify(t),headers:n,mode:"cors"});case 10:r=e.sent,e.next=17;break;case 13:return e.prev=13,e.t0=e.catch(7),we.warn("Fetch to catalog api failed"),e.abrupt("return",null);case 17:if(r.ok){e.next=20;break}return we.log("Product info lookup failed"),e.abrupt("return",null);case 20:return e.next=22,r.json();case 22:if(r=e.sent){e.next=26;break}return we.log("Product info extraction from response failed"),e.abrupt("return",null);case 26:return we.log("Product info lookup successful"),e.abrupt("return",r);case 28:case"end":return e.stop()}}),e,null,[[7,13]])})));return function(){return e.apply(this,arguments)}}();function ke(e){return function(e){if(Array.isArray(e))return C(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||O(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function xe(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Se(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Se(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function Se(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ie(){return Ie=t(o().mark((function e(n,r){var a,i,c,u,l,d,p,g,v;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=new I("Nextday Apply Actions"),i=m,c=function(e){a.log("Applying action: ",JSON.stringify(e));var t=e.operator,n=e.type,o=e.applyEvent,c=e.contentSelector,l=e.selector,v=e.selectorFallback,h=e.mdCondition,m=e.move_selector_1,y=e.move_selector_2,w=e.replaceFn;if("noop"!==t){var b=e.value,k=$(l);if(h&&!window.matchMedia(h).matches)return a.log("Media condition mismatch: ",h),!1;if(m&&!y||y&&!m)return a.log("Both move selectors are required"),!1;if(m&&y){if(!$(m).length)return a.log("Move selector 1 not found: ",m),!1;if(!$(y).length)return a.log("Move selector 2 not found: ",y),!1}else{if(!l)return a.log("Selector not specified"),!1;if(!k.length){if(!$(v).length&&"remove"===t)return;if("no-selector"!==l&&(a.log("Selector not found: ",l),a.log("Trying fallback selector: ",v),v&&(k=$(v)),!k.length))return a.log("Fallback selector not found"),!1}}var x=function(e,t){if(e&&t.includes("{{REPLACE}}")){a.log("Executing replace function: ",e);var n={dataLayerFinder:E,productInfo:r},o=Function(e).bind(n);t=s(t,"{{REPLACE}}",o())}return t};if(Array.isArray(b)?b.forEach((function(e,t){var n=w?w[t]||w:"";b[t]=x(n,e)})):b=x(w,b),"remove"===t)k&&(a.log("Removing: ",l),k.remove()),a.log("Cannot found element with selector: ",l);else if("insert"===t)switch(n){case"before":a.log("Inserting before: ",b),String(b).includes("nd-add-to-win")&&$(".nd-add-to-win").remove(),k.before(b);break;case"after":a.log("Inserting after: ",b),k.after(b);break;case"popup":if(0!==parseInt(sessionStorage.getItem(i))){a.log("Popup already displayed in session");break}if(a.log("Creating Popup: ",b),p(b,c),o){var S,I=window.matchMedia(f).matches,L=xe(o);try{for(L.s();!(S=L.n()).done;)switch(S.value){case"exitIntent":a.log("Adding exit intent listener"),I?oe(d):document.documentElement.addEventListener("mouseleave",d,{once:!0});break;case"copyIntent":a.log("Adding copy intent listener"),document.documentElement.addEventListener("copy",d,{once:!0})}}catch(e){L.e(e)}finally{L.f()}}else setTimeout((function(){d()}),timeout)}else if("edit"===t)switch(n){case"text":a.log("Editing text: ",b),k.text(b);break;case"html":a.log("Editing html: ",b),k.html(b);break;case"styleApplicator":a.log("Applying style: ",b);var C=JSON.parse(b);a.log("Style Changes Map: ",C),ae(k,C);break;case"addClass":a.log("addding class to ".concat(k," named ").concat(b)),k.addClass(b);break;case"removeClass":a.log("remove class from ".concat(k," named ").concat(b)),k.removeClass(b);break;case"documentTitle":if(a.log("changing document title from ".concat(k," to ").concat(b)),o){var O,T=xe(o);try{for(T.s();!(O=T.n()).done;)"tabChange"==O.value&&function(){a.log("catching event tabchange..");var e=document.title;document.addEventListener("visibilitychange",(function(t){return u(t,b,e)}))}()}catch(e){T.e(e)}finally{T.f()}}break;case"addBanner":if(!r){a.log("Product info unavailable");break}a.log("Adding banner: ",b);var A=JSON.parse(sessionStorage.getItem("ND_SkuList"))[0];if(!A){a.log("Could not find product sku");break}Object.keys(r).includes(A)&&k.before(b);break;default:a.log("Unknown edit type: ",n)}else if("setattribute"===t)switch(a.log("Setting attribute: ",attribute,b),attribute){case"src":k.css("content","url(".concat(b.trim(),")"));break;case"style":var P=b.split(":")[0].trim(),_=b.split(":")[1].trim();k.css(P,_,"!important")}else if("replace"===t)a.log("Replacing: ",b),k.replaceAll(b);else if("swap"===t){a.log("Swapping: ",m,y);var N=document.querySelector(m),j=document.querySelector(y);g(N,j)}else if("injectscript"===t)a.log("Injecting script: ",b),k.append("<script>".concat(b,"<\/script>"));else if("move"===t){a.log("Moving ".concat(m," to ").concat(y));var D=document.querySelector(m),R=document.querySelector(y);D.remove(),R.prepend(D)}else if("productInfoLookup"===t){var q=JSON.parse(sessionStorage.getItem(ND_SKU_LIST))[0],M=null;switch(n){case"transactionIn2Weeks":var V;M=x(b,null===(V=r[q].catalog.transactionIn2Weeks)||void 0===V?void 0:V.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")),a.log("Replacing transcationIn2Weeks ",r[q].catalog.transactionIn2Weeks);break;case"addToCartIn2Weeks":var U;M=x(b,null===(U=r[q].catalog.addToCartIn2Weeks)||void 0===U?void 0:U.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")),a.log("Replacing AddToCartCount ",r[q].catalog.transactionIn2Weeks);break;case"productViewCount":var F;M=x(b,null===(F=r[q].catalog.productViewCount)||void 0===F?void 0:F.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")),a.log("Replacing productViewCount for",r[q].catalog.transactionIn2Weeks);break;default:a.failed("no such type found for productInfoLookup operator")}k.before(M)}else a.log("No such operator exists yet",t)}else a.log("Noop Operator: No operation is applied on target ")},u=function(){var e=t(o().mark((function e(t,n,r){var a,i;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:a=Array.isArray(n)?n:[n],i=0;case 2:if(!(i<a.length)){e.next=16;break}if(!document.hidden){e.next=12;break}return document.title=a[i],e.next=7,de(3e3);case 7:return document.title=r,e.next=10,de(3e3);case 10:e.next=13;break;case 12:document.title=r;case 13:i++,e.next=2;break;case 16:if(document.hidden){e.next=21;break}return document.title=r,e.abrupt("return");case 21:u(t,n,r);case 22:case"end":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}(),l=function e(t){var n=t.target.id;n&&"nd-popup__wrapper"===n&&($("#nd-popup__wrapper").remove(),window.removeEventListener("click",e,!0))},d=function e(){sessionStorage.setItem(i,1);var t=document.querySelector("#grt-shadow-host");t&&(t.style.display="none"),document.getElementById("nd-popup__wrapper").style.display="block",window.addEventListener("click",l,!0),document.documentElement.removeEventListener("mouseleave",e,{once:!0}),document.documentElement.removeEventListener("copy",e,{once:!0}),setTimeout((function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",l,!0)}),15e3)},p=function(e,t){var n=document.createElement("div");n.classList.add("nd-popup__wrapper"),n.id="nd-popup__wrapper";var r=document.createElement("button");if(r.classList.add("nd-popup__button-close"),r.innerText="X",r.onclick=function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",l,!0)},t)for(var o=Array.from(document.querySelectorAll(t));e.includes("{{REPLACE}}")&&o.length>0;)e=e.replace("{{REPLACE}}",o.shift().src);var a=document.createElement("template");a.innerHTML=e.trim();var i=a.content.firstChild;i.appendChild(r),n.appendChild(i),$("#nd-popup__wrapper").remove(),document.body.appendChild(n)},g=function(e,t){var n,r,o=e.parentNode,a=t.parentNode;if(o&&a&&!o.isEqualNode(t)&&!a.isEqualNode(e)){for(var i=0;i<o.children.length;i++)o.children[i].isEqualNode(e)&&(n=i);for(var c=0;c<a.children.length;c++)a.children[c].isEqualNode(t)&&(r=c);o.isEqualNode(a)&&n<r&&r++,o.insertBefore(t,o.children[n]),a.insertBefore(e,a.children[r])}},v=function e(t){if(window.jQuery){var n,r=xe(t);try{for(r.s();!(n=r.n()).done;){var o=n.value;try{if(!1===c(o))return!1}catch(e){return a.log("Couldn't apply action ".concat(o," with error ").concat(e.message)),e}}}catch(e){r.e(e)}finally{r.f()}}else setTimeout((function(){e(t)}),10)},e.abrupt("return",v(n));case 10:case"end":return e.stop()}}),e)}))),Ie.apply(this,arguments)}var Le=function(e,t){return Ie.apply(this,arguments)};function Ce(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Oe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Oe(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function Oe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Te=new I("Nextday Treatment Repository"),Ae=function(){function e(t){a(this,e);var n=t.treatments,r=t.treatmentWeights;this.treatments=n,this.treatmentWeights=r}var n,r;return c(e,[{key:"getMatchedTreatments",value:function(){var e=this.treatmentWeights,t=this.getUserGroup(),n=this.treatments;if(e){var r,o=t&&e[t]?e[t]:e.default,a=Ce(n);try{for(a.s();!(r=a.n()).done;){var i=r.value;if(o[i.id]&&(i.weight=o[i.id].weight,i.actions.find((function(e){return e.variants})))){var c,s=Ce(i.actions);try{for(s.s();!(c=s.n()).done;){var u=c.value;if(u.variants)for(var l=0,d=Object.keys(u.variants);l<d.length;l++){var f,p,g,v=d[l];null!==(f=o[i.id])&&void 0!==f&&f.variants&&null!==(p=o[i.id])&&void 0!==p&&p.variants[v]&&(u.variants[v].weight=null===(g=o[i.id])||void 0===g?void 0:g.variants[v])}}}catch(e){s.e(e)}finally{s.f()}}}}catch(e){a.e(e)}finally{a.f()}}return Te.log("".concat(n.length," treatments user group matched")),n.length?n:[]}},{key:"getUserGroup",value:function(){return window.matchMedia(f).matches?"UGB":"UGA"}}],[{key:"getTreatments",value:(r=t(o().mark((function e(){var t,n,r,a,i,c;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Te.log("Loading treatments"),t="ND_Treatments",n=JSON.parse(window.sessionStorage.getItem(t)),r=null==n?void 0:n.treatments,a=null==n?void 0:n.timestamp,r&&a){e.next=13;break}return Te.log("Treatments not found in local storage"),e.next=9,Z();case 9:return r=e.sent,i={timestamp:Date.now(),treatments:r},window.sessionStorage.setItem(t,JSON.stringify(i)),e.abrupt("return",r);case 13:if(!a){e.next=23;break}if(!((Date.now()-a)/864e5>1)){e.next=23;break}return Te.log("Treatments are expired"),e.next=19,Z();case 19:return r=e.sent,c={timestamp:Date.now(),treatments:r},window.sessionStorage.setItem(t,JSON.stringify(c)),e.abrupt("return",r);case 23:return Te.log("Treatments are loaded from local storage"),e.abrupt("return",r);case 25:case"end":return e.stop()}}),e)}))),function(){return r.apply(this,arguments)})},{key:"getTreatmentWeights",value:(n=t(o().mark((function e(){return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,ee();case 3:return e.abrupt("return",e.sent);case 6:e.prev=6,e.t0=e.catch(0),Te.warn(e.t0.message),this.treatmentWeights=null;case 10:case"end":return e.stop()}}),e,this,[[0,6]])}))),function(){return n.apply(this,arguments)})}]),e}(),Pe=Ae,_e=new I("Nextday Counter Checker"),Ee=function(e){_e.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"pageView":return je(n,r);case"CABasketPrice":return De(n,r);default:return _e.log("No such operator",t),!1}},Ne=function(e,t){try{switch(t){case"session":return sessionStorage.getItem(e);case"local":return localStorage.getItem(e);default:return _e.log("No such type",t),null}}catch(t){return _e.log("Could not get counter ".concat(e),t),null}},je=function(e,t){var n=parseInt(Ne(h,"session"));return _e.log("Page views counter value: ",n),null===n?(_e.log("Pageviews counter not found in session storage"),!1):se(n,e,parseInt(t))},De=function(e,t){var n=parseInt(Ne(w,"local"));return _e.log("Coupon applicable basket price counter value: ",n),null===n?(_e.log("Coupon applicable basket price counter not found in local storage"),!1):se(n,e,parseInt(t))},Re=new I("Nextday Element Checker"),qe=function(e){Re.log("Checking rule",JSON.stringify(e));var t,n=e.operator,r=e.condition,o=e.value,a=e.selector,i=e.selectorAll,c=e.selectorFallback,s=void 0===c?null:c,u=a;if(u&&!document.querySelector(u)&&(u=s||u),null===n)return se(document.querySelector(u),r,o);if(u&&!document.querySelector(u))return Re.log("Selector not found on page"),!1;if(i&&!document.querySelectorAll(i))return Re.log("Selector not found on page"),!1;switch(u?t=document.querySelector(u):i&&(t=Array.from(document.querySelectorAll(i))),n){case"text-number":var l;l=Array.isArray(t)?t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0):parseInt(document.querySelector(u).textContent.replace("TL","").replace(".",""));var d=parseInt(l);return se(d,r,o);case"classList":return se(Array.from(t.classList),r,o);case"count":var f=Array.isArray(t)?t.length:t?1:0;return se(f,r,o);case"style":var p=getComputedStyle(t),g=o.split(":")[0].trim(),v=o.split(":")[1].trim(),h=p[g];return se(h,r,v);default:return Re.log("Operator not defined"),!1}},Me=new I("Nextday Function Checker"),Ve=function(e,t){Me.log("Checking rule",JSON.stringify(e));var n=t.productInfo,r=e.operator,o=e.condition,a=e.value,i=e.bindings;if(!r)return Me.log("Rule function not defined"),!1;var c={};"productInfo"==i&&(c={productInfo:n});var s=Function(r).bind(c)();return se(s,o,a)},Ue=new I("Nextday Session Checker"),Fe=function(e){Ue.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"duration":return Be(n,r);case"history":return Je(n,r);default:return null}},Be=function(e,t){var n=(Date.now()-function(){try{return new Date(parseInt(window.sessionStorage.getItem(g)))}catch(e){return Ue.log("Could not get session timestamp",e),Date.now()}}())/1e3;return se(n,e,parseInt(t))},Je=function(e,t){var n,r=null===(n=window.sessionStorage.getItem(v))||void 0===n?void 0:n.split(",");return se(r,e,t)},Ge=new I("Nextday Env Checker"),We=function(e){Ge.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("device_type"===t){var o=window.matchMedia(f).matches?"mobile":"desktop";return se(o,n,r)}},He=new I("Nextday RandomPct Checker"),$e=function(){var e=t(o().mark((function e(t){var n,r,a,i,c,s;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(He.log("Checking rule",JSON.stringify(t)),n=t.condition,r=t.value,a=t.salt){e.next=5;break}return He.log("Salt is not defined"),e.abrupt("return",!1);case 5:return e.next=7,le();case 7:return i=e.sent,e.next=10,ne(i+a);case 10:return c=e.sent,s=c,e.abrupt("return",se(s,n,r));case 13:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),ze=new I("Nextday ProductInfo Checker"),Ke=function(e,t){ze.log("Checking rule",JSON.stringify(e));var n=e.operator,r=e.condition,o=e.value,a=null;switch(n){case"transactionIn2Weeks":ze.log("Getting TransactionCount for sku ",t.skuList[0]),a=Qe(t.skuList[0],t.productInfo);break;case"addToCartIn2Weeks":ze.log("Getting AddToCartCount for sku ",t.skuList[0]),a=Ye(t.skuList[0],t.productInfo);break;case"productViewCount":ze.log("Getting productViewCount for sku ",t.skuList[0]),a=Xe(t.skuList[0],t.productInfo)}return se(a,r,o)},Qe=function(e,t){var n,r;return null===(n=t[e])||void 0===n||null===(r=n.catalog)||void 0===r?void 0:r.transactionIn2Weeks},Ye=function(e,t){var n,r;return null===(n=t[e])||void 0===n||null===(r=n.catalog)||void 0===r?void 0:r.addToCartIn2Weeks},Xe=function(e,t){var n,r;return null===(n=t[e])||void 0===n||null===(r=n.catalog)||void 0===r?void 0:r.productViewCount};function Ze(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return et(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?et(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function et(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var tt=new I("Nextday Rule Engine"),nt=function(){function e(t){a(this,e);var n=t.baseRuleSet,r=t.businessRuleSet,o=t.bindings,i=t.callback,c=void 0===i?null:i;this.baseRuleSet=n,this.businessRuleSet=r,this.callback=c,this.bindings=o}var n,r,i;return c(e,[{key:"checkRules",value:(i=t(o().mark((function e(){var t,n,r;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=Ze(this.baseRuleSet),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=12;break}return r=n.value,e.next=7,this.checkRule(r);case 7:if(e.sent){e.next=10;break}return e.abrupt("return",!1);case 10:e.next=3;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(1),t.e(e.t0);case 17:return e.prev=17,t.f(),e.finish(17);case 20:return e.abrupt("return",!0);case 21:case"end":return e.stop()}}),e,this,[[1,14,17,20]])}))),function(){return i.apply(this,arguments)})},{key:"checkBusinessRules",value:(r=t(o().mark((function e(){var t,n,r;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=Ze(this.businessRuleSet),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=12;break}return r=n.value,e.next=7,this.checkRule(r);case 7:if(!e.sent){e.next=10;break}return e.abrupt("return",r.businessRuleId);case 10:e.next=3;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(1),t.e(e.t0);case 17:return e.prev=17,t.f(),e.finish(17);case 20:return e.abrupt("return",null);case 21:case"end":return e.stop()}}),e,this,[[1,14,17,20]])}))),function(){return r.apply(this,arguments)})},{key:"checkRule",value:(n=t(o().mark((function e(t){var n,r,a,i;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=t.chain,r=t.chain_condition,a=t.type,i=null,e.t0=a,e.next="session"===e.t0?5:"counter"===e.t0?7:"element"===e.t0?9:"dataLayer"===e.t0?11:"url"===e.t0?13:"function"===e.t0?15:"environment"===e.t0?17:"random"===e.t0?19:"productInfoLookup"===e.t0?23:25;break;case 5:return i=Fe(t),e.abrupt("break",27);case 7:return i=Ee(t),e.abrupt("break",27);case 9:return i=qe(t),e.abrupt("break",27);case 11:return i=_(t),e.abrupt("break",27);case 13:return i=j(t),e.abrupt("break",27);case 15:return i=Ve(t,this.bindings),e.abrupt("break",27);case 17:return i=We(t),e.abrupt("break",27);case 19:return e.next=21,$e(t);case 21:return i=e.sent,e.abrupt("break",27);case 23:return i=Ke(t,this.bindings),e.abrupt("break",27);case 25:return tt.log("No such rule type: ".concat(a)),e.abrupt("return",null);case 27:if(!n){e.next=53;break}e.t1=r,e.next="and"===e.t1?31:"or"===e.t1?38:"xor"===e.t1?45:51;break;case 31:if(e.t2=i,!e.t2){e.next=36;break}return e.next=35,this.checkRule(n);case 35:e.t2=e.sent;case 36:return i=e.t2,e.abrupt("break",53);case 38:if(e.t3=i,e.t3){e.next=43;break}return e.next=42,this.checkRule(n);case 42:e.t3=e.sent;case 43:return i=e.t3,e.abrupt("break",53);case 45:return e.t4=i,e.next=48,this.checkRule(n);case 48:return e.t5=e.sent,i=e.t4!=e.t5,e.abrupt("break",53);case 51:return tt.log("No such chain condition"),e.abrupt("break",53);case 53:return e.abrupt("return",i);case 54:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})}]),e}();function rt(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return ot(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ot(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function ot(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var at=new I("BeagleOnComponent"),it=function(){var e=t(o().mark((function e(n,r,a,i){var c,s,u,l,d,b,k,x,S,I,L,C,O,A,P,_,E,N,j,D,R,q,M,V,F,B;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return B=function(){var e=w;if(window.location.href.includes("/siparis-listesi.html")){var t=Array.from(document.querySelectorAll(".price"));if(t.push.apply(t,ke(Array.from(document.querySelectorAll(".new-price")))),!t.length)return at.log("Price elements not found"),void window.localStorage.setItem(e,0);at.log("Price elements: ",t);var n=t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0);at.log("Coupon applicable total price: ",n),n>=0&&window.localStorage.setItem(e,n)}else(window.location.href.includes("/siparis-ozeti.html")||null===window.localStorage.getItem(e))&&window.localStorage.setItem(e,0)},F=function(){return F=t(o().mark((function e(t){var r,a,c,u,l,f,p,g,v,h,m,y,w,b,x,S,I,L,C,O,P,N,j,D,R,q;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.id,a=t.actions,c=t.baseRuleSet,u=t.device,l=t.dependant_on_treatment,f=t.reapply_event,p=t.businessRuleSet,g=t.weight,v=t.delay,!s||s.includes(r)){e.next=3;break}return e.abrupt("return");case 3:if("mobile"!==u||d){e.next=6;break}return at.log("Treatment device 'mobile' mismatch"),e.abrupt("return");case 6:if("desktop"!==u||!d){e.next=9;break}return at.log("Treatment device 'desktop' mismatch"),e.abrupt("return");case 9:if(f){h=f,Array.isArray(f)||(h=[f]),at.log("Reapply event '".concat(f,"' found for treatment: ").concat(r)),m=rt(h);try{for(m.s();!(y=m.n()).done;)w=y.value,(b=E[w]?E[w]:[]).includes(r)?at.log("Treatment already added for reapply event"):E[w]=[].concat(ke(b),[r])}catch(e){m.e(e)}finally{m.f()}}if(x={productInfo:A,skuList:JSON.parse(sessionStorage.getItem(k))},S=new nt({baseRuleSet:c,businessRuleSet:p,bindings:x}),at.log("Starting base rule set check for treatment: "+r),e.t0=!c,e.t0){e.next=18;break}return e.next=17,S.checkRules();case 17:e.t0=e.sent;case 18:if(!e.t0){e.next=60;break}if(I=100===g?0:100-g||50,l&&(C=null===(L=_.find((function(e){return e.id===l})))||void 0===L?void 0:L.weight,I=100===C?0:100-C||50),at.log("Treatment skip ratio: "+I),O=l||r,1!==i){e.next=27;break}e.t1=100,e.next=30;break;case 27:return e.next=29,ne(n+O);case 29:e.t1=e.sent;case 30:if(P=e.t1,at.log("TreatmentPct: "+P+" with debug mode ".concat(i?"on":"off")),N=null,!p){e.next=39;break}return at.log("Starting sub variant rule set check for treatment: "+r),e.next=37,S.checkBusinessRules();case 37:(N=e.sent)?at.log("Applying business rule transformation with id: ",N):at.log("Applying treatment with default values");case 39:if(!(P<I)){e.next=43;break}return at.log("Treatment ".concat(r," skipped due to treatment split ratio")),W(r,N,q,"skipped",l),e.abrupt("return");case 43:return e.next=45,ce(n,a,N);case 45:if(j=e.sent,D=T(j,2),R=D[0],q=D[1],!v){e.next=52;break}return e.next=52,v(v);case 52:return e.next=54,Le(R,A);case 54:if(!1!==e.sent){e.next=58;break}return W(r,N,q,"failed"),e.abrupt("return");case 58:return W(r,N,q,"applied"),e.abrupt("return");case 60:at.log("Rule check failed for treatment: ",r);case 61:case"end":return e.stop()}}),e)}))),F.apply(this,arguments)},V=function(e){return F.apply(this,arguments)},r.sendLogs(),c=window.location.search,s=i&&c.includes("filter=")?c.slice(c.indexOf("[")+1,c.lastIndexOf("]")).split(",").map((function(e){return parseInt(e,10)})):null,ie(),void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,G=h,H=m,$=p,z=g,K=v,Q=sessionStorage.getItem(G),Y=sessionStorage.getItem(H),Z=sessionStorage.getItem($),ee=sessionStorage.getItem(z),te=sessionStorage.getItem(K),Q?sessionStorage.setItem(G,parseInt(Q)+1):sessionStorage.setItem(G,1),null===Y&&sessionStorage.setItem(H,0),Z||sessionStorage.setItem($,crypto.randomUUID()),ee||sessionStorage.setItem(z,Date.now()),te?sessionStorage.setItem(K,[window.location.pathname,te]):sessionStorage.setItem(K,[window.location.pathname]),setTimeout((function(){X()}),2e3),u=Pe.getTreatments(),l=Pe.getTreatmentWeights(),d=window.matchMedia(f).matches,b={subtree:!0,childList:!0,attributes:!0},k=y,B(),window.location.href.includes("/siparis-listesi.html")&&(x=new MutationObserver((function(){at.log("Mutation observed, calling collectCABasketPrice"),B()})),(S=document.querySelector("#checkoutForm"))&&x.observe(S,b)),e.next=18,Promise.all([u,l,a]);case 18:if(I=e.sent,L=T(I,3),C=L[0],O=L[1],A=L[2],at.log("Found treatments: ",C),P=new Pe({treatments:C,treatmentWeights:O}),J(U.TreatmentRepositoryCreated),(_=P.getMatchedTreatments()).length){e.next=31;break}return at.log("No treatments matched, returning without further action"),X(),e.abrupt("return");case 31:E={},N=rt(_),e.prev=33,N.s();case 35:if((j=N.n()).done){e.next=47;break}return D=j.value,e.prev=37,e.next=40,V(D);case 40:e.next=45;break;case 42:e.prev=42,e.t0=e.catch(37),at.log("Error executing rules",e.t0);case 45:e.next=35;break;case 47:e.next=52;break;case 49:e.prev=49,e.t1=e.catch(33),N.e(e.t1);case 52:return e.prev=52,N.f(),e.finish(52);case 55:for(X(),J(U.TreatmentsApplied),at.log("Applied treatments: ",window.beagleInfoLayer.a),setInterval((function(){r.updateLatestChanges()}),1e3),R=function(){var e=M[q],t=E[e],n=_.filter((function(e){return t.includes(e.id)}));switch(e){case"infinite_scroll":var r=new ResizeObserver((function(){var e,t=rt(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;at.log("Retrying treatment ".concat(r.id," from infinite_scroll")),V(r)}}catch(e){t.e(e)}finally{t.f()}}));r.observe(document.documentElement);break;case"timeout":setTimeout((function(){var e,t=rt(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;at.log("Retrying treatment ".concat(r.id," from timeout")),V(r)}}catch(e){t.e(e)}finally{t.f()}}),500);break;case"element_change":var o,a=rt(n);try{var i=function(){var e,t=o.value,n=rt(Array.isArray(t.reapply_selector)?t.reapply_selector:[t.reapply_selector]);try{for(n.s();!(e=n.n()).done;){var r=e.value,a=document.querySelector(r);a&&new MutationObserver((function(){at.log("Retrying treatment ".concat(t.id," from element_change")),V(t)})).observe(a,b)}}catch(e){n.e(e)}finally{n.f()}};for(a.s();!(o=a.n()).done;)i()}catch(e){a.e(e)}finally{a.f()}break;case"on_scroll":window.onscroll=function(){var e,t=rt(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;at.log("Retrying treatment ".concat(r.id," from on_scroll")),V(r)}}catch(e){t.e(e)}finally{t.f()}};break;case"query_search_change":var c=window.location.search,s=new MutationObserver((function(){if(window.location.search!==c){c=window.location.search;var e,t=rt(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;at.log("Retrying treatment ".concat(r.id," from query_search_change")),V(r)}}catch(e){t.e(e)}finally{t.f()}}}));s.observe(document,b);break;default:at.log("Reapply event not found: ",e)}},q=0,M=Object.keys(E);q<M.length;q++)R();J(U.ReapplyTreatmentListeners);case 62:case"end":return e.stop()}var G,H,$,z,K,Q,Y,Z,ee,te}),e,null,[[33,49,52,55],[37,42]])})));return function(t,n,r,o){return e.apply(this,arguments)}}(),ct=it;t(o().mark((function e(){var t,n,r,a,i,c,s,u,l,d,f,p;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return J(U.BeagleLoaded),t=null,n=null,r=new I,a="ND_TimeoutCount",i=0,r.info("Nextday initializing"),e.prev=7,e.next=10,B();case 10:return s=be(),u=ue(),t=new ye,J(U.Initialized),e.next=16,le();case 16:return l=e.sent,r.log("Found cookie identifier: ",l),e.next=20,ne(l);case 20:if(d=e.sent,u){e.next=40;break}if(!(d<50)){e.next=29;break}if(-1!==d){e.next=25;break}throw new Error("Could not determine cookie pct");case 25:G("isOn",n=!1),e.next=31;break;case 29:G("isOn",n=!0);case 31:if(J(U.UserOnOff),pe()){e.next=34;break}throw new Error("sendBeacon is not supported");case 34:if(!((i=parseInt(sessionStorage.getItem(a))||0)>1)){e.next=38;break}throw J(U.TimeoutThresholdReached),new Error("Nextday timeout threshold reached");case 38:e.next=42;break;case 40:r.info("Debug mode on: all applicable treatments will be applied"),window.localStorage.setItem(k,!0);case 42:if(document.documentElement.classList.contains("nextDay-hide")){e.next=46;break}throw J(U.ScriptTimeOut),sessionStorage.setItem(a,i+1),new Error("Nextday script timed out");case 46:if(null!==(c=window.beagleInfoLayer)&&void 0!==c&&c.vvsIsShowroom&&window.localStorage.setItem(k,!0),"true"===window.localStorage.getItem(k)?(r.warn("User is out of scope"),null!="isOn"&&delete window.beagleInfoLayer.isOn):(window.dataLayer=window.dataLayer||[],!0===(null===(f=window.beagleInfoLayer)||void 0===f?void 0:f.isOn)?window.dataLayer.push({event:"GLOV",GLOV_ON:"true"}):!1===(null===(p=window.beagleInfoLayer)||void 0===p?void 0:p.isOn)&&window.dataLayer.push({event:"GLOV",GLOV_ON:"false"})),!1!==n){e.next=51;break}throw new Error("Control group: no treatments applied");case 51:r.log("Found cookie percentage: ",d),r.log("Split_ratio: ",50),r.log("cookiePct < SPLIT_RATIO",d<50),r.info("Control group ratio: ".concat(50,"%")),ct(l,t,s,u),e.next=63;break;case 58:e.prev=58,e.t0=e.catch(7),X(),console.warn("Nextday: ",e.t0.message),t.sendLogs(e.t0.message,!0);case 63:case"end":return e.stop()}}),e,null,[[7,58]])})))()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
