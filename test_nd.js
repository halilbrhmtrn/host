(function(){var __webpack_modules__={757:function(e,t,r){e.exports=r(666)},184:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(861),_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(757),_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__),_utils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(853),_constants__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(61),_NextdayRuleEngine_dataLayerChecker__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(201),_logger__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(177);function _createForOfIteratorHelper(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==r.return||r.return()}finally{if(c)throw a}}}}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function applyTreatments(e){return _applyTreatments.apply(this,arguments)}function _applyTreatments(){return _applyTreatments=(0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_4__.Z)(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark((function _callee2(treatments){var observer,logger,POPUP_DISPLAY_FLAG,transformer,handleTabChange,handlePopupClick,displayPopup,createPopup,swapNodes,treatmentApplicator,_args2=arguments;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap((function _callee2$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:observer=_args2.length>1&&void 0!==_args2[1]&&_args2[1],logger=new _logger__WEBPACK_IMPORTED_MODULE_5__.Z("Nextday Apply Treatments"),POPUP_DISPLAY_FLAG=_constants__WEBPACK_IMPORTED_MODULE_2__.sO.POPUP_DISPLAY_FLAG,transformer=function transformer(treatment){logger.log("Applying treatment: ",JSON.stringify(treatment));var operator=treatment.operator,type=treatment.type,applyEvent=treatment.applyEvent,contentSelector=treatment.contentSelector,selector=treatment.selector,selectorFallback=treatment.selectorFallback,mdCondition=treatment.mdCondition,move_selector_1=treatment.move_selector_1,move_selector_2=treatment.move_selector_2,replaceFn=treatment.replaceFn,value=treatment.value,element=$(selector),mc=!mdCondition||window.matchMedia(mdCondition).matches;if(mc)if(move_selector_1&&!move_selector_2||move_selector_2&&!move_selector_1)logger.log("Both move selectors are required");else{if(move_selector_1&&move_selector_2){if(!$(move_selector_1).length)return void logger.log("Move selector 1 not found: ",move_selector_1);if(!$(move_selector_2).length)return void logger.log("Move selector 2 not found: ",move_selector_2)}else{if(!selector)return void logger.log("Selector not specified");if(!element.length&&"no-selector"!==selector&&(logger.log("Selector not found: ",selector),logger.log("Trying fallback selector: ",selectorFallback),selectorFallback&&(element=$(selectorFallback)),!element.length))return void logger.log("Fallback selector not found")}var replaceFnExecutor=function replaceFnExecutor(replaceFn,value){if(replaceFn&&value.includes("{{REPLACE}}")){logger.log("Executing replace function: ",replaceFn);var replaceFunction=eval(replaceFn);value=value.replace("{{REPLACE}}",replaceFunction())}return value};if(Array.isArray(value)?value.forEach((function(e,t){var r=replaceFn?replaceFn[t]||replaceFn:"";value[t]=replaceFnExecutor(r,e)})):value=replaceFnExecutor(replaceFn,value),"remove"===operator)element&&(logger.log("Removing: ",selector),element.remove()),logger.log("Cannot found element with selector: ",selector);else if("insert"===operator)switch(type){case"before":logger.log("Inserting before: ",value),String(value).includes("nd-add-to-win")&&$(".nd-add-to-win").remove(),element.before(value);break;case"after":logger.log("Inserting after: ",value),element.after(value);break;case"popup":if(0!==parseInt(sessionStorage.getItem(POPUP_DISPLAY_FLAG))){logger.log("Popup already displayed in session");break}if(logger.log("Creating Popup: ",value),createPopup(value,contentSelector),applyEvent){var mobile=window.matchMedia(_constants__WEBPACK_IMPORTED_MODULE_2__.RS).matches,_iterator=_createForOfIteratorHelper(applyEvent),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var event=_step.value;switch(event){case"exitIntent":logger.log("Adding exit intent listener"),mobile?(0,_utils__WEBPACK_IMPORTED_MODULE_1__.y)(displayPopup):document.documentElement.addEventListener("mouseleave",displayPopup,{once:!0});break;case"copyIntent":logger.log("Adding copy intent listener"),document.documentElement.addEventListener("copy",displayPopup,{once:!0})}}}catch(e){_iterator.e(e)}finally{_iterator.f()}}else setTimeout((function(){displayPopup()}),timeout)}else if("edit"===operator)switch(type){case"text":logger.log("Editing text: ",value),document.querySelector(selector).textContent=value;break;case"styleApplicator":logger.log("Applying style: ",value);var elements=document.querySelectorAll(selector),styleChangesMap=JSON.parse(value);logger.log("Style Changes Map: ",styleChangesMap),(0,_utils__WEBPACK_IMPORTED_MODULE_1__.ck)(elements,styleChangesMap);break;case"addClass":logger.log("addding class to ".concat(element," named ").concat(value)),element.addClass(value);break;case"removeClass":logger.log("remove class from ".concat(element," named ").concat(value)),element.removeClass(value);break;case"documentTitle":if(logger.log("changing document title from ".concat(element," to ").concat(value)),applyEvent){var _iterator2=_createForOfIteratorHelper(applyEvent),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var _event=_step2.value;"tabChange"==_event&&(logger.log("catching event tabchange.."),document.addEventListener("visibilitychange",(function(e){return handleTabChange(e,value)})))}}catch(e){_iterator2.e(e)}finally{_iterator2.f()}}}else if("setattribute"===operator)switch(logger.log("Setting attribute: ",attribute,value),attribute){case"src":element.css("content","url(".concat(value.trim(),")"));break;case"style":var property=value.split(":")[0].trim(),propertyValue=value.split(":")[1].trim();element.css(property,propertyValue,"!important")}else if("replace"===operator)logger.log("Replacing: ",value),element.replaceAll(value);else if("swap"===operator){logger.log("Swapping: ",move_selector_1,move_selector_2);var n1=document.querySelector(move_selector_1),n2=document.querySelector(move_selector_2);swapNodes(n1,n2)}else if("injectscript"===operator)logger.log("Injecting script: ",value),element.append("<script>".concat(value,"<\/script>"));else if("move"===operator){logger.log("Moving ".concat(move_selector_1," to ").concat(move_selector_2));var source=document.querySelector(move_selector_1),destination=document.querySelector(move_selector_2);source.remove(),destination.prepend(source)}else"noop"===operator?logger.log("Noop Operator: No operation is applied on target "):logger.log("No such operator exists yet",operator)}else logger.log("Media condition mismatch: ",mdCondition)},handleTabChange=function(){var e=(0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_4__.Z)(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark((function e(t,r){var n,o;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=document.title,o=0;case 2:if(!(o<r.length)){e.next=16;break}if(!document.hidden){e.next=12;break}return document.title=r[o],e.next=7,(0,_utils__WEBPACK_IMPORTED_MODULE_1__.gw)(5e3);case 7:return document.title=n,e.next=10,(0,_utils__WEBPACK_IMPORTED_MODULE_1__.gw)(5e3);case 10:e.next=13;break;case 12:document.title=n;case 13:o++,e.next=2;break;case 16:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}(),handlePopupClick=function e(t){var r=t.target.id;r&&"nd-popup__wrapper"===r&&($("#nd-popup__wrapper").remove(),window.removeEventListener("click",e,!0))},displayPopup=function e(){sessionStorage.setItem(POPUP_DISPLAY_FLAG,1);var t=document.querySelector("#grt-shadow-host");t&&(t.style.display="none"),document.getElementById("nd-popup__wrapper").style.display="block",window.addEventListener("click",handlePopupClick,!0),document.documentElement.removeEventListener("mouseleave",e,{once:!0}),document.documentElement.removeEventListener("copy",e,{once:!0}),setTimeout((function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",handlePopupClick,!0)}),15e3)},createPopup=function(e,t){var r=document.createElement("div");r.classList.add("nd-popup__wrapper"),r.id="nd-popup__wrapper";var n=document.createElement("button");if(n.classList.add("nd-popup__button-close"),n.innerText="X",n.onclick=function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",handlePopupClick,!0)},t)for(var o=Array.from(document.querySelectorAll(t));e.includes("{{REPLACE}}")&&o.length>0;)e=e.replace("{{REPLACE}}",o.shift().src);var a=document.createElement("template");a.innerHTML=e.trim();var i=a.content.firstChild;i.appendChild(n),r.appendChild(i),$("#nd-popup__wrapper").remove(),document.body.appendChild(r)},swapNodes=function(e,t){var r,n,o=e.parentNode,a=t.parentNode;if(o&&a&&!o.isEqualNode(t)&&!a.isEqualNode(e)){for(var i=0;i<o.children.length;i++)o.children[i].isEqualNode(e)&&(r=i);for(var c=0;c<a.children.length;c++)a.children[c].isEqualNode(t)&&(n=c);o.isEqualNode(a)&&r<n&&n++,o.insertBefore(t,o.children[r]),a.insertBefore(e,a.children[n])}},treatmentApplicator=function e(t){if(window.jQuery){var r,n=_createForOfIteratorHelper(t);try{for(n.s();!(r=n.n()).done;){var o=r.value;transformer(o)}}catch(e){n.e(e)}finally{n.f()}}else setTimeout((function(){e(t)}),10)},treatmentApplicator(treatments);case 12:case"end":return _context2.stop()}}),_callee2)}))),_applyTreatments.apply(this,arguments)}__webpack_exports__.Z=applyTreatments},201:function(e,t,r){"use strict";r.d(t,{F:function(){return i}});var n=r(853);function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var a=new(r(177).Z)("Nextday DataLayer Checker"),i=function(e){a.log("Checking rule",JSON.stringify(e));var t=e.operator,r=e.condition,o=e.value,i=c(t);return(0,n.m1)(i,r,o)},c=function(e){a.log("Searching dataLayer for key",e);var t,r=function(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,c=!0,l=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return c=e.done,e},e:function(e){l=!0,i=e},f:function(){try{c||null==r.return||r.return()}finally{if(l)throw i}}}}(window.dataLayer);try{for(r.s();!(t=r.n()).done;){var n=t.value;if(Object.keys(n).includes(e))return a.log("Found key ".concat(e," with value ").concat(n[e])),n[e]}}catch(e){r.e(e)}finally{r.f()}return a.log("Key ".concat(e," not found in dataLayer")),null}},61:function(e,t,r){"use strict";r.d(t,{B$:function(){return n},Em:function(){return l},RS:function(){return c},WD:function(){return o},dA:function(){return f},lp:function(){return a},m1:function(){return i},sO:function(){return s},x1:function(){return u}});var n="_ga",o="https://host-b96.pages.dev/treatments.json",a="https://host-b96.pages.dev/nd-styles.css",i="https://europe-west3-nextday-34eb3.cloudfunctions.net/api/logResponse",c="(max-width: 440px)",l=1,u=1,s={SESSION_ID:"__nextday_session_id",PAGE_VIEWS:"ND_PageViews",SESSION_TIMESTAMP:"ND_SessionTimestamp",POPUP_DISPLAY_FLAG:"ND_PopupDisplayFlag"},f={TREATMENTS:"ND_Treatments",COUPON_APPLICABLE_BASKET_PRICE:"ND_CABasketPrice"}},177:function(e,t,r){"use strict";var n=r(671),o=r(144),a=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Nextday Client SDK",r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];(0,n.Z)(this,e),this.origin=t,this.DEBUG=r}return(0,o.Z)(e,[{key:"info",value:function(){for(var e,t=this.origin,r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];(e=console).info.apply(e,["[".concat(t,"]")].concat(n))}},{key:"log",value:function(){var e=this.DEBUG,t=this.origin;if(e){for(var r,n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];(r=console).log.apply(r,["[".concat(t,"]")].concat(o))}}},{key:"error",value:function(){for(var e,t=this.origin,r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];(e=console).error.apply(e,["[".concat(t,"]")].concat(n))}}]),e}();t.Z=a},853:function(e,t,r){"use strict";r.d(t,{DS:function(){return h},Qz:function(){return g},Z2:function(){return y},ck:function(){return v},cm:function(){return b},dZ:function(){return p},gw:function(){return I},m1:function(){return k},mS:function(){return d},t:function(){return S},uh:function(){return _},vL:function(){return w},y:function(){return m}});var n=r(2),o=r(885),a=r(861),i=r(757),c=r.n(i),l=r(61);function u(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return s(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?s(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==r.return||r.return()}finally{if(c)throw a}}}}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var f=new(r(177).Z)("Nextday Utils");"randomUUID"in crypto||E();var p=function(){document.documentElement.classList.remove("nextDay-hide")},d=function(){var e=(0,a.Z)(c().mark((function e(){var t;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return f.log("Fetching treatments"),e.next=3,fetch(l.WD);case 3:return t=e.sent,e.next=6,t.json();case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),g=function(e,t){if(!e)return null;var r=e.split(";").map((function(e){return e.split("=")})).reduce((function(e,t){return t[0]&&t[1]&&(e[decodeURIComponent(t[0].trim())]=decodeURIComponent(t[1].trim())),e}),{})[t];return r?("_ga"===t&&(r=r.split(".")[2]),r):null},_=function(){var e=(0,a.Z)(c().mark((function e(t){var r,n,o,a,i;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t){e.next=2;break}return e.abrupt("return",-1);case 2:return r=(new TextEncoder).encode(t),e.next=5,crypto.subtle.digest("SHA-1",r);case 5:return n=e.sent,o=Array.from(new Uint8Array(n)),a=o.map((function(e){return e.toString(16).padStart(2,"0")})).join(""),i=parseInt(a,16),e.abrupt("return",i%100);case 10:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),m=function(e){var t=document.documentElement.scrollTop,r=setInterval((function(){var n=document.documentElement.scrollTop;t-400>n?(clearInterval(r),e()):t=n}),500)},h=function(){[Object,Object.prototype,Function,Function.prototype,Array,Array.prototype,String,String.prototype,Number,Number.prototype,Boolean,Boolean.prototype].forEach(Object.freeze)},v=function(e,t){f.log("Applying style changes",t,"to elements",e);for(var r=0;r<e.length;r++)for(var n=e[r],a=0,i=Object.entries(t);a<i.length;a++){var c=(0,o.Z)(i[a],2),l=c[0],u=c[1];n.style[l]=u}},y=function(){var e=(0,a.Z)(c().mark((function e(){var t;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(t=document.createElement("link")).rel="stylesheet",t.type="text/css",t.href=l.lp,document.head.appendChild(t);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),b=function(e,t){var r,n=JSON.parse(JSON.stringify(e)),o=u(n);try{for(o.s();!(r=o.n()).done;){var a=r.value,i=a.subVariants;if(i){var c,l=u(i);try{for(l.s();!(c=l.n()).done;){var s=c.value;if(s.id===t){for(var f in s)"id"!==f&&(a[f]=s[f]);return n}}}catch(e){l.e(e)}finally{l.f()}}}}catch(e){o.e(e)}finally{o.f()}return n},w=function(){var e=l.sO.PAGE_VIEWS,t=l.sO.POPUP_DISPLAY_FLAG,r=l.sO.SESSION_ID,n=l.sO.SESSION_TIMESTAMP,o=sessionStorage.getItem(e),a=sessionStorage.getItem(t),i=sessionStorage.getItem(r),c=sessionStorage.getItem(n);o?sessionStorage.setItem(e,parseInt(o)+1):sessionStorage.setItem(e,1),null===a&&sessionStorage.setItem(t,0),i||sessionStorage.setItem(r,crypto.randomUUID()),c||sessionStorage.setItem(n,Date.now())},k=function(e,t,r){if("notExist"===t)return e?(f.log("conditionChecker: -not satisfied- target does exist"),!1):(f.log("conditionChecker: -satisfied- target does not exist"),!0);if(null==e||null==t)return f.log("conditionChecker: runTimeValue or condition is not defined"),!1;switch(t){case"exist":return e?(f.log("conditionChecker: -satisfied- target does exist"),!0):(f.log("conditionChecker: -not satisfied- target does not exist"),!1);case"contains":return e.includes(r)?(f.log("conditionChecker: -satisfied- target contains value"),!0):(f.log("conditionChecker: -not satisfied- target does not contain value"),!1);case"notContains":return e.includes(r)?(f.log("conditionChecker: -not satisfied- target contains value"),!1):(f.log("conditionChecker: -satisfied- target does not contain value"),!0);case"equal":return e===r?(f.log("conditionChecker: -satisfied- target equals value"),!0):(f.log("conditionChecker: -not satisfied- target does not equal value"),!1);case"notEqual":return e!==r?(f.log("conditionChecker: -satisfied- target does not equal value"),!0):(f.log("conditionChecker: -not satisfied- target equals value"),!1);case"greaterThan":return e>r?(f.log("conditionChecker: -satisfied- target is greater than value"),!0):(f.log("conditionChecker: -not satisfied- target is not greater than value"),!1);case"lessThan":return e<r?(f.log("conditionChecker: -satisfied- target is less than value"),!0):(f.log("conditionChecker: -not satisfied- target is not less than value"),!1);case"greaterEquals":return e>=r?(f.log("conditionChecker: -satisfied- target is greater or equal than value"),!0):(f.log("conditionChecker: -not satisfied- target is not greater or equal than value"),!1);case"lessEquals":return e<=r?(f.log("conditionChecker: -satisfied- target is less or equal than value"),!0):(f.log("conditionChecker: -not satisfied- target is not less or equal than value"),!1);case"between":var n=r.split(","),a=(0,o.Z)(n,2),i=a[0],c=a[1];return i=parseInt(i),c=parseInt(c),e>=i&&e<=c?(f.log("conditionChecker: -satisfied- target is between min and max"),!0):(f.log("conditionChecker: -not satisfied- target is not between min and max"),!1);default:return f.log("conditionChecker: condition is not defined ",t),!1}},E=function(){crypto.randomUUID=function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(e){return(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)}))}},S=function e(t,r){if(t===r)return!0;if("object"!==(0,n.Z)(t)||"object"!==(0,n.Z)(r)||null==t||null==r)return!1;var o=Object.keys(t),a=Object.keys(r);if(o.length!==a.length)return!1;var i=!0;return o.forEach((function(n){a.includes(n)||(i=!1),"function"!=typeof t[n]&&"function"!=typeof r[n]||t[n].toString()!==r[n].toString()&&(i=!1),e(t[n],r[n])||(i=!1)})),i},I=function(e){return new Promise((function(t){return setTimeout(t,e)}))}},666:function(e){var t=function(e){"use strict";var t,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,r){return e[t]=r}}function u(e,t,r,n){var o=t&&t.prototype instanceof m?t:m,a=Object.create(o.prototype),i=new P(n||[]);return a._invoke=function(e,t,r){var n=f;return function(o,a){if(n===d)throw new Error("Generator is already running");if(n===g){if("throw"===o)throw a;return O()}for(r.method=o,r.arg=a;;){var i=r.delegate;if(i){var c=I(i,r);if(c){if(c===_)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=g,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=d;var l=s(e,t,r);if("normal"===l.type){if(n=r.done?g:p,l.arg===_)continue;return{value:l.arg,done:r.done}}"throw"===l.type&&(n=g,r.method="throw",r.arg=l.arg)}}}(e,r,i),a}function s(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",g="completed",_={};function m(){}function h(){}function v(){}var y={};l(y,a,(function(){return this}));var b=Object.getPrototypeOf,w=b&&b(b(C([])));w&&w!==r&&n.call(w,a)&&(y=w);var k=v.prototype=m.prototype=Object.create(y);function E(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function r(o,a,i,c){var l=s(e[o],e,a);if("throw"!==l.type){var u=l.arg,f=u.value;return f&&"object"==typeof f&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,i,c)}),(function(e){r("throw",e,i,c)})):t.resolve(f).then((function(e){u.value=e,i(u)}),(function(e){return r("throw",e,i,c)}))}c(l.arg)}var o;this._invoke=function(e,n){function a(){return new t((function(t,o){r(e,n,t,o)}))}return o=o?o.then(a,a):a()}}function I(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,I(e,r),"throw"===r.method))return _;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return _}var o=s(n,e.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,_;var a=o.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,_):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,_)}function A(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function x(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function P(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(A,this),this.reset(!0)}function C(e){if(e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}return{next:O}}function O(){return{value:t,done:!0}}return h.prototype=v,l(k,"constructor",v),l(v,"constructor",h),h.displayName=l(v,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===h||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,v):(e.__proto__=v,l(e,c,"GeneratorFunction")),e.prototype=Object.create(k),e},e.awrap=function(e){return{__await:e}},E(S.prototype),l(S.prototype,i,(function(){return this})),e.AsyncIterator=S,e.async=function(t,r,n,o,a){void 0===a&&(a=Promise);var i=new S(u(t,r,n,o),a);return e.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},E(k),l(k,c,"Generator"),l(k,a,(function(){return this})),l(k,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=C,P.prototype={constructor:P,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(x),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return c.type="throw",c.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],c=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var l=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(l&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,_):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),_},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),x(r),_}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;x(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:C(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),_}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},907:function(e,t,r){"use strict";function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}r.d(t,{Z:function(){return n}})},861:function(e,t,r){"use strict";function n(e,t,r,n,o,a,i){try{var c=e[a](i),l=c.value}catch(e){return void r(e)}c.done?t(l):Promise.resolve(l).then(n,o)}function o(e){return function(){var t=this,r=arguments;return new Promise((function(o,a){var i=e.apply(t,r);function c(e){n(i,o,a,c,l,"next",e)}function l(e){n(i,o,a,c,l,"throw",e)}c(void 0)}))}}r.d(t,{Z:function(){return o}})},671:function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}r.d(t,{Z:function(){return n}})},144:function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function o(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}r.d(t,{Z:function(){return o}})},885:function(e,t,r){"use strict";r.d(t,{Z:function(){return o}});var n=r(181);function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a=[],i=!0,c=!1;try{for(r=r.call(e);!(i=(n=r.next()).done)&&(a.push(n.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==r.return||r.return()}finally{if(c)throw o}}return a}}(e,t)||(0,n.Z)(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},2:function(e,t,r){"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}r.d(t,{Z:function(){return n}})},181:function(e,t,r){"use strict";r.d(t,{Z:function(){return o}});var n=r(907);function o(e,t){if(e){if("string"==typeof e)return(0,n.Z)(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?(0,n.Z)(e,t):void 0}}}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var r=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](r,r.exports,__webpack_require__),r.exports}__webpack_require__.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=function(e,t){for(var r in t)__webpack_require__.o(t,r)&&!__webpack_require__.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},__webpack_require__.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)};var __webpack_exports__={};!function(){"use strict";var e=__webpack_require__(2),t=__webpack_require__(885),r=__webpack_require__(907),n=__webpack_require__(181);function o(e){return function(e){if(Array.isArray(e))return(0,r.Z)(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||(0,n.Z)(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var a=__webpack_require__(861),i=__webpack_require__(757),c=__webpack_require__.n(i),l=__webpack_require__(184),u=__webpack_require__(177),s=__webpack_require__(671),f=__webpack_require__(144),p=__webpack_require__(61),d=__webpack_require__(853),g=function(){function e(t){(0,s.Z)(this,e),this.logger=new u.Z("Nextday Monitor"),this.logger.log("Initializing monitor"),this.appliedTreatmentIds=JSON.parse(JSON.stringify(t)),this.latestChanges=null,this.sessionId=sessionStorage.getItem(p.sO.SESSION_ID),this.viewId=crypto.randomUUID(),this.headers={type:"application/json"},this.logger.log("Initializing with session id: "+this.sessionId),this.initializeExitEventListener()}var t,r;return(0,f.Z)(e,[{key:"sendLogs",value:(r=(0,a.Z)(c().mark((function e(){var t;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(this.logger.log("Sending logs"),t=!1,setTimeout((function(){t=!0}),1e3);!t;)t=navigator.sendBeacon(p.m1,this.packageLogData());case 4:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"updateLatestChanges",value:function(e){var t=this.appliedTreatmentIds,r=this.logger;r.log("Updating latest changes");var n=this.latestChanges||t;(0,d.t)(n,e)||(r.log("Changes detected"),r.log("Changes: ",e),this.latestChanges=e)}},{key:"packageLogData",value:function(){var e=this.appliedTreatmentIds,t=this.headers,r=this.sessionId,n=this.viewId,o=Object.keys(e).length?"Treatments applied":"No treatments applied",a=new URL(window.location.href),i={n:"nextday-session_id-".concat(r),u:a.href,d:a.hostname,r:document.referrer,w:window.innerWidth,c:document.cookie,wdl:window.dataLayer||[],t:Date.now(),v:"0.0.22",a:e,vId:n,sr:p.Em,m:o};return new Blob([JSON.stringify(i)],t)}},{key:"packageUpdateLogData",value:function(){var e=this.headers,t=this.latestChanges,r=this.viewId;if(!t)return!1;var n={t:Date.now(),a:t,vId:r};return new Blob([JSON.stringify(n)],e)}},{key:"initializeExitEventListener",value:function(){var e=this,t=this.logger;t.log("Initializing exit event listener"),window.addEventListener("pagehide",(function(){t.log("In pagehide event");var r=e.packageUpdateLogData();if(r){for(var n=!1;!n;)n=navigator.sendBeacon(p.m1,r);t.log("Logs queued successfully")}else t.log("No changes to log")}),{capture:!0})}}],[{key:"sendEmptyLog",value:(t=(0,a.Z)(c().mark((function e(t){var r;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(console.log("Nextday Monitor: Sending empty logs"),r=!1,setTimeout((function(){r=!0}),1e3);!r;)r=navigator.sendBeacon(p.m1,this.packageEmptyLogData(t));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"packageEmptyLogData",value:function(e){var t=this.headers,r=new URL(window.location.href);return body={n:"nextday-session_id-".concat(this.sessionId),u:r.href,d:r.hostname,r:document.referrer,w:window.innerWidth,c:document.cookie,wdl:window.dataLayer||[],t:Date.now(),v:"0.0.22",a:{},vId:this.viewId,sr:p.Em,m:e},new Blob([JSON.stringify(body)],t)}}]),e}(),_=g,m=new u.Z("Nextday Treatment Repository"),h=function(){function e(t){(0,s.Z)(this,e);var r=t.cookiePct,n=t.requestURL,o=t.treatments;this.treatments=o,this.cookiePct=r;var a=n&&n.includes("ajax/mobile-search/loadOtherPages.php")?decodeURIComponent(new URL(n).search.replace("?originalPath=","")):new URL(n).pathname;this.path=a}var t;return(0,f.Z)(e,[{key:"getMatchedTreatments",value:function(){var e=this.getUserSegment(),t=this.treatments.filter((function(t){return t.apply_on_user_segment==e||"*"===t.apply_on_user_segment}));return m.log("".concat(t.length," treatments segment matched")),t.length?t:[]}},{key:"getUserSegment",value:function(){if(-1===this.cookiePct)throw m.info("New user has no segment"),new Error("New User");return this.cookiePct<50?"A":"B"}}],[{key:"getTreatments",value:(t=(0,a.Z)(c().mark((function e(){var t,r,n,o,a,i;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(m.log("Loading treatments"),t=p.dA.TREATMENTS,r=JSON.parse(localStorage.getItem(t)),n=null==r?void 0:r.treatments,o=null==r?void 0:r.timestamp,n&&o){e.next=13;break}return m.log("Treatments not found in local storage"),e.next=9,(0,d.mS)();case 9:return n=e.sent,a={timestamp:Date.now(),treatments:n},localStorage.setItem(t,JSON.stringify(a)),e.abrupt("return",n);case 13:if(!o){e.next=23;break}if(!((Date.now()-o)/864e5>p.x1)){e.next=23;break}return m.log("Treatments are expired"),e.next=19,(0,d.mS)();case 19:return n=e.sent,i={timestamp:Date.now(),treatments:n},localStorage.setItem(t,JSON.stringify(i)),e.abrupt("return",n);case 23:return m.log("Treatments are loaded from local storage"),e.abrupt("return",n);case 25:case"end":return e.stop()}}),e)}))),function(){return t.apply(this,arguments)})}]),e}(),v=h,y=new u.Z("Nextday Counter Checker"),b=function(e,t){try{switch(t){case"session":return sessionStorage.getItem(e);case"local":return localStorage.getItem(e);default:return y.log("No such type",t),null}}catch(t){return y.log("Could not get counter ".concat(e),t),null}},w=__webpack_require__(201),k=new u.Z("Nextday Element Checker"),E=new u.Z("Nextday Function Checker"),S=new u.Z("Nextday Session Checker"),I=new u.Z("Nextday Url Checker");function A(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return x(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?x(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==r.return||r.return()}finally{if(c)throw a}}}}function x(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var P=new u.Z("Nextday Rule Engine"),C=function(){function e(t){(0,s.Z)(this,e);var r=t.baseRuleSet,n=t.subVariantRuleSet,o=t.callback,a=void 0===o?null:o;this.baseRuleSet=r,this.subVariantRuleSet=n,this.callback=a}return(0,f.Z)(e,[{key:"checkRules",value:function(){var e,t=A(this.baseRuleSet);try{for(t.s();!(e=t.n()).done;){var r=e.value;if(!this.checkRule(r))return!1}}catch(e){t.e(e)}finally{t.f()}return!0}},{key:"checkSubVariantRules",value:function(){var e,t=A(this.subVariantRuleSet);try{for(t.s();!(e=t.n()).done;){var r=e.value;if(this.checkRule(r))return r.subVariantId}}catch(e){t.e(e)}finally{t.f()}return!1}},{key:"checkRule",value:function(e){var t=e.chain,r=e.chain_condition,n=e.type,o=null;switch(n){case"session":o=function(e){S.log("Checking rule",JSON.stringify(e));var t=e.operator,r=e.condition,n=e.value;return"duration"===t?function(e,t){var r=(Date.now()-function(){try{return new Date(parseInt(sessionStorage.getItem(p.sO.SESSION_TIMESTAMP)))}catch(e){return S.log("Could not get session timestamp",e),Date.now()}}())/1e3;return(0,d.m1)(r,e,parseInt(t))}(r,n):null}(e);break;case"counter":o=function(e){y.log("Checking rule",JSON.stringify(e));var t=e.operator,r=e.condition,n=e.value;switch(t){case"pageView":return function(e,t){var r=parseInt(b(p.sO.PAGE_VIEWS,"session"));return y.log("Page views counter value: ",r),null===r?(y.log("Pageviews counter not found in session storage"),!1):(0,d.m1)(r,e,parseInt(t))}(r,n);case"CABasketPrice":return function(e,t){var r=parseInt(b(p.dA.COUPON_APPLICABLE_BASKET_PRICE,"local"));return y.log("Coupon applicable basket price counter value: ",r),null===r?(y.log("Coupon applicable basket price counter not found in local storage"),!1):(0,d.m1)(r,e,parseInt(t))}(r,n);default:return y.log("No such operator",t),!1}}(e);break;case"element":o=function(e){k.log("Checking rule",JSON.stringify(e));var t,r=e.operator,n=e.condition,o=e.value,a=e.selector,i=e.selectorAll,c=e.selectorFallback,l=void 0===c?null:c,u=a;if(u&&!document.querySelector(u)&&(u=l||u),null===r)return(0,d.m1)(document.querySelector(u),n,o);if(u&&!document.querySelector(u))return k.log("Selector not found on page"),!1;if(i&&!document.querySelectorAll(i))return k.log("Selector not found on page"),!1;if(u?t=document.querySelector(u):i&&(t=Array.from(document.querySelectorAll(i))),"text-number"===r){var s;s=Array.isArray(t)?t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0):parseInt(document.querySelector(u).textContent.replace("TL","").replace(".",""));var f=parseInt(s);return(0,d.m1)(f,n,o)}return k.log("Operator not defined"),!1}(e);break;case"dataLayer":o=(0,w.F)(e);break;case"url":o=function(e){I.log("Checking rule",JSON.stringify(e));var t=e.operator,r=e.condition,n=e.value;if("path"===t){var o=window.location.href,a=o.includes("ajax/mobile-search/loadOtherPages.php")?decodeURIComponent(new URL(o).search.replace("?originalPath=","")):new URL(o).pathname;return I.log("Checking path ".concat(a," matches rule path ").concat(n)),(0,d.m1)(a,r,n)}}(e);break;case"function":o=function(e){E.log("Checking rule",JSON.stringify(e));var t=e.operator,r=e.condition,n=e.value;if(!t)return E.log("Rule function not defined"),!1;var o=Function(t)();return(0,d.m1)(o,r,n)}(e);break;default:P.log("No such rule type: ".concat(n))}if(t)switch(r){case"and":o=o&&this.checkRule(t);break;case"or":o=o||this.checkRule(t);break;case"xor":o=o!=this.checkRule(t);break;default:P.log("No such chain condition")}return o}}]),e}();function O(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return L(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?L(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==r.return||r.return()}finally{if(c)throw a}}}}function L(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}(0,a.Z)(c().mark((function r(){var n,i,s,f,g,m,h,y;return c().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return(n=new u.Z).info("Nextday initiated"),i=window.matchMedia(p.RS).matches,s={subtree:!0,childList:!0},(0,d.DS)(),(0,d.Z2)(),f=function(){if(!document.documentElement.classList.contains("nextDay-hide")){var e=document.createElement("style");e.textContent=".nextDay-hide { opacity: 0 !important }",document.documentElement.appendChild(e),document.documentElement.classList.add("nextDay-hide")}},(0,d.vL)(),g=v.getTreatments(),f(),setTimeout((function(){(0,d.dZ)()}),2e3),m=function(){var e=(0,a.Z)(c().mark((function e(t,r){var o,a,u,s,f,p,g;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o=t.actions,a=t.baseRuleSet,u=t.device,s=t.subVariantRuleSet,"mobile"!==u||i){e.next=4;break}return n.log("Treatment device 'mobile' mismatch"),e.abrupt("return");case 4:if("desktop"!==u||!i){e.next=7;break}return n.log("Treatment device 'desktop' mismatch"),e.abrupt("return");case 7:if(f=new C({baseRuleSet:a,subVariantRuleSet:s}),n.log("Starting base rule set check for treatment: "+t.id),a&&!f.checkRules()){e.next=21;break}if(s){e.next=14;break}return(0,l.Z)(o),r[t.id]={subVariantId:null,actions:o},e.abrupt("return");case 14:return n.log("Starting sub variant rule set check for treatment: "+t.id),p=f.checkSubVariantRules(),g=o,p?(n.log("Applying sub variant with id: ",p),g=(0,d.cm)(o,p)):n.log("Applying treatment with default values"),(0,l.Z)(g),r[t.id]={subVariantId:p,actions:g},e.abrupt("return");case 21:n.log("Rule check failed for treatment: ",t.id);case 22:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}(),h=function(){var e=p.dA.COUPON_APPLICABLE_BASKET_PRICE;if(window.location.href.includes("/siparis-listesi.html")){var t=Array.from(document.querySelectorAll(".price"));if(t.push.apply(t,o(Array.from(document.querySelectorAll(".new-price")))),!t.length)return n.log("Price elements not found"),void window.localStorage.setItem(e,0);n.log("Price elements: ",t);var r=t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0);n.log("Coupon applicable total price: ",r),r>=0&&window.localStorage.setItem(e,r)}else(window.location.href.includes("/siparis-ozeti.html")||null===window.localStorage.getItem(e))&&window.localStorage.setItem(e,0)},r.prev=13,r.delegateYield(c().mark((function e(){var r,a,i,l,u,f,y,b,w,k,E,S,I,A,x,P,C,L,T,D,R,N;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return h(),window.location.href.includes("/siparis-listesi.html")&&(r=new MutationObserver((function(){n.log("Mutation observed, calling collectCABasketPrice"),h()})),(a=document.querySelector("#checkoutForm"))&&r.observe(a,s)),i=(0,d.Qz)(document.cookie,p.B$),n.log("Found cookie identifier: ",i),e.next=6,Promise.all([g,(0,d.uh)(i)]);case 6:if(l=e.sent,u=(0,t.Z)(l,2),f=u[0],y=u[1],n.log("Found treatments: ",f),n.log("Found cookie percentage: ",y),n.log("Split_ratio: ",p.Em),n.log("cookiePct < SPLIT_RATIO",y<p.Em),!(y<p.Em)){e.next=16;break}throw new Error("Control group: no treatments applied");case 16:if(b=new v({treatments:f,requestURL:window.location.href,cookiePct:y}),(w=b.getMatchedTreatments()).length){e.next=23;break}return n.log("No treatments matched, returning without further action"),(0,d.dZ)(),_.sendEmptyLog("No treatments matched"),e.abrupt("return",{v:void 0});case 23:k={},E={},S=O(w),e.prev=26,S.s();case 28:if((I=S.n()).done){e.next=42;break}return A=I.value,e.prev=30,x=A.id,P=A.reapply_event,(C=void 0===P?null:P)&&(n.log("Reapply event '".concat(C,"' found for treatment: ").concat(x)),L=E[C]?E[C]:[],E[C]=[].concat(o(L),[x])),e.next=35,m(A,k);case 35:e.next=40;break;case 37:e.prev=37,e.t0=e.catch(30),n.log("Error executing rules",e.t0);case 40:e.next=28;break;case 42:e.next=47;break;case 44:e.prev=44,e.t1=e.catch(26),S.e(e.t1);case 47:return e.prev=47,S.f(),e.finish(47);case 50:for(n.info("Treatments applied"),(0,d.dZ)(),n.log("Applied treatments: ",k),(T=new _(k)).sendLogs(),setInterval((function(){T.updateLatestChanges(k)}),1e3),D=function(){var e=N[R],t=E[e],r=w.filter((function(e){return t.includes(e.id)}));switch(e){case"infinite_scroll":var o=new ResizeObserver((function(){var e,t=O(r);try{for(t.s();!(e=t.n()).done;){var o=e.value;n.log("Retrying treatment ".concat(o.id," from infinite_scroll")),m(o,k)}}catch(e){t.e(e)}finally{t.f()}}));o.observe(document.body);break;case"timeout":setTimeout((function(){var e,t=O(r);try{for(t.s();!(e=t.n()).done;){var o=e.value;n.log("Retrying treatment ".concat(o.id," from timeout")),m(o,k)}}catch(e){t.e(e)}finally{t.f()}}),500);break;case"element_change":var a,i=O(r);try{var c=function(){var e,t=a.value,r=O(Array.isArray(t.reapply_selector)?t.reapply_selector:[t.reapply_selector]);try{for(r.s();!(e=r.n()).done;){var o=e.value,i=document.querySelector(o);i&&new MutationObserver((function(){n.log("Retrying treatment ".concat(t.id," from element_change")),m(t,k)})).observe(i,s)}}catch(e){r.e(e)}finally{r.f()}};for(i.s();!(a=i.n()).done;)c()}catch(e){i.e(e)}finally{i.f()}break;default:n.log("Reapply event not found: ",e)}},R=0,N=Object.keys(E);R<N.length;R++)D();case 58:case"end":return e.stop()}}),e,null,[[26,44,47,50],[30,37]])}))(),"t0",15);case 15:if(y=r.t0,"object"!==(0,e.Z)(y)){r.next=18;break}return r.abrupt("return",y.v);case 18:r.next=25;break;case 20:r.prev=20,r.t1=r.catch(13),(0,d.dZ)(),console.warn("Nextday error: ",r.t1.message),_.sendEmptyLog("Error when applying treatments: ".concat(r.t1.message));case 25:case"end":return r.stop()}}),r,null,[[13,20]])})))()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFFBQVFsYyxTQUFTNkQsTUFFMUIsTUFDRixJQUFLLFVBQ0h6RCxZQUFXLFdBQU0sVUFDUzBjLEdBRFQsSUFDZiwyQkFBMkMsS0FBaEM1ZixFQUFnQyxRQUN6Q0wsRUFBT00sSUFBUCw2QkFBaUNELEVBQVVtRixHQUEzQyxrQkFDQWtaLEVBQWdCcmUsRUFBV21aLElBSGQsaUNBS2QsS0FFSCxNQUNGLElBQUssaUJBQWtCLFVBQ0d5RyxHQURILDJCQUNWNWYsRUFEVSxZQUVTMkIsTUFBTUMsUUFBUTVCLEVBQVU4ZixrQkFDcEQ5ZixFQUFVOGYsaUJBQW1CLENBQUM5ZixFQUFVOGYsbUJBSHJCLElBSW5CLDJCQUE0QyxLQUFqQ3RmLEVBQWlDLFFBQ3BDTyxFQUFVK0IsU0FBU00sY0FBYzVDLEdBQ25DTyxHQUNlLElBQUkrZCxrQkFBaUIsV0FDcENuZixFQUFPTSxJQUFQLDZCQUFpQ0QsRUFBVW1GLEdBQTNDLHlCQUNBa1osRUFBZ0JyZSxFQUFXbVosTUFFcEI2RixRQUFRamUsRUFBUytjLElBWFgsZ0NBQ3JCLDJCQUEyQyxJQUR0Qiw4QkFnQnJCLE1BQ0YsUUFDRW5lLEVBQU9NLElBQUksNEJBQTZCNEgsS0F6QzlDLE1BQWtCRyxPQUFPQyxLQUFLb1gsR0FBOUIsZUFBcUQsSUE5SnhELHNPQTRNRzlWLEVBQUFBLEVBQUFBLE1BQ0FMLFFBQVE2VyxLQUFLLGtCQUFtQixLQUFJakcsU0FDcENaLEVBQUFBLGFBQUEsMENBQXdELEtBQUlZLFVBOU0vRCwwREFBRCxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlBcHBseVRyZWF0bWVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9OZXh0ZGF5UnVsZUVuZ2luZS9kYXRhTGF5ZXJDaGVja2VyLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvbG9nZ2VyLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlUmVzdC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9OZXh0ZGF5TW9uaXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlUcmVhdG1lbnRSZXBvc2l0b3J5L2luZGV4LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvTmV4dGRheVJ1bGVFbmdpbmUvY291bnRlckNoZWNrZXIuanMiLCJ3ZWJwYWNrOi8vY2xpZW50LXNpZGUtaW50ZWdyYXRpb24tc2NyaXB0cy8uL3NyYy9OZXh0ZGF5UnVsZUVuZ2luZS9lbGVtZW50Q2hlY2tlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlSdWxlRW5naW5lL2Z1bmN0aW9uQ2hlY2tlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlSdWxlRW5naW5lL3Nlc3Npb25DaGVja2VyLmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvTmV4dGRheVJ1bGVFbmdpbmUvdXJsQ2hlY2tlci5qcyIsIndlYnBhY2s6Ly9jbGllbnQtc2lkZS1pbnRlZ3JhdGlvbi1zY3JpcHRzLy4vc3JjL05leHRkYXlSdWxlRW5naW5lL2luZGV4LmpzIiwid2VicGFjazovL2NsaWVudC1zaWRlLWludGVncmF0aW9uLXNjcmlwdHMvLi9zcmMvTmV4dGRheUNsaWVudFNESy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIiwiaW1wb3J0IHtleGl0U2Nyb2xsTGlzdGVuZXIsIHN0eWxlQXBwbGljYXRvciwgZGVsYXl9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHtNT0JJTEVfTUVESUFfUVVFUlksIFNFU1NJT05fU1RPUkFHRV9LRVlTfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBkYXRhTGF5ZXJGaW5kZXIgfSBmcm9tIFwiLi4vTmV4dGRheVJ1bGVFbmdpbmUvZGF0YUxheWVyQ2hlY2tlclwiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIGFwcGx5VHJlYXRtZW50cyh0cmVhdG1lbnRzLCBvYnNlcnZlciA9IGZhbHNlKSB7XG4gIC8vIEdBIHNjcmlwdCBpbmplY3Rpb24gb24gaG9sZCBmb3IgdGltZSBiZWluZ1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAvLyBjb25zdCBnYVNjcmlwdCA9IFwiPHNjcmlwdD53aW5kb3cuZGF0YUxheWVyPXdpbmRvdy5kYXRhTGF5ZXJ8fFtdO2RhdGFMYXllci5wdXNoKHtldmVudDonR0xPVicsR0xPVl9PTjondHJ1ZScsdHJlYXRtZW50X2lkczonTkEnfSk7PC9zY3JpcHQ+XCI7XG5cbiAgLy8gY29uc3QgaW5qZWN0R2FTY3JpcHQgPSAodHJlYXRtZW50TGlzdCkgPT4ge1xuICAvLyAgIGNvbnN0IHRyZWF0bWVudElkcyA9IHRyZWF0bWVudExpc3QucmVkdWNlKChpZHMsIHRyZWF0bWVudCkgPT4ge1xuICAvLyAgICAgaWYgKHRyZWF0bWVudC5pZCAhPT0gLTEpIGlkcy5wdXNoKHRyZWF0bWVudC5pZC50b1N0cmluZygpKTtcbiAgLy8gICAgIHJldHVybiBpZHM7XG4gIC8vICAgfSwgW10pO1xuICAvLyAgIGlmICh0cmVhdG1lbnRJZHMubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgLy8gICAkKFwiaGVhZFwiKS5hcHBlbmQoZ2FTY3JpcHQucmVwbGFjZShcIk5BXCIsIHRyZWF0bWVudElkcykpO1xuICAvLyB9O1xuXG4gIGNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IEFwcGx5IFRyZWF0bWVudHNcIik7XG4gIGNvbnN0IHtQT1BVUF9ESVNQTEFZX0ZMQUd9ID0gU0VTU0lPTl9TVE9SQUdFX0tFWVM7XG5cbiAgY29uc3QgdHJhbnNmb3JtZXIgPSBmdW5jdGlvbiB0cmFuc2Zvcm1lcih0cmVhdG1lbnQpIHtcbiAgICBsb2dnZXIubG9nKFwiQXBwbHlpbmcgdHJlYXRtZW50OiBcIiwgSlNPTi5zdHJpbmdpZnkodHJlYXRtZW50KSk7XG4gICAgY29uc3Qge1xuICAgICAgb3BlcmF0b3IsXG4gICAgICB0eXBlLFxuICAgICAgYXBwbHlFdmVudCxcbiAgICAgIGNvbnRlbnRTZWxlY3RvcixcbiAgICAgIHNlbGVjdG9yLFxuICAgICAgc2VsZWN0b3JGYWxsYmFjayxcbiAgICAgIG1kQ29uZGl0aW9uLFxuICAgICAgbW92ZV9zZWxlY3Rvcl8xLFxuICAgICAgbW92ZV9zZWxlY3Rvcl8yLFxuICAgICAgcmVwbGFjZUZuLFxuICAgIH0gPSB0cmVhdG1lbnQ7XG4gICAgbGV0IHt2YWx1ZX0gPSB0cmVhdG1lbnQ7XG4gICAgbGV0IGVsZW1lbnQgPSAkKHNlbGVjdG9yKTtcblxuICAgIGNvbnN0IG1jID0gbWRDb25kaXRpb24gPyB3aW5kb3cubWF0Y2hNZWRpYShtZENvbmRpdGlvbikubWF0Y2hlcyA6IHRydWU7XG4gICAgaWYgKCFtYykge1xuICAgICAgbG9nZ2VyLmxvZyhcIk1lZGlhIGNvbmRpdGlvbiBtaXNtYXRjaDogXCIsIG1kQ29uZGl0aW9uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKChtb3ZlX3NlbGVjdG9yXzEgJiYgIW1vdmVfc2VsZWN0b3JfMikgfHwgKG1vdmVfc2VsZWN0b3JfMiAmJiAhbW92ZV9zZWxlY3Rvcl8xKSkge1xuICAgICAgbG9nZ2VyLmxvZyhcIkJvdGggbW92ZSBzZWxlY3RvcnMgYXJlIHJlcXVpcmVkXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobW92ZV9zZWxlY3Rvcl8xICYmIG1vdmVfc2VsZWN0b3JfMikge1xuICAgICAgaWYgKCEkKG1vdmVfc2VsZWN0b3JfMSkubGVuZ3RoKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJNb3ZlIHNlbGVjdG9yIDEgbm90IGZvdW5kOiBcIiwgbW92ZV9zZWxlY3Rvcl8xKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCEkKG1vdmVfc2VsZWN0b3JfMikubGVuZ3RoKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJNb3ZlIHNlbGVjdG9yIDIgbm90IGZvdW5kOiBcIiwgbW92ZV9zZWxlY3Rvcl8yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBsb2dnZXIubG9nKFwiU2VsZWN0b3Igbm90IHNwZWNpZmllZFwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFlbGVtZW50Lmxlbmd0aCkge1xuICAgICAgICBpZiAoc2VsZWN0b3IgIT09IFwibm8tc2VsZWN0b3JcIikge1xuICAgICAgICAgIGxvZ2dlci5sb2coXCJTZWxlY3RvciBub3QgZm91bmQ6IFwiLCBzZWxlY3Rvcik7XG4gICAgICAgICAgbG9nZ2VyLmxvZyhcIlRyeWluZyBmYWxsYmFjayBzZWxlY3RvcjogXCIsIHNlbGVjdG9yRmFsbGJhY2spO1xuICAgICAgICAgIGlmIChzZWxlY3RvckZhbGxiYWNrKSBlbGVtZW50ID0gJChzZWxlY3RvckZhbGxiYWNrKTtcbiAgICAgICAgICBpZiAoIWVsZW1lbnQubGVuZ3RoKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKFwiRmFsbGJhY2sgc2VsZWN0b3Igbm90IGZvdW5kXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJlcGxhY2VGbkV4ZWN1dG9yID0gKHJlcGxhY2VGbiwgdmFsdWUpID0+IHtcbiAgICAgIGlmIChyZXBsYWNlRm4gJiYgdmFsdWUuaW5jbHVkZXMoXCJ7e1JFUExBQ0V9fVwiKSkge1xuICAgICAgICBsb2dnZXIubG9nKFwiRXhlY3V0aW5nIHJlcGxhY2UgZnVuY3Rpb246IFwiLCByZXBsYWNlRm4pO1xuICAgICAgICBjb25zdCByZXBsYWNlRnVuY3Rpb24gPSBldmFsKHJlcGxhY2VGbik7XG4gICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShcInt7UkVQTEFDRX19XCIsIHJlcGxhY2VGdW5jdGlvbigpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICB2YWx1ZS5mb3JFYWNoKCh2YWwsIGkpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFJlcGxhY2VGbiA9IHJlcGxhY2VGbiA/IHJlcGxhY2VGbltpXSB8fCByZXBsYWNlRm4gOiBcIlwiO1xuICAgICAgICB2YWx1ZVtpXSA9IHJlcGxhY2VGbkV4ZWN1dG9yKGN1cnJlbnRSZXBsYWNlRm4sIHZhbCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgPSByZXBsYWNlRm5FeGVjdXRvcihyZXBsYWNlRm4sIHZhbHVlKTtcbiAgICB9XG5cblxuICAgIGlmIChvcGVyYXRvciA9PT0gXCJyZW1vdmVcIikge1xuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhcIlJlbW92aW5nOiBcIiwgc2VsZWN0b3IpO1xuICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmxvZyhcIkNhbm5vdCBmb3VuZCBlbGVtZW50IHdpdGggc2VsZWN0b3I6IFwiLCBzZWxlY3Rvcik7XG4gICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gXCJpbnNlcnRcIikge1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJiZWZvcmVcIjpcbiAgICAgICAgICBsb2dnZXIubG9nKFwiSW5zZXJ0aW5nIGJlZm9yZTogXCIsIHZhbHVlKTtcbiAgICAgICAgICBpZiAoU3RyaW5nKHZhbHVlKS5pbmNsdWRlcyhcIm5kLWFkZC10by13aW5cIikpIHtcbiAgICAgICAgICAgICQoXCIubmQtYWRkLXRvLXdpblwiKS5yZW1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxlbWVudC5iZWZvcmUodmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiYWZ0ZXJcIjpcbiAgICAgICAgICBsb2dnZXIubG9nKFwiSW5zZXJ0aW5nIGFmdGVyOiBcIiwgdmFsdWUpO1xuICAgICAgICAgIGVsZW1lbnQuYWZ0ZXIodmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicG9wdXBcIjoge1xuICAgICAgICAgIGlmIChwYXJzZUludChzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBPUFVQX0RJU1BMQVlfRkxBRykpICE9PSAwKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKFwiUG9wdXAgYWxyZWFkeSBkaXNwbGF5ZWQgaW4gc2Vzc2lvblwiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsb2dnZXIubG9nKFwiQ3JlYXRpbmcgUG9wdXA6IFwiLCB2YWx1ZSk7XG4gICAgICAgICAgY3JlYXRlUG9wdXAodmFsdWUsIGNvbnRlbnRTZWxlY3Rvcik7XG5cbiAgICAgICAgICBpZiAoYXBwbHlFdmVudCkge1xuICAgICAgICAgICAgY29uc3QgbW9iaWxlID0gd2luZG93Lm1hdGNoTWVkaWEoTU9CSUxFX01FRElBX1FVRVJZKS5tYXRjaGVzO1xuICAgICAgICAgICAgZm9yIChjb25zdCBldmVudCBvZiBhcHBseUV2ZW50KSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXhpdEludGVudFwiOlxuICAgICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIkFkZGluZyBleGl0IGludGVudCBsaXN0ZW5lclwiKTtcbiAgICAgICAgICAgICAgICAgIGlmIChtb2JpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhpdFNjcm9sbExpc3RlbmVyKGRpc3BsYXlQb3B1cCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgZGlzcGxheVBvcHVwLFxuICAgICAgICAgICAgICAgICAgICAgICAge29uY2U6IHRydWV9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJjb3B5SW50ZW50XCI6XG4gICAgICAgICAgICAgICAgICBsb2dnZXIubG9nKFwiQWRkaW5nIGNvcHkgaW50ZW50IGxpc3RlbmVyXCIpO1xuICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjb3B5XCIsIGRpc3BsYXlQb3B1cCxcbiAgICAgICAgICAgICAgICAgICAgICB7b25jZTogdHJ1ZX0pO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYXBwZW5kIHBvcHVwIHRvIGJvZHkgYWZ0ZXIgdGltZW91dCBleHBpcmVzXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgZGlzcGxheVBvcHVwKCk7XG4gICAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcImVkaXRcIikge1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJ0ZXh0XCI6XG4gICAgICAgICAgbG9nZ2VyLmxvZyhcIkVkaXRpbmcgdGV4dDogXCIsIHZhbHVlKTtcbiAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKS50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic3R5bGVBcHBsaWNhdG9yXCI6IHtcbiAgICAgICAgICBsb2dnZXIubG9nKFwiQXBwbHlpbmcgc3R5bGU6IFwiLCB2YWx1ZSk7XG4gICAgICAgICAgY29uc3QgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgICAgICBjb25zdCBzdHlsZUNoYW5nZXNNYXAgPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgICBsb2dnZXIubG9nKFwiU3R5bGUgQ2hhbmdlcyBNYXA6IFwiLCBzdHlsZUNoYW5nZXNNYXApO1xuICAgICAgICAgIHN0eWxlQXBwbGljYXRvcihlbGVtZW50cywgc3R5bGVDaGFuZ2VzTWFwKTtcbiAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiYWRkQ2xhc3NcIjpcbiAgICAgICAgICBsb2dnZXIubG9nKGBhZGRkaW5nIGNsYXNzIHRvICR7ZWxlbWVudH0gbmFtZWQgJHt2YWx1ZX1gKTtcbiAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInJlbW92ZUNsYXNzXCI6XG4gICAgICAgICAgbG9nZ2VyLmxvZyhgcmVtb3ZlIGNsYXNzIGZyb20gJHtlbGVtZW50fSBuYW1lZCAke3ZhbHVlfWApO1xuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3ModmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZG9jdW1lbnRUaXRsZVwiOlxuICAgICAgICAgIGxvZ2dlci5sb2coYGNoYW5naW5nIGRvY3VtZW50IHRpdGxlIGZyb20gJHtlbGVtZW50fSB0byAke3ZhbHVlfWApO1xuICAgICAgICAgIGlmIChhcHBseUV2ZW50KSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGFwcGx5RXZlbnQpIHtcbiAgICAgICAgICAgICAgaWYgKGV2ZW50ID09IFwidGFiQ2hhbmdlXCIpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIubG9nKFwiY2F0Y2hpbmcgZXZlbnQgdGFiY2hhbmdlLi5cIik7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgKGUpID0+IGhhbmRsZVRhYkNoYW5nZShlLCB2YWx1ZSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgPT09IFwic2V0YXR0cmlidXRlXCIpIHtcbiAgICAgIGxvZ2dlci5sb2coXCJTZXR0aW5nIGF0dHJpYnV0ZTogXCIsIGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgICAgc3dpdGNoIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgY2FzZSBcInNyY1wiOlxuICAgICAgICAgIGVsZW1lbnQuY3NzKFwiY29udGVudFwiLCBgdXJsKCR7dmFsdWUudHJpbSgpfSlgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNhc2UtZGVjbGFyYXRpb25zXG4gICAgICAgICAgY29uc3QgcHJvcGVydHkgPSB2YWx1ZS5zcGxpdChcIjpcIilbMF0udHJpbSgpO1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jYXNlLWRlY2xhcmF0aW9uc1xuICAgICAgICAgIGNvbnN0IHByb3BlcnR5VmFsdWUgPSB2YWx1ZS5zcGxpdChcIjpcIilbMV0udHJpbSgpO1xuXG4gICAgICAgICAgZWxlbWVudC5jc3MocHJvcGVydHksIHByb3BlcnR5VmFsdWUsIFwiIWltcG9ydGFudFwiKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcInJlcGxhY2VcIikge1xuICAgICAgbG9nZ2VyLmxvZyhcIlJlcGxhY2luZzogXCIsIHZhbHVlKTtcbiAgICAgIGVsZW1lbnQucmVwbGFjZUFsbCh2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gXCJzd2FwXCIpIHtcbiAgICAgIGxvZ2dlci5sb2coXCJTd2FwcGluZzogXCIsIG1vdmVfc2VsZWN0b3JfMSwgbW92ZV9zZWxlY3Rvcl8yKTtcbiAgICAgIGNvbnN0IG4xID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihtb3ZlX3NlbGVjdG9yXzEpO1xuICAgICAgY29uc3QgbjIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG1vdmVfc2VsZWN0b3JfMik7XG4gICAgICBzd2FwTm9kZXMobjEsIG4yKTtcbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcImluamVjdHNjcmlwdFwiKSB7XG4gICAgICBsb2dnZXIubG9nKFwiSW5qZWN0aW5nIHNjcmlwdDogXCIsIHZhbHVlKTtcbiAgICAgIGVsZW1lbnQuYXBwZW5kKGA8c2NyaXB0PiR7dmFsdWV9PC9zY3JpcHQ+YCk7XG4gICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gXCJtb3ZlXCIpIHtcbiAgICAgIGxvZ2dlci5sb2coYE1vdmluZyAke21vdmVfc2VsZWN0b3JfMX0gdG8gJHttb3ZlX3NlbGVjdG9yXzJ9YCk7XG4gICAgICBjb25zdCBzb3VyY2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG1vdmVfc2VsZWN0b3JfMSk7XG4gICAgICBjb25zdCBkZXN0aW5hdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobW92ZV9zZWxlY3Rvcl8yKTtcbiAgICAgIHNvdXJjZS5yZW1vdmUoKTtcbiAgICAgIGRlc3RpbmF0aW9uLnByZXBlbmQoc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcIm5vb3BcIikge1xuICAgICAgbG9nZ2VyLmxvZyhcIk5vb3AgT3BlcmF0b3I6IE5vIG9wZXJhdGlvbiBpcyBhcHBsaWVkIG9uIHRhcmdldCBcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2dlci5sb2coXCJObyBzdWNoIG9wZXJhdG9yIGV4aXN0cyB5ZXRcIiwgb3BlcmF0b3IpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVUYWJDaGFuZ2UgPSBhc3luYyAoZXZlbnQsIHRpdGxlcykgPT4ge1xuICAgIGNvbnN0IG9yaWdpbmFsVGl0bGUgPSBkb2N1bWVudC50aXRsZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRpdGxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGRvY3VtZW50LmhpZGRlbikge1xuICAgICAgICBkb2N1bWVudC50aXRsZSA9IHRpdGxlc1tpXTtcbiAgICAgICAgYXdhaXQgZGVsYXkoNTAwMCk7XG4gICAgICAgIGRvY3VtZW50LnRpdGxlID0gb3JpZ2luYWxUaXRsZTtcbiAgICAgICAgYXdhaXQgZGVsYXkoNTAwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2N1bWVudC50aXRsZSA9IG9yaWdpbmFsVGl0bGU7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVBvcHVwQ2xpY2sgPSAoZXZlbnQpID0+IHtcbiAgICBjb25zdCBpZCA9IGV2ZW50LnRhcmdldC5pZDtcbiAgICBpZiAoaWQgJiYgaWQgPT09IFwibmQtcG9wdXBfX3dyYXBwZXJcIikge1xuICAgICAgJChcIiNuZC1wb3B1cF9fd3JhcHBlclwiKS5yZW1vdmUoKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlUG9wdXBDbGljaywgdHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGRpc3BsYXlQb3B1cCA9ICgpID0+IHtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBPUFVQX0RJU1BMQVlfRkxBRywgMSk7XG4gICAgY29uc3QgcVBvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNncnQtc2hhZG93LWhvc3RcIik7XG4gICAgaWYgKHFQb3B1cCkgcVBvcHVwLnN0eWxlW1wiZGlzcGxheVwiXSA9IFwibm9uZVwiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmQtcG9wdXBfX3dyYXBwZXJcIikuc3R5bGVbXCJkaXNwbGF5XCJdID0gXCJibG9ja1wiO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlUG9wdXBDbGljaywgdHJ1ZSk7XG5cbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgZGlzcGxheVBvcHVwLCB7b25jZTogdHJ1ZX0pO1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY29weVwiLCBkaXNwbGF5UG9wdXAsIHtvbmNlOiB0cnVlfSk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICQoXCIjbmQtcG9wdXBfX3dyYXBwZXJcIikucmVtb3ZlKCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZVBvcHVwQ2xpY2ssIHRydWUpO1xuICAgIH0sIDE1MDAwKTtcbiAgfTtcblxuICBjb25zdCBjcmVhdGVQb3B1cCA9ICh2YWx1ZSwgY29udGVudFNlbGVjdG9yKSA9PiB7XG4gICAgLy8gQ3JlYXRlIHBvcHVwIHdyYXBwZXJcbiAgICBjb25zdCBwb3B1cFdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgcG9wdXBXcmFwcGVyLmNsYXNzTGlzdC5hZGQoXCJuZC1wb3B1cF9fd3JhcHBlclwiKTtcbiAgICBwb3B1cFdyYXBwZXIuaWQgPSBcIm5kLXBvcHVwX193cmFwcGVyXCI7XG5cbiAgICAvLyBDcmVhdGUgcG9wdXAgY2xvc2UgYnV0dG9uXG4gICAgY29uc3QgcG9wdXBDbG9zZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgcG9wdXBDbG9zZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwibmQtcG9wdXBfX2J1dHRvbi1jbG9zZVwiKTtcbiAgICBwb3B1cENsb3NlQnV0dG9uLmlubmVyVGV4dCA9IFwiWFwiO1xuICAgIHBvcHVwQ2xvc2VCdXR0b24ub25jbGljayA9ICgpID0+IHtcbiAgICAgICQoXCIjbmQtcG9wdXBfX3dyYXBwZXJcIikucmVtb3ZlKCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZVBvcHVwQ2xpY2ssIHRydWUpO1xuICAgIH07XG5cbiAgICBpZiAoY29udGVudFNlbGVjdG9yKSB7XG4gICAgICBjb25zdCBjb250ZW50cyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChjb250ZW50U2VsZWN0b3IpKTtcbiAgICAgIHdoaWxlICh2YWx1ZS5pbmNsdWRlcyhcInt7UkVQTEFDRX19XCIpICYmIGNvbnRlbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKFwie3tSRVBMQUNFfX1cIiwgY29udGVudHMuc2hpZnQoKS5zcmMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENyZWF0ZSBwb3B1cCBmcm9tIHRyZWF0bWVudCBhbmQgYXBwZW5kIGNsb3NlIGJ1dHRvblxuICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO1xuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IHZhbHVlLnRyaW0oKTtcbiAgICBjb25zdCBwb3B1cCA9IHRlbXBsYXRlLmNvbnRlbnQuZmlyc3RDaGlsZDtcbiAgICBwb3B1cC5hcHBlbmRDaGlsZChwb3B1cENsb3NlQnV0dG9uKTtcbiAgICBwb3B1cFdyYXBwZXIuYXBwZW5kQ2hpbGQocG9wdXApO1xuXG4gICAgLy8gUmVtb3ZlIG9sZCBwb3B1cCBpZiBleGlzdHMgYmVmb3JlIGFwcGVuZGluZyBuZXcgb25lXG4gICAgJChcIiNuZC1wb3B1cF9fd3JhcHBlclwiKS5yZW1vdmUoKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHBvcHVwV3JhcHBlcik7XG4gIH07XG5cbiAgY29uc3Qgc3dhcE5vZGVzID0gZnVuY3Rpb24gc3dhcE5vZGVzKG4xLCBuMikge1xuICAgIGNvbnN0IHAxID0gbjEucGFyZW50Tm9kZTtcbiAgICBjb25zdCBwMiA9IG4yLnBhcmVudE5vZGU7XG4gICAgbGV0IGkxO1xuICAgIGxldCBpMjtcblxuICAgIGlmICghcDEgfHwgIXAyIHx8IHAxLmlzRXF1YWxOb2RlKG4yKSB8fCBwMi5pc0VxdWFsTm9kZShuMSkpIHJldHVybjtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcDEuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwMS5jaGlsZHJlbltpXS5pc0VxdWFsTm9kZShuMSkpIHtcbiAgICAgICAgaTEgPSBpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHAyLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocDIuY2hpbGRyZW5baV0uaXNFcXVhbE5vZGUobjIpKSB7XG4gICAgICAgIGkyID0gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocDEuaXNFcXVhbE5vZGUocDIpICYmIGkxIDwgaTIpIHtcbiAgICAgIGkyKys7XG4gICAgfVxuICAgIHAxLmluc2VydEJlZm9yZShuMiwgcDEuY2hpbGRyZW5baTFdKTtcbiAgICBwMi5pbnNlcnRCZWZvcmUobjEsIHAyLmNoaWxkcmVuW2kyXSk7XG4gIH07XG5cbiAgY29uc3QgdHJlYXRtZW50QXBwbGljYXRvciA9ICh0cmVhdG1lbnRMaXN0KSA9PiB7XG4gICAgaWYgKCF3aW5kb3cualF1ZXJ5KSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICB0cmVhdG1lbnRBcHBsaWNhdG9yKHRyZWF0bWVudExpc3QpO1xuICAgICAgfSwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGNvbnN0IHRyZWF0bWVudCBvZiB0cmVhdG1lbnRMaXN0KSB7XG4gICAgICAgICAgdHJhbnNmb3JtZXIodHJlYXRtZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gQXBwbHkgdHJlYXRtZW50c1xuICB0cmVhdG1lbnRBcHBsaWNhdG9yKHRyZWF0bWVudHMpO1xuICBpZiAoIW9ic2VydmVyKSB7XG4gICAgLy8gaW5qZWN0R2FTY3JpcHQodHJlYXRtZW50cyk7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGFwcGx5VHJlYXRtZW50cztcbiIsImltcG9ydCB7Y29uZGl0aW9uQ2hlY2tlcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IERhdGFMYXllciBDaGVja2VyXCIpO1xuXG5leHBvcnQgY29uc3QgY2hlY2tEYXRhTGF5ZXJSdWxlID0gKHJ1bGUpID0+e1xuICBsb2dnZXIubG9nKFwiQ2hlY2tpbmcgcnVsZVwiLCBKU09OLnN0cmluZ2lmeShydWxlKSk7XG4gIGNvbnN0IHtvcGVyYXRvciwgY29uZGl0aW9uLCB2YWx1ZX0gPSBydWxlO1xuICBjb25zdCBydW50aW1lVmFsdWUgPSBkYXRhTGF5ZXJGaW5kZXIob3BlcmF0b3IpO1xuICByZXR1cm4gY29uZGl0aW9uQ2hlY2tlcihydW50aW1lVmFsdWUsIGNvbmRpdGlvbiwgdmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGRhdGFMYXllckZpbmRlciA9IChrZXkpID0+IHtcbiAgbG9nZ2VyLmxvZyhcIlNlYXJjaGluZyBkYXRhTGF5ZXIgZm9yIGtleVwiLCBrZXkpO1xuICBmb3IgKGNvbnN0IG9iaiBvZiB3aW5kb3cuZGF0YUxheWVyKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgaWYgKGtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgbG9nZ2VyLmxvZyhgRm91bmQga2V5ICR7a2V5fSB3aXRoIHZhbHVlICR7b2JqW2tleV19YCk7XG4gICAgICByZXR1cm4gb2JqW2tleV07XG4gICAgfVxuICB9XG4gIGxvZ2dlci5sb2coYEtleSAke2tleX0gbm90IGZvdW5kIGluIGRhdGFMYXllcmApO1xuICByZXR1cm4gbnVsbDtcbn07XG4iLCJleHBvcnQgY29uc3QgQ09PS0lFX05BTUUgPSBcIl9nYVwiO1xuZXhwb3J0IGNvbnN0IFRSRUFUTUVOVFNfTE9DQVRJT04gPSBcImh0dHBzOi8vaG9zdC1iOTYucGFnZXMuZGV2L3RyZWF0bWVudHMuanNvblwiO1xuZXhwb3J0IGNvbnN0IFNUWUxFU0hFRVRfTE9DQVRJT04gPSBcImh0dHBzOi8vaG9zdC1iOTYucGFnZXMuZGV2L25kLXN0eWxlcy5jc3NcIjtcbmV4cG9ydCBjb25zdCBMT0dfQVBJX1VSTCA9IFwiaHR0cHM6Ly9ldXJvcGUtd2VzdDMtbmV4dGRheS0zNGViMy5jbG91ZGZ1bmN0aW9ucy5uZXQvYXBpL2xvZ1Jlc3BvbnNlXCI7XG5leHBvcnQgY29uc3QgTU9CSUxFX01FRElBX1FVRVJZID0gXCIobWF4LXdpZHRoOiA0NDBweClcIjtcbmV4cG9ydCBjb25zdCBTUExJVF9SQVRJTyA9IDE7XG5leHBvcnQgY29uc3QgVFJFQVRNRU5UU19EVVJBVElPTiA9IDE7XG5cbmV4cG9ydCBjb25zdCBTRVNTSU9OX1NUT1JBR0VfS0VZUyA9IHtcbiAgU0VTU0lPTl9JRDogXCJfX25leHRkYXlfc2Vzc2lvbl9pZFwiLFxuICBQQUdFX1ZJRVdTOiBcIk5EX1BhZ2VWaWV3c1wiLFxuICBTRVNTSU9OX1RJTUVTVEFNUDogXCJORF9TZXNzaW9uVGltZXN0YW1wXCIsXG4gIFBPUFVQX0RJU1BMQVlfRkxBRzogXCJORF9Qb3B1cERpc3BsYXlGbGFnXCIsXG59O1xuZXhwb3J0IGNvbnN0IExPQ0FMX1NUT1JBR0VfS0VZUyA9IHtcbiAgVFJFQVRNRU5UUzogXCJORF9UcmVhdG1lbnRzXCIsXG4gIENPVVBPTl9BUFBMSUNBQkxFX0JBU0tFVF9QUklDRTogXCJORF9DQUJhc2tldFByaWNlXCIsXG59O1xuIiwiY2xhc3MgTG9nZ2VyIHtcbiAgY29uc3RydWN0b3Iob3JpZ2luID0gXCJOZXh0ZGF5IENsaWVudCBTREtcIiwgREVCVUcgPSB0cnVlKSB7XG4gICAgdGhpcy5vcmlnaW4gPSBvcmlnaW47XG4gICAgdGhpcy5ERUJVRyA9IERFQlVHO1xuICB9XG5cbiAgaW5mbyguLi5hcmdzKSB7XG4gICAgY29uc3Qge29yaWdpbn0gPSB0aGlzO1xuICAgIGNvbnNvbGUuaW5mbyhgWyR7b3JpZ2lufV1gLCAuLi5hcmdzKTtcbiAgfVxuXG4gIGxvZyguLi5hcmdzKSB7XG4gICAgY29uc3Qge0RFQlVHLCBvcmlnaW59ID0gdGhpcztcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBbJHtvcmlnaW59XWAsIC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIGVycm9yKC4uLmFyZ3MpIHtcbiAgICBjb25zdCB7b3JpZ2lufSA9IHRoaXM7XG4gICAgY29uc29sZS5lcnJvcihgWyR7b3JpZ2lufV1gLCAuLi5hcmdzKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMb2dnZXI7XG4iLCJpbXBvcnQge1NFU1NJT05fU1RPUkFHRV9LRVlTLCBTVFlMRVNIRUVUX0xPQ0FUSU9OLCBUUkVBVE1FTlRTX0xPQ0FUSU9OfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4vbG9nZ2VyXCI7XG5cbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IFV0aWxzXCIpO1xuXG5pZiAoIShcInJhbmRvbVVVSURcIiBpbiBjcnlwdG8pKSB7XG4gIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMTE3NTIzLzI4MDAyMThcbiAgLy8gTElDRU5TRTogaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LXNhLzQuMC9sZWdhbGNvZGVcbiAge1xuICAgIHJhbmRvbVVVSURGYWxsYmFjaygpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCByZW1vdmVEb2N1bWVudEhpZGUgPSAoKSA9PiB7XG4gIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibmV4dERheS1oaWRlXCIpO1xufTtcblxuZXhwb3J0IGNvbnN0IGZldGNoVHJlYXRtZW50cyA9IGFzeW5jICgpID0+IHtcbiAgbG9nZ2VyLmxvZyhcIkZldGNoaW5nIHRyZWF0bWVudHNcIik7XG4gIGNvbnN0IHRyZWF0bWVudHMgPSBhd2FpdCBmZXRjaChUUkVBVE1FTlRTX0xPQ0FUSU9OKTtcbiAgcmV0dXJuIGF3YWl0IHRyZWF0bWVudHMuanNvbigpO1xufTtcblxuZXhwb3J0IGNvbnN0IGV4dHJhY3RDb29raWVJZGVudGlmaWVyID0gKGNvb2tpZVN0cmluZywgY29va2llTmFtZSkgPT4ge1xuICBpZiAoIWNvb2tpZVN0cmluZykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgcGFyc2VkID0gY29va2llU3RyaW5nXG4gICAgICAuc3BsaXQoXCI7XCIpXG4gICAgICAubWFwKCh2KSA9PiB2LnNwbGl0KFwiPVwiKSlcbiAgICAgIC5yZWR1Y2UoKGFjYywgdikgPT4ge1xuICAgICAgICBpZiAodlswXSAmJiB2WzFdKSB7XG4gICAgICAgICAgYWNjW2RlY29kZVVSSUNvbXBvbmVudCh2WzBdLnRyaW0oKSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHZbMV0udHJpbSgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30pO1xuXG4gIGxldCBpZGVudGlmaWVyID0gcGFyc2VkW2Nvb2tpZU5hbWVdO1xuICBpZiAoIWlkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoY29va2llTmFtZSA9PT0gXCJfZ2FcIikge1xuICAgIC8vIGV4dHJhY3QgdW5pcXVlIGlkZW50aWZpZXIgZnJvbSBHQSBjb29raWVcbiAgICBjb25zdCBpZGVudGlmaWVySW5kZXggPSAyO1xuICAgIGlkZW50aWZpZXIgPSBpZGVudGlmaWVyLnNwbGl0KFwiLlwiKVtpZGVudGlmaWVySW5kZXhdO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVyO1xufTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlQ29va2llID0gYXN5bmMgKGlkZW50aWZpZXIpID0+IHtcbiAgaWYgKCFpZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIC8vIGVuY29kZSBzdHJpbmcgdG8gYW4gYXJyYXkgb2YgOC1iaXQgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXNcbiAgY29uc3QgY29va2llRW5jb2RlZCA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShpZGVudGlmaWVyKTtcblxuICAvLyBoYXNoIHRoZSBlbmNvZGVkIGNvb2tpZSBpbnRvIGEgYnVmZmVyXG4gIGNvbnN0IGhhc2hCdWZmZXIgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdChcIlNIQS0xXCIsIGNvb2tpZUVuY29kZWQpO1xuXG4gIC8vIGNvbnZlcnQgYnVmZmVyIHRvIGJ5dGUgYXJyYXlcbiAgY29uc3QgaGFzaEFycmF5ID0gQXJyYXkuZnJvbShuZXcgVWludDhBcnJheShoYXNoQnVmZmVyKSk7XG5cbiAgLy8gY29udmVydCBieXRlcyB0byBoZXggc3RyaW5nXG4gIGNvbnN0IGNvb2tpZUhhc2ggPSBoYXNoQXJyYXlcbiAgICAgIC5tYXAoKGIpID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSlcbiAgICAgIC5qb2luKFwiXCIpO1xuXG4gIC8vIE1hcCB0aGUgY29va2llIGhhc2ggdG8gYSBudW1iZXIgYmV0d2VlbiAwIC0+IDk5LFxuICAvLyB0aGlzIG51bWJlciBpcyB0aGUgb25SYXRpb25cbiAgY29uc3QgaGFzaE51bWJlciA9IHBhcnNlSW50KGNvb2tpZUhhc2gsIDE2KTtcblxuICByZXR1cm4gaGFzaE51bWJlciAlIDEwMDtcbn07XG5cbmV4cG9ydCBjb25zdCBleGl0U2Nyb2xsTGlzdGVuZXIgPSAoY2FsbEJhY2spID0+IHtcbiAgY29uc3QgbG9vcCA9ICgpID0+IHtcbiAgICBjb25zdCBzY3JvbGxUb3AgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgIGlmIChsYXN0U2Nyb2xsVG9wIC0gNDAwID4gc2Nyb2xsVG9wKSB7XG4gICAgICBjbGVhckludGVydmFsKGV4aXRTY3JvbGxJbnRlcnZhbCk7XG4gICAgICBjYWxsQmFjaygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0U2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfTtcblxuICBsZXQgbGFzdFNjcm9sbFRvcCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XG4gIGNvbnN0IGV4aXRTY3JvbGxJbnRlcnZhbCA9IHNldEludGVydmFsKGxvb3AsIDUwMCk7XG59O1xuXG5leHBvcnQgY29uc3QgYXZvaWRQcm90b3R5cGVQb2xsdXRpb24gPSAoKSA9PiB7XG4gIFtcbiAgICBPYmplY3QsXG4gICAgT2JqZWN0LnByb3RvdHlwZSxcbiAgICBGdW5jdGlvbixcbiAgICBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgQXJyYXksXG4gICAgQXJyYXkucHJvdG90eXBlLFxuICAgIFN0cmluZyxcbiAgICBTdHJpbmcucHJvdG90eXBlLFxuICAgIE51bWJlcixcbiAgICBOdW1iZXIucHJvdG90eXBlLFxuICAgIEJvb2xlYW4sXG4gICAgQm9vbGVhbi5wcm90b3R5cGUsXG4gIF0uZm9yRWFjaChPYmplY3QuZnJlZXplKTtcbn07XG5cblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGFwcGx5IHRyZWF0bWVudHMgdG8gdGhlIHBhZ2Ugb24gc3BlY2lmaWMgbWVkaWEgdHlwZS5cbiAqIEBwYXJhbSB7TWVkaWFRdWVyeUxpc3R9IG1lZGlhUXVlcnlDb25kaXRpb24gd2luZG93Lm1hdGNoTWVkaWEoXCIobWF4LXdpZHRoOiA1MDBweClcIilcbiAqIEBwYXJhbSB7RE9NTm9kZUxpc3QgfSBlbGVtZW50cyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiZGl2LnByb2R1Y3RfaW5mb1wiKVxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlQ2hhbmdlc01hcCB7IFwibWFyZ2luLXRvcFwiIDogXCIxMHJlbVwifVxuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGNvbnN0IHN0eWxlQXBwbGljYXRvciA9IChlbGVtZW50cywgc3R5bGVDaGFuZ2VzTWFwKSA9PiB7XG4gIGxvZ2dlci5sb2coXCJBcHBseWluZyBzdHlsZSBjaGFuZ2VzXCIsIHN0eWxlQ2hhbmdlc01hcCwgXCJ0byBlbGVtZW50c1wiLCBlbGVtZW50cyk7XG4gIGZvciAobGV0IGk9MDsgaTxlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzdHlsZUNoYW5nZXNNYXApKSB7XG4gICAgICBlbGVtZW50LnN0eWxlW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpbmplY3RTdHlsZVNoZWV0ID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCBzdHlsZVNoZWV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gIHN0eWxlU2hlZXQucmVsID0gXCJzdHlsZXNoZWV0XCI7XG4gIHN0eWxlU2hlZXQudHlwZSA9IFwidGV4dC9jc3NcIjtcbiAgc3R5bGVTaGVldC5ocmVmID0gU1RZTEVTSEVFVF9MT0NBVElPTjtcbiAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZVNoZWV0KTtcbn07XG5cbmV4cG9ydCBjb25zdCBwcmVwYXJlQWN0aW9ucyA9IChhY3Rpb25zVG9QcmVwYXJlLCBzdWJWYXJpYW50SWQpID0+IHtcbiAgY29uc3QgYWN0aW9ucyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYWN0aW9uc1RvUHJlcGFyZSkpO1xuICBmb3IgKGNvbnN0IGFjdGlvbiBvZiBhY3Rpb25zKSB7XG4gICAgY29uc3Qge3N1YlZhcmlhbnRzfSA9IGFjdGlvbjtcbiAgICBpZiAoIXN1YlZhcmlhbnRzKSBjb250aW51ZTtcbiAgICBmb3IgKGNvbnN0IHN1YlZhcmlhbnQgb2Ygc3ViVmFyaWFudHMpIHtcbiAgICAgIGlmIChzdWJWYXJpYW50LmlkID09PSBzdWJWYXJpYW50SWQpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gc3ViVmFyaWFudCkge1xuICAgICAgICAgIGlmIChrZXkgIT09IFwiaWRcIikge1xuICAgICAgICAgICAgYWN0aW9uW2tleV0gPSBzdWJWYXJpYW50W2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY3Rpb25zO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gYWN0aW9ucztcbn07XG5cbmV4cG9ydCBjb25zdCBpbml0aWF0ZVNlc3Npb25TdG9yYWdlcyA9ICgpID0+IHtcbiAgY29uc3Qge1BBR0VfVklFV1MsIFBPUFVQX0RJU1BMQVlfRkxBRywgU0VTU0lPTl9JRCwgU0VTU0lPTl9USU1FU1RBTVB9ID0gU0VTU0lPTl9TVE9SQUdFX0tFWVM7XG4gIGNvbnN0IHBhZ2VWaWV3cyA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oUEFHRV9WSUVXUyk7XG4gIGNvbnN0IHBvcHVwRGlzcGxheUZsYWcgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBPUFVQX0RJU1BMQVlfRkxBRyk7XG4gIGNvbnN0IHNlc3Npb25JZCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oU0VTU0lPTl9JRCk7XG4gIGNvbnN0IHNlc3Npb25UaW1lc3RhbXAgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFNFU1NJT05fVElNRVNUQU1QKTtcbiAgaWYgKCFwYWdlVmlld3MpIHtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBBR0VfVklFV1MsIDEpO1xuICB9IGVsc2Uge1xuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oUEFHRV9WSUVXUywgcGFyc2VJbnQocGFnZVZpZXdzKSArIDEpO1xuICB9XG4gIGlmIChwb3B1cERpc3BsYXlGbGFnID09PSBudWxsKSB7XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQT1BVUF9ESVNQTEFZX0ZMQUcsIDApO1xuICB9XG4gIGlmICghc2Vzc2lvbklkKSB7XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShTRVNTSU9OX0lELCBjcnlwdG8ucmFuZG9tVVVJRCgpKTtcbiAgfVxuICBpZiAoIXNlc3Npb25UaW1lc3RhbXApIHtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFNFU1NJT05fVElNRVNUQU1QLCBEYXRlLm5vdygpKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGNvbmRpdGlvbkNoZWNrZXIgPSAocnVuVGltZVZhbHVlLCBjb25kaXRpb24sIHZhbHVlKSA9PiB7XG4gIGlmIChjb25kaXRpb24gPT09IFwibm90RXhpc3RcIikge1xuICAgIGlmICghcnVuVGltZVZhbHVlKSB7XG4gICAgICBsb2dnZXIubG9nKFwiY29uZGl0aW9uQ2hlY2tlcjogLXNhdGlzZmllZC0gdGFyZ2V0IGRvZXMgbm90IGV4aXN0XCIpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGxvZ2dlci5sb2coXCJjb25kaXRpb25DaGVja2VyOiAtbm90IHNhdGlzZmllZC0gdGFyZ2V0IGRvZXMgZXhpc3RcIik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChydW5UaW1lVmFsdWUgPT09IG51bGwgfHxcbiAgICBydW5UaW1lVmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgIGNvbmRpdGlvbiA9PT0gbnVsbCB8fFxuICAgIGNvbmRpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbG9nZ2VyLmxvZyhcImNvbmRpdGlvbkNoZWNrZXI6IHJ1blRpbWVWYWx1ZSBvciBjb25kaXRpb24gaXMgbm90IGRlZmluZWRcIik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN3aXRjaCAoY29uZGl0aW9uKSB7XG4gICAgY2FzZSBcImV4aXN0XCI6XG4gICAgICBpZiAocnVuVGltZVZhbHVlKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgZG9lcyBleGlzdFwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBsb2dnZXIubG9nKFwiY29uZGl0aW9uQ2hlY2tlcjogLW5vdCBzYXRpc2ZpZWQtIHRhcmdldCBkb2VzIG5vdCBleGlzdFwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjYXNlIFwiY29udGFpbnNcIjpcbiAgICAgIGlmIChydW5UaW1lVmFsdWUuaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgY29udGFpbnMgdmFsdWVcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmxvZyhcImNvbmRpdGlvbkNoZWNrZXI6IC1ub3Qgc2F0aXNmaWVkLSB0YXJnZXQgZG9lcyBub3QgY29udGFpbiB2YWx1ZVwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjYXNlIFwibm90Q29udGFpbnNcIjpcbiAgICAgIGlmICghcnVuVGltZVZhbHVlLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICBsb2dnZXIubG9nKFwiY29uZGl0aW9uQ2hlY2tlcjogLXNhdGlzZmllZC0gdGFyZ2V0IGRvZXMgbm90IGNvbnRhaW4gdmFsdWVcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmxvZyhcImNvbmRpdGlvbkNoZWNrZXI6IC1ub3Qgc2F0aXNmaWVkLSB0YXJnZXQgY29udGFpbnMgdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImVxdWFsXCI6XG4gICAgICBpZiAocnVuVGltZVZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICBsb2dnZXIubG9nKFwiY29uZGl0aW9uQ2hlY2tlcjogLXNhdGlzZmllZC0gdGFyZ2V0IGVxdWFscyB2YWx1ZVwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBsb2dnZXIubG9nKFwiY29uZGl0aW9uQ2hlY2tlcjogLW5vdCBzYXRpc2ZpZWQtIHRhcmdldCBkb2VzIG5vdCBlcXVhbCB2YWx1ZVwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjYXNlIFwibm90RXF1YWxcIjpcbiAgICAgIGlmIChydW5UaW1lVmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgZG9lcyBub3QgZXF1YWwgdmFsdWVcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmxvZyhcImNvbmRpdGlvbkNoZWNrZXI6IC1ub3Qgc2F0aXNmaWVkLSB0YXJnZXQgZXF1YWxzIHZhbHVlXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhc2UgXCJncmVhdGVyVGhhblwiOlxuICAgICAgaWYgKHJ1blRpbWVWYWx1ZSA+IHZhbHVlKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgaXMgZ3JlYXRlciB0aGFuIHZhbHVlXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5sb2coXCJjb25kaXRpb25DaGVja2VyOiAtbm90IHNhdGlzZmllZC0gdGFyZ2V0IGlzIG5vdCBncmVhdGVyIHRoYW4gdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImxlc3NUaGFuXCI6XG4gICAgICBpZiAocnVuVGltZVZhbHVlIDwgdmFsdWUpIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhcImNvbmRpdGlvbkNoZWNrZXI6IC1zYXRpc2ZpZWQtIHRhcmdldCBpcyBsZXNzIHRoYW4gdmFsdWVcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmxvZyhcImNvbmRpdGlvbkNoZWNrZXI6IC1ub3Qgc2F0aXNmaWVkLSB0YXJnZXQgaXMgbm90IGxlc3MgdGhhbiB2YWx1ZVwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjYXNlIFwiZ3JlYXRlckVxdWFsc1wiOlxuICAgICAgaWYgKHJ1blRpbWVWYWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBsb2dnZXIubG9nKFwiY29uZGl0aW9uQ2hlY2tlcjogLXNhdGlzZmllZC0gdGFyZ2V0IGlzIGdyZWF0ZXIgb3IgZXF1YWwgdGhhbiB2YWx1ZVwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBsb2dnZXIubG9nKFwiY29uZGl0aW9uQ2hlY2tlcjogLW5vdCBzYXRpc2ZpZWQtIHRhcmdldCBpcyBub3QgZ3JlYXRlciBvciBlcXVhbCB0aGFuIHZhbHVlXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhc2UgXCJsZXNzRXF1YWxzXCI6XG4gICAgICBpZiAocnVuVGltZVZhbHVlIDw9IHZhbHVlKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJjb25kaXRpb25DaGVja2VyOiAtc2F0aXNmaWVkLSB0YXJnZXQgaXMgbGVzcyBvciBlcXVhbCB0aGFuIHZhbHVlXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5sb2coXCJjb25kaXRpb25DaGVja2VyOiAtbm90IHNhdGlzZmllZC0gdGFyZ2V0IGlzIG5vdCBsZXNzIG9yIGVxdWFsIHRoYW4gdmFsdWVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImJldHdlZW5cIjoge1xuICAgICAgbGV0IFttaW4sIG1heF0gPSB2YWx1ZS5zcGxpdChcIixcIik7XG4gICAgICBtaW4gPSBwYXJzZUludChtaW4pO1xuICAgICAgbWF4ID0gcGFyc2VJbnQobWF4KTtcbiAgICAgIGlmIChydW5UaW1lVmFsdWUgPj0gbWluICYmIHJ1blRpbWVWYWx1ZSA8PSBtYXgpIHtcbiAgICAgICAgbG9nZ2VyLmxvZyhcImNvbmRpdGlvbkNoZWNrZXI6IC1zYXRpc2ZpZWQtIHRhcmdldCBpcyBiZXR3ZWVuIG1pbiBhbmQgbWF4XCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5sb2coXCJjb25kaXRpb25DaGVja2VyOiAtbm90IHNhdGlzZmllZC0gdGFyZ2V0IGlzIG5vdCBiZXR3ZWVuIG1pbiBhbmQgbWF4XCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgbG9nZ2VyLmxvZyhcImNvbmRpdGlvbkNoZWNrZXI6IGNvbmRpdGlvbiBpcyBub3QgZGVmaW5lZCBcIiwgY29uZGl0aW9uKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHJhbmRvbVVVSURGYWxsYmFjayA9ICgpID0+IHtcbiAgY3J5cHRvLnJhbmRvbVVVSUQgPSBmdW5jdGlvbiByYW5kb21VVUlEKCkge1xuICAgIHJldHVybiAoXG4gICAgICBbMWU3XSstMWUzKy00ZTMrLThlMystMWUxMSkucmVwbGFjZSgvWzAxOF0vZyxcbiAgICAgICAgKGMpID0+IChjIF4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSgxKSlbMF0gJiAxNSA+PiBjIC8gNCkudG9TdHJpbmcoMTYpLFxuICAgICk7XG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgY29tcGFyZU9iamVjdHMgPSAob2JqMSwgb2JqMikgPT4ge1xuICBpZiAob2JqMSA9PT0gb2JqMikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKFxuICAgIHR5cGVvZiBvYmoxICE9PSBcIm9iamVjdFwiIHx8XG4gICAgICB0eXBlb2Ygb2JqMiAhPT0gXCJvYmplY3RcIiB8fFxuICAgICAgb2JqMSA9PSBudWxsIHx8XG4gICAgICBvYmoyID09IG51bGxcbiAgKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3Qga2V5c0EgPSBPYmplY3Qua2V5cyhvYmoxKTtcbiAgY29uc3Qga2V5c0IgPSBPYmplY3Qua2V5cyhvYmoyKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBsZXQgcmVzdWx0ID0gdHJ1ZTtcblxuICBrZXlzQS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpZiAoIWtleXNCLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBvYmoxW2tleV0gPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICAgICAgIHR5cGVvZiBvYmoyW2tleV0gPT09IFwiZnVuY3Rpb25cIlxuICAgICkge1xuICAgICAgaWYgKG9iajFba2V5XS50b1N0cmluZygpICE9PSBvYmoyW2tleV0udG9TdHJpbmcoKSkge1xuICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWNvbXBhcmVPYmplY3RzKG9iajFba2V5XSwgb2JqMltrZXldKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGNvbnN0IGRlbGF5ID0gbXMgPT4gbmV3IFByb21pc2UocmVzID0+IHNldFRpbWVvdXQocmVzLCBtcykpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgZGVmaW5lKEl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBkZWZpbmUoR3AsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb24pO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIGRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSwgYXN5bmNJdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBkZWZpbmUoR3AsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgZGVmaW5lKEdwLCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9KTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCBpbiBtb2Rlcm4gZW5naW5lc1xuICAvLyB3ZSBjYW4gZXhwbGljaXRseSBhY2Nlc3MgZ2xvYmFsVGhpcy4gSW4gb2xkZXIgZW5naW5lcyB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBnbG9iYWxUaGlzLnJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG4gIH0gZWxzZSB7XG4gICAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufSIsImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59IiwiaW1wb3J0IGFycmF5V2l0aEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aEhvbGVzLmpzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5TGltaXQgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5TGltaXQuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlUmVzdCBmcm9tIFwiLi9ub25JdGVyYWJsZVJlc3QuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdO1xuXG4gIGlmIChfaSA9PSBudWxsKSByZXR1cm47XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuXG4gIHZhciBfcywgX2U7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgfSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICB9LCBfdHlwZW9mKG9iaik7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZTsgfTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfSIsImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhvdXRIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlU3ByZWFkIGZyb20gXCIuL25vbkl0ZXJhYmxlU3ByZWFkLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiaW1wb3J0IHtMT0dfQVBJX1VSTCwgU0VTU0lPTl9TVE9SQUdFX0tFWVMsIFNQTElUX1JBVElPfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQge2NvbXBhcmVPYmplY3RzfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlclwiO1xuXG5leHBvcnQgY2xhc3MgTW9uaXRvciB7XG4gIGNvbnN0cnVjdG9yKGFwcGxpZWRUcmVhdG1lbnRJZHMpIHtcbiAgICB0aGlzLmxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IE1vbml0b3JcIik7XG4gICAgdGhpcy5sb2dnZXIubG9nKFwiSW5pdGlhbGl6aW5nIG1vbml0b3JcIik7XG5cbiAgICB0aGlzLmFwcGxpZWRUcmVhdG1lbnRJZHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGFwcGxpZWRUcmVhdG1lbnRJZHMpKTtcbiAgICB0aGlzLmxhdGVzdENoYW5nZXMgPSBudWxsO1xuICAgIHRoaXMuc2Vzc2lvbklkID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShTRVNTSU9OX1NUT1JBR0VfS0VZUy5TRVNTSU9OX0lEKTtcbiAgICB0aGlzLnZpZXdJZCA9IGNyeXB0by5yYW5kb21VVUlEKCk7XG4gICAgdGhpcy5oZWFkZXJzID0ge1xuICAgICAgdHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICB0aGlzLmxvZ2dlci5sb2coXCJJbml0aWFsaXppbmcgd2l0aCBzZXNzaW9uIGlkOiBcIiArIHRoaXMuc2Vzc2lvbklkKTtcbiAgICB0aGlzLmluaXRpYWxpemVFeGl0RXZlbnRMaXN0ZW5lcigpO1xuICB9XG5cbiAgYXN5bmMgc2VuZExvZ3MoKSB7XG4gICAgdGhpcy5sb2dnZXIubG9nKFwiU2VuZGluZyBsb2dzXCIpO1xuICAgIGxldCBxdWV1ZWQgPSBmYWxzZTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHF1ZXVlZCA9IHRydWU7XG4gICAgfSwgMTAwMCk7XG4gICAgd2hpbGUgKCFxdWV1ZWQpIHtcbiAgICAgIHF1ZXVlZCA9IG5hdmlnYXRvci5zZW5kQmVhY29uKExPR19BUElfVVJMLCB0aGlzLnBhY2thZ2VMb2dEYXRhKCkpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBzZW5kRW1wdHlMb2cobWVzc2FnZSkge1xuICAgIGNvbnNvbGUubG9nKFwiTmV4dGRheSBNb25pdG9yOiBTZW5kaW5nIGVtcHR5IGxvZ3NcIik7XG4gICAgbGV0IHF1ZXVlZCA9IGZhbHNlO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgcXVldWVkID0gdHJ1ZTtcbiAgICB9LCAxMDAwKTtcbiAgICB3aGlsZSAoIXF1ZXVlZCkge1xuICAgICAgcXVldWVkID0gbmF2aWdhdG9yLnNlbmRCZWFjb24oTE9HX0FQSV9VUkwsIHRoaXMucGFja2FnZUVtcHR5TG9nRGF0YShtZXNzYWdlKSk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlTGF0ZXN0Q2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgY29uc3Qge2FwcGxpZWRUcmVhdG1lbnRJZHMsIGxvZ2dlcn0gPSB0aGlzO1xuICAgIGxvZ2dlci5sb2coXCJVcGRhdGluZyBsYXRlc3QgY2hhbmdlc1wiKTtcbiAgICBjb25zdCBjb21wYXJlVG8gPSB0aGlzLmxhdGVzdENoYW5nZXMgfHwgYXBwbGllZFRyZWF0bWVudElkcztcbiAgICBpZiAoIWNvbXBhcmVPYmplY3RzKGNvbXBhcmVUbywgY2hhbmdlcykpIHtcbiAgICAgIGxvZ2dlci5sb2coXCJDaGFuZ2VzIGRldGVjdGVkXCIpO1xuICAgICAgbG9nZ2VyLmxvZyhcIkNoYW5nZXM6IFwiLCBjaGFuZ2VzKTtcbiAgICAgIHRoaXMubGF0ZXN0Q2hhbmdlcyA9IGNoYW5nZXM7XG4gICAgfVxuICB9XG5cbiAgcGFja2FnZUxvZ0RhdGEoKSB7XG4gICAgY29uc3Qge2FwcGxpZWRUcmVhdG1lbnRJZHMsIGhlYWRlcnMsIHNlc3Npb25JZCwgdmlld0lkfSA9IHRoaXM7XG4gICAgY29uc3QgbWVzc2FnZSA9IE9iamVjdC5rZXlzKGFwcGxpZWRUcmVhdG1lbnRJZHMpLmxlbmd0aCA/IFwiVHJlYXRtZW50cyBhcHBsaWVkXCIgOlxuICAgICAgXCJObyB0cmVhdG1lbnRzIGFwcGxpZWRcIjtcbiAgICBjb25zdCBjdXJyZW50VVJMID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgY29uc3QgYm9keSA9IHtcbiAgICAgIG46IGBuZXh0ZGF5LXNlc3Npb25faWQtJHtzZXNzaW9uSWR9YCxcbiAgICAgIHU6IGN1cnJlbnRVUkwuaHJlZixcbiAgICAgIGQ6IGN1cnJlbnRVUkwuaG9zdG5hbWUsXG4gICAgICByOiBkb2N1bWVudC5yZWZlcnJlcixcbiAgICAgIHc6IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgYzogZG9jdW1lbnQuY29va2llLFxuICAgICAgd2RsOiB3aW5kb3cuZGF0YUxheWVyIHx8IFtdLFxuICAgICAgdDogRGF0ZS5ub3coKSxcbiAgICAgIHY6IFwiMC4wLjIyXCIsXG4gICAgICBhOiBhcHBsaWVkVHJlYXRtZW50SWRzLFxuICAgICAgdklkOiB2aWV3SWQsXG4gICAgICBzcjogU1BMSVRfUkFUSU8sXG4gICAgICBtOiBtZXNzYWdlLFxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBCbG9iKFtKU09OLnN0cmluZ2lmeShib2R5KV0sIGhlYWRlcnMpO1xuICB9XG5cbiAgcGFja2FnZVVwZGF0ZUxvZ0RhdGEoKSB7XG4gICAgY29uc3Qge2hlYWRlcnMsIGxhdGVzdENoYW5nZXMsIHZpZXdJZH0gPSB0aGlzO1xuICAgIGlmICghbGF0ZXN0Q2hhbmdlcykgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICB0OiBEYXRlLm5vdygpLFxuICAgICAgYTogbGF0ZXN0Q2hhbmdlcyxcbiAgICAgIHZJZDogdmlld0lkLFxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBCbG9iKFtKU09OLnN0cmluZ2lmeShib2R5KV0sIGhlYWRlcnMpO1xuICB9XG5cbiAgc3RhdGljIHBhY2thZ2VFbXB0eUxvZ0RhdGEobWVzc2FnZSkge1xuICAgIGNvbnN0IHtoZWFkZXJzfSA9IHRoaXM7XG4gICAgY29uc3QgY3VycmVudFVSTCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIGJvZHkgPSB7XG4gICAgICBuOiBgbmV4dGRheS1zZXNzaW9uX2lkLSR7dGhpcy5zZXNzaW9uSWR9YCxcbiAgICAgIHU6IGN1cnJlbnRVUkwuaHJlZixcbiAgICAgIGQ6IGN1cnJlbnRVUkwuaG9zdG5hbWUsXG4gICAgICByOiBkb2N1bWVudC5yZWZlcnJlcixcbiAgICAgIHc6IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgYzogZG9jdW1lbnQuY29va2llLFxuICAgICAgd2RsOiB3aW5kb3cuZGF0YUxheWVyIHx8IFtdLFxuICAgICAgdDogRGF0ZS5ub3coKSxcbiAgICAgIHY6IFwiMC4wLjIyXCIsXG4gICAgICBhOiB7fSxcbiAgICAgIHZJZDogdGhpcy52aWV3SWQsXG4gICAgICBzcjogU1BMSVRfUkFUSU8sXG4gICAgICBtOiBtZXNzYWdlLFxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBCbG9iKFtKU09OLnN0cmluZ2lmeShib2R5KV0sIGhlYWRlcnMpO1xuICB9XG5cbiAgaW5pdGlhbGl6ZUV4aXRFdmVudExpc3RlbmVyKCkge1xuICAgIGNvbnN0IHtsb2dnZXJ9ID0gdGhpcztcbiAgICBsb2dnZXIubG9nKFwiSW5pdGlhbGl6aW5nIGV4aXQgZXZlbnQgbGlzdGVuZXJcIik7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFwicGFnZWhpZGVcIixcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIGxvZ2dlci5sb2coXCJJbiBwYWdlaGlkZSBldmVudFwiKTtcbiAgICAgICAgICBjb25zdCBsb2dEYXRhID0gdGhpcy5wYWNrYWdlVXBkYXRlTG9nRGF0YSgpO1xuICAgICAgICAgIGlmICghbG9nRGF0YSkge1xuICAgICAgICAgICAgbG9nZ2VyLmxvZyhcIk5vIGNoYW5nZXMgdG8gbG9nXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgcXVldWVkID0gZmFsc2U7XG4gICAgICAgICAgd2hpbGUgKCFxdWV1ZWQpIHtcbiAgICAgICAgICAgIHF1ZXVlZCA9IG5hdmlnYXRvci5cbiAgICAgICAgICAgICAgICBzZW5kQmVhY29uKExPR19BUElfVVJMLCBsb2dEYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbG9nZ2VyLmxvZyhcIkxvZ3MgcXVldWVkIHN1Y2Nlc3NmdWxseVwiKTtcbiAgICAgICAgfSxcbiAgICAgICAge2NhcHR1cmU6IHRydWV9LFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTW9uaXRvcjtcbiIsImltcG9ydCB7TE9DQUxfU1RPUkFHRV9LRVlTLCBUUkVBVE1FTlRTX0RVUkFUSU9OfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQge2ZldGNoVHJlYXRtZW50c30gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IFRyZWF0bWVudCBSZXBvc2l0b3J5XCIpO1xuXG5jbGFzcyBUcmVhdG1lbnRSZXBvc2l0b3J5IHtcbiAgY29uc3RydWN0b3IoYm9keSkge1xuICAgIGNvbnN0IHtjb29raWVQY3QsIHJlcXVlc3RVUkwsIHRyZWF0bWVudHN9ID0gYm9keTtcbiAgICB0aGlzLnRyZWF0bWVudHMgPSB0cmVhdG1lbnRzO1xuICAgIHRoaXMuY29va2llUGN0ID0gY29va2llUGN0O1xuXG4gICAgY29uc3QgaXNBamF4ID1cbiAgICAgIHJlcXVlc3RVUkwgJiZcbiAgICAgIHJlcXVlc3RVUkwuaW5jbHVkZXMoXCJhamF4L21vYmlsZS1zZWFyY2gvbG9hZE90aGVyUGFnZXMucGhwXCIpO1xuICAgIGNvbnN0IHBhdGggPSAhaXNBamF4ID9cbiAgICAgIG5ldyBVUkwocmVxdWVzdFVSTCkucGF0aG5hbWUgOlxuICAgICAgZGVjb2RlVVJJQ29tcG9uZW50KFxuICAgICAgICAgIG5ldyBVUkwocmVxdWVzdFVSTCkuc2VhcmNoLnJlcGxhY2UoXCI/b3JpZ2luYWxQYXRoPVwiLCBcIlwiKSxcbiAgICAgICk7XG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBnZXRUcmVhdG1lbnRzKCkge1xuICAgIGxvZ2dlci5sb2coXCJMb2FkaW5nIHRyZWF0bWVudHNcIik7XG4gICAgY29uc3Qge1RSRUFUTUVOVFN9ID0gTE9DQUxfU1RPUkFHRV9LRVlTO1xuICAgIGNvbnN0IHRyZWF0bWVudHNPYmogPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFRSRUFUTUVOVFMpKTtcbiAgICBsZXQgdHJlYXRtZW50cyA9IHRyZWF0bWVudHNPYmo/LnRyZWF0bWVudHM7XG4gICAgY29uc3QgdGltZXN0YW1wID0gdHJlYXRtZW50c09iaj8udGltZXN0YW1wO1xuICAgIGlmICghdHJlYXRtZW50cyB8fCAhdGltZXN0YW1wKSB7XG4gICAgICBsb2dnZXIubG9nKFwiVHJlYXRtZW50cyBub3QgZm91bmQgaW4gbG9jYWwgc3RvcmFnZVwiKTtcbiAgICAgIHRyZWF0bWVudHMgPSBhd2FpdCBmZXRjaFRyZWF0bWVudHMoKTtcbiAgICAgIGNvbnN0IHRyZWF0bWVudFdpdGhUaW1lc3RhbXAgPSB7XG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgdHJlYXRtZW50cyxcbiAgICAgIH07XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShUUkVBVE1FTlRTLCBKU09OLnN0cmluZ2lmeSh0cmVhdG1lbnRXaXRoVGltZXN0YW1wKSk7XG4gICAgICByZXR1cm4gdHJlYXRtZW50cztcbiAgICB9XG4gICAgaWYgKHRpbWVzdGFtcCkge1xuICAgICAgY29uc3QgZWxhcHNlZERheXMgPSAoRGF0ZS5ub3coKSAtIHRpbWVzdGFtcCkgLyAoMTAwMCAqIDM2MDAgKiAyNCk7XG4gICAgICBpZiAoZWxhcHNlZERheXMgPiBUUkVBVE1FTlRTX0RVUkFUSU9OKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJUcmVhdG1lbnRzIGFyZSBleHBpcmVkXCIpO1xuICAgICAgICB0cmVhdG1lbnRzID0gYXdhaXQgZmV0Y2hUcmVhdG1lbnRzKCk7XG4gICAgICAgIGNvbnN0IHRyZWF0bWVudFdpdGhUaW1lc3RhbXAgPSB7XG4gICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICAgIHRyZWF0bWVudHMsXG4gICAgICAgIH07XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFRSRUFUTUVOVFMsIEpTT04uc3RyaW5naWZ5KHRyZWF0bWVudFdpdGhUaW1lc3RhbXApKTtcbiAgICAgICAgcmV0dXJuIHRyZWF0bWVudHM7XG4gICAgICB9XG4gICAgfVxuICAgIGxvZ2dlci5sb2coXCJUcmVhdG1lbnRzIGFyZSBsb2FkZWQgZnJvbSBsb2NhbCBzdG9yYWdlXCIpO1xuICAgIHJldHVybiB0cmVhdG1lbnRzO1xuICB9XG5cbiAgZ2V0TWF0Y2hlZFRyZWF0bWVudHMoKSB7XG4gICAgY29uc3QgdXNlclNlZ21lbnQgPSB0aGlzLmdldFVzZXJTZWdtZW50KCk7XG5cbiAgICBjb25zdCBzZWdtZW50TWF0Y2hlZFRyZWF0bWVudHMgPSB0aGlzLnRyZWF0bWVudHMuZmlsdGVyKFxuICAgICAgICAodCkgPT5cbiAgICAgICAgICB0LmFwcGx5X29uX3VzZXJfc2VnbWVudCA9PSB1c2VyU2VnbWVudCB8fFxuICAgICAgICB0LmFwcGx5X29uX3VzZXJfc2VnbWVudCA9PT0gXCIqXCIsXG4gICAgKTtcbiAgICBsb2dnZXIubG9nKGAke3NlZ21lbnRNYXRjaGVkVHJlYXRtZW50cy5sZW5ndGh9IHRyZWF0bWVudHMgc2VnbWVudCBtYXRjaGVkYCk7XG4gICAgaWYgKCFzZWdtZW50TWF0Y2hlZFRyZWF0bWVudHMubGVuZ3RoKSByZXR1cm4gW107XG4gICAgcmV0dXJuIHNlZ21lbnRNYXRjaGVkVHJlYXRtZW50cztcbiAgfVxuXG4gIGdldFVzZXJTZWdtZW50KCkge1xuICAgIGlmICh0aGlzLmNvb2tpZVBjdCA9PT0gLTEpIHtcbiAgICAgIGxvZ2dlci5pbmZvKFwiTmV3IHVzZXIgaGFzIG5vIHNlZ21lbnRcIik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOZXcgVXNlclwiKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuY29va2llUGN0IDwgNTApIHJldHVybiBcIkFcIjtcbiAgICByZXR1cm4gXCJCXCI7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVHJlYXRtZW50UmVwb3NpdG9yeTtcbiIsImltcG9ydCB7U0VTU0lPTl9TVE9SQUdFX0tFWVMsIExPQ0FMX1NUT1JBR0VfS0VZU30gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHtjb25kaXRpb25DaGVja2VyfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlclwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIk5leHRkYXkgQ291bnRlciBDaGVja2VyXCIpO1xuXG5leHBvcnQgY29uc3QgY2hlY2tDb3VudGVyUnVsZSA9IChydWxlKSA9PntcbiAgbG9nZ2VyLmxvZyhcIkNoZWNraW5nIHJ1bGVcIiwgSlNPTi5zdHJpbmdpZnkocnVsZSkpO1xuICBjb25zdCB7b3BlcmF0b3IsIGNvbmRpdGlvbiwgdmFsdWV9ID0gcnVsZTtcbiAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgIGNhc2UgXCJwYWdlVmlld1wiOlxuICAgICAgcmV0dXJuIHBhZ2VWaWV3SGFuZGxlcihjb25kaXRpb24sIHZhbHVlKTtcbiAgICBjYXNlIFwiQ0FCYXNrZXRQcmljZVwiOlxuICAgICAgcmV0dXJuIGNhQmFza2V0UHJpY2VIYW5kbGVyKGNvbmRpdGlvbiwgdmFsdWUpO1xuICAgIGRlZmF1bHQ6XG4gICAgICBsb2dnZXIubG9nKFwiTm8gc3VjaCBvcGVyYXRvclwiLCBvcGVyYXRvcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmNvbnN0IGdldENvdW50ZXIgPSAoY291bnRlciwgdHlwZSkgPT4ge1xuICB0cnkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcInNlc3Npb25cIjpcbiAgICAgICAgcmV0dXJuIHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oY291bnRlcik7XG4gICAgICBjYXNlIFwibG9jYWxcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKGNvdW50ZXIpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbG9nZ2VyLmxvZyhcIk5vIHN1Y2ggdHlwZVwiLCB0eXBlKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2dnZXIubG9nKGBDb3VsZCBub3QgZ2V0IGNvdW50ZXIgJHtjb3VudGVyfWAsIGVycik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbmNvbnN0IHBhZ2VWaWV3SGFuZGxlciA9IChjb25kaXRpb24sIHZhbHVlKSA9PiB7XG4gIGNvbnN0IHBhZ2VWaWV3cyA9IHBhcnNlSW50KGdldENvdW50ZXIoU0VTU0lPTl9TVE9SQUdFX0tFWVMuUEFHRV9WSUVXUywgXCJzZXNzaW9uXCIpKTtcbiAgbG9nZ2VyLmxvZyhcIlBhZ2Ugdmlld3MgY291bnRlciB2YWx1ZTogXCIsIHBhZ2VWaWV3cyk7XG4gIGlmIChwYWdlVmlld3MgPT09IG51bGwpIHtcbiAgICBsb2dnZXIubG9nKFwiUGFnZXZpZXdzIGNvdW50ZXIgbm90IGZvdW5kIGluIHNlc3Npb24gc3RvcmFnZVwiKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIocGFnZVZpZXdzLCBjb25kaXRpb24sIHBhcnNlSW50KHZhbHVlKSk7XG59O1xuXG5jb25zdCBjYUJhc2tldFByaWNlSGFuZGxlciA9IChjb25kaXRpb24sIHZhbHVlKSA9PiB7XG4gIGNvbnN0IGNhQmFza2V0UHJpY2UgPSBwYXJzZUludChcbiAgICAgIGdldENvdW50ZXIoTE9DQUxfU1RPUkFHRV9LRVlTLkNPVVBPTl9BUFBMSUNBQkxFX0JBU0tFVF9QUklDRSwgXCJsb2NhbFwiKSk7XG4gIGxvZ2dlci5sb2coXCJDb3Vwb24gYXBwbGljYWJsZSBiYXNrZXQgcHJpY2UgY291bnRlciB2YWx1ZTogXCIsIGNhQmFza2V0UHJpY2UpO1xuICBpZiAoY2FCYXNrZXRQcmljZSA9PT0gbnVsbCkge1xuICAgIGxvZ2dlci5sb2coXCJDb3Vwb24gYXBwbGljYWJsZSBiYXNrZXQgcHJpY2UgY291bnRlciBub3QgZm91bmQgaW4gbG9jYWwgc3RvcmFnZVwiKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIoY2FCYXNrZXRQcmljZSwgY29uZGl0aW9uLCBwYXJzZUludCh2YWx1ZSkpO1xufTtcblxuIiwiaW1wb3J0IHtjb25kaXRpb25DaGVja2VyfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlclwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIk5leHRkYXkgRWxlbWVudCBDaGVja2VyXCIpO1xuXG5leHBvcnQgY29uc3QgY2hlY2tFbGVtZW50UnVsZSA9IChydWxlKSA9PntcbiAgbG9nZ2VyLmxvZyhcIkNoZWNraW5nIHJ1bGVcIiwgSlNPTi5zdHJpbmdpZnkocnVsZSkpO1xuICBjb25zdCB7b3BlcmF0b3IsIGNvbmRpdGlvbiwgdmFsdWUsIHNlbGVjdG9yLCBzZWxlY3RvckFsbCwgc2VsZWN0b3JGYWxsYmFjayA9IG51bGx9ID0gcnVsZTtcbiAgbGV0IG1haW5TZWxlY3RvciA9IHNlbGVjdG9yO1xuICBpZiAobWFpblNlbGVjdG9yICYmICFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG1haW5TZWxlY3RvcikpIHtcbiAgICBtYWluU2VsZWN0b3IgPSBzZWxlY3RvckZhbGxiYWNrID8gc2VsZWN0b3JGYWxsYmFjayA6IG1haW5TZWxlY3RvcjtcbiAgfVxuXG4gIGlmIChvcGVyYXRvciA9PT0gbnVsbCkge1xuICAgIHJldHVybiBjb25kaXRpb25DaGVja2VyKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobWFpblNlbGVjdG9yKSwgY29uZGl0aW9uLCB2YWx1ZSk7XG4gIH1cbiAgaWYgKG1haW5TZWxlY3RvciAmJiAhZG9jdW1lbnQucXVlcnlTZWxlY3RvcihtYWluU2VsZWN0b3IpKSB7XG4gICAgbG9nZ2VyLmxvZyhcIlNlbGVjdG9yIG5vdCBmb3VuZCBvbiBwYWdlXCIpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoc2VsZWN0b3JBbGwgJiYgIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3JBbGwpKSB7XG4gICAgbG9nZ2VyLmxvZyhcIlNlbGVjdG9yIG5vdCBmb3VuZCBvbiBwYWdlXCIpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGxldCBlbGVtZW50O1xuICBpZiAobWFpblNlbGVjdG9yKSBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihtYWluU2VsZWN0b3IpO1xuICBlbHNlIGlmIChzZWxlY3RvckFsbCkgZWxlbWVudCA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvckFsbCkpO1xuXG4gIHN3aXRjaCAob3BlcmF0b3IpIHtcbiAgICBjYXNlIFwidGV4dC1udW1iZXJcIjoge1xuICAgICAgbGV0IHRlbXBWYWw7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShlbGVtZW50KSkge1xuICAgICAgICB0ZW1wVmFsID0gZWxlbWVudC5yZWR1Y2UoKHJldHVyblZhbCwgZWxlbSkgPT4ge1xuICAgICAgICAgIHJldHVyblZhbCArPSBwYXJzZUludChlbGVtLnRleHRDb250ZW50LnJlcGxhY2UoXCJUTFwiLCBcIlwiKS5yZXBsYWNlKFwiLlwiLCBcIlwiKSk7XG4gICAgICAgICAgcmV0dXJuIHJldHVyblZhbDtcbiAgICAgICAgfSwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZW1wVmFsID0gcGFyc2VJbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihtYWluU2VsZWN0b3IpLnRleHRDb250ZW50XG4gICAgICAgICAgICAucmVwbGFjZShcIlRMXCIsIFwiXCIpLnJlcGxhY2UoXCIuXCIsIFwiXCIpKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJ1blRpbWVWYWx1ZSA9IHBhcnNlSW50KHRlbXBWYWwpO1xuICAgICAgcmV0dXJuIGNvbmRpdGlvbkNoZWNrZXIocnVuVGltZVZhbHVlLCBjb25kaXRpb24sIHZhbHVlKTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIGxvZ2dlci5sb2coXCJPcGVyYXRvciBub3QgZGVmaW5lZFwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcbiIsImltcG9ydCB7Y29uZGl0aW9uQ2hlY2tlcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IEZ1bmN0aW9uIENoZWNrZXJcIik7XG5cbmV4cG9ydCBjb25zdCBjaGVja0Z1bmN0aW9uUnVsZSA9IChydWxlKSA9PntcbiAgbG9nZ2VyLmxvZyhcIkNoZWNraW5nIHJ1bGVcIiwgSlNPTi5zdHJpbmdpZnkocnVsZSkpO1xuICBjb25zdCB7b3BlcmF0b3IsIGNvbmRpdGlvbiwgdmFsdWV9ID0gcnVsZTtcbiAgaWYgKCFvcGVyYXRvcikge1xuICAgIGxvZ2dlci5sb2coXCJSdWxlIGZ1bmN0aW9uIG5vdCBkZWZpbmVkXCIpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBydWxlRnVuY3Rpb24gPSBGdW5jdGlvbihvcGVyYXRvcik7XG4gIGNvbnN0IHJ1bnRpbWVWYWx1ZSA9IHJ1bGVGdW5jdGlvbigpO1xuICByZXR1cm4gY29uZGl0aW9uQ2hlY2tlcihydW50aW1lVmFsdWUsIGNvbmRpdGlvbiwgdmFsdWUpO1xufTtcbiIsImltcG9ydCB7U0VTU0lPTl9TVE9SQUdFX0tFWVN9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7Y29uZGl0aW9uQ2hlY2tlcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IFNlc3Npb24gQ2hlY2tlclwiKTtcblxuZXhwb3J0IGNvbnN0IGNoZWNrU2Vzc2lvblJ1bGUgPSAocnVsZSkgPT57XG4gIGxvZ2dlci5sb2coXCJDaGVja2luZyBydWxlXCIsIEpTT04uc3RyaW5naWZ5KHJ1bGUpKTtcbiAgY29uc3Qge29wZXJhdG9yLCBjb25kaXRpb24sIHZhbHVlfSA9IHJ1bGU7XG4gIHN3aXRjaCAob3BlcmF0b3IpIHtcbiAgICBjYXNlIFwiZHVyYXRpb25cIjpcbiAgICAgIHJldHVybiBkdXJhdGlvbkhhbmRsZXIoY29uZGl0aW9uLCB2YWx1ZSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG5jb25zdCBnZXRTZXNzaW9uVGltZXN0YW1wID0gKCkgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgRGF0ZShwYXJzZUludChzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFNFU1NJT05fU1RPUkFHRV9LRVlTLlNFU1NJT05fVElNRVNUQU1QKSkpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2dnZXIubG9nKFwiQ291bGQgbm90IGdldCBzZXNzaW9uIHRpbWVzdGFtcFwiLCBlcnIpO1xuICAgIHJldHVybiBEYXRlLm5vdygpO1xuICB9XG59O1xuXG5jb25zdCBkdXJhdGlvbkhhbmRsZXIgPSAoY29uZGl0aW9uLCB2YWx1ZSkgPT4ge1xuICBjb25zdCBkdXJhdGlvbiA9IChEYXRlLm5vdygpIC0gZ2V0U2Vzc2lvblRpbWVzdGFtcCgpKSAvIDEwMDA7XG4gIHJldHVybiBjb25kaXRpb25DaGVja2VyKGR1cmF0aW9uLCBjb25kaXRpb24sIHBhcnNlSW50KHZhbHVlKSk7XG59O1xuIiwiaW1wb3J0IHtjb25kaXRpb25DaGVja2VyfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uL2xvZ2dlclwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcihcIk5leHRkYXkgVXJsIENoZWNrZXJcIik7XG5cbmV4cG9ydCBjb25zdCBjaGVja1VybFJ1bGUgPSAocnVsZSkgPT57XG4gIGxvZ2dlci5sb2coXCJDaGVja2luZyBydWxlXCIsIEpTT04uc3RyaW5naWZ5KHJ1bGUpKTtcbiAgY29uc3Qge29wZXJhdG9yLCBjb25kaXRpb24sIHZhbHVlfSA9IHJ1bGU7XG5cbiAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgIGNhc2UgXCJwYXRoXCI6IHtcbiAgICAgIGNvbnN0IHJlcXVlc3RVUkw9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgY29uc3QgaXNBamF4ID0gcmVxdWVzdFVSTC5pbmNsdWRlcyhcImFqYXgvbW9iaWxlLXNlYXJjaC9sb2FkT3RoZXJQYWdlcy5waHBcIik7XG4gICAgICBjb25zdCBwYXRoID0gIWlzQWpheCA/IG5ldyBVUkwocmVxdWVzdFVSTCkucGF0aG5hbWUgOlxuICAgICAgZGVjb2RlVVJJQ29tcG9uZW50KFxuICAgICAgICAgIG5ldyBVUkwocmVxdWVzdFVSTCkuc2VhcmNoLnJlcGxhY2UoXCI/b3JpZ2luYWxQYXRoPVwiLCBcIlwiKSxcbiAgICAgICk7XG4gICAgICBsb2dnZXIubG9nKGBDaGVja2luZyBwYXRoICR7cGF0aH0gbWF0Y2hlcyBydWxlIHBhdGggJHt2YWx1ZX1gKTtcbiAgICAgIHJldHVybiBjb25kaXRpb25DaGVja2VyKHBhdGgsIGNvbmRpdGlvbiwgdmFsdWUpO1xuICAgIH1cbiAgfVxufTtcbiIsImltcG9ydCB7Y2hlY2tDb3VudGVyUnVsZX0gZnJvbSBcIi4vY291bnRlckNoZWNrZXJcIjtcbmltcG9ydCB7Y2hlY2tEYXRhTGF5ZXJSdWxlfSBmcm9tIFwiLi9kYXRhTGF5ZXJDaGVja2VyXCI7XG5pbXBvcnQge2NoZWNrRWxlbWVudFJ1bGV9IGZyb20gXCIuL2VsZW1lbnRDaGVja2VyXCI7XG5pbXBvcnQge2NoZWNrRnVuY3Rpb25SdWxlfSBmcm9tIFwiLi9mdW5jdGlvbkNoZWNrZXJcIjtcbmltcG9ydCB7Y2hlY2tTZXNzaW9uUnVsZX0gZnJvbSBcIi4vc2Vzc2lvbkNoZWNrZXJcIjtcbmltcG9ydCB7Y2hlY2tVcmxSdWxlfSBmcm9tIFwiLi91cmxDaGVja2VyXCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoXCJOZXh0ZGF5IFJ1bGUgRW5naW5lXCIpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSdWxlRW5naW5lIHtcbiAgY29uc3RydWN0b3IoYm9keSkge1xuICAgIGNvbnN0IHtiYXNlUnVsZVNldCwgc3ViVmFyaWFudFJ1bGVTZXQsIGNhbGxiYWNrID0gbnVsbH0gPSBib2R5O1xuICAgIHRoaXMuYmFzZVJ1bGVTZXQgPSBiYXNlUnVsZVNldDtcbiAgICB0aGlzLnN1YlZhcmlhbnRSdWxlU2V0ID0gc3ViVmFyaWFudFJ1bGVTZXQ7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICB9XG5cbiAgY2hlY2tSdWxlcygpIHtcbiAgICBmb3IgKGNvbnN0IHJ1bGUgb2YgdGhpcy5iYXNlUnVsZVNldCkge1xuICAgICAgY29uc3QgcnVsZVNhdGlzZmllZCA9IHRoaXMuY2hlY2tSdWxlKHJ1bGUpO1xuICAgICAgaWYgKCFydWxlU2F0aXNmaWVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBjaGVja1N1YlZhcmlhbnRSdWxlcygpIHtcbiAgICBmb3IgKGNvbnN0IHJ1bGUgb2YgdGhpcy5zdWJWYXJpYW50UnVsZVNldCkge1xuICAgICAgY29uc3QgcnVsZVNhdGlzZmllZCA9IHRoaXMuY2hlY2tSdWxlKHJ1bGUpO1xuICAgICAgaWYgKHJ1bGVTYXRpc2ZpZWQpIHtcbiAgICAgICAgcmV0dXJuIHJ1bGUuc3ViVmFyaWFudElkO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjaGVja1J1bGUocnVsZSkge1xuICAgIGNvbnN0IHtjaGFpbiwgY2hhaW5fY29uZGl0aW9uLCB0eXBlfSA9IHJ1bGU7XG4gICAgbGV0IHJ1bGVTYXRpc2ZpZWQgPSBudWxsO1xuICAgIC8vIGNoZWNrIHJ1bGVcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJzZXNzaW9uXCI6XG4gICAgICAgIHJ1bGVTYXRpc2ZpZWQgPSBjaGVja1Nlc3Npb25SdWxlKHJ1bGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJjb3VudGVyXCI6XG4gICAgICAgIHJ1bGVTYXRpc2ZpZWQgPSBjaGVja0NvdW50ZXJSdWxlKHJ1bGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJlbGVtZW50XCI6XG4gICAgICAgIHJ1bGVTYXRpc2ZpZWQgPSBjaGVja0VsZW1lbnRSdWxlKHJ1bGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJkYXRhTGF5ZXJcIjpcbiAgICAgICAgcnVsZVNhdGlzZmllZCA9IGNoZWNrRGF0YUxheWVyUnVsZShydWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwidXJsXCI6XG4gICAgICAgIHJ1bGVTYXRpc2ZpZWQgPSBjaGVja1VybFJ1bGUocnVsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgIHJ1bGVTYXRpc2ZpZWQgPSBjaGVja0Z1bmN0aW9uUnVsZShydWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsb2dnZXIubG9nKGBObyBzdWNoIHJ1bGUgdHlwZTogJHt0eXBlfWApO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoY2hhaW4pIHtcbiAgICAgIHN3aXRjaCAoY2hhaW5fY29uZGl0aW9uKSB7XG4gICAgICAgIGNhc2UgXCJhbmRcIjpcbiAgICAgICAgICBydWxlU2F0aXNmaWVkID0gcnVsZVNhdGlzZmllZCAmJiB0aGlzLmNoZWNrUnVsZShjaGFpbik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJvclwiOlxuICAgICAgICAgIHJ1bGVTYXRpc2ZpZWQgPSBydWxlU2F0aXNmaWVkIHx8IHRoaXMuY2hlY2tSdWxlKGNoYWluKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInhvclwiOlxuICAgICAgICAgIHJ1bGVTYXRpc2ZpZWQgPSBydWxlU2F0aXNmaWVkICE9IHRoaXMuY2hlY2tSdWxlKGNoYWluKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBsb2dnZXIubG9nKFwiTm8gc3VjaCBjaGFpbiBjb25kaXRpb25cIik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBydWxlU2F0aXNmaWVkO1xuICB9XG59XG4iLCJpbXBvcnQgYXBwbHlUcmVhdG1lbnRzIGZyb20gXCIuLi9OZXh0ZGF5QXBwbHlUcmVhdG1lbnRzL2luZGV4XCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmltcG9ydCBNb25pdG9yIGZyb20gXCIuLi9OZXh0ZGF5TW9uaXRvci9pbmRleFwiO1xuaW1wb3J0IFRyZWF0bWVudFJlcG9zaXRvcnkgZnJvbSBcIi4uL05leHRkYXlUcmVhdG1lbnRSZXBvc2l0b3J5L2luZGV4XCI7XG5pbXBvcnQgUnVsZUVuZ2luZSBmcm9tIFwiLi4vTmV4dGRheVJ1bGVFbmdpbmVcIjtcbmltcG9ydCB7Q09PS0lFX05BTUUsIE1PQklMRV9NRURJQV9RVUVSWSwgU1BMSVRfUkFUSU8sIExPQ0FMX1NUT1JBR0VfS0VZU30gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHtcbiAgZXh0cmFjdENvb2tpZUlkZW50aWZpZXIsXG4gIGluaXRpYXRlU2Vzc2lvblN0b3JhZ2VzLFxuICBpbmplY3RTdHlsZVNoZWV0LFxuICByZW1vdmVEb2N1bWVudEhpZGUsXG4gIHBhcnNlQ29va2llLFxuICBwcmVwYXJlQWN0aW9ucyxcbiAgYXZvaWRQcm90b3R5cGVQb2xsdXRpb24sXG59IGZyb20gXCIuLi91dGlsc1wiO1xuXG4oYXN5bmMgZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoKTtcblxuICBsb2dnZXIuaW5mbyhcIk5leHRkYXkgaW5pdGlhdGVkXCIpO1xuICBjb25zdCBpc01vYmlsZSA9IHdpbmRvdy5tYXRjaE1lZGlhKE1PQklMRV9NRURJQV9RVUVSWSkubWF0Y2hlcztcbiAgY29uc3QgT0JTRVJWRVJfQ09ORklHID0ge3N1YnRyZWU6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZX07XG5cbiAgYXZvaWRQcm90b3R5cGVQb2xsdXRpb24oKTtcbiAgaW5qZWN0U3R5bGVTaGVldCgpO1xuXG4gIGNvbnN0IGRvY3VtZW50SGlkZXIgPSAoKSA9PiB7XG4gICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJuZXh0RGF5LWhpZGVcIikpIHJldHVybjtcbiAgICBjb25zdCBoaWRlU3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgaGlkZVN0eWxlLnRleHRDb250ZW50ID0gXCIubmV4dERheS1oaWRlIHsgb3BhY2l0eTogMCAhaW1wb3J0YW50IH1cIjtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoaGlkZVN0eWxlKTtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm5leHREYXktaGlkZVwiKTtcbiAgfTtcblxuICBpbml0aWF0ZVNlc3Npb25TdG9yYWdlcygpO1xuICBjb25zdCB0cmVhdG1lbnRzUHJvbWlzZSA9IFRyZWF0bWVudFJlcG9zaXRvcnkuZ2V0VHJlYXRtZW50cygpO1xuICBkb2N1bWVudEhpZGVyKCk7XG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIHJlbW92ZURvY3VtZW50SGlkZSgpO1xuICB9LCAyMDAwKTtcblxuICBjb25zdCBlbmdhZ2VUcmVhdG1lbnQgPSBhc3luYyAodHJlYXRtZW50LCBhcHBsaWVkVHJlYXRtZW50SWRzKSA9PiB7XG4gICAgY29uc3Qge2FjdGlvbnMsIGJhc2VSdWxlU2V0LCBkZXZpY2UsIHN1YlZhcmlhbnRSdWxlU2V0fSA9IHRyZWF0bWVudDtcbiAgICBpZiAoZGV2aWNlID09PSBcIm1vYmlsZVwiICYmICFpc01vYmlsZSkge1xuICAgICAgbG9nZ2VyLmxvZyhcIlRyZWF0bWVudCBkZXZpY2UgJ21vYmlsZScgbWlzbWF0Y2hcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChkZXZpY2UgPT09IFwiZGVza3RvcFwiICYmIGlzTW9iaWxlKSB7XG4gICAgICBsb2dnZXIubG9nKFwiVHJlYXRtZW50IGRldmljZSAnZGVza3RvcCcgbWlzbWF0Y2hcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJ1bGVFbmdpbmUgPSBuZXcgUnVsZUVuZ2luZSh7YmFzZVJ1bGVTZXQsIHN1YlZhcmlhbnRSdWxlU2V0fSk7XG4gICAgbG9nZ2VyLmxvZyhcIlN0YXJ0aW5nIGJhc2UgcnVsZSBzZXQgY2hlY2sgZm9yIHRyZWF0bWVudDogXCIgKyB0cmVhdG1lbnQuaWQpO1xuICAgIGlmICghYmFzZVJ1bGVTZXQgfHwgcnVsZUVuZ2luZS5jaGVja1J1bGVzKCkpIHtcbiAgICAgIGlmICghc3ViVmFyaWFudFJ1bGVTZXQpIHtcbiAgICAgICAgYXBwbHlUcmVhdG1lbnRzKGFjdGlvbnMpO1xuICAgICAgICBhcHBsaWVkVHJlYXRtZW50SWRzW3RyZWF0bWVudC5pZF0gPSB7c3ViVmFyaWFudElkOiBudWxsLCBhY3Rpb25zfTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmxvZyhcIlN0YXJ0aW5nIHN1YiB2YXJpYW50IHJ1bGUgc2V0IGNoZWNrIGZvciB0cmVhdG1lbnQ6IFwiICsgdHJlYXRtZW50LmlkKTtcbiAgICAgIGNvbnN0IHN1YlZhcmlhbnRJZCA9IHJ1bGVFbmdpbmUuY2hlY2tTdWJWYXJpYW50UnVsZXMoKTtcbiAgICAgIGxldCBwcmVwYXJlZCA9IGFjdGlvbnM7XG4gICAgICBpZiAoc3ViVmFyaWFudElkKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJBcHBseWluZyBzdWIgdmFyaWFudCB3aXRoIGlkOiBcIiwgc3ViVmFyaWFudElkKTtcbiAgICAgICAgcHJlcGFyZWQgPSBwcmVwYXJlQWN0aW9ucyhhY3Rpb25zLCBzdWJWYXJpYW50SWQpO1xuICAgICAgfSBlbHNlIGxvZ2dlci5sb2coXCJBcHBseWluZyB0cmVhdG1lbnQgd2l0aCBkZWZhdWx0IHZhbHVlc1wiKTtcbiAgICAgIGFwcGx5VHJlYXRtZW50cyhwcmVwYXJlZCk7XG4gICAgICBhcHBsaWVkVHJlYXRtZW50SWRzW3RyZWF0bWVudC5pZF0gPSB7c3ViVmFyaWFudElkLCBhY3Rpb25zOiBwcmVwYXJlZH07XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxvZ2dlci5sb2coXCJSdWxlIGNoZWNrIGZhaWxlZCBmb3IgdHJlYXRtZW50OiBcIiwgdHJlYXRtZW50LmlkKTtcbiAgfTtcblxuICAvLyBUZW1wb3JhcnkgY29kZSBibG9jayB0byB0cmFjayBjb3Vwb24gYXBwbGljYWJsZSBiYXNrZXQgdG90YWwgcHJpY2VcbiAgLy8gVE9ETzogUmVtb3ZlIG9uY2UgdGhlIGluZm8gY2FuIGJlIG9idGFpbmVkIHZpYSBMb29rdXAgQVBJXG4gIGNvbnN0IGNvbGxlY3RDQUJhc2tldFByaWNlID0gKCkgPT4ge1xuICAgIGNvbnN0IHtDT1VQT05fQVBQTElDQUJMRV9CQVNLRVRfUFJJQ0V9ID0gTE9DQUxfU1RPUkFHRV9LRVlTO1xuICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmNsdWRlcyhcIi9zaXBhcmlzLWxpc3Rlc2kuaHRtbFwiKSkge1xuICAgICAgY29uc3QgcHJpY2VFbGVtZW50cyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wcmljZVwiKSk7XG4gICAgICBwcmljZUVsZW1lbnRzLnB1c2goLi4uQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm5ldy1wcmljZVwiKSkpO1xuICAgICAgaWYgKCFwcmljZUVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICBsb2dnZXIubG9nKFwiUHJpY2UgZWxlbWVudHMgbm90IGZvdW5kXCIpO1xuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oQ09VUE9OX0FQUExJQ0FCTEVfQkFTS0VUX1BSSUNFLCAwKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmxvZyhcIlByaWNlIGVsZW1lbnRzOiBcIiwgcHJpY2VFbGVtZW50cyk7XG4gICAgICBjb25zdCBjb3Vwb25BcHBsaWNhYmxlVG90YWxQcmljZSA9IHByaWNlRWxlbWVudHMucmVkdWNlKChyZXR1cm5WYWwsIGVsZW0pID0+IHtcbiAgICAgICAgcmV0dXJuVmFsICs9IHBhcnNlSW50KGVsZW0udGV4dENvbnRlbnQucmVwbGFjZShcIlRMXCIsIFwiXCIpLnJlcGxhY2UoXCIuXCIsIFwiXCIpKTtcbiAgICAgICAgcmV0dXJuIHJldHVyblZhbDtcbiAgICAgIH0sIDApO1xuICAgICAgbG9nZ2VyLmxvZyhcIkNvdXBvbiBhcHBsaWNhYmxlIHRvdGFsIHByaWNlOiBcIiwgY291cG9uQXBwbGljYWJsZVRvdGFsUHJpY2UpO1xuICAgICAgaWYgKGNvdXBvbkFwcGxpY2FibGVUb3RhbFByaWNlID49IDApIHtcbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKFxuICAgICAgICAgICAgQ09VUE9OX0FQUExJQ0FCTEVfQkFTS0VUX1BSSUNFLCBjb3Vwb25BcHBsaWNhYmxlVG90YWxQcmljZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmNsdWRlcyhcIi9zaXBhcmlzLW96ZXRpLmh0bWxcIikpIHtcbiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShDT1VQT05fQVBQTElDQUJMRV9CQVNLRVRfUFJJQ0UsIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjYUJhc2tldFByaWNlID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKENPVVBPTl9BUFBMSUNBQkxFX0JBU0tFVF9QUklDRSk7XG4gICAgICBpZiAoY2FCYXNrZXRQcmljZSA9PT0gbnVsbCkge1xuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oQ09VUE9OX0FQUExJQ0FCTEVfQkFTS0VUX1BSSUNFLCAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIC8vIEVuZCBvZiB0ZW1wb3JhcnkgY29kZSBibG9ja1xuXG4gIHRyeSB7XG4gICAgLy8gVGVtcG9yYXJ5IGNvZGUgYmxvY2sgdG8gdHJhY2sgY291cG9uIGFwcGxpY2FibGUgYmFza2V0IHRvdGFsIHByaWNlXG4gICAgY29sbGVjdENBQmFza2V0UHJpY2UoKTtcbiAgICBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMoXCIvc2lwYXJpcy1saXN0ZXNpLmh0bWxcIikpIHtcbiAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJNdXRhdGlvbiBvYnNlcnZlZCwgY2FsbGluZyBjb2xsZWN0Q0FCYXNrZXRQcmljZVwiKTtcbiAgICAgICAgY29sbGVjdENBQmFza2V0UHJpY2UoKTtcbiAgICAgIH0pO1xuICAgICAgY29uc3QgYmFza2V0Q2hlY2tvdXRGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjaGVja291dEZvcm1cIik7XG4gICAgICBpZiAoYmFza2V0Q2hlY2tvdXRGb3JtKSBvYnNlcnZlci5vYnNlcnZlKGJhc2tldENoZWNrb3V0Rm9ybSwgT0JTRVJWRVJfQ09ORklHKTtcbiAgICB9XG4gICAgLy8gRW5kIG9mIHRlbXBvcmFyeSBjb2RlIGJsb2NrXG5cbiAgICBjb25zdCBpZGVudGlmaWVyID0gZXh0cmFjdENvb2tpZUlkZW50aWZpZXIoZG9jdW1lbnQuY29va2llLCBDT09LSUVfTkFNRSk7XG4gICAgbG9nZ2VyLmxvZyhcIkZvdW5kIGNvb2tpZSBpZGVudGlmaWVyOiBcIiwgaWRlbnRpZmllcik7XG5cbiAgICBjb25zdCBbdHJlYXRtZW50cywgY29va2llUGN0XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIHRyZWF0bWVudHNQcm9taXNlLFxuICAgICAgcGFyc2VDb29raWUoaWRlbnRpZmllciksXG4gICAgXSk7XG4gICAgbG9nZ2VyLmxvZyhcIkZvdW5kIHRyZWF0bWVudHM6IFwiLCB0cmVhdG1lbnRzKTtcbiAgICBsb2dnZXIubG9nKFwiRm91bmQgY29va2llIHBlcmNlbnRhZ2U6IFwiLCBjb29raWVQY3QpO1xuICAgIGxvZ2dlci5sb2coXCJTcGxpdF9yYXRpbzogXCIsIFNQTElUX1JBVElPKTtcbiAgICBsb2dnZXIubG9nKFwiY29va2llUGN0IDwgU1BMSVRfUkFUSU9cIiwgY29va2llUGN0IDwgU1BMSVRfUkFUSU8pO1xuICAgIGlmIChjb29raWVQY3QgPCBTUExJVF9SQVRJTykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29udHJvbCBncm91cDogbm8gdHJlYXRtZW50cyBhcHBsaWVkXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHRyZWF0bWVudFJlcG9zaXRvcnkgPSBuZXcgVHJlYXRtZW50UmVwb3NpdG9yeSh7XG4gICAgICB0cmVhdG1lbnRzLFxuICAgICAgcmVxdWVzdFVSTDogd2luZG93LmxvY2F0aW9uLmhyZWYsXG4gICAgICBjb29raWVQY3QsXG4gICAgfSk7XG4gICAgY29uc3QgbWF0Y2hlZFRyZWF0bWVudHMgPSB0cmVhdG1lbnRSZXBvc2l0b3J5LmdldE1hdGNoZWRUcmVhdG1lbnRzKCk7XG4gICAgaWYgKCFtYXRjaGVkVHJlYXRtZW50cy5sZW5ndGgpIHtcbiAgICAgIGxvZ2dlci5sb2coXCJObyB0cmVhdG1lbnRzIG1hdGNoZWQsIHJldHVybmluZyB3aXRob3V0IGZ1cnRoZXIgYWN0aW9uXCIpO1xuICAgICAgcmVtb3ZlRG9jdW1lbnRIaWRlKCk7XG4gICAgICBNb25pdG9yLnNlbmRFbXB0eUxvZyhcIk5vIHRyZWF0bWVudHMgbWF0Y2hlZFwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYXBwbGllZFRyZWF0bWVudElkcyA9IHt9O1xuICAgIGNvbnN0IHJlQXBwbHlUcmVhdG1lbnRzTWFwID0ge307XG4gICAgZm9yIChjb25zdCB0cmVhdG1lbnQgb2YgbWF0Y2hlZFRyZWF0bWVudHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHtpZCwgcmVhcHBseV9ldmVudCA9IG51bGx9ID0gdHJlYXRtZW50O1xuICAgICAgICBpZiAocmVhcHBseV9ldmVudCkge1xuICAgICAgICAgIGxvZ2dlci5sb2coYFJlYXBwbHkgZXZlbnQgJyR7cmVhcHBseV9ldmVudH0nIGZvdW5kIGZvciB0cmVhdG1lbnQ6ICR7aWR9YCk7XG4gICAgICAgICAgY29uc3QgcHJldmlvdXNWYWx1ZSA9IHJlQXBwbHlUcmVhdG1lbnRzTWFwW3JlYXBwbHlfZXZlbnRdID9cbiAgICAgICAgICAgIHJlQXBwbHlUcmVhdG1lbnRzTWFwW3JlYXBwbHlfZXZlbnRdIDogW107XG4gICAgICAgICAgcmVBcHBseVRyZWF0bWVudHNNYXBbcmVhcHBseV9ldmVudF0gPSBbLi4ucHJldmlvdXNWYWx1ZSwgaWRdO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IGVuZ2FnZVRyZWF0bWVudCh0cmVhdG1lbnQsIGFwcGxpZWRUcmVhdG1lbnRJZHMpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXCJFcnJvciBleGVjdXRpbmcgcnVsZXNcIiwgZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbG9nZ2VyLmluZm8oXCJUcmVhdG1lbnRzIGFwcGxpZWRcIik7XG4gICAgcmVtb3ZlRG9jdW1lbnRIaWRlKCk7XG5cbiAgICAvLyBJbml0aWFsaXplIG1vbml0b3Igd2l0aCBhcHBsaWVkIHRyZWF0bWVudHNcbiAgICBsb2dnZXIubG9nKFwiQXBwbGllZCB0cmVhdG1lbnRzOiBcIiwgYXBwbGllZFRyZWF0bWVudElkcyk7XG4gICAgY29uc3QgbW9uaXRvciA9IG5ldyBNb25pdG9yKGFwcGxpZWRUcmVhdG1lbnRJZHMpO1xuICAgIG1vbml0b3Iuc2VuZExvZ3MoKTtcblxuICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIG1vbml0b3IudXBkYXRlTGF0ZXN0Q2hhbmdlcyhhcHBsaWVkVHJlYXRtZW50SWRzKTtcbiAgICB9LCAxMDAwKTtcblxuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHJlQXBwbHlUcmVhdG1lbnRzTWFwKSkge1xuICAgICAgY29uc3QgdHJlYXRtZW50SWRzID0gcmVBcHBseVRyZWF0bWVudHNNYXBba2V5XTtcbiAgICAgIGNvbnN0IHJlQXBwbHlUcmVhdG1lbnRzID0gbWF0Y2hlZFRyZWF0bWVudHMuZmlsdGVyKCh0KSA9PiB0cmVhdG1lbnRJZHMuaW5jbHVkZXModC5pZCkpO1xuICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSBcImluZmluaXRlX3Njcm9sbFwiOiB7XG4gICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRyZWF0bWVudCBvZiByZUFwcGx5VHJlYXRtZW50cykge1xuICAgICAgICAgICAgICBsb2dnZXIubG9nKGBSZXRyeWluZyB0cmVhdG1lbnQgJHt0cmVhdG1lbnQuaWR9IGZyb20gaW5maW5pdGVfc2Nyb2xsYCk7XG4gICAgICAgICAgICAgIGVuZ2FnZVRyZWF0bWVudCh0cmVhdG1lbnQsIGFwcGxpZWRUcmVhdG1lbnRJZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuYm9keSk7XG4gICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInRpbWVvdXRcIjoge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCB0cmVhdG1lbnQgb2YgcmVBcHBseVRyZWF0bWVudHMpIHtcbiAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhgUmV0cnlpbmcgdHJlYXRtZW50ICR7dHJlYXRtZW50LmlkfSBmcm9tIHRpbWVvdXRgKTtcbiAgICAgICAgICAgICAgZW5nYWdlVHJlYXRtZW50KHRyZWF0bWVudCwgYXBwbGllZFRyZWF0bWVudElkcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZWxlbWVudF9jaGFuZ2VcIjoge1xuICAgICAgICAgIGZvciAoY29uc3QgdHJlYXRtZW50IG9mIHJlQXBwbHlUcmVhdG1lbnRzKSB7XG4gICAgICAgICAgICBjb25zdCByZWFwcGx5U2VsZWN0b3JMaXN0ID0gQXJyYXkuaXNBcnJheSh0cmVhdG1lbnQucmVhcHBseV9zZWxlY3RvcikgP1xuICAgICAgICAgICAgdHJlYXRtZW50LnJlYXBwbHlfc2VsZWN0b3IgOiBbdHJlYXRtZW50LnJlYXBwbHlfc2VsZWN0b3JdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBzZWxlY3RvciBvZiByZWFwcGx5U2VsZWN0b3JMaXN0KSB7XG4gICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhgUmV0cnlpbmcgdHJlYXRtZW50ICR7dHJlYXRtZW50LmlkfSBmcm9tIGVsZW1lbnRfY2hhbmdlYCk7XG4gICAgICAgICAgICAgICAgICBlbmdhZ2VUcmVhdG1lbnQodHJlYXRtZW50LCBhcHBsaWVkVHJlYXRtZW50SWRzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQsIE9CU0VSVkVSX0NPTkZJRyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBsb2dnZXIubG9nKFwiUmVhcHBseSBldmVudCBub3QgZm91bmQ6IFwiLCBrZXkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmVtb3ZlRG9jdW1lbnRIaWRlKCk7XG4gICAgY29uc29sZS53YXJuKFwiTmV4dGRheSBlcnJvcjogXCIsIGVyci5tZXNzYWdlKTtcbiAgICBNb25pdG9yLnNlbmRFbXB0eUxvZyhgRXJyb3Igd2hlbiBhcHBseWluZyB0cmVhdG1lbnRzOiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG59KSgpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhcHBseVRyZWF0bWVudHMiLCJ0cmVhdG1lbnRzIiwib2JzZXJ2ZXIiLCJsb2dnZXIiLCJMb2dnZXIiLCJQT1BVUF9ESVNQTEFZX0ZMQUciLCJTRVNTSU9OX1NUT1JBR0VfS0VZUyIsInRyYW5zZm9ybWVyIiwidHJlYXRtZW50IiwibG9nIiwiSlNPTiIsInN0cmluZ2lmeSIsIm9wZXJhdG9yIiwidHlwZSIsImFwcGx5RXZlbnQiLCJjb250ZW50U2VsZWN0b3IiLCJzZWxlY3RvciIsInNlbGVjdG9yRmFsbGJhY2siLCJtZENvbmRpdGlvbiIsIm1vdmVfc2VsZWN0b3JfMSIsIm1vdmVfc2VsZWN0b3JfMiIsInJlcGxhY2VGbiIsInZhbHVlIiwiZWxlbWVudCIsIiQiLCJtYyIsIndpbmRvdyIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwibGVuZ3RoIiwicmVwbGFjZUZuRXhlY3V0b3IiLCJpbmNsdWRlcyIsInJlcGxhY2VGdW5jdGlvbiIsImV2YWwiLCJyZXBsYWNlIiwiQXJyYXkiLCJpc0FycmF5IiwiZm9yRWFjaCIsInZhbCIsImkiLCJjdXJyZW50UmVwbGFjZUZuIiwicmVtb3ZlIiwiU3RyaW5nIiwiYmVmb3JlIiwiYWZ0ZXIiLCJwYXJzZUludCIsInNlc3Npb25TdG9yYWdlIiwiZ2V0SXRlbSIsImNyZWF0ZVBvcHVwIiwibW9iaWxlIiwiTU9CSUxFX01FRElBX1FVRVJZIiwiZXZlbnQiLCJleGl0U2Nyb2xsTGlzdGVuZXIiLCJkaXNwbGF5UG9wdXAiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmNlIiwic2V0VGltZW91dCIsInRpbWVvdXQiLCJxdWVyeVNlbGVjdG9yIiwidGV4dENvbnRlbnQiLCJlbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzdHlsZUNoYW5nZXNNYXAiLCJwYXJzZSIsInN0eWxlQXBwbGljYXRvciIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJlIiwiaGFuZGxlVGFiQ2hhbmdlIiwiYXR0cmlidXRlIiwiY3NzIiwidHJpbSIsInByb3BlcnR5Iiwic3BsaXQiLCJwcm9wZXJ0eVZhbHVlIiwicmVwbGFjZUFsbCIsIm4xIiwibjIiLCJzd2FwTm9kZXMiLCJhcHBlbmQiLCJzb3VyY2UiLCJkZXN0aW5hdGlvbiIsInByZXBlbmQiLCJ0aXRsZXMiLCJvcmlnaW5hbFRpdGxlIiwidGl0bGUiLCJoaWRkZW4iLCJkZWxheSIsImhhbmRsZVBvcHVwQ2xpY2siLCJpZCIsInRhcmdldCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZXRJdGVtIiwicVBvcHVwIiwic3R5bGUiLCJnZXRFbGVtZW50QnlJZCIsInBvcHVwV3JhcHBlciIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJwb3B1cENsb3NlQnV0dG9uIiwiaW5uZXJUZXh0Iiwib25jbGljayIsImNvbnRlbnRzIiwiZnJvbSIsInNoaWZ0Iiwic3JjIiwidGVtcGxhdGUiLCJpbm5lckhUTUwiLCJwb3B1cCIsImNvbnRlbnQiLCJmaXJzdENoaWxkIiwiYXBwZW5kQ2hpbGQiLCJib2R5IiwiaTEiLCJpMiIsInAxIiwicGFyZW50Tm9kZSIsInAyIiwiaXNFcXVhbE5vZGUiLCJjaGlsZHJlbiIsImluc2VydEJlZm9yZSIsInRyZWF0bWVudEFwcGxpY2F0b3IiLCJ0cmVhdG1lbnRMaXN0IiwialF1ZXJ5IiwiY2hlY2tEYXRhTGF5ZXJSdWxlIiwicnVsZSIsImNvbmRpdGlvbiIsInJ1bnRpbWVWYWx1ZSIsImRhdGFMYXllckZpbmRlciIsImNvbmRpdGlvbkNoZWNrZXIiLCJrZXkiLCJkYXRhTGF5ZXIiLCJvYmoiLCJPYmplY3QiLCJrZXlzIiwiQ09PS0lFX05BTUUiLCJUUkVBVE1FTlRTX0xPQ0FUSU9OIiwiU1RZTEVTSEVFVF9MT0NBVElPTiIsIkxPR19BUElfVVJMIiwiU1BMSVRfUkFUSU8iLCJUUkVBVE1FTlRTX0RVUkFUSU9OIiwiU0VTU0lPTl9JRCIsIlBBR0VfVklFV1MiLCJTRVNTSU9OX1RJTUVTVEFNUCIsIkxPQ0FMX1NUT1JBR0VfS0VZUyIsIlRSRUFUTUVOVFMiLCJDT1VQT05fQVBQTElDQUJMRV9CQVNLRVRfUFJJQ0UiLCJvcmlnaW4iLCJERUJVRyIsInRoaXMiLCJhcmdzIiwiY29uc29sZSIsImluZm8iLCJlcnJvciIsImNyeXB0byIsInJhbmRvbVVVSURGYWxsYmFjayIsInJlbW92ZURvY3VtZW50SGlkZSIsImZldGNoVHJlYXRtZW50cyIsImZldGNoIiwianNvbiIsImV4dHJhY3RDb29raWVJZGVudGlmaWVyIiwiY29va2llU3RyaW5nIiwiY29va2llTmFtZSIsImlkZW50aWZpZXIiLCJtYXAiLCJ2IiwicmVkdWNlIiwiYWNjIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicGFyc2VDb29raWUiLCJjb29raWVFbmNvZGVkIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJzdWJ0bGUiLCJkaWdlc3QiLCJoYXNoQnVmZmVyIiwiaGFzaEFycmF5IiwiVWludDhBcnJheSIsImNvb2tpZUhhc2giLCJiIiwidG9TdHJpbmciLCJwYWRTdGFydCIsImpvaW4iLCJoYXNoTnVtYmVyIiwiY2FsbEJhY2siLCJsYXN0U2Nyb2xsVG9wIiwic2Nyb2xsVG9wIiwiZXhpdFNjcm9sbEludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiYXZvaWRQcm90b3R5cGVQb2xsdXRpb24iLCJwcm90b3R5cGUiLCJGdW5jdGlvbiIsIk51bWJlciIsIkJvb2xlYW4iLCJmcmVlemUiLCJlbnRyaWVzIiwiaW5qZWN0U3R5bGVTaGVldCIsInN0eWxlU2hlZXQiLCJyZWwiLCJocmVmIiwiaGVhZCIsInByZXBhcmVBY3Rpb25zIiwiYWN0aW9uc1RvUHJlcGFyZSIsInN1YlZhcmlhbnRJZCIsImFjdGlvbnMiLCJhY3Rpb24iLCJzdWJWYXJpYW50cyIsInN1YlZhcmlhbnQiLCJpbml0aWF0ZVNlc3Npb25TdG9yYWdlcyIsInBhZ2VWaWV3cyIsInBvcHVwRGlzcGxheUZsYWciLCJzZXNzaW9uSWQiLCJzZXNzaW9uVGltZXN0YW1wIiwicmFuZG9tVVVJRCIsIkRhdGUiLCJub3ciLCJydW5UaW1lVmFsdWUiLCJtaW4iLCJtYXgiLCJjIiwiZ2V0UmFuZG9tVmFsdWVzIiwiY29tcGFyZU9iamVjdHMiLCJvYmoxIiwib2JqMiIsImtleXNBIiwia2V5c0IiLCJyZXN1bHQiLCJtcyIsIlByb21pc2UiLCJyZXMiLCJydW50aW1lIiwidW5kZWZpbmVkIiwiT3AiLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsIiRTeW1ib2wiLCJTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsIml0ZXJhdG9yIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJlcnIiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJzZWxmIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsImNyZWF0ZSIsImNvbnRleHQiLCJDb250ZXh0IiwiX2ludm9rZSIsInN0YXRlIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIm1ldGhvZCIsImFyZyIsIkdlblN0YXRlRXhlY3V0aW5nIiwiRXJyb3IiLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwiZG9uZSIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJtYWtlSW52b2tlTWV0aG9kIiwiZm4iLCJjYWxsIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiX19hd2FpdCIsInRoZW4iLCJ1bndyYXBwZWQiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIlR5cGVFcnJvciIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInB1c2giLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImlzTmFOIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsImNvbnN0cnVjdG9yIiwibmFtZSIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJpdGVyIiwib2JqZWN0IiwicmV2ZXJzZSIsInBvcCIsInNraXBUZW1wUmVzZXQiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsImdsb2JhbFRoaXMiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImxlbiIsImFycjIiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJfbmV4dCIsIl90aHJvdyIsIl9hc3luY1RvR2VuZXJhdG9yIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfc2xpY2VkVG9BcnJheSIsIl9pIiwiX3MiLCJfZSIsIl9hcnIiLCJfbiIsIl9kIiwidW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfdHlwZW9mIiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwibyIsIm1pbkxlbiIsIm4iLCJ0ZXN0IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJnZXQiLCJwcm9wIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyYXlMaWtlVG9BcnJheSIsIk1vbml0b3IiLCJhcHBsaWVkVHJlYXRtZW50SWRzIiwibGF0ZXN0Q2hhbmdlcyIsInZpZXdJZCIsImhlYWRlcnMiLCJpbml0aWFsaXplRXhpdEV2ZW50TGlzdGVuZXIiLCJxdWV1ZWQiLCJuYXZpZ2F0b3IiLCJzZW5kQmVhY29uIiwicGFja2FnZUxvZ0RhdGEiLCJjaGFuZ2VzIiwiY29tcGFyZVRvIiwibWVzc2FnZSIsImN1cnJlbnRVUkwiLCJVUkwiLCJsb2NhdGlvbiIsInUiLCJob3N0bmFtZSIsInIiLCJyZWZlcnJlciIsInciLCJpbm5lcldpZHRoIiwiY29va2llIiwid2RsIiwidCIsInZJZCIsInNyIiwibSIsIkJsb2IiLCJsb2dEYXRhIiwicGFja2FnZVVwZGF0ZUxvZ0RhdGEiLCJjYXB0dXJlIiwicGFja2FnZUVtcHR5TG9nRGF0YSIsIlRyZWF0bWVudFJlcG9zaXRvcnkiLCJjb29raWVQY3QiLCJyZXF1ZXN0VVJMIiwicGF0aCIsInNlYXJjaCIsInBhdGhuYW1lIiwidXNlclNlZ21lbnQiLCJnZXRVc2VyU2VnbWVudCIsInNlZ21lbnRNYXRjaGVkVHJlYXRtZW50cyIsImZpbHRlciIsImFwcGx5X29uX3VzZXJfc2VnbWVudCIsInRyZWF0bWVudHNPYmoiLCJsb2NhbFN0b3JhZ2UiLCJ0aW1lc3RhbXAiLCJ0cmVhdG1lbnRXaXRoVGltZXN0YW1wIiwiZ2V0Q291bnRlciIsImNvdW50ZXIiLCJSdWxlRW5naW5lIiwiYmFzZVJ1bGVTZXQiLCJzdWJWYXJpYW50UnVsZVNldCIsImNhbGxiYWNrIiwiY2hlY2tSdWxlIiwiY2hhaW4iLCJjaGFpbl9jb25kaXRpb24iLCJydWxlU2F0aXNmaWVkIiwiZHVyYXRpb24iLCJnZXRTZXNzaW9uVGltZXN0YW1wIiwiZHVyYXRpb25IYW5kbGVyIiwiY2hlY2tTZXNzaW9uUnVsZSIsInBhZ2VWaWV3SGFuZGxlciIsImNhQmFza2V0UHJpY2UiLCJjYUJhc2tldFByaWNlSGFuZGxlciIsImNoZWNrQ291bnRlclJ1bGUiLCJzZWxlY3RvckFsbCIsIm1haW5TZWxlY3RvciIsInRlbXBWYWwiLCJyZXR1cm5WYWwiLCJlbGVtIiwiY2hlY2tFbGVtZW50UnVsZSIsImNoZWNrVXJsUnVsZSIsInJ1bGVGdW5jdGlvbiIsImNoZWNrRnVuY3Rpb25SdWxlIiwiaXNNb2JpbGUiLCJPQlNFUlZFUl9DT05GSUciLCJzdWJ0cmVlIiwiY2hpbGRMaXN0IiwiZG9jdW1lbnRIaWRlciIsImNvbnRhaW5zIiwiaGlkZVN0eWxlIiwidHJlYXRtZW50c1Byb21pc2UiLCJlbmdhZ2VUcmVhdG1lbnQiLCJkZXZpY2UiLCJydWxlRW5naW5lIiwiY2hlY2tSdWxlcyIsImNoZWNrU3ViVmFyaWFudFJ1bGVzIiwicHJlcGFyZWQiLCJjb2xsZWN0Q0FCYXNrZXRQcmljZSIsInByaWNlRWxlbWVudHMiLCJjb3Vwb25BcHBsaWNhYmxlVG90YWxQcmljZSIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJiYXNrZXRDaGVja291dEZvcm0iLCJvYnNlcnZlIiwiYWxsIiwidHJlYXRtZW50UmVwb3NpdG9yeSIsIm1hdGNoZWRUcmVhdG1lbnRzIiwiZ2V0TWF0Y2hlZFRyZWF0bWVudHMiLCJyZUFwcGx5VHJlYXRtZW50c01hcCIsInJlYXBwbHlfZXZlbnQiLCJwcmV2aW91c1ZhbHVlIiwibW9uaXRvciIsInNlbmRMb2dzIiwidXBkYXRlTGF0ZXN0Q2hhbmdlcyIsInRyZWF0bWVudElkcyIsInJlQXBwbHlUcmVhdG1lbnRzIiwiUmVzaXplT2JzZXJ2ZXIiLCJyZWFwcGx5X3NlbGVjdG9yIiwid2FybiJdLCJzb3VyY2VSb290IjoiIn0=
