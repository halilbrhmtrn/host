!function(){var e={757:function(e,t,n){e.exports=n(666)},666:function(e){var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof h?t:h,a=Object.create(o.prototype),i=new O(r||[]);return a._invoke=function(e,t,n){var r=d;return function(o,a){if(r===p)throw new Error("Generator is already running");if(r===v){if("throw"===o)throw a;return T()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var s=L(i,n);if(s){if(s===g)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=v,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var c=l(e,t,n);if("normal"===c.type){if(r=n.done?v:f,c.arg===g)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=v,n.method="throw",n.arg=c.arg)}}}(e,n,i),a}function l(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d="suspendedStart",f="suspendedYield",p="executing",v="completed",g={};function h(){}function m(){}function y(){}var w={};c(w,a,(function(){return this}));var b=Object.getPrototypeOf,k=b&&b(b(A([])));k&&k!==n&&r.call(k,a)&&(w=k);var x=y.prototype=h.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function I(e,t){function n(o,a,i,s){var c=l(e[o],e,a);if("throw"!==c.type){var u=c.arg,d=u.value;return d&&"object"==typeof d&&r.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,i,s)}),(function(e){n("throw",e,i,s)})):t.resolve(d).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,s)}))}s(c.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function L(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,L(e,n),"throw"===n.method))return g;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var o=l(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,g):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function P(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function A(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:T}}function T(){return{value:t,done:!0}}return m.prototype=y,c(x,"constructor",y),c(y,"constructor",m),m.displayName=c(y,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,c(e,s,"GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},S(I.prototype),c(I.prototype,i,(function(){return this})),e.AsyncIterator=I,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new I(u(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(x),c(x,s,"Generator"),c(x,a,(function(){return this})),c(x,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=A,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(P),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return s.type="throw",s.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],s=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),P(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;P(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:A(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),g}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},function(){"use strict";var e={};function t(e,t,n,r,o,a,i){try{var s=e[a](i),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,o)}function r(e){return function(){var n=this,r=arguments;return new Promise((function(o,a){var i=e.apply(n,r);function s(e){t(i,o,a,s,c,"next",e)}function c(e){t(i,o,a,s,c,"throw",e)}s(void 0)}))}}n.r(e),n.d(e,{m1:function(){return ce},jy:function(){return re},gw:function(){return de},o2:function(){return ne},Qz:function(){return te},WT:function(){return ee},mS:function(){return X},Z$:function(){return ve},K0:function(){return ue},xC:function(){return le},ec:function(){return ge},gG:function(){return he},vL:function(){return se},Z2:function(){return ae},$W:function(){return pe},cm:function(){return ie},dZ:function(){return Z},lC:function(){return fe},ck:function(){return oe}});var o=n(757),a=n.n(o);function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t&&c(e.prototype,t),n&&c(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var l=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";if(!e)return"";var r=e.indexOf(t);if(r<0)return e;for(;e.indexOf(t)>=0;){var o=e.indexOf(t);e=(o>0?e.substring(0,o):"")+n+e.substring(o+t.length)}return e},d=window.location.href.includes("staging.vivense")?"https://ndvivense.glov.ai/weights_staging.json":"https://ndvivense.glov.ai/weights.json",f=window.location.href.includes("staging.vivense")?"https://ndvivense.glov.ai/nd-styles_staging.css":"https://ndvivense.glov.ai/nd-styles.css?id=".concat(l((new Date).toISOString().substring(0,13).replace("T",""),"-","")),p="https://europe-west3-nextday-34eb3.cloudfunctions.net/api/logResponse",v="(max-width: 440px)",g=["pagetype","category","alltimePLPCategoryMode","sessionPLPCategoryMode","alltimePDPCategoryMode","sessionPDPCategoryMode","alltimeCartCategoryMode","sessionCartCategoryMode"],h="__nextday_session_id",m="ND_SessionTimestamp",y="BN_SessionHistory",w="ND_PageViews",b="ND_PopupDisplayFlag",k="ND_SkuListList",x="ND_SkuListBasket",S="Nd_ProductInfoBasket",I="ND_CABasketPrice",L="ND_Debug",C="ND_OutOfScope",P="ND_UserId",O="ND_Seg_",A=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Nextday Client SDK";s(this,e),this.origin=t,this.DEBUG=window.localStorage.getItem(L)}return u(e,[{key:"info",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).info.apply(e,["[".concat(t,"]")].concat(r))}},{key:"log",value:function(){var e=this.DEBUG,t=this.origin;if(e){for(var n,r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];(n=console).log.apply(n,["[".concat(t,"]")].concat(o))}}},{key:"failed",value:function(){var e,t=this.DEBUG,n=this.origin;if(t){for(var r="%c%s   ",o=arguments.length,a=new Array(o),s=0;s<o;s++)a[s]=arguments[s];a.forEach((function(e){switch(i(e)){case"bigint":case"number":case"boolean":r+="%d   ";break;case"string":r+="%s   ";break;default:r+="%o   "}})),(e=console).log.apply(e,[r,"color: red","[".concat(n,"]")].concat(a))}}},{key:"success",value:function(){var e,t=this.DEBUG,n=this.origin;if(t){for(var r="%c%s   ",o=arguments.length,a=new Array(o),s=0;s<o;s++)a[s]=arguments[s];a.forEach((function(e){switch(i(e)){case"bigint":case"number":case"boolean":r+="%d   ";break;case"string":r+="%s   ";break;default:r+="%o   "}})),(e=console).log.apply(e,[r,"color: green","[".concat(n,"]")].concat(a))}}},{key:"warn",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).warn.apply(e,["[".concat(t,"]")].concat(r))}},{key:"error",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).error.apply(e,["[".concat(t,"]")].concat(r))}}]),e}(),T=A;function E(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function N(e,t){if(e){if("string"==typeof e)return _(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_(e,t):void 0}}function D(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,s=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){s=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(s)throw o}}return a}}(e,t)||N(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function j(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function R(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?j(Object(n),!0).forEach((function(t){E(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):j(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function M(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return q(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?q(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function q(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}window.beagleInfoLayer=window.beagleInfoLayer||{checkpoints:[],a:{},e:{},f:{}};var V={PageType:/(?:PageType'[ ]*:[ ]*')(.*)(?:')/,content_name:/(?:content_name[ ]*:[ ]*")(.*)(?:")/,content_name_alt:/(?:content_name'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAPageType:/(?:PageType'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAOrderId:/(?:purchase[\s\S]*actionField[\s\S]*'id'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAOrderRev:/(?:purchase[\s\S]*actionField[\s\S]*'revenue'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAOrderType:/(?:purchase[\s\S]*actionField[\s\S]*'dimension15'[ ]*:[ ]*')(.*)(?:')/,vvsScrGAIsAdmin:/(?:dataLayer[\s\S]*'isAdmin'[ ]*:[ ]*")(.*)(?:")/},U={BeagleLoaded:1,Initialized:2,UserOnOff:3,ScriptTimeOut:7,TreatmentRepositoryCreated:4,TreatmentsApplied:5,ReapplyTreatmentListeners:6,TimeoutThresholdReached:8},H=new T("BeagleInfoLayer"),F=function(){var e=r(a().mark((function e(){var t,n,r,o,i,s,c,u,l;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:H.log("Initializing beagleInfoLayer"),t=document.scripts,n=t.length;try{W()}catch(e){console.warn("Could not prepare log data: ",e.message)}if(t&&n){e.next=7;break}return H.warn("Could not parse body"),e.abrupt("return");case 7:r=0,o=t.length-1;case 9:if(!(o>-1)){e.next=35;break}i=t[o].textContent,s=0,c=Object.keys(V);case 12:if(!(s<c.length)){e.next=32;break}if(u=c[s],!(l=(l=V[u].exec(i))?l[1]:null)){e.next=29;break}u.indexOf("_alt")>0&&(u=u.substring(0,u.lastIndexOf("_alt"))),e.prev=18,J(u,decodeURIComponent(JSON.parse('"'+l+'"'))),e.next=26;break;case 22:return e.prev=22,e.t0=e.catch(18),H.warn("Could not decode foundVal ".concat(l)),e.abrupt("continue",29);case 26:if((r+=1)!==Object.keys(V).length){e.next=29;break}return e.abrupt("return");case 29:s++,e.next=12;break;case 32:o--,e.next=9;break;case 35:return e.next=37,de(10);case 37:if(n===t.length){e.next=41;break}return H.log("New scripts detected, re-initializing beagleInfoLayer"),e.next=41,F();case 41:case"end":return e.stop()}}),e,null,[[18,22]])})));return function(){return e.apply(this,arguments)}}(),B=function(e){try{H.log("Checkpoint: '".concat(e,"' Reached!")),window.beagleInfoLayer.checkpoints.push({checkpoint:Object.keys(U).find((function(t){return U[t]===e})),id:e,time:Date.now()})}catch(e){H.warn(e)}},J=function(e,t){null!=e&&null!=t&&(window.beagleInfoLayer[e]=t)},G=function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,a={businessRuleId:t,variant:n};switch(r){case"applied":window.beagleInfoLayer.a[e]=a;break;case"skipped":a.dependant_on_treatment=o,window.beagleInfoLayer.e[e]=a;break;case"failed":window.beagleInfoLayer.f[e]=a}},W=function(){var e,t,n,r,o,a,i,s,c,u,l,d,f,p,v,g,m,y,w,b,k,x,S,I,L,C,P,O,A,T,E,_,N,D,j,q,V,U,F,B,G,W,$,z,K=crypto.randomUUID(),Q=sessionStorage.getItem(h),Y=new URL(window.location.href),Z=(null===(e=window.navigator)||void 0===e||null===(t=e.userAgentData)||void 0===t?void 0:t.platform)||(null===(n=window.navigator)||void 0===n?void 0:n.platform)||(null===(r=window.navigator)||void 0===r?void 0:r.userAgent),X={},ee=M(window.dataLayer);try{for(ee.s();!(z=ee.n()).done;){var ne=z.value;X=R(R({},X),ne)}}catch(e){ee.e(e)}finally{ee.f()}var re=JSON.parse(te(document.cookie,"VL_CM_0")),oe={};if(re&&re.Items){var ae,ie=M(re.Items);try{for(ie.s();!(ae=ie.n()).done;){var se=ae.value;oe[se.K]=decodeURIComponent(se.V)}}catch(e){ie.e(e)}finally{ie.f()}}J("cookieVLPVinVisit",oe.VL_PVCountInVisit),J("cookieVLVisitDuration",oe.VL_TotalDuration),J("cookieVLTotalPV",oe.VL_TotalPV),J("cookieVLTotalVisit",oe.VL_TotalVisit),J("gaPageType",X.PageType),J("gaProductName",X.content_name),J("gaViewType",X.content_type),J("gaProductCategory",X.content_category),J("gaProductID",X.content_ids),J("vvsProductCategory",X.vivense_category),J("gaListingName",null===(o=X.ecommerce)||void 0===o||null===(a=o.detail)||void 0===a||null===(i=a.actionField)||void 0===i?void 0:i.list),J("vvsIsShowroom",void 0===window.isAdmin?X.isAdmin:window.isAdmin),J("vvsProductGroup",X.productGroup),J("vvsUserId",X.userId),J("vvsCategory",X.vivense_category),J("gaCategoryProductCont",X.category_product_count),J("gaCartProducts",(null===(s=X.ecommerce)||void 0===s||null===(c=s.checkout)||void 0===c?void 0:c.products)||(null===(u=X.ecommerce)||void 0===u||null===(l=u.purchase)||void 0===l?void 0:l.products)),J("vvsPDPProduct",null===(d=X.vivenseProducts)||void 0===d?void 0:d.pop()),J("gaPurchaseId",null===(f=X.ecommerce)||void 0===f||null===(p=f.purchase)||void 0===p||null===(v=p.actionField)||void 0===v?void 0:v.id),J("gaPurchaseRevenue",null===(g=X.ecommerce)||void 0===g||null===(m=g.purchase)||void 0===m||null===(y=m.actionField)||void 0===y?void 0:y.revenue),J("gaPurchasePayType",null===(w=X.ecommerce)||void 0===w||null===(b=w.purchase)||void 0===b||null===(k=b.actionField)||void 0===k?void 0:k.dimension15),J("windowParams",window.location.search),J("windowPRatio",window.devicePixelRatio),J("windowInner",window.innerWidth);var ce={};ce.availHeight=null===(x=window.screen)||void 0===x?void 0:x.availHeight,ce.availHeight=null===(S=window.screen)||void 0===S?void 0:S.availHeight,ce.availLeft=null===(I=window.screen)||void 0===I?void 0:I.availLeft,ce.availTop=null===(L=window.screen)||void 0===L?void 0:L.availTop,ce.availWidth=null===(C=window.screen)||void 0===C?void 0:C.availWidth,ce.colorDepth=null===(P=window.screen)||void 0===P?void 0:P.colorDepth,ce.height=null===(O=window.screen)||void 0===O?void 0:O.height,ce.pixelDepth=null===(A=window.screen)||void 0===A?void 0:A.pixelDepth,ce.width=null===(T=window.screen)||void 0===T?void 0:T.width,J("windowScreen",ce);var ue={};if(ue.height=null===(E=window.visualViewport)||void 0===E?void 0:E.height,ue.offsetLeft=null===(_=window.visualViewport)||void 0===_?void 0:_.offsetLeft,ue.offsetTop=null===(N=window.visualViewport)||void 0===N?void 0:N.offsetTop,ue.onresize=null===(D=window.visualViewport)||void 0===D?void 0:D.onresize,ue.onscroll=null===(j=window.visualViewport)||void 0===j?void 0:j.onscroll,ue.pageLeft=null===(q=window.visualViewport)||void 0===q?void 0:q.pageLeft,ue.pageTop=null===(V=window.visualViewport)||void 0===V?void 0:V.pageTop,ue.scale=null===(U=window.visualViewport)||void 0===U?void 0:U.scale,ue.width=null===(F=window.visualViewport)||void 0===F?void 0:F.width,J("windowVPort",ue),screen.width){var le=parseInt(screen.width),de=screen.height?parseInt(screen.height):0;if(0!==le&&0!==de){if(/iPad|iPhone|iPod/.test(Z)&&window.devicePixelRatio)le=Math.round(le*window.devicePixelRatio),de=Math.round(de*window.devicePixelRatio);else if(90===Math.abs(window.orientation)){var fe=le;le=de,de=fe}J("window",le+"x"+de)}}if(J("navHistSize",null===(B=window.history)||void 0===B?void 0:B.length),J("navAgent",navigator.userAgent),!window.beagleInfoLayer.navAgent&&navigator.userAgentData){var pe,ge,he,me,ye,we=null===(pe=navigator)||void 0===pe||null===(ge=pe.userAgentData)||void 0===ge||null===(he=ge.brands)||void 0===he?void 0:he.map((function(e){return e.brand+":"+e.version})).join();we+=null!==(me=navigator)&&void 0!==me&&null!==(ye=me.userAgentData)&&void 0!==ye&&ye.mobile?"mobi":" ",J("navAgent",we+=Z)}J("navHWCores",navigator.hardwareConcurrency),J("navLanguage",navigator.language||navigator.browserLanguage||navigator.systemLanguage||navigator.userLanguage),J("navTouch",navigator.maxTouchPoints),J("navPlatform",Z),J("navVendor",navigator.vendor),J("cookieGaId",te(document.cookie,"_ga")),J("cookieLastBreadCrumb",te(document.cookie,"lastbreadcrumb")),J("cookieLastCategory",te(document.cookie,"lastcategory")),J("cookieFirstEntry",decodeURIComponent(te(document.cookie,"vivensefirst")));var be={};if(window.performance&&window.performance.getEntriesByType("navigation")[0]){var ke=window.performance.getEntriesByType("navigation")[0];be.pld=Math.round(ke.domContentLoadedEventEnd-ke.connectStart),be.net=Math.round(ke.connectEnd-ke.fetchStart),be.srv=Math.round(ke.responseStart-ke.requestStart),be.tfr=Math.round(ke.responseEnd-ke.responseStart),be.dmi=Math.round(ke.domInteractive-ke.responseEnd),be.dcp=Math.round(ke.domComplete-ke.domInteractive),be.onl=Math.round(ke.loadEventEnd-ke.loadEventStart)}J("perfMetrics",be),J("internetSpeed",null===(G=window.navigator)||void 0===G||null===(W=G.connection)||void 0===W?void 0:W.downlink);var xe,Se,Ie=M(document.querySelectorAll('[type="application/ld+json"]'));try{for(Ie.s();!(xe=Ie.n()).done;){var Le=xe.value;try{var Ce=Le.textContent,Pe=JSON.parse(Ce),Oe="@";switch(Pe["@type"]){case"Organization":case"WebSite":break;case"CollectionPage":var Ae,Te=M(Pe.breadcrumb.itemListElement);try{for(Te.s();!(Ae=Te.n()).done;)Oe+=" | "+Ae.value.item.name}catch(e){Te.e(e)}finally{Te.f()}J("sorgBreadcrumb",Oe);var Ee={};Ee.name=Pe.mainEntity.name,Ee.countItems=Pe.mainEntity.numberOfItems,J("sorgListing",Ee);break;case"BreadcrumbList":var _e,Ne=M(Pe.itemListElement);try{for(Ne.s();!(_e=Ne.n()).done;)Oe+=" | "+_e.value.name}catch(e){Ne.e(e)}finally{Ne.f()}J("sorgBreadcrumb",Oe);break;case"Product":var De={};De.sku=Pe.sku,De.name=Pe.name,Pe.offers&&(De.price=Pe.offers.price,De.priceCurrency=Pe.offers.priceCurrency,De.priceValidUntil=Pe.offers.priceValidUntil),J("sorgProduct",De);break;default:console.log(Pe)}}catch(e){H.warn(e.message)}}}catch(e){Ie.e(e)}finally{Ie.f()}J("v","0.0.27"),J("n","nextday-session_id-".concat(Q)),J("sr",50),J("donttrack",navigator.doNotTrack||window.doNotTrack||navigator.msDoNotTrack),J("u",Y.href),J("d",Y.hostname),J("r",document.referrer),J("vId",K),J("isOn",null);try{J("vvsCntFavProds",window.favoriteProducts?JSON.parse(window.favoriteProducts).length:null)}catch(e){J("vvsCntFavProds",null),H.warn(e.message)}J("vvsHasSetEmail",window.userEmail.length>0),J("vvsLoginType",window.userId>0?"member":"guest"),Se=document.querySelector('[class*="basket_summary_total"], [class*="total_row"]'),J("vvsPurcPriceElt",Se?Se.innerText:null),Se=document.querySelector('[class*="order_follow_numb"], [class*="cart-title-bottom"]'),J("vvsPurchaseOrderID",Se?Se.innerText:null),Se=document.querySelector('[class*="payment_type_title"], [class*="cart-title-info"]'),J("vvsPurcTypeElt",Se?Se.innerText:null),Se=document.querySelector('[id*="breadcrumb-ol"], [class*="long-breadcrumb"]'),J("vvsViewCrumb",Se?Se.innerText:null),Se=document.querySelector('[class*="order-final-number"]'),J("vvsCartTotal",Se?Se.innerText:null),Se=document.querySelector('[class*="basket_total_price"]'),J("vvsViewBasketTotal",Se?Se.innerText:null),Se=document.querySelector('[id*="cart_quantity"], [class*="basket_length"]'),J("vvsViewBasketCount",Se?Se.innerText:null),Se=document.querySelector('[class*="welcome_username"]'),J("vvsViewLoggedin",!!Se&&Se.innerText.length>0),Se=document.querySelectorAll('[class*="vivense-showrooms"] > *'),J("vvsPDPShowroomCount",Se?Se.length:null),Se=document.querySelector('[class*="delivery-date"]'),J("vvsPDPDeliveryDate",Se?Se.innerText:null),J("vvsPDPDeliveryDateFormatted",ve(null===($=Se)||void 0===$?void 0:$.innerText)),Se=document.querySelector('[class*="product-title"], [class*="header-bottom"]'),J("vvsPDPTitle",Se?Se.innerText:null),Se=document.querySelector('[class*="count-of-product"]'),J("vvsPLPItemCount",Se?Se.innerText:null),Se=document.querySelector('[class*="subcategories-title"]'),J("vvsPLPName",Se?Se.innerText:null)};function z(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return K(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?K(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function K(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Q=new T("Nextday Utils"),Y={ocak:0,"şubat":1,mart:2,nisan:3,"mayıs":4,haziran:5,temmuz:6,"ağustos":7,"eylül":8,ekim:9,"kasım":10,"aralık":11};"randomUUID"in crypto||(crypto.randomUUID=function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(e){return(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)}))});var Z=function(){document.documentElement.classList.remove("nextDay-hide")},X=function(){var e=r(a().mark((function e(){var t;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return Q.log("Fetching treatments"),e.next=3,fetch("https://host-b96.pages.dev/treatments.json");case 3:return t=e.sent,e.next=6,t.json();case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),ee=function(){var e=r(a().mark((function e(){var t;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return Q.log("Fetching treatment weights"),e.next=3,fetch(d);case 3:return t=e.sent,e.next=6,t.json();case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),te=function(e,t){if(!e)return null;var n=e.split(";").map((function(e){return e.split("=")})).reduce((function(e,t){return t[0]&&t[1]&&(e[decodeURIComponent(t[0].trim())]=decodeURIComponent(t[1].trim())),e}),{})[t];return n?("_ga"===t&&(n=n.split(".")[2]),n):null},ne=function(){var e=r(a().mark((function e(t){var n,r,o,i;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=8+(n=9),t){e.next=5;break}return e.abrupt("return",-1);case 5:return e.next=7,re(t);case 7:return o=e.sent,i=parseInt(o.substring(n,r),16),e.abrupt("return",i%100);case 10:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),re=function(){var e=r(a().mark((function e(t){var n,r,o;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=(new TextEncoder).encode(t),e.next=3,crypto.subtle.digest("SHA-1",n);case 3:return r=e.sent,o=Array.from(new Uint8Array(r)),e.abrupt("return",o.map((function(e){return e.toString(16).padStart(2,"0")})).join(""));case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),oe=function(e,t){Q.log("Applying style changes",t,"to elements",e);for(var n=0;n<e.length;n++)for(var r=e[n],o=0,a=Object.entries(t);o<a.length;o++){var i=D(a[o],2),s=i[0],c=i[1];r.style[s]=c}},ae=function(){var e=r(a().mark((function e(){var t;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(t=document.createElement("link")).rel="stylesheet",t.type="text/css",t.href=f,document.head.appendChild(t);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),ie=function(){var e=r(a().mark((function e(t,n,r){var o,i,s,c,u,l,d,f,p,v,g,h,m,y,w,b,k,x,S,I,L;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:o=JSON.parse(JSON.stringify(n)),i=null,s=z(o),e.prev=3,s.s();case 5:if((c=s.n()).done){e.next=55;break}if(u=c.value,l=u.businessRuleTransformations,d=u.variants,l||d){e.next=10;break}return e.abrupt("continue",53);case 10:if(r&&l){f=z(l);try{for(f.s();!(p=f.n()).done;)if((v=p.value).id===r)for(g in v)"id"!==g&&(u[g]=v[g])}catch(e){f.e(e)}finally{f.f()}}if(!d){e.next=53;break}h=0,m=Object.keys(d);case 13:if(!(h<m.length)){e.next=53;break}return y=m[h],e.next=17,ne(t+y);case 17:if(!(e.sent<u.variants[y].weight)){e.next=50;break}if(i=y,!r||!d[y].businessRuleTransformations){e.next=48;break}w=z(d[y].businessRuleTransformations),e.prev=22,w.s();case 24:if((b=w.n()).done){e.next=38;break}if((k=b.value).id!=r){e.next=36;break}x=0,S=Object.keys(k);case 28:if(!(x<S.length)){e.next=36;break}if("id"!==(I=S[x])){e.next=32;break}return e.abrupt("continue",33);case 32:u[I]=k[I];case 33:x++,e.next=28;break;case 36:e.next=24;break;case 38:e.next=43;break;case 40:e.prev=40,e.t0=e.catch(22),w.e(e.t0);case 43:return e.prev=43,w.f(),e.finish(43);case 46:e.next=49;break;case 48:for(L in d[y])"weight"!==L&&"businessRuleTransformations"!==L&&(u[L]=d[y][L]);case 49:return e.abrupt("break",53);case 50:h++,e.next=13;break;case 53:e.next=5;break;case 55:e.next=60;break;case 57:e.prev=57,e.t1=e.catch(3),s.e(e.t1);case 60:return e.prev=60,s.f(),e.finish(60);case 63:return e.abrupt("return",[o,i]);case 64:case"end":return e.stop()}}),e,null,[[3,57,60,63],[22,40,43,46]])})));return function(t,n,r){return e.apply(this,arguments)}}(),se=function(){var e=w,t=b,n=h,r=m,o=y,a=sessionStorage.getItem(e),i=sessionStorage.getItem(t),s=sessionStorage.getItem(n),c=sessionStorage.getItem(r),u=sessionStorage.getItem(o);a?sessionStorage.setItem(e,parseInt(a)+1):sessionStorage.setItem(e,1),null===i&&sessionStorage.setItem(t,0),s||sessionStorage.setItem(n,crypto.randomUUID()),c||sessionStorage.setItem(r,Date.now()),u?sessionStorage.setItem(o,[window.location.pathname,u]):sessionStorage.setItem(o,[window.location.pathname])},ce=function(e,t,n){if("notExist"===t)return e?(Q.failed("conditionChecker: -not satisfied- target does exist"),!1):(Q.success("conditionChecker: -satisfied- target does not exist"),!0);if(null==e||null==t)return Q.failed("conditionChecker: runTimeValue or condition is not defined"),!1;switch(t){case"exist":return e?(Q.success("conditionChecker: -satisfied- target does exist"),!0):(Q.failed("conditionChecker: -not satisfied- target does not exist"),!1);case"contains":return e.includes(n)?(Q.success("conditionChecker: -satisfied- target contains value"),!0):(Q.failed("conditionChecker: -not satisfied- target does not contain value"),!1);case"notContains":return e.includes(n)?(Q.failed("conditionChecker: -not satisfied- target contains value"),!1):(Q.success("conditionChecker: -satisfied- target does not contain value"),!0);case"equal":return e===n?(Q.success("conditionChecker: -satisfied- target equals value"),!0):(Q.failed("conditionChecker: -not satisfied- target does not equal value"),!1);case"notEqual":return e!==n?(Q.success("conditionChecker: -satisfied- target does not equal value"),!0):(Q.failed("conditionChecker: -not satisfied- target equals value"),!1);case"greaterThan":return e>n?(Q.success("conditionChecker: -satisfied- target is greater than value"),!0):(Q.failed("conditionChecker: -not satisfied- target is not greater than value"),!1);case"lessThan":return e<n?(Q.success("conditionChecker: -satisfied- target is less than value"),!0):(Q.failed("conditionChecker: -not satisfied- target is not less than value"),!1);case"greaterEquals":return e>=n?(Q.success("conditionChecker: -satisfied- target is greater or equal than value"),!0):(Q.failed("conditionChecker: -not satisfied- target is not greater or equal than value"),!1);case"lessEquals":return e<=n?(Q.success("conditionChecker: -satisfied- target is less or equal than value"),!0):(Q.failed("conditionChecker: -not satisfied- target is not less or equal than value"),!1);case"between":var r=D(n.split(","),2),o=r[0],a=r[1];return o=parseInt(o),a=parseInt(a),e>=o&&e<=a?(Q.success("conditionChecker: -satisfied- target is between min and max"),!0):(Q.failed("conditionChecker: -not satisfied- target is not between min and max"),!1);default:return Q.failed("conditionChecker: condition is not defined ",t),!1}},ue=function(){var e=L,t=C,n=window.location.search;if(n.includes("nd_debug=1"))return window.localStorage.setItem(e,1),window.localStorage.setItem(t,!0),J("dbm","on"),1;if(n.includes("nd_debug=2"))return window.localStorage.setItem(e,2),window.localStorage.setItem(t,!0),J("dbm","on"),2;if(n.includes("nd_debug=0"))return window.localStorage.removeItem(e),window.localStorage.setItem(t,!0),J("dbm","off"),0;var r=parseInt(window.localStorage.getItem(e));return J("dbm",r?"on":"off"),r||0},le=function(){var e=r(a().mark((function e(){var t,n=arguments;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.length>0&&void 0!==n[0]?n[0]:"_ga",e.abrupt("return",new Promise((function(e,n){var r=window.localStorage.getItem(P);if(r&&e(r),r=te(document.cookie,t))window.localStorage.setItem(P,r),e(r);else{var o=setInterval((function(){(r=te(document.cookie,t))&&(clearInterval(o),window.localStorage.setItem(P,r),e(r))}),10);setTimeout((function(){clearInterval(o),n(new Error("Could not extract cookie identifier"))}),1e3)}})));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),de=function(e){return new Promise((function(t){return setTimeout(t,e)}))},fe=function(){var e,t,n,r=k,o=[],a=Array.from(document.querySelectorAll(".product-card"));return a.forEach((function(e){o.push(e.getAttribute("data-product-sku"))})),o.length?(sessionStorage.setItem(r,JSON.stringify(o)),o):(a=document.querySelector(".product-sku"))?(o.push(a.getAttribute("data-sku")||(null===(e=a.textContent)||void 0===e||null===(t=e.trim())||void 0===t||null===(n=t.replace(/\)/g,""))||void 0===n?void 0:n.replace(/\(/g,""))),sessionStorage.setItem(r,JSON.stringify(o)),o):(a=Array.from(document.querySelectorAll(".cart-inside")))?(a.forEach((function(e){o.push(e.getAttribute("data-sku"))})),o.length?(sessionStorage.setItem("ND_SkuListBasket",JSON.stringify(o)),o):o):(Q.failed("Not able to extract SKUs from page"),null)},pe=function(){return navigator.sendBeacon&&"function"==typeof navigator.sendBeacon},ve=function(e){if(!e||"string"!=typeof e)return e;var t={startMonthIndex:void 0,endMonthIndex:void 0,startDay:void 0,endDay:void 0},n=e.match("([\\d]+)-([\\d]+)\\s?([\\wıüğşöçİÖÇĞÜ]+)");if(n&&4===n.length)t.startDay=parseInt(n[1]),t.endDay=parseInt(n[2]),t.startMonthIndex=Y[n[3].toLowerCase()],t.endMonthIndex=t.startMonthIndex;else{if(!(n=e.match("([\\d]+)\\s+([\\wıüğşöçİÖÇĞÜ]+)-([\\d]+)\\s+([\\wıüğşöçİÖÇĞÜ]+)"))||5!==n.length)return e;t.startDay=parseInt(n[1]),t.startMonthIndex=Y[n[2].toLowerCase()],t.endDay=parseInt(n[3]),t.endMonthIndex=Y[n[4].toLowerCase()]}try{var r=new Date;if(!t.startMonthIndex||!t.endMonthIndex)return e;var o=t.startMonthIndex>=r.getMonth()?r.getFullYear():r.getFullYear()+1,a=t.endMonthIndex>=r.getMonth()?r.getFullYear():r.getFullYear()+1,i=new Date(o,t.startMonthIndex,t.startDay),s=new Date(a,t.endMonthIndex,t.endDay),c=Math.ceil(Math.abs(i-r)/864e5),u=Math.ceil(Math.abs(s-r)/864e5),l=c<7?0:Math.ceil(c/7),d=u<7?0:Math.ceil(u/7);return 0===l&&0===d?"".concat(c," - ").concat(u," Gün"):0===l&&d>=1?"".concat(c," Gün - ").concat(d," Hafta"):l===d?"".concat(l," Hafta"):"".concat(l," - ").concat(d," Hafta")}catch(t){return e}};function ge(e){if(e&&0!==e.length){var t,n={},r=void 0,o=0,a=z(e);try{for(a.s();!(t=a.n()).done;){var s=t.value;"object"===i(s)&&(s=s[Object.keys(s)[0]]),n[s]?n[s]++:n[s]=1,o<n[s]&&(r=s,o=n[s])}}catch(e){a.e(e)}finally{a.f()}return E({},r,o)}}var he=function(e,t){var n=setTimeout(t,e);document.ontouchstart=function(){clearTimeout(n),n=setTimeout(t,e)}};function me(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ye(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?me(Object(n),!0).forEach((function(t){E(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):me(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var we=function(){function e(){s(this,e),this.logger=new T("Nextday Monitor"),this.logger.log("Initializing monitor"),this.appliedTreatmentsHash=null,this.appliedTreatmentsChanges=!1,this.eligibleNotAppliedTreatmentsHash=null,this.eligibleNotAppliedTreatmentsChanges=!1,this.headers={type:"text/plain"},this.isLogged=!1,this.initializeExitEventListeners()}var t,n,o;return u(e,[{key:"sendLogs",value:(o=r(a().mark((function e(){var t,n,r,o=this,i=arguments;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=i.length>0&&void 0!==i[0]?i[0]:null,n=i.length>1&&void 0!==i[1]&&i[1],(r=this.logger).log("Sending logs"),"complete"!==document.readyState?(r.log("Document ready state is not complete"),window.addEventListener("load",(function(){r.log("In onload event"),o.handleQueueLogs(o.packageLogData(t),n)}),!0)):this.handleQueueLogs(this.packageLogData(t),n);case 5:case"end":return e.stop()}}),e,this)}))),function(){return o.apply(this,arguments)})},{key:"handleQueueLogs",value:(n=r(a().mark((function e(t){var n,r=arguments;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r.length>1&&void 0!==r[1]&&r[1]||!this.isLogged){e.next=3;break}return e.abrupt("return");case 3:if(n=this.logger,t){e.next=7;break}return n.failed("Could not create request blob"),e.abrupt("return");case 7:return n.log("Request blob to send: ",t),this.queueLogs(t),this.isLogged=!0,e.next=12,re(JSON.stringify(window.beagleInfoLayer.a));case 12:return this.appliedTreatmentsHash=e.sent,e.next=15,re(JSON.stringify(window.beagleInfoLayer.e));case 15:this.eligibleNotAppliedTreatmentsHash=e.sent;case 16:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})},{key:"updateLatestChanges",value:(t=r(a().mark((function e(){var t,n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,re(JSON.stringify(window.beagleInfoLayer.a));case 2:return t=e.sent,e.next=5,re(JSON.stringify(window.beagleInfoLayer.e));case 5:n=e.sent,t!==this.appliedTreatmentsHash&&(this.appliedTreatmentsChanges=!0,this.appliedTreatmentsHash=t),n!==this.eligibleNotAppliedTreatmentsHash&&(this.eligibleNotAppliedTreatmentsChanges=!0,this.eligibleNotAppliedTreatmentsHash=n);case 8:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"packageLogData",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=this.headers;this.attachSegmentationPayloadToBeagleInfoLayer();var n=ye({},window.beagleInfoLayer),r=e||(Object.keys(n.a||{}).length?"Treatments applied":"No treatments applied");return n.t=Date.now(),n.m=r,new Blob([JSON.stringify(n)],t)}},{key:"attachSegmentationPayloadToBeagleInfoLayer",value:function(){[localStorage,sessionStorage].forEach((function(e){e&&Object.keys(e).filter((function(e){return e.indexOf(O)>=0})).map((function(e){return{key:e,layerKey:e.replace(O,"")}})).forEach((function(t){var n=t.key,r=t.layerKey;return window.beagleInfoLayer[r]=function(e,t){try{var n=JSON.parse(t);return function(e){return!!g.includes(e)||!(!e.toString().toLowerCase().startsWith("alltime")||!e.endsWith("mode"))}(e.replace(O,""))&&(n=ge(n)),n}catch(e){return t}}(n,e.getItem(n))}))}))}},{key:"packageUpdateLogData",value:function(){var e=this.headers,t=this.appliedTreatmentsChanges,n=this.eligibleNotAppliedTreatmentsChanges;if(!t&&!n)return!1;var r={t:Date.now(),a:t?window.beagleInfoLayer.a:{},e:n?window.beagleInfoLayer.e:{},vId:window.beagleInfoLayer.vId};return new Blob([JSON.stringify(r)],e)}},{key:"initializeExitEventListeners",value:function(){var e=this,t=this.logger,n=!1;t.log("Initializing exit event listener"),window.addEventListener("beforeunload",(function(){if(e.isLogged){if(!n){n=!0,t.log("In beforeunload event");var r=e.packageUpdateLogData();r?e.queueLogs(r):t.log("No changes to log")}}else e.handleQueueLogs(e.packageLogData())}),{capture:!0}),window.addEventListener("pagehide",(function(){if(e.isLogged){if(!n){n=!0,t.log("In pagehide event");var r=e.packageUpdateLogData();r?e.queueLogs(r):t.log("No changes to log")}}else e.handleQueueLogs(e.packageLogData())}),{capture:!0})}},{key:"queueLogs",value:function(e){var t=this.logger;if(pe()){var n=navigator.sendBeacon(p,e),r=setInterval((function(){n?(clearInterval(r),t.log("Logs queued successfully")):n=navigator.sendBeacon(p,e)}),10);setTimeout((function(){clearInterval(r),n||t.log("Logs not queued")}),1e3)}else fetch(p,e)}}]),e}(),be=we,ke=new T("Nextday Url Checker"),xe=function(e){ke.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("path"===t){var o=window.location.href,a=o.includes("ajax/mobile-search/loadOtherPages.php")?decodeURIComponent(new URL(o).search.replace("?originalPath=","")):new URL(o).pathname;return ke.log("Checking path ".concat(a," matches rule path ").concat(r)),ce(a,n,r)}},Se=new T("Nextday Api"),Ie=function(){var e=r(a().mark((function e(){var t,n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Se.log("Starting product info lookup"),t=fe()){e.next=5;break}return Se.failed("No sku found"),e.abrupt("return",null);case 5:return(n=new Headers).append("Content-Type","application/json"),e.prev=7,e.next=10,fetch("https://catalog-api.adoraai.com",{method:"POST",body:JSON.stringify(t),headers:n,mode:"cors"});case 10:r=e.sent,e.next=17;break;case 13:return e.prev=13,e.t0=e.catch(7),Se.warn("Fetch to catalog api failed"),e.abrupt("return",null);case 17:if(r.ok){e.next=20;break}return Se.failed("Product info lookup failed"),e.abrupt("return",null);case 20:return e.next=22,r.json();case 22:if(r=e.sent){e.next=26;break}return Se.failed("Product info extraction from response failed"),e.abrupt("return",null);case 26:return Se.success("Product info lookup successful"),S,xe({operator:"path",condition:"equal",value:"/siparis-listesi.html"})&&sessionStorage.setItem("Nd_ProductInfoBasket",JSON.stringify(r)),e.abrupt("return",r);case 31:case"end":return e.stop()}}),e,null,[[7,13]])})));return function(){return e.apply(this,arguments)}}();function Le(e){return function(e){if(Array.isArray(e))return _(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||N(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ce(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Pe=new T("Nextday DataLayer Checker"),Oe=function(e){Pe.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value,o=Ae(t);return ce(o,n,r)},Ae=function(e){Pe.log("Searching beagleInfoLayer for key ",e);var t=window.beagleInfoLayer[e];if(e.includes("."))try{var n=e.split(".");t=window.beagleInfoLayer[n[0]];for(var r=1;r<n.length;r++)t=t[n[r]]}catch(n){Pe.failed("Couldn't extract key ".concat(e," from beagleInfoLayer")),t=null}if(t)return Pe.success("Found key ".concat(e," with value ").concat(t)),t;Pe.failed("Key ".concat(e," not found in beagleInfoLayer")),Pe.log("Searching dataLayer for key ",e);var o,a=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Ce(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ce(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}(window.dataLayer);try{for(a.s();!(o=a.n()).done;){var i=o.value;if(Object.keys(i).includes(e))return Pe.success("Found key ".concat(e," with value ").concat(i[e])),i[e]}}catch(e){a.e(e)}finally{a.f()}return Pe.failed("Key ".concat(e," not found in dataLayer")),null},Te=new T("ReplaceUtils");function Ee(t,n,r){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(t&&n.includes("{{REPLACE}}")){Te.log("Executing replace function: ",t);var a={dataLayerFinder:Ae,productInfo:r},i=Function(t).bind(a);return o?n.replace("{{REPLACE}}",i()):(0,e.replaceAll)(n,"{{REPLACE}}",i())}return n}var _e=function(e,t,n){return Array.isArray(e)?e.forEach((function(r,o){var a=t?t[o]||t:"";e[o]=Ee(a,r,n)})):Array.isArray(t)?t.forEach((function(r,o){if("object"===i(r)){var a=function(e){var t=e.storage,n=e.key,r=e.type,o=null;if("session"===t&&(o=window.sessionStorage.getItem(n),r))try{o=(o=JSON.parse(o))[o.length-1][r]}catch(e){Te.failed("Could not parse ".concat(o))}return o}(r);e=e.replace("{{REPLACE}}",a)}else e=Ee(t,e,n,!0)})):e=Ee(t,e,n),e};function Ne(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return De(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?De(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function De(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function je(){return je=r(a().mark((function e(t,n){var o,i,s,c,u,d,f,p,g,h,m,y,w;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=new T("Nextday Apply Actions"),i=b,s=n.productInfo,c=n.skuList,u=function(e){o.log("Applying action: ",JSON.stringify(e));var t=e.operator,n=e.type,r=e.applyEvent,a=e.contentSelector,c=e.selector,u=e.selectorFallback,l=e.mdCondition,d=e.move_selector_1,g=e.move_selector_2,w=e.replaceFn,b=e.pType;if("noop"!==t){var k=e.value,x=$(c);if(l&&!window.matchMedia(l).matches)return o.failed("Media condition mismatch: ",l),!1;if(d&&!g||g&&!d)return o.failed("Both move selectors are required"),!1;if(d&&g){if(!$(d).length)return o.failed("Move selector 1 not found: ",d),!1;if(!$(g).length)return o.failed("Move selector 2 not found: ",g),!1}else{if(!c)return o.failed("Selector not specified"),!1;if(!x.length){if(!$(u).length&&"remove"===t)return;if("no-selector"!==c&&(o.failed("Selector not found: ",c),o.log("Trying fallback selector: ",u),u&&(x=$(u)),!x.length))return o.failed("Fallback selector not found"),!1}}if(w&&(k=_e(k,w,s)),"remove"===t)x&&(o.log("Removing: ",c),x.remove()),o.log("Cannot found element with selector: ",c);else if("insert"===t)switch(n){case"before":o.log("Inserting before: ",k),String(k).includes("nd-add-to-win")&&$(".nd-add-to-win").remove(),x.before(k);break;case"after":o.log("Inserting after: ",k),x.after(k);break;case"append":o.log("Appending value: ",k),x.append(k);break;case"popup":if(0!==parseInt(sessionStorage.getItem(i))){o.log("Popup already displayed in session");break}if(o.log("Creating Popup: ",k),b&&(k=f(s,b,k)),m(k,a),r){var S,I=window.matchMedia(v).matches,L=Ne(r);try{for(L.s();!(S=L.n()).done;)switch(S.value){case"exitIntent":var C,P;o.log("Adding exit intent listener"),I?(window.addEventListener("visibilitychange",h,{once:!0}),null!==(C=window.beagleInfoLayer)&&void 0!==C&&C.r.includes(null===(P=window.beagleInfoLayer)||void 0===P?void 0:P.d)||window.history&&"function"==typeof window.history.pushState&&(window.history.pushState("temp",""),window.addEventListener("popstate",h,{once:!0})),he(12e4,h)):document.documentElement.addEventListener("mouseleave",h,{once:!0});break;case"copyIntent":o.log("Adding copy intent listener"),document.documentElement.addEventListener("copy",h,{once:!0})}}catch(e){L.e(e)}finally{L.f()}}else setTimeout((function(){h()}),timeout);break;default:o.failed("Type: ".concat(n," not found for operator: ").concat(t))}else if("edit"===t)switch(n){case"text":o.log("Editing text: ",k),x.text(k);break;case"html":o.log("Editing html: ",k),x.html(k);break;case"styleApplicator":o.log("Applying style: ",k);var O=JSON.parse(k);o.log("Style Changes Map: ",O),oe(x,O);break;case"addClass":o.log("addding class to ".concat(x," named ").concat(k)),x.addClass(k);break;case"removeClass":o.log("remove class from ".concat(x," named ").concat(k)),x.removeClass(k);break;case"documentTitle":if(o.log("changing document title from ".concat(x," to ").concat(k)),r){var A,T=Ne(r);try{for(T.s();!(A=T.n()).done;)"tabChange"==A.value&&function(){o.log("catching event tabchange..");var e=document.title;document.addEventListener("visibilitychange",(function(t){return p(t,k,e)}))}()}catch(e){T.e(e)}finally{T.f()}}break;default:o.log("Unknown edit type: ",n)}else if("setattribute"===t)switch(o.log("Setting attribute: ",attribute,k),attribute){case"src":x.css("content","url(".concat(k.trim(),")"));break;case"style":var E=k.split(":")[0].trim(),_=k.split(":")[1].trim();x.css(E,_,"!important")}else if("replace"===t)o.log("Replacing: ",k),x.replaceAll(k);else if("swap"===t){o.log("Swapping: ",d,g);var N=document.querySelector(d),D=document.querySelector(g);y(N,D)}else if("injectscript"===t)o.log("Injecting script: ",k),x.append("<script>".concat(k,"<\/script>"));else if("move"===t){o.log("Moving ".concat(d," to ").concat(g));var j=document.querySelector(d),R=document.querySelector(g);j.remove(),R.prepend(j)}else if("productInfoLookup"===t){var M=f(s,b,k);x.before(M)}else o.failed("No such operator exists yet",t)}else o.failed("Noop Operator: No operation is applied on target ")},d=function(e,t){return e&&t.includes("{{REPLACE_PRODUCTINFO}}")&&(t=l(t,"{{REPLACE_PRODUCTINFO}}",e)),t},f=function(e,t,n){var r=c[0],a=null;switch(t){case"transactionIn2Weeks":var i;a=d(null===(i=e[r].catalog.transactionIn2Weeks)||void 0===i?void 0:i.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","),n),o.log("Replacing transcationIn2Weeks ",e[r].catalog.transactionIn2Weeks);break;case"addToCartIn2Weeks":var s;a=d(null===(s=e[r].catalog.addToCartIn2Weeks)||void 0===s?void 0:s.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","),n),o.log("Replacing AddToCartCount ",e[r].catalog.addToCartIn2Weeks);break;case"productViewCount":var u;a=d(null===(u=e[r].catalog.productViewCount)||void 0===u?void 0:u.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","),n),o.log("Replacing productViewCount for",e[r].catalog.productViewCount);break;default:o.failed("no such type found for productInfoLookup operator")}return a},p=function(){var e=r(a().mark((function e(t,n,r){var o,i;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:o=Array.isArray(n)?n:[n],i=0;case 2:if(!(i<o.length)){e.next=16;break}if(!document.hidden){e.next=12;break}return document.title=o[i],e.next=7,de(3e3);case 7:return document.title=r,e.next=10,de(3e3);case 10:e.next=13;break;case 12:document.title=r;case 13:i++,e.next=2;break;case 16:if(document.hidden){e.next=21;break}return document.title=r,e.abrupt("return");case 21:p(t,n,r);case 22:case"end":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}(),g=function e(t){var n=t.target.id;n&&"nd-popup__wrapper"===n&&($("#nd-popup__wrapper").remove(),window.removeEventListener("click",e,!0),window.removeEventListener("touchend",e,!0))},h=function e(){if(!(parseInt(sessionStorage.getItem(i))>0)){sessionStorage.setItem(i,1);var t=document.querySelector("#grt-shadow-host");t&&(t.style.display="none"),document.getElementById("nd-popup__wrapper").style.display="block",window.addEventListener("click",g,!0),window.addEventListener("touchend",g,!0),document.documentElement.removeEventListener("mouseleave",e,{once:!0}),document.documentElement.removeEventListener("copy",e,{once:!0}),document.documentElement.removeEventListener("visibilitychange",e,{once:!0}),document.documentElement.removeEventListener("popstate",e,{once:!0}),setTimeout((function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",g,!0),window.removeEventListener("touchend",g,!0)}),15e3)}},m=function(e,t){var n=document.createElement("div");n.classList.add("nd-popup__wrapper"),n.id="nd-popup__wrapper";var r=document.createElement("button");if(r.classList.add("nd-popup__button-close"),r.innerText="X",r.onclick=function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",g,!0)},t)for(var o=Array.from(document.querySelectorAll(t));e.includes("{{REPLACE}}")&&o.length>0;)e=e.replace("{{REPLACE}}",o.shift().src);var a=document.createElement("template");a.innerHTML=e.trim();var i=a.content.firstChild;i.appendChild(r),n.appendChild(i),$("#nd-popup__wrapper").remove(),document.body.appendChild(n)},y=function(e,t){var n,r,o=e.parentNode,a=t.parentNode;if(o&&a&&!o.isEqualNode(t)&&!a.isEqualNode(e)){for(var i=0;i<o.children.length;i++)o.children[i].isEqualNode(e)&&(n=i);for(var s=0;s<a.children.length;s++)a.children[s].isEqualNode(t)&&(r=s);o.isEqualNode(a)&&n<r&&r++,o.insertBefore(t,o.children[n]),a.insertBefore(e,a.children[r])}},w=function e(t){if(window.jQuery){var n,r=Ne(t);try{for(r.s();!(n=r.n()).done;){var a=n.value;try{if(!1===u(a))return!1}catch(e){return o.failed("Couldn't apply action ".concat(a," with error ").concat(e.message)),e}}}catch(e){r.e(e)}finally{r.f()}}else setTimeout((function(){e(t)}),10)},e.abrupt("return",w(t));case 13:case"end":return e.stop()}}),e)}))),je.apply(this,arguments)}var Re=function(e,t){return je.apply(this,arguments)};function Me(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return qe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?qe(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function qe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Ve=new T("Nextday Treatment Repository"),Ue=function(){function e(t){s(this,e);var n=t.treatments,r=t.treatmentWeights;this.treatments=n,this.treatmentWeights=r}var t,n;return u(e,[{key:"getMatchedTreatments",value:function(){var e=this.treatmentWeights,t=this.getUserGroup(),n=this.treatments;if(e){var r,o=t&&e[t]?e[t]:e.default,a=Me(n);try{for(a.s();!(r=a.n()).done;){var i=r.value;if(o[i.id]&&(i.weight=o[i.id].weight,i.actions.find((function(e){return e.variants})))){var s,c=Me(i.actions);try{for(c.s();!(s=c.n()).done;){var u=s.value;if(u.variants)for(var l=0,d=Object.keys(u.variants);l<d.length;l++){var f,p,v,g=d[l];null!==(f=o[i.id])&&void 0!==f&&f.variants&&null!==(p=o[i.id])&&void 0!==p&&p.variants[g]&&(u.variants[g].weight=null===(v=o[i.id])||void 0===v?void 0:v.variants[g])}}}catch(e){c.e(e)}finally{c.f()}}}}catch(e){a.e(e)}finally{a.f()}}return Ve.log("".concat(n.length," treatments user group matched")),n.length?n:[]}},{key:"getUserGroup",value:function(){return window.matchMedia(v).matches?"UGB":"UGA"}}],[{key:"getTreatments",value:(n=r(a().mark((function e(){var t,n,r,o,i,s;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Ve.log("Loading treatments"),t="ND_Treatments",n=JSON.parse(window.sessionStorage.getItem(t)),r=null==n?void 0:n.treatments,o=null==n?void 0:n.timestamp,r&&o){e.next=13;break}return Ve.failed("Treatments not found in local storage"),e.next=9,X();case 9:return r=e.sent,i={timestamp:Date.now(),treatments:r},window.sessionStorage.setItem(t,JSON.stringify(i)),e.abrupt("return",r);case 13:if(!o){e.next=23;break}if(!((Date.now()-o)/864e5>1)){e.next=23;break}return Ve.failed("Treatments are expired"),e.next=19,X();case 19:return r=e.sent,s={timestamp:Date.now(),treatments:r},window.sessionStorage.setItem(t,JSON.stringify(s)),e.abrupt("return",r);case 23:return Ve.success("Treatments are loaded from local storage"),e.abrupt("return",r);case 25:case"end":return e.stop()}}),e)}))),function(){return n.apply(this,arguments)})},{key:"getTreatmentWeights",value:(t=r(a().mark((function e(){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,ee();case 3:return e.abrupt("return",e.sent);case 6:e.prev=6,e.t0=e.catch(0),Ve.warn(e.t0.message),this.treatmentWeights=null;case 10:case"end":return e.stop()}}),e,this,[[0,6]])}))),function(){return t.apply(this,arguments)})}]),e}(),He=Ue,Fe=new T("Nextday Counter Checker"),Be=function(e){Fe.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"pageView":return Ge(n,r);case"CABasketPrice":return We(n,r);default:return Fe.failed("No such operator",t),!1}},Je=function(e,t){try{switch(t){case"session":return sessionStorage.getItem(e);case"local":return localStorage.getItem(e);default:return Fe.failed("No such type",t),null}}catch(t){return Fe.failed("Could not get counter ".concat(e),t),null}},Ge=function(e,t){var n=parseInt(Je(w,"session"));return Fe.log("Page views counter value: ",n),null===n?(Fe.failed("Pageviews counter not found in session storage"),!1):ce(n,e,parseInt(t))},We=function(e,t){var n=parseInt(Je(I,"local"));return Fe.log("Coupon applicable basket price counter value: ",n),null===n?(Fe.failed("Coupon applicable basket price counter not found in local storage"),!1):ce(n,e,parseInt(t))},$e=new T("Nextday Element Checker"),ze=function(e){$e.log("Checking rule",JSON.stringify(e));var t,n=e.operator,r=e.condition,o=e.value,a=e.selector,i=e.selectorAll,s=e.selectorFallback,c=void 0===s?null:s,u=a;if(u&&!document.querySelector(u)&&(u=c||u),null===n)return ce(document.querySelector(u),r,o);if(u&&!document.querySelector(u))return $e.failed("Selector not found on page"),!1;if(i&&!document.querySelectorAll(i))return $e.failed("Selector not found on page"),!1;switch(u?t=document.querySelector(u):i&&(t=Array.from(document.querySelectorAll(i))),n){case"text-number":var l;l=Array.isArray(t)?t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0):parseInt(document.querySelector(u).textContent.replace("TL","").replace(".",""));var d=parseInt(l);return ce(d,r,o);case"classList":return ce(Array.from(t.classList),r,o);case"count":var f=Array.isArray(t)?t.length:t?1:0;return ce(f,r,o);case"style":var p=getComputedStyle(t),v=o.split(":")[0].trim(),g=o.split(":")[1].trim(),h=p[v];return ce(h,r,g);default:return $e.failed("Operator not defined"),!1}},Ke=new T("Nextday Function Checker"),Qe=function(e,t){Ke.log("Checking rule",JSON.stringify(e));var n=t.productInfo,r=e.operator,o=e.condition,a=e.value,i=e.bindings;if(!r)return Ke.failed("Rule function not defined"),!1;var s={};"productInfo"==i&&(s={productInfo:n});var c=Function(r).bind(s)();return ce(c,o,a)},Ye=new T("Nextday Session Checker"),Ze=function(e){Ye.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"duration":return Xe(n,r);case"history":return et(n,r);default:return null}},Xe=function(e,t){var n=(Date.now()-function(){try{return new Date(parseInt(window.sessionStorage.getItem(m)))}catch(e){return Ye.failed("Could not get session timestamp",e),Date.now()}}())/1e3;return ce(n,e,parseInt(t))},et=function(e,t){var n,r=null===(n=window.sessionStorage.getItem(y))||void 0===n?void 0:n.split(",");return ce(r,e,t)},tt=new T("Nextday Env Checker"),nt=function(e){tt.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("device_type"===t){var o=window.matchMedia(v).matches?"mobile":"desktop";return ce(o,n,r)}},rt=new T("Nextday RandomPct Checker"),ot=function(){var e=r(a().mark((function e(t){var n,r,o,i,s,c;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(rt.log("Checking rule",JSON.stringify(t)),n=t.condition,r=t.value,o=t.salt){e.next=5;break}return rt.failed("Salt is not defined"),e.abrupt("return",!1);case 5:return e.next=7,le();case 7:return i=e.sent,e.next=10,ne(i+o);case 10:return s=e.sent,c=s,e.abrupt("return",ce(c,n,r));case 13:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),at=new T("Nextday ProductInfo Checker"),it=function(e,t){at.log("Checking rule",JSON.stringify(e));var n=e.operator,r=e.condition,o=e.value,a=null;switch(n){case"transactionIn2Weeks":at.log("Getting TransactionCount for sku ",t.skuList[0]),a=st(t.skuList[0],t.productInfo);break;case"addToCartIn2Weeks":at.log("Getting AddToCartCount for sku ",t.skuList[0]),a=ct(t.skuList[0],t.productInfo);break;case"productViewCount":at.log("Getting productViewCount for sku ",t.skuList[0]),a=ut(t.skuList[0],t.productInfo)}return ce(a,r,o)},st=function(e,t){var n,r;return null===(n=t[e])||void 0===n||null===(r=n.catalog)||void 0===r?void 0:r.transactionIn2Weeks},ct=function(e,t){var n,r;return null===(n=t[e])||void 0===n||null===(r=n.catalog)||void 0===r?void 0:r.addToCartIn2Weeks},ut=function(e,t){var n,r;return null===(n=t[e])||void 0===n||null===(r=n.catalog)||void 0===r?void 0:r.productViewCount};function lt(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return dt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?dt(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function dt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ft=new T("Nextday Rule Engine"),pt=function(){function e(t){s(this,e);var n=t.baseRuleSet,r=t.businessRuleSet,o=t.bindings,a=t.callback,i=void 0===a?null:a;this.baseRuleSet=n,this.businessRuleSet=r,this.callback=i,this.bindings=o}var t,n,o;return u(e,[{key:"checkRules",value:(o=r(a().mark((function e(){var t,n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=lt(this.baseRuleSet),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=12;break}return r=n.value,e.next=7,this.checkRule(r);case 7:if(e.sent){e.next=10;break}return e.abrupt("return",!1);case 10:e.next=3;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(1),t.e(e.t0);case 17:return e.prev=17,t.f(),e.finish(17);case 20:return e.abrupt("return",!0);case 21:case"end":return e.stop()}}),e,this,[[1,14,17,20]])}))),function(){return o.apply(this,arguments)})},{key:"checkBusinessRules",value:(n=r(a().mark((function e(){var t,n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=lt(this.businessRuleSet),e.prev=1,t.s();case 3:if((n=t.n()).done){e.next=12;break}return r=n.value,e.next=7,this.checkRule(r);case 7:if(!e.sent){e.next=10;break}return e.abrupt("return",r.businessRuleId);case 10:e.next=3;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(1),t.e(e.t0);case 17:return e.prev=17,t.f(),e.finish(17);case 20:return e.abrupt("return",null);case 21:case"end":return e.stop()}}),e,this,[[1,14,17,20]])}))),function(){return n.apply(this,arguments)})},{key:"checkRule",value:(t=r(a().mark((function e(t){var n,r,o,i;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=t.chain,r=t.chain_condition,o=t.type,i=null,e.t0=o,e.next="session"===e.t0?5:"counter"===e.t0?7:"element"===e.t0?9:"dataLayer"===e.t0?11:"url"===e.t0?13:"function"===e.t0?15:"environment"===e.t0?17:"random"===e.t0?19:"productInfoLookup"===e.t0?23:25;break;case 5:return i=Ze(t),e.abrupt("break",27);case 7:return i=Be(t),e.abrupt("break",27);case 9:return i=ze(t),e.abrupt("break",27);case 11:return i=Oe(t),e.abrupt("break",27);case 13:return i=xe(t),e.abrupt("break",27);case 15:return i=Qe(t,this.bindings),e.abrupt("break",27);case 17:return i=nt(t),e.abrupt("break",27);case 19:return e.next=21,ot(t);case 21:return i=e.sent,e.abrupt("break",27);case 23:return i=it(t,this.bindings),e.abrupt("break",27);case 25:return ft.failed("No such rule type: ".concat(o)),e.abrupt("return",null);case 27:if(!n){e.next=53;break}e.t1=r,e.next="and"===e.t1?31:"or"===e.t1?38:"xor"===e.t1?45:51;break;case 31:if(e.t2=i,!e.t2){e.next=36;break}return e.next=35,this.checkRule(n);case 35:e.t2=e.sent;case 36:return i=e.t2,e.abrupt("break",53);case 38:if(e.t3=i,e.t3){e.next=43;break}return e.next=42,this.checkRule(n);case 42:e.t3=e.sent;case 43:return i=e.t3,e.abrupt("break",53);case 45:return e.t4=i,e.next=48,this.checkRule(n);case 48:return e.t5=e.sent,i=e.t4!=e.t5,e.abrupt("break",53);case 51:return ft.failed("No such chain condition"),e.abrupt("break",53);case 53:return e.abrupt("return",i);case 54:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})}]),e}();function vt(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return gt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?gt(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function gt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ht=new T("BeagleOnComponent"),mt=function(){var e=r(a().mark((function e(t,n,o,i){var s,c,u,l,d,f,p,g,h,m,y,w,b,L,C,P,O,A,T,E,_,N,j,R,M,q,V,H;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return H=function(){var e=I;if(window.location.href.includes("/siparis-listesi.html")){var t=Array.from(document.querySelectorAll(".price"));if(t.push.apply(t,Le(Array.from(document.querySelectorAll(".new-price")))),!t.length)return ht.failed("Price elements not found"),void window.localStorage.setItem(e,0);ht.log("Price elements: ",t);var n=t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0);ht.log("Coupon applicable total price: ",n),n>=0&&window.localStorage.setItem(e,n)}else(window.location.href.includes("/siparis-ozeti.html")||null===window.localStorage.getItem(e))&&window.localStorage.setItem(e,0)},V=function(){return V=r(a().mark((function e(n){var r,o,s,u,l,f,v,m,y,w,b,k,x,S,I,L,C,O,E,_,N,j,R,M,q,V,U,H,F;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=n.id,o=n.actions,s=n.baseRuleSet,u=n.device,l=n.dependant_on_treatment,f=n.reapply_event,v=n.businessRuleSet,m=n.weight,y=n.delay,w=n.productInfoStorage,!c||c.includes(r)){e.next=3;break}return e.abrupt("return");case 3:if("mobile"!==u||d){e.next=6;break}return ht.failed("Treatment device 'mobile' mismatch"),e.abrupt("return");case 6:if("desktop"!==u||!d){e.next=9;break}return ht.failed("Treatment device 'desktop' mismatch"),e.abrupt("return");case 9:if(f){b=f,Array.isArray(f)||(b=[f]),ht.log("Reapply event '".concat(f,"' found for treatment: ").concat(r)),k=vt(b);try{for(k.s();!(x=k.n()).done;)S=x.value,(I=T[S]?T[S]:[]).includes(r)?ht.log("Treatment already added for reapply event"):T[S]=[].concat(Le(I),[r])}catch(e){k.e(e)}finally{k.f()}}if(L=JSON.parse(sessionStorage.getItem(p)),C=P,w&&(L=JSON.parse(sessionStorage.getItem(g)),C=JSON.parse(sessionStorage.getItem(h))),E=new pt({baseRuleSet:s,businessRuleSet:v,bindings:O={productInfo:C,skuList:L}}),ht.log("Starting base rule set check for treatment: "+r),e.t0=!s,e.t0){e.next=21;break}return e.next=20,E.checkRules();case 20:e.t0=e.sent;case 21:if(!e.t0){e.next=63;break}if(_=100===m?0:100-m||50,l&&(j=null===(N=A.find((function(e){return e.id===l})))||void 0===N?void 0:N.weight,_=100===j?0:100-j||50),ht.log("Treatment skip ratio: "+_),R=l||r,1!==i){e.next=30;break}e.t1=100,e.next=33;break;case 30:return e.next=32,ne(t+R);case 32:e.t1=e.sent;case 33:if(M=e.t1,ht.log("TreatmentPct: "+M+" with debug mode ".concat(i?"on":"off")),q=null,!v){e.next=42;break}return ht.log("Starting sub variant rule set check for treatment: "+r),e.next=40,E.checkBusinessRules();case 40:(q=e.sent)?ht.log("Applying business rule transformation with id: ",q):ht.log("Applying treatment with default values");case 42:if(!(M<_)){e.next=46;break}return ht.log("Treatment ".concat(r," skipped due to treatment split ratio")),G(r,q,F,"skipped",l),e.abrupt("return");case 46:return e.next=48,ie(t,o,q);case 48:if(V=e.sent,U=D(V,2),H=U[0],F=U[1],!y){e.next=55;break}return e.next=55,y(y);case 55:return e.next=57,Re(H,O);case 57:if(!1!==e.sent){e.next=61;break}return G(r,q,F,"failed"),e.abrupt("return");case 61:return G(r,q,F,"applied"),e.abrupt("return");case 63:ht.failed("Rule check failed for treatment: ",r);case 64:case"end":return e.stop()}}),e)}))),V.apply(this,arguments)},q=function(e){return V.apply(this,arguments)},n.sendLogs(),s=window.location.search,c=i&&s.includes("filter=")?s.slice(s.indexOf("[")+1,s.lastIndexOf("]")).split(",").map((function(e){return parseInt(e,10)})):null,ae(),se(),setTimeout((function(){Z()}),2e3),u=He.getTreatments(),l=He.getTreatmentWeights(),d=window.matchMedia(v).matches,f={subtree:!0,childList:!0,attributes:!0},p=k,g=x,h=S,H(),window.location.href.includes("/siparis-listesi.html")&&(m=new MutationObserver((function(){ht.log("Mutation observed, calling collectCABasketPrice"),H()})),(y=document.querySelector("#checkoutForm"))&&m.observe(y,f)),e.next=18,Promise.all([u,l,o]);case 18:if(w=e.sent,b=D(w,3),L=b[0],C=b[1],P=b[2],ht.success("Found treatments: ",L),O=new He({treatments:L,treatmentWeights:C}),B(U.TreatmentRepositoryCreated),(A=O.getMatchedTreatments()).length){e.next=31;break}return ht.log("No treatments matched, returning without further action"),Z(),e.abrupt("return");case 31:T={},E=vt(A),e.prev=33,E.s();case 35:if((_=E.n()).done){e.next=47;break}return N=_.value,e.prev=37,e.next=40,q(N);case 40:e.next=45;break;case 42:e.prev=42,e.t0=e.catch(37),ht.failed("Error executing rules",e.t0);case 45:e.next=35;break;case 47:e.next=52;break;case 49:e.prev=49,e.t1=e.catch(33),E.e(e.t1);case 52:return e.prev=52,E.f(),e.finish(52);case 55:for(Z(),B(U.TreatmentsApplied),ht.success("Applied treatments: ",window.beagleInfoLayer.a),setInterval((function(){n.updateLatestChanges()}),1e3),j=function(){var e=M[R],t=T[e],n=A.filter((function(e){return t.includes(e.id)}));switch(e){case"infinite_scroll":var r=new ResizeObserver((function(){var e,t=vt(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;ht.log("Retrying treatment ".concat(r.id," from infinite_scroll")),q(r)}}catch(e){t.e(e)}finally{t.f()}}));r.observe(document.documentElement);break;case"timeout":setTimeout((function(){var e,t=vt(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;ht.log("Retrying treatment ".concat(r.id," from timeout")),q(r)}}catch(e){t.e(e)}finally{t.f()}}),500);break;case"element_change":var o,a=vt(n);try{var i=function(){var e,t=o.value,n=vt(Array.isArray(t.reapply_selector)?t.reapply_selector:[t.reapply_selector]);try{for(n.s();!(e=n.n()).done;){var r=e.value,a=document.querySelector(r);a&&new MutationObserver((function(){ht.log("Retrying treatment ".concat(t.id," from element_change")),q(t)})).observe(a,f)}}catch(e){n.e(e)}finally{n.f()}};for(a.s();!(o=a.n()).done;)i()}catch(e){a.e(e)}finally{a.f()}break;case"on_scroll":window.onscroll=function(){var e,t=vt(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;ht.log("Retrying treatment ".concat(r.id," from on_scroll")),q(r)}}catch(e){t.e(e)}finally{t.f()}};break;case"query_search_change":var s=window.location.search,c=new MutationObserver((function(){if(window.location.search!==s){s=window.location.search;var e,t=vt(n);try{for(t.s();!(e=t.n()).done;){var r=e.value;ht.log("Retrying treatment ".concat(r.id," from query_search_change")),q(r)}}catch(e){t.e(e)}finally{t.f()}}}));c.observe(document,f);break;default:ht.failed("Reapply event not found: ",e)}},R=0,M=Object.keys(T);R<M.length;R++)j();B(U.ReapplyTreatmentListeners);case 62:case"end":return e.stop()}}),e,null,[[33,49,52,55],[37,42]])})));return function(t,n,r,o){return e.apply(this,arguments)}}(),yt=mt;function wt(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return bt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?bt(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function bt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var kt=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=Ct(e,n),o=r.key,a=r.storage,i=r.initialValue;(!i||parseFloat(i)<parseFloat(t))&&a.setItem(o,t)},xt=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=Ct(e,t),r=n.key,o=n.storage,a=n.initialValue;a||o.setItem(r,0),o.setItem(r,parseInt(o.getItem(r))+1)},St=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=Ct(e,n),o=r.key,a=r.storage;a.setItem(o,t)},It=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=Ct(e,n),o=r.key,a=r.storage,i=r.initialValue;i||"true"===(null==i?void 0:i.toString().trim())||a.setItem(o,t)},Lt=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"list",r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(t&&""!==t){var o=Ct(e,r),a=o.key,i=o.storage,s=o.initialValue;if("list"===n)return s||(s=[]),s.push(t),void i.setItem(a,JSON.stringify(s));if("map"===n)return s||(s={}),s[t]||(s[t]=0),s[t]+=1,void i.setItem(a,JSON.stringify(s));throw new Error("f=addMode; unexpected type="+n)}},Ct=function(e,t){var n=O+e,r=t?window.sessionStorage:window.localStorage;return{key:n,storage:r,initialValue:_t(r.getItem(n))}},Pt=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=Ct(e,n),o=r.key,a=r.storage,i=r.initialValue;i||a.setItem(o,t)},Ot=function(){var e,t,n,r,o,a,i=window.beagleInfoLayer;if(i){if([localStorage,sessionStorage].forEach((function(e){Object.keys(e).filter((function(e){return e.startsWith("ND_Seg_current")})).forEach((function(t){return e.removeItem(t)}))})),Lt("category",i.gaProductCategory,"list",!0),xt("alltimeHitCount",!1),xt("sessionHitCount",!0),i.vvsCartTotal){var s=l(i.vvsCartTotal.replace(" TL",""),".","");kt("alltimeBasketTotalMax",s,!1),kt("sessionBasketTotalMax",s,!0),St("currentBasketTotal",s,!0)}if(i.gaCartProducts){var c,u={price:0,category:null},d={sum:0,avg:0,count:0},f=wt(i.gaCartProducts);try{for(f.s();!(c=f.n()).done;){var p=c.value;Lt("alltimeCartCategoryMode",p.category,"list",!1),Lt("sessionCartCategoryMode",p.category,"list",!0);var v=parseFloat(p.price);v>u.price&&(u={price:u.price,category:p.category}),"EKHZM-KUR1"!==p.id&&"EKH-353"!==p.id&&"KURULUM HİZMETİ"!==p.list&&(d.count+=1,d.sum+=v,d.avg=parseFloat(d.sum/d.count).toFixed(2))}}catch(e){f.e(e)}finally{f.f()}d.count>0&&St("sessionBasketTotalAvg",JSON.stringify(d),!0),u.price>0&&St("currentCartMaxpriceCategory",u.category,!0)}if(i.PageType)switch(Lt("pagetype",i.PageType,"list",!0),i.PageType){case"Homepage":xt("alltimeHomeHitCount",!1),xt("sessionHomeHitCount",!0);break;case"Listingpage":Lt("alltimePLPCategoryMode",{name:i.vvsPLPName,link:window.location.pathname},"list",!1),Lt("sessionPLPCategoryMode",{name:i.vvsPLPName,link:window.location.pathname},"list",!0),St("currentPLPCategory",i.vvsPLPName,!0),xt("alltimePLPHitCount",!1),xt("sessionPLPHitCount",!1);break;case"Productpage":Lt("alltimePDPCategoryMode",i.gaProductCategory,"list",!1),Lt("sessionPDPCategoryMode",i.gaProductCategory,"list",!0),xt("alltimePDPHitCount",!1),xt("sessionPDPHitCount",!0),St("currentPDPCategory",i.gaProductCategory,!0),St("currentPDPGroup",i.vvsCategory,!0),St("currentPDPShowroomAvail",i.vvsIsShowroom||!1,!0),St("currentPDPPrice",null===(e=i.vvsPDPProduct)||void 0===e?void 0:e.price,!0)}if((null===(t=i.u)||void 0===t?void 0:t.indexOf("siparis-listesi.html"))>=0&&(Lt("pagetype","Basket","list",!0),xt("alltimeCartHitCount",!1),xt("sessionCartHitCount",!0)),(null===(n=i.u)||void 0===n?void 0:n.indexOf("adres-listesi.html"))>=0&&(Lt("pagetype","Address","list",!0),xt("alltimeAddressHitCount",!1),xt("sessionAddressHitCount",!0)),(null===(r=i.u)||void 0===r?void 0:r.indexOf("odeme.html"))>=0&&(Lt("pagetype","Payment","list",!0),xt("alltimePaymentHitCount",!1),xt("sessionPaymentHitCount",!0)),(null===(o=i.u)||void 0===o?void 0:o.indexOf("siparis-ozeti.html"))>=0&&(Lt("pagetype","Purchase","list",!0),xt("alltimePurchaseHitCount",!1),xt("sessionPurchaseHitCount",!0),St("currentPurchasedProducts",JSON.stringify(function(){var e,t=[],n=wt(window.dataLayer);try{for(n.s();!(e=n.n()).done;){var r,o,a=null===(r=e.value.ecommerce)||void 0===r||null===(o=r.purchase)||void 0===o?void 0:o.products;if(a){var i,s=wt(a);try{for(s.s();!(i=s.n()).done;){var c=i.value;t.push(c.id.toLowerCase())}}catch(e){s.e(e)}finally{s.f()}return t}}}catch(e){n.e(e)}finally{n.f()}var u=document.querySelectorAll('[class*="product_sku_code"]');if(u){for(var l=0;l<u.length;l++)t.push(u[l].innerText.toLowerCase().trim());return t}var d,f=wt(document.querySelectorAll('[src*="www.googleadservices.com/pagead/conversion"]'));try{for(f.s();!(d=f.n()).done;){var p=d.value.getAttribute("src").split("item=")[1];if(p){var v,g=wt(p.split("**"));try{for(g.s();!(v=g.n()).done;){var h=v.value.split("*")[2];h&&t.push(h.trim().toLowerCase())}}catch(e){g.e(e)}finally{g.f()}}}}catch(e){f.e(e)}finally{f.f()}return t}()),!0)),(null===(a=i.u)||void 0===a?void 0:a.indexOf("vivense-uye-kayit.html"))>=0&&(Lt("pagetype","Register","list",!0),xt("alltimeSignupHitCount",!1),xt("sessionSignupHitCount",!0)),i.window){var g=i.window.split("x"),h=g[1]+"x"+g[0];St("windowshape",h),St("browserWindowShape",i.window),Lt("sessionDistinctWindowShapes",h,"map",!0)}Lt("sessionDistinctAgents",i.navAgent,"map",!0),St("currentLoginMember",i.vvsViewLoggedin,!0),St("sessionLoginMember",i.vvsViewLoggedin,!0),It("alltimeLoginMember",i.vvsViewLoggedin,!1),It("dbm","on"===i.dbm,!1),It("isShowroom","true"==i.vvsScrGAIsAdmin,!1);var m=i.vvsCntFavProds>=0;St("currentHasFavorites",m,!0),St("alltimeHasFavorites",m,!1),Tt(),At(),Et()}},At=function(){var e,t,n,r,o,a=(o=null===(n=window.navigator)||void 0===n||null===(r=n.userAgent)||void 0===r?void 0:r.toLocaleLowerCase())?o.indexOf("iphone")>=0||o.indexOf("ipad")>=0?"ios":o.indexOf("android")>=0?"android":o.indexOf("mac")>=0?"mac":o.indexOf("windows")>=0?"windows":o.indexOf("linux")>=0?"linux":o.indexOf("X11")>=0?"unix":"na":null;Pt("browserNavDevice",a);var i=null;["android","ios"].includes(a)?i="mobile":["linux","unix","mac"].includes(a)&&(i="desktop"),Pt("browserNavPlatform",i),Pt("browserColorDepth",screen.colorDepth),kt("browserNavHistSize",null===(e=window.history)||void 0===e?void 0:e.length),St("browserNavHWCores",null!==(t=navigator)&&void 0!==t&&t.hardwareConcurrency?navigator.hardwareConcurrency:-1);var s=navigator.language?navigator.language.indexOf("-")>=0?navigator.language.split("-")[0]:navigator.language:"na";St("browserNavLanguage",s),St("browserNavVendor",navigator.vendor)},Tt=function(){if(document.referrer){var e=new URL(document.referrer).host;e&&(e.indexOf("vivense.com")>=0?Pt("sessionFirstEntry","direct"):Pt("referrer",e))}},Et=function(){var e=new Date;St("currentDayOfWeek",e.getDay(),!0),St("currentHourOfDay",e.getHours(),!0)};function _t(e){try{return JSON.parse(e)}catch(t){return e}}r(a().mark((function e(){var t,n,r,o,i,s,c,u,l,d,f,p,v;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return B(U.BeagleLoaded),t=null,n=null,r=new T,o="ND_TimeoutCount",i=0,r.info("Nextday initializing"),e.prev=7,c=F(),u=Ie(),l=ue(),t=new be,B(U.Initialized),e.next=15,le();case 15:return d=e.sent,r.log("Found cookie identifier: ",d),e.next=19,ne(d);case 19:if(f=e.sent,l){e.next=39;break}if(!(f<50)){e.next=28;break}if(-1!==f){e.next=24;break}throw new Error("Could not determine cookie pct");case 24:J("isOn",n=!1),e.next=30;break;case 28:J("isOn",n=!0);case 30:if(B(U.UserOnOff),pe()){e.next=33;break}throw new Error("sendBeacon is not supported");case 33:if(!((i=parseInt(sessionStorage.getItem(o))||0)>1)){e.next=37;break}throw B(U.TimeoutThresholdReached),new Error("Nextday timeout threshold reached");case 37:e.next=41;break;case 39:r.info("Debug mode on: all applicable treatments will be applied"),window.localStorage.setItem(C,!0);case 41:if(document.documentElement.classList.contains("nextDay-hide")){e.next=45;break}throw B(U.ScriptTimeOut),sessionStorage.setItem(o,i+1),new Error("Nextday script timed out");case 45:return e.next=47,c;case 47:if(Ot(),null!==(s=window.beagleInfoLayer)&&void 0!==s&&s.vvsIsShowroom&&window.localStorage.setItem(C,!0),"true"===window.localStorage.getItem(C)?(r.warn("User is out of scope"),null!="isOn"&&delete window.beagleInfoLayer.isOn):(window.dataLayer=window.dataLayer||[],!0===(null===(p=window.beagleInfoLayer)||void 0===p?void 0:p.isOn)?window.dataLayer.push({event:"GLOV",GLOV_ON:"true"}):!1===(null===(v=window.beagleInfoLayer)||void 0===v?void 0:v.isOn)&&window.dataLayer.push({event:"GLOV",GLOV_ON:"false"})),!1!==n){e.next=53;break}throw new Error("Control group: no treatments applied");case 53:r.log("Found cookie percentage: ",f),r.log("Split_ratio: ",50),r.log("cookiePct < SPLIT_RATIO",f<50),r.info("Control group ratio: ".concat(50,"%")),yt(d,t,u,l),e.next=65;break;case 60:e.prev=60,e.t0=e.catch(7),Z(),console.warn("Nextday: ",e.t0.message),t.sendLogs(e.t0.message,!0);case 65:case"end":return e.stop()}}),e,null,[[7,60]])})))()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
